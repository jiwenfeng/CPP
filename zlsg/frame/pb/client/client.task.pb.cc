// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* ctrl_scene_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ctrl_scene_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ctrl_scene_req_ctrl_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ctrl_scene_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ctrl_scene_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_talk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_talk_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_raid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_raid_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_pick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_pick_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_kill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_kill_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_guard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_guard_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_level_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_level_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_event_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_progress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_progress_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_accepted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_accepted_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_completed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_completed_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_msg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* task_msg_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* accept_task_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  accept_task_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* accept_task_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  accept_task_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* submit_task_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  submit_task_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* submit_task_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  submit_task_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* talk_task_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talk_task_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* talk_task_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talk_task_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* story_end_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  story_end_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TASK_RESULT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2etask_2eproto() {
  protobuf_AddDesc_client_2etask_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.task.proto");
  GOOGLE_CHECK(file != NULL);
  ctrl_scene_req_descriptor_ = file->message_type(0);
  static const int ctrl_scene_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctrl_scene_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctrl_scene_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctrl_scene_req, svr_head_),
  };
  ctrl_scene_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ctrl_scene_req_descriptor_,
      ctrl_scene_req::default_instance_,
      ctrl_scene_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctrl_scene_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctrl_scene_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ctrl_scene_req));
  ctrl_scene_req_ctrl_type_descriptor_ = ctrl_scene_req_descriptor_->enum_type(0);
  ctrl_scene_rsp_descriptor_ = file->message_type(1);
  static const int ctrl_scene_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctrl_scene_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctrl_scene_rsp, req_),
  };
  ctrl_scene_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ctrl_scene_rsp_descriptor_,
      ctrl_scene_rsp::default_instance_,
      ctrl_scene_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctrl_scene_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctrl_scene_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ctrl_scene_rsp));
  task_talk_descriptor_ = file->message_type(2);
  static const int task_talk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_talk, npc_id_),
  };
  task_talk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_talk_descriptor_,
      task_talk::default_instance_,
      task_talk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_talk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_talk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_talk));
  task_raid_descriptor_ = file->message_type(3);
  static const int task_raid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_raid, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_raid, count_),
  };
  task_raid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_raid_descriptor_,
      task_raid::default_instance_,
      task_raid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_raid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_raid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_raid));
  task_pick_descriptor_ = file->message_type(4);
  static const int task_pick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_pick, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_pick, count_),
  };
  task_pick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_pick_descriptor_,
      task_pick::default_instance_,
      task_pick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_pick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_pick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_pick));
  task_kill_descriptor_ = file->message_type(5);
  static const int task_kill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kill, count_),
  };
  task_kill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_kill_descriptor_,
      task_kill::default_instance_,
      task_kill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_kill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_kill));
  task_guard_descriptor_ = file->message_type(6);
  static const int task_guard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_guard, id_),
  };
  task_guard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_guard_descriptor_,
      task_guard::default_instance_,
      task_guard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_guard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_guard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_guard));
  task_level_descriptor_ = file->message_type(7);
  static const int task_level_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_level, level_),
  };
  task_level_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_level_descriptor_,
      task_level::default_instance_,
      task_level_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_level, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_level, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_level));
  task_event_descriptor_ = file->message_type(8);
  static const int task_event_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_event, id_),
  };
  task_event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_event_descriptor_,
      task_event::default_instance_,
      task_event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_event));
  task_progress_descriptor_ = file->message_type(9);
  static const int task_progress_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_progress, talk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_progress, raid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_progress, pick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_progress, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_progress, guard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_progress, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_progress, event_),
  };
  task_progress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_progress_descriptor_,
      task_progress::default_instance_,
      task_progress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_progress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_progress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_progress));
  task_accepted_descriptor_ = file->message_type(10);
  static const int task_accepted_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_accepted, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_accepted, progress_),
  };
  task_accepted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_accepted_descriptor_,
      task_accepted::default_instance_,
      task_accepted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_accepted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_accepted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_accepted));
  task_completed_descriptor_ = file->message_type(11);
  static const int task_completed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_completed, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_completed, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_completed, time_),
  };
  task_completed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_completed_descriptor_,
      task_completed::default_instance_,
      task_completed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_completed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_completed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_completed));
  task_msg_descriptor_ = file->message_type(12);
  static const int task_msg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_msg, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_msg, accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_msg, completed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_msg, task_flag_),
  };
  task_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_msg_descriptor_,
      task_msg::default_instance_,
      task_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_msg));
  task_msg_type_descriptor_ = task_msg_descriptor_->enum_type(0);
  accept_task_req_descriptor_ = file->message_type(13);
  static const int accept_task_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accept_task_req, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accept_task_req, svr_head_),
  };
  accept_task_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      accept_task_req_descriptor_,
      accept_task_req::default_instance_,
      accept_task_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accept_task_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accept_task_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(accept_task_req));
  accept_task_rsp_descriptor_ = file->message_type(14);
  static const int accept_task_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accept_task_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accept_task_rsp, task_id_),
  };
  accept_task_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      accept_task_rsp_descriptor_,
      accept_task_rsp::default_instance_,
      accept_task_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accept_task_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accept_task_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(accept_task_rsp));
  submit_task_req_descriptor_ = file->message_type(15);
  static const int submit_task_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(submit_task_req, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(submit_task_req, chose_reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(submit_task_req, task_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(submit_task_req, svr_head_),
  };
  submit_task_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      submit_task_req_descriptor_,
      submit_task_req::default_instance_,
      submit_task_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(submit_task_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(submit_task_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(submit_task_req));
  submit_task_rsp_descriptor_ = file->message_type(16);
  static const int submit_task_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(submit_task_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(submit_task_rsp, task_id_),
  };
  submit_task_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      submit_task_rsp_descriptor_,
      submit_task_rsp::default_instance_,
      submit_task_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(submit_task_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(submit_task_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(submit_task_rsp));
  talk_task_req_descriptor_ = file->message_type(17);
  static const int talk_task_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_task_req, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_task_req, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_task_req, svr_head_),
  };
  talk_task_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talk_task_req_descriptor_,
      talk_task_req::default_instance_,
      talk_task_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_task_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_task_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talk_task_req));
  talk_task_rsp_descriptor_ = file->message_type(18);
  static const int talk_task_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_task_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_task_rsp, task_id_),
  };
  talk_task_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talk_task_rsp_descriptor_,
      talk_task_rsp::default_instance_,
      talk_task_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_task_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_task_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talk_task_rsp));
  story_end_req_descriptor_ = file->message_type(19);
  static const int story_end_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(story_end_req, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(story_end_req, svr_head_),
  };
  story_end_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      story_end_req_descriptor_,
      story_end_req::default_instance_,
      story_end_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(story_end_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(story_end_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(story_end_req));
  TASK_RESULT_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2etask_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ctrl_scene_req_descriptor_, &ctrl_scene_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ctrl_scene_rsp_descriptor_, &ctrl_scene_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_talk_descriptor_, &task_talk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_raid_descriptor_, &task_raid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_pick_descriptor_, &task_pick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_kill_descriptor_, &task_kill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_guard_descriptor_, &task_guard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_level_descriptor_, &task_level::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_event_descriptor_, &task_event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_progress_descriptor_, &task_progress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_accepted_descriptor_, &task_accepted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_completed_descriptor_, &task_completed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_msg_descriptor_, &task_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    accept_task_req_descriptor_, &accept_task_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    accept_task_rsp_descriptor_, &accept_task_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    submit_task_req_descriptor_, &submit_task_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    submit_task_rsp_descriptor_, &submit_task_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talk_task_req_descriptor_, &talk_task_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talk_task_rsp_descriptor_, &talk_task_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    story_end_req_descriptor_, &story_end_req::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2etask_2eproto() {
  delete ctrl_scene_req::default_instance_;
  delete ctrl_scene_req_reflection_;
  delete ctrl_scene_rsp::default_instance_;
  delete ctrl_scene_rsp_reflection_;
  delete task_talk::default_instance_;
  delete task_talk_reflection_;
  delete task_raid::default_instance_;
  delete task_raid_reflection_;
  delete task_pick::default_instance_;
  delete task_pick_reflection_;
  delete task_kill::default_instance_;
  delete task_kill_reflection_;
  delete task_guard::default_instance_;
  delete task_guard_reflection_;
  delete task_level::default_instance_;
  delete task_level_reflection_;
  delete task_event::default_instance_;
  delete task_event_reflection_;
  delete task_progress::default_instance_;
  delete task_progress_reflection_;
  delete task_accepted::default_instance_;
  delete task_accepted_reflection_;
  delete task_completed::default_instance_;
  delete task_completed_reflection_;
  delete task_msg::default_instance_;
  delete task_msg_reflection_;
  delete accept_task_req::default_instance_;
  delete accept_task_req_reflection_;
  delete accept_task_rsp::default_instance_;
  delete accept_task_rsp_reflection_;
  delete submit_task_req::default_instance_;
  delete submit_task_req_reflection_;
  delete submit_task_rsp::default_instance_;
  delete submit_task_rsp_reflection_;
  delete talk_task_req::default_instance_;
  delete talk_task_req_reflection_;
  delete talk_task_rsp::default_instance_;
  delete talk_task_rsp_reflection_;
  delete story_end_req::default_instance_;
  delete story_end_req_reflection_;
}

void protobuf_AddDesc_client_2etask_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021client.task.proto\022\006client\032\021client.comm"
    ".proto\"\240\001\n\016ctrl_scene_req\022.\n\004type\030\001 \002(\0162"
    " .client.ctrl_scene_req.ctrl_type\022\020\n\010uni"
    "xtime\030\002 \001(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client."
    "server_head\"$\n\tctrl_type\022\013\n\007suspend\020\001\022\n\n"
    "\006resume\020\002\"B\n\016ctrl_scene_rsp\022\013\n\003ret\030\001 \002(\r"
    "\022#\n\003req\030\002 \002(\0132\026.client.ctrl_scene_req\"\033\n"
    "\ttask_talk\022\016\n\006npc_id\030\001 \002(\r\"+\n\ttask_raid\022"
    "\017\n\007raid_id\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\"&\n\ttask_"
    "pick\022\n\n\002id\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\"&\n\ttask_"
    "kill\022\n\n\002id\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\"\030\n\ntask_"
    "guard\022\n\n\002id\030\001 \002(\r\"\033\n\ntask_level\022\r\n\005level"
    "\030\001 \002(\r\"\030\n\ntask_event\022\n\n\002id\030\001 \002(\r\"\374\001\n\rtas"
    "k_progress\022\037\n\004talk\030\001 \003(\0132\021.client.task_t"
    "alk\022\037\n\004raid\030\002 \003(\0132\021.client.task_raid\022\037\n\004"
    "pick\030\003 \003(\0132\021.client.task_pick\022\037\n\004kill\030\004 "
    "\003(\0132\021.client.task_kill\022!\n\005guard\030\005 \003(\0132\022."
    "client.task_guard\022!\n\005level\030\006 \003(\0132\022.clien"
    "t.task_level\022!\n\005event\030\007 \003(\0132\022.client.tas"
    "k_event\"L\n\rtask_accepted\022\022\n\007task_id\030\001 \002("
    "\r:\0010\022\'\n\010progress\030\002 \002(\0132\025.client.task_pro"
    "gress\"G\n\016task_completed\022\022\n\007task_id\030\001 \002(\r"
    ":\0010\022\020\n\005count\030\002 \002(\r:\0010\022\017\n\004time\030\003 \002(\r:\0010\"\277"
    "\001\n\010task_msg\022 \n\001t\030\001 \002(\0162\025.client.task_msg"
    ".type\022\'\n\010accepted\030\002 \003(\0132\025.client.task_ac"
    "cepted\022)\n\tcompleted\030\003 \003(\0132\026.client.task_"
    "completed\022\021\n\ttask_flag\030\004 \001(\r\"*\n\004type\022\n\n\006"
    "insert\020\001\022\n\n\006remove\020\002\022\n\n\006update\020\003\"J\n\017acce"
    "pt_task_req\022\017\n\007task_id\030\001 \002(\r\022&\n\010svr_head"
    "\030\350\007 \001(\0132\023.client.server_head\"D\n\017accept_t"
    "ask_rsp\022 \n\003ret\030\001 \002(\0162\023.client.TASK_RESUL"
    "T\022\017\n\007task_id\030\002 \002(\r\"v\n\017submit_task_req\022\017\n"
    "\007task_id\030\001 \002(\r\022\027\n\017chose_reward_id\030\002 \003(\r\022"
    "\021\n\ttask_flag\030\003 \001(\r\022&\n\010svr_head\030\350\007 \001(\0132\023."
    "client.server_head\"D\n\017submit_task_rsp\022 \n"
    "\003ret\030\001 \002(\0162\023.client.TASK_RESULT\022\017\n\007task_"
    "id\030\002 \002(\r\"X\n\rtalk_task_req\022\017\n\007task_id\030\001 \002"
    "(\r\022\016\n\006npc_id\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023."
    "client.server_head\"B\n\rtalk_task_rsp\022 \n\003r"
    "et\030\001 \002(\0162\023.client.TASK_RESULT\022\017\n\007task_id"
    "\030\002 \002(\r\"C\n\rstory_end_req\022\n\n\002id\030\001 \002(\r\022&\n\010s"
    "vr_head\030\350\007 \001(\0132\023.client.server_head*q\n\013T"
    "ASK_RESULT\022\016\n\nTR_SUCCESS\020\000\022\026\n\022TR_LIMIT_C"
    "ONDITION\020\001\022\025\n\021TR_LIMIT_ACCEPETD\020\002\022\020\n\014TR_"
    "LIMIT_NPC\020\003\022\021\n\rTR_TASK_ERROR\020\004", 1790);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.task.proto", &protobuf_RegisterTypes);
  ctrl_scene_req::default_instance_ = new ctrl_scene_req();
  ctrl_scene_rsp::default_instance_ = new ctrl_scene_rsp();
  task_talk::default_instance_ = new task_talk();
  task_raid::default_instance_ = new task_raid();
  task_pick::default_instance_ = new task_pick();
  task_kill::default_instance_ = new task_kill();
  task_guard::default_instance_ = new task_guard();
  task_level::default_instance_ = new task_level();
  task_event::default_instance_ = new task_event();
  task_progress::default_instance_ = new task_progress();
  task_accepted::default_instance_ = new task_accepted();
  task_completed::default_instance_ = new task_completed();
  task_msg::default_instance_ = new task_msg();
  accept_task_req::default_instance_ = new accept_task_req();
  accept_task_rsp::default_instance_ = new accept_task_rsp();
  submit_task_req::default_instance_ = new submit_task_req();
  submit_task_rsp::default_instance_ = new submit_task_rsp();
  talk_task_req::default_instance_ = new talk_task_req();
  talk_task_rsp::default_instance_ = new talk_task_rsp();
  story_end_req::default_instance_ = new story_end_req();
  ctrl_scene_req::default_instance_->InitAsDefaultInstance();
  ctrl_scene_rsp::default_instance_->InitAsDefaultInstance();
  task_talk::default_instance_->InitAsDefaultInstance();
  task_raid::default_instance_->InitAsDefaultInstance();
  task_pick::default_instance_->InitAsDefaultInstance();
  task_kill::default_instance_->InitAsDefaultInstance();
  task_guard::default_instance_->InitAsDefaultInstance();
  task_level::default_instance_->InitAsDefaultInstance();
  task_event::default_instance_->InitAsDefaultInstance();
  task_progress::default_instance_->InitAsDefaultInstance();
  task_accepted::default_instance_->InitAsDefaultInstance();
  task_completed::default_instance_->InitAsDefaultInstance();
  task_msg::default_instance_->InitAsDefaultInstance();
  accept_task_req::default_instance_->InitAsDefaultInstance();
  accept_task_rsp::default_instance_->InitAsDefaultInstance();
  submit_task_req::default_instance_->InitAsDefaultInstance();
  submit_task_rsp::default_instance_->InitAsDefaultInstance();
  talk_task_req::default_instance_->InitAsDefaultInstance();
  talk_task_rsp::default_instance_->InitAsDefaultInstance();
  story_end_req::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2etask_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2etask_2eproto {
  StaticDescriptorInitializer_client_2etask_2eproto() {
    protobuf_AddDesc_client_2etask_2eproto();
  }
} static_descriptor_initializer_client_2etask_2eproto_;
const ::google::protobuf::EnumDescriptor* TASK_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TASK_RESULT_descriptor_;
}
bool TASK_RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ctrl_scene_req_ctrl_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ctrl_scene_req_ctrl_type_descriptor_;
}
bool ctrl_scene_req_ctrl_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ctrl_scene_req_ctrl_type ctrl_scene_req::suspend;
const ctrl_scene_req_ctrl_type ctrl_scene_req::resume;
const ctrl_scene_req_ctrl_type ctrl_scene_req::ctrl_type_MIN;
const ctrl_scene_req_ctrl_type ctrl_scene_req::ctrl_type_MAX;
const int ctrl_scene_req::ctrl_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ctrl_scene_req::kTypeFieldNumber;
const int ctrl_scene_req::kUnixtimeFieldNumber;
const int ctrl_scene_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

ctrl_scene_req::ctrl_scene_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ctrl_scene_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

ctrl_scene_req::ctrl_scene_req(const ctrl_scene_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ctrl_scene_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ctrl_scene_req::~ctrl_scene_req() {
  SharedDtor();
}

void ctrl_scene_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void ctrl_scene_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ctrl_scene_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ctrl_scene_req_descriptor_;
}

const ctrl_scene_req& ctrl_scene_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

ctrl_scene_req* ctrl_scene_req::default_instance_ = NULL;

ctrl_scene_req* ctrl_scene_req::New() const {
  return new ctrl_scene_req;
}

void ctrl_scene_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ctrl_scene_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.ctrl_scene_req.ctrl_type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::ctrl_scene_req_ctrl_type_IsValid(value)) {
            set_type(static_cast< ::client::ctrl_scene_req_ctrl_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unixtime;
        break;
      }

      // optional uint32 unixtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unixtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ctrl_scene_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.ctrl_scene_req.ctrl_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 unixtime = 2;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ctrl_scene_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.ctrl_scene_req.ctrl_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 unixtime = 2;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ctrl_scene_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.ctrl_scene_req.ctrl_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 unixtime = 2;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ctrl_scene_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ctrl_scene_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ctrl_scene_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ctrl_scene_req::MergeFrom(const ctrl_scene_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ctrl_scene_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ctrl_scene_req::CopyFrom(const ctrl_scene_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ctrl_scene_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ctrl_scene_req::Swap(ctrl_scene_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ctrl_scene_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ctrl_scene_req_descriptor_;
  metadata.reflection = ctrl_scene_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ctrl_scene_rsp::kRetFieldNumber;
const int ctrl_scene_rsp::kReqFieldNumber;
#endif  // !_MSC_VER

ctrl_scene_rsp::ctrl_scene_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ctrl_scene_rsp::InitAsDefaultInstance() {
  req_ = const_cast< ::client::ctrl_scene_req*>(&::client::ctrl_scene_req::default_instance());
}

ctrl_scene_rsp::ctrl_scene_rsp(const ctrl_scene_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ctrl_scene_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ctrl_scene_rsp::~ctrl_scene_rsp() {
  SharedDtor();
}

void ctrl_scene_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void ctrl_scene_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ctrl_scene_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ctrl_scene_rsp_descriptor_;
}

const ctrl_scene_rsp& ctrl_scene_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

ctrl_scene_rsp* ctrl_scene_rsp::default_instance_ = NULL;

ctrl_scene_rsp* ctrl_scene_rsp::New() const {
  return new ctrl_scene_rsp;
}

void ctrl_scene_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    if (has_req()) {
      if (req_ != NULL) req_->::client::ctrl_scene_req::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ctrl_scene_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_req;
        break;
      }

      // required .client.ctrl_scene_req req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ctrl_scene_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required .client.ctrl_scene_req req = 2;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ctrl_scene_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // required .client.ctrl_scene_req req = 2;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ctrl_scene_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required .client.ctrl_scene_req req = 2;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ctrl_scene_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ctrl_scene_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ctrl_scene_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ctrl_scene_rsp::MergeFrom(const ctrl_scene_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_req()) {
      mutable_req()->::client::ctrl_scene_req::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ctrl_scene_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ctrl_scene_rsp::CopyFrom(const ctrl_scene_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ctrl_scene_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void ctrl_scene_rsp::Swap(ctrl_scene_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ctrl_scene_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ctrl_scene_rsp_descriptor_;
  metadata.reflection = ctrl_scene_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_talk::kNpcIdFieldNumber;
#endif  // !_MSC_VER

task_talk::task_talk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_talk::InitAsDefaultInstance() {
}

task_talk::task_talk(const task_talk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_talk::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_talk::~task_talk() {
  SharedDtor();
}

void task_talk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_talk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_talk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_talk_descriptor_;
}

const task_talk& task_talk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

task_talk* task_talk::default_instance_ = NULL;

task_talk* task_talk::New() const {
  return new task_talk;
}

void task_talk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_talk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_talk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_talk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_talk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_talk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_talk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_talk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_talk::MergeFrom(const task_talk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_talk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_talk::CopyFrom(const task_talk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_talk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void task_talk::Swap(task_talk* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_talk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_talk_descriptor_;
  metadata.reflection = task_talk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_raid::kRaidIdFieldNumber;
const int task_raid::kCountFieldNumber;
#endif  // !_MSC_VER

task_raid::task_raid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_raid::InitAsDefaultInstance() {
}

task_raid::task_raid(const task_raid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_raid::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_raid::~task_raid() {
  SharedDtor();
}

void task_raid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_raid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_raid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_raid_descriptor_;
}

const task_raid& task_raid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

task_raid* task_raid::default_instance_ = NULL;

task_raid* task_raid::New() const {
  return new task_raid;
}

void task_raid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_raid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_raid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_raid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_raid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_raid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_raid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_raid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_raid::MergeFrom(const task_raid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_raid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_raid::CopyFrom(const task_raid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_raid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void task_raid::Swap(task_raid* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_raid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_raid_descriptor_;
  metadata.reflection = task_raid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_pick::kIdFieldNumber;
const int task_pick::kCountFieldNumber;
#endif  // !_MSC_VER

task_pick::task_pick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_pick::InitAsDefaultInstance() {
}

task_pick::task_pick(const task_pick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_pick::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_pick::~task_pick() {
  SharedDtor();
}

void task_pick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_pick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_pick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_pick_descriptor_;
}

const task_pick& task_pick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

task_pick* task_pick::default_instance_ = NULL;

task_pick* task_pick::New() const {
  return new task_pick;
}

void task_pick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_pick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_pick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_pick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_pick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_pick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_pick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_pick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_pick::MergeFrom(const task_pick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_pick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_pick::CopyFrom(const task_pick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_pick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void task_pick::Swap(task_pick* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_pick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_pick_descriptor_;
  metadata.reflection = task_pick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_kill::kIdFieldNumber;
const int task_kill::kCountFieldNumber;
#endif  // !_MSC_VER

task_kill::task_kill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_kill::InitAsDefaultInstance() {
}

task_kill::task_kill(const task_kill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_kill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_kill::~task_kill() {
  SharedDtor();
}

void task_kill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_kill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_kill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_kill_descriptor_;
}

const task_kill& task_kill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

task_kill* task_kill::default_instance_ = NULL;

task_kill* task_kill::New() const {
  return new task_kill;
}

void task_kill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_kill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_kill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_kill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_kill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_kill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_kill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_kill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_kill::MergeFrom(const task_kill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_kill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_kill::CopyFrom(const task_kill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_kill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void task_kill::Swap(task_kill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_kill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_kill_descriptor_;
  metadata.reflection = task_kill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_guard::kIdFieldNumber;
#endif  // !_MSC_VER

task_guard::task_guard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_guard::InitAsDefaultInstance() {
}

task_guard::task_guard(const task_guard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_guard::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_guard::~task_guard() {
  SharedDtor();
}

void task_guard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_guard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_guard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_guard_descriptor_;
}

const task_guard& task_guard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

task_guard* task_guard::default_instance_ = NULL;

task_guard* task_guard::New() const {
  return new task_guard;
}

void task_guard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_guard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_guard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_guard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_guard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_guard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_guard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_guard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_guard::MergeFrom(const task_guard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_guard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_guard::CopyFrom(const task_guard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_guard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void task_guard::Swap(task_guard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_guard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_guard_descriptor_;
  metadata.reflection = task_guard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_level::kLevelFieldNumber;
#endif  // !_MSC_VER

task_level::task_level()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_level::InitAsDefaultInstance() {
}

task_level::task_level(const task_level& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_level::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_level::~task_level() {
  SharedDtor();
}

void task_level::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_level::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_level_descriptor_;
}

const task_level& task_level::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

task_level* task_level::default_instance_ = NULL;

task_level* task_level::New() const {
  return new task_level;
}

void task_level::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_level::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_level::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_level::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_level* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_level*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_level::MergeFrom(const task_level& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_level::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_level::CopyFrom(const task_level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_level::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void task_level::Swap(task_level* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_level::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_level_descriptor_;
  metadata.reflection = task_level_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_event::kIdFieldNumber;
#endif  // !_MSC_VER

task_event::task_event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_event::InitAsDefaultInstance() {
}

task_event::task_event(const task_event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_event::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_event::~task_event() {
  SharedDtor();
}

void task_event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_event_descriptor_;
}

const task_event& task_event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

task_event* task_event::default_instance_ = NULL;

task_event* task_event::New() const {
  return new task_event;
}

void task_event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_event::MergeFrom(const task_event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_event::CopyFrom(const task_event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void task_event::Swap(task_event* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_event_descriptor_;
  metadata.reflection = task_event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_progress::kTalkFieldNumber;
const int task_progress::kRaidFieldNumber;
const int task_progress::kPickFieldNumber;
const int task_progress::kKillFieldNumber;
const int task_progress::kGuardFieldNumber;
const int task_progress::kLevelFieldNumber;
const int task_progress::kEventFieldNumber;
#endif  // !_MSC_VER

task_progress::task_progress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_progress::InitAsDefaultInstance() {
}

task_progress::task_progress(const task_progress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_progress::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_progress::~task_progress() {
  SharedDtor();
}

void task_progress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_progress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_progress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_progress_descriptor_;
}

const task_progress& task_progress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

task_progress* task_progress::default_instance_ = NULL;

task_progress* task_progress::New() const {
  return new task_progress;
}

void task_progress::Clear() {
  talk_.Clear();
  raid_.Clear();
  pick_.Clear();
  kill_.Clear();
  guard_.Clear();
  level_.Clear();
  event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_progress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.task_talk talk = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_talk;
        if (input->ExpectTag(18)) goto parse_raid;
        break;
      }

      // repeated .client.task_raid raid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raid;
        if (input->ExpectTag(26)) goto parse_pick;
        break;
      }

      // repeated .client.task_pick pick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pick;
        if (input->ExpectTag(34)) goto parse_kill;
        break;
      }

      // repeated .client.task_kill kill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_kill;
        if (input->ExpectTag(42)) goto parse_guard;
        break;
      }

      // repeated .client.task_guard guard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_guard;
        if (input->ExpectTag(50)) goto parse_level;
        break;
      }

      // repeated .client.task_level level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_level;
        if (input->ExpectTag(58)) goto parse_event;
        break;
      }

      // repeated .client.task_event event = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_event;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_progress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.task_talk talk = 1;
  for (int i = 0; i < this->talk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->talk(i), output);
  }

  // repeated .client.task_raid raid = 2;
  for (int i = 0; i < this->raid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->raid(i), output);
  }

  // repeated .client.task_pick pick = 3;
  for (int i = 0; i < this->pick_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pick(i), output);
  }

  // repeated .client.task_kill kill = 4;
  for (int i = 0; i < this->kill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->kill(i), output);
  }

  // repeated .client.task_guard guard = 5;
  for (int i = 0; i < this->guard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->guard(i), output);
  }

  // repeated .client.task_level level = 6;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->level(i), output);
  }

  // repeated .client.task_event event = 7;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->event(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_progress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.task_talk talk = 1;
  for (int i = 0; i < this->talk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->talk(i), target);
  }

  // repeated .client.task_raid raid = 2;
  for (int i = 0; i < this->raid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->raid(i), target);
  }

  // repeated .client.task_pick pick = 3;
  for (int i = 0; i < this->pick_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pick(i), target);
  }

  // repeated .client.task_kill kill = 4;
  for (int i = 0; i < this->kill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->kill(i), target);
  }

  // repeated .client.task_guard guard = 5;
  for (int i = 0; i < this->guard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->guard(i), target);
  }

  // repeated .client.task_level level = 6;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->level(i), target);
  }

  // repeated .client.task_event event = 7;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->event(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_progress::ByteSize() const {
  int total_size = 0;

  // repeated .client.task_talk talk = 1;
  total_size += 1 * this->talk_size();
  for (int i = 0; i < this->talk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talk(i));
  }

  // repeated .client.task_raid raid = 2;
  total_size += 1 * this->raid_size();
  for (int i = 0; i < this->raid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raid(i));
  }

  // repeated .client.task_pick pick = 3;
  total_size += 1 * this->pick_size();
  for (int i = 0; i < this->pick_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pick(i));
  }

  // repeated .client.task_kill kill = 4;
  total_size += 1 * this->kill_size();
  for (int i = 0; i < this->kill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kill(i));
  }

  // repeated .client.task_guard guard = 5;
  total_size += 1 * this->guard_size();
  for (int i = 0; i < this->guard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guard(i));
  }

  // repeated .client.task_level level = 6;
  total_size += 1 * this->level_size();
  for (int i = 0; i < this->level_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level(i));
  }

  // repeated .client.task_event event = 7;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_progress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_progress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_progress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_progress::MergeFrom(const task_progress& from) {
  GOOGLE_CHECK_NE(&from, this);
  talk_.MergeFrom(from.talk_);
  raid_.MergeFrom(from.raid_);
  pick_.MergeFrom(from.pick_);
  kill_.MergeFrom(from.kill_);
  guard_.MergeFrom(from.guard_);
  level_.MergeFrom(from.level_);
  event_.MergeFrom(from.event_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_progress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_progress::CopyFrom(const task_progress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_progress::IsInitialized() const {

  for (int i = 0; i < talk_size(); i++) {
    if (!this->talk(i).IsInitialized()) return false;
  }
  for (int i = 0; i < raid_size(); i++) {
    if (!this->raid(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pick_size(); i++) {
    if (!this->pick(i).IsInitialized()) return false;
  }
  for (int i = 0; i < kill_size(); i++) {
    if (!this->kill(i).IsInitialized()) return false;
  }
  for (int i = 0; i < guard_size(); i++) {
    if (!this->guard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < level_size(); i++) {
    if (!this->level(i).IsInitialized()) return false;
  }
  for (int i = 0; i < event_size(); i++) {
    if (!this->event(i).IsInitialized()) return false;
  }
  return true;
}

void task_progress::Swap(task_progress* other) {
  if (other != this) {
    talk_.Swap(&other->talk_);
    raid_.Swap(&other->raid_);
    pick_.Swap(&other->pick_);
    kill_.Swap(&other->kill_);
    guard_.Swap(&other->guard_);
    level_.Swap(&other->level_);
    event_.Swap(&other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_progress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_progress_descriptor_;
  metadata.reflection = task_progress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_accepted::kTaskIdFieldNumber;
const int task_accepted::kProgressFieldNumber;
#endif  // !_MSC_VER

task_accepted::task_accepted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_accepted::InitAsDefaultInstance() {
  progress_ = const_cast< ::client::task_progress*>(&::client::task_progress::default_instance());
}

task_accepted::task_accepted(const task_accepted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_accepted::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  progress_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_accepted::~task_accepted() {
  SharedDtor();
}

void task_accepted::SharedDtor() {
  if (this != default_instance_) {
    delete progress_;
  }
}

void task_accepted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_accepted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_accepted_descriptor_;
}

const task_accepted& task_accepted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

task_accepted* task_accepted::default_instance_ = NULL;

task_accepted* task_accepted::New() const {
  return new task_accepted;
}

void task_accepted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (has_progress()) {
      if (progress_ != NULL) progress_->::client::task_progress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_accepted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_progress;
        break;
      }

      // required .client.task_progress progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_progress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_progress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_accepted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1 [default = 0];
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // required .client.task_progress progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_accepted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1 [default = 0];
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // required .client.task_progress progress = 2;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_accepted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1 [default = 0];
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // required .client.task_progress progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_accepted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_accepted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_accepted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_accepted::MergeFrom(const task_accepted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_progress()) {
      mutable_progress()->::client::task_progress::MergeFrom(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_accepted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_accepted::CopyFrom(const task_accepted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_accepted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_progress()) {
    if (!this->progress().IsInitialized()) return false;
  }
  return true;
}

void task_accepted::Swap(task_accepted* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_accepted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_accepted_descriptor_;
  metadata.reflection = task_accepted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_completed::kTaskIdFieldNumber;
const int task_completed::kCountFieldNumber;
const int task_completed::kTimeFieldNumber;
#endif  // !_MSC_VER

task_completed::task_completed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_completed::InitAsDefaultInstance() {
}

task_completed::task_completed(const task_completed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_completed::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  count_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_completed::~task_completed() {
  SharedDtor();
}

void task_completed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_completed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_completed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_completed_descriptor_;
}

const task_completed& task_completed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

task_completed* task_completed::default_instance_ = NULL;

task_completed* task_completed::New() const {
  return new task_completed;
}

void task_completed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    count_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_completed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_completed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1 [default = 0];
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // required uint32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_completed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1 [default = 0];
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // required uint32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_completed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1 [default = 0];
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // required uint32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_completed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_completed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_completed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_completed::MergeFrom(const task_completed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_completed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_completed::CopyFrom(const task_completed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_completed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void task_completed::Swap(task_completed* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(count_, other->count_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_completed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_completed_descriptor_;
  metadata.reflection = task_completed_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* task_msg_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_msg_type_descriptor_;
}
bool task_msg_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const task_msg_type task_msg::insert;
const task_msg_type task_msg::remove;
const task_msg_type task_msg::update;
const task_msg_type task_msg::type_MIN;
const task_msg_type task_msg::type_MAX;
const int task_msg::type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int task_msg::kTFieldNumber;
const int task_msg::kAcceptedFieldNumber;
const int task_msg::kCompletedFieldNumber;
const int task_msg::kTaskFlagFieldNumber;
#endif  // !_MSC_VER

task_msg::task_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_msg::InitAsDefaultInstance() {
}

task_msg::task_msg(const task_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_msg::SharedCtor() {
  _cached_size_ = 0;
  t_ = 1;
  task_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_msg::~task_msg() {
  SharedDtor();
}

void task_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_msg_descriptor_;
}

const task_msg& task_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

task_msg* task_msg::default_instance_ = NULL;

task_msg* task_msg::New() const {
  return new task_msg;
}

void task_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    t_ = 1;
    task_flag_ = 0u;
  }
  accepted_.Clear();
  completed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.task_msg.type t = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::task_msg_type_IsValid(value)) {
            set_t(static_cast< ::client::task_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accepted;
        break;
      }

      // repeated .client.task_accepted accepted = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accepted:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accepted()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accepted;
        if (input->ExpectTag(26)) goto parse_completed;
        break;
      }

      // repeated .client.task_completed completed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_completed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_completed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_completed;
        if (input->ExpectTag(32)) goto parse_task_flag;
        break;
      }

      // optional uint32 task_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_flag_)));
          set_has_task_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.task_msg.type t = 1;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->t(), output);
  }

  // repeated .client.task_accepted accepted = 2;
  for (int i = 0; i < this->accepted_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->accepted(i), output);
  }

  // repeated .client.task_completed completed = 3;
  for (int i = 0; i < this->completed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->completed(i), output);
  }

  // optional uint32 task_flag = 4;
  if (has_task_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->task_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.task_msg.type t = 1;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->t(), target);
  }

  // repeated .client.task_accepted accepted = 2;
  for (int i = 0; i < this->accepted_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->accepted(i), target);
  }

  // repeated .client.task_completed completed = 3;
  for (int i = 0; i < this->completed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->completed(i), target);
  }

  // optional uint32 task_flag = 4;
  if (has_task_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->task_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.task_msg.type t = 1;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->t());
    }

    // optional uint32 task_flag = 4;
    if (has_task_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_flag());
    }

  }
  // repeated .client.task_accepted accepted = 2;
  total_size += 1 * this->accepted_size();
  for (int i = 0; i < this->accepted_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accepted(i));
  }

  // repeated .client.task_completed completed = 3;
  total_size += 1 * this->completed_size();
  for (int i = 0; i < this->completed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->completed(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_msg::MergeFrom(const task_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  accepted_.MergeFrom(from.accepted_);
  completed_.MergeFrom(from.completed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_task_flag()) {
      set_task_flag(from.task_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_msg::CopyFrom(const task_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < accepted_size(); i++) {
    if (!this->accepted(i).IsInitialized()) return false;
  }
  for (int i = 0; i < completed_size(); i++) {
    if (!this->completed(i).IsInitialized()) return false;
  }
  return true;
}

void task_msg::Swap(task_msg* other) {
  if (other != this) {
    std::swap(t_, other->t_);
    accepted_.Swap(&other->accepted_);
    completed_.Swap(&other->completed_);
    std::swap(task_flag_, other->task_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_msg_descriptor_;
  metadata.reflection = task_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int accept_task_req::kTaskIdFieldNumber;
const int accept_task_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

accept_task_req::accept_task_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void accept_task_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

accept_task_req::accept_task_req(const accept_task_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void accept_task_req::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

accept_task_req::~accept_task_req() {
  SharedDtor();
}

void accept_task_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void accept_task_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* accept_task_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return accept_task_req_descriptor_;
}

const accept_task_req& accept_task_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

accept_task_req* accept_task_req::default_instance_ = NULL;

accept_task_req* accept_task_req::New() const {
  return new accept_task_req;
}

void accept_task_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool accept_task_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void accept_task_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* accept_task_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int accept_task_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void accept_task_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const accept_task_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const accept_task_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void accept_task_req::MergeFrom(const accept_task_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void accept_task_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void accept_task_req::CopyFrom(const accept_task_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool accept_task_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void accept_task_req::Swap(accept_task_req* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata accept_task_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = accept_task_req_descriptor_;
  metadata.reflection = accept_task_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int accept_task_rsp::kRetFieldNumber;
const int accept_task_rsp::kTaskIdFieldNumber;
#endif  // !_MSC_VER

accept_task_rsp::accept_task_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void accept_task_rsp::InitAsDefaultInstance() {
}

accept_task_rsp::accept_task_rsp(const accept_task_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void accept_task_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

accept_task_rsp::~accept_task_rsp() {
  SharedDtor();
}

void accept_task_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void accept_task_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* accept_task_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return accept_task_rsp_descriptor_;
}

const accept_task_rsp& accept_task_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

accept_task_rsp* accept_task_rsp::default_instance_ = NULL;

accept_task_rsp* accept_task_rsp::New() const {
  return new accept_task_rsp;
}

void accept_task_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool accept_task_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.TASK_RESULT ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::TASK_RESULT_IsValid(value)) {
            set_ret(static_cast< ::client::TASK_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // required uint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void accept_task_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.TASK_RESULT ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required uint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* accept_task_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.TASK_RESULT ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required uint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int accept_task_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.TASK_RESULT ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void accept_task_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const accept_task_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const accept_task_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void accept_task_rsp::MergeFrom(const accept_task_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void accept_task_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void accept_task_rsp::CopyFrom(const accept_task_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool accept_task_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void accept_task_rsp::Swap(accept_task_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata accept_task_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = accept_task_rsp_descriptor_;
  metadata.reflection = accept_task_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int submit_task_req::kTaskIdFieldNumber;
const int submit_task_req::kChoseRewardIdFieldNumber;
const int submit_task_req::kTaskFlagFieldNumber;
const int submit_task_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

submit_task_req::submit_task_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void submit_task_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

submit_task_req::submit_task_req(const submit_task_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void submit_task_req::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  task_flag_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

submit_task_req::~submit_task_req() {
  SharedDtor();
}

void submit_task_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void submit_task_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* submit_task_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return submit_task_req_descriptor_;
}

const submit_task_req& submit_task_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

submit_task_req* submit_task_req::default_instance_ = NULL;

submit_task_req* submit_task_req::New() const {
  return new submit_task_req;
}

void submit_task_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    task_flag_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  chose_reward_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool submit_task_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chose_reward_id;
        break;
      }

      // repeated uint32 chose_reward_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chose_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_chose_reward_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chose_reward_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chose_reward_id;
        if (input->ExpectTag(24)) goto parse_task_flag;
        break;
      }

      // optional uint32 task_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_flag_)));
          set_has_task_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void submit_task_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // repeated uint32 chose_reward_id = 2;
  for (int i = 0; i < this->chose_reward_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->chose_reward_id(i), output);
  }

  // optional uint32 task_flag = 3;
  if (has_task_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_flag(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* submit_task_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // repeated uint32 chose_reward_id = 2;
  for (int i = 0; i < this->chose_reward_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->chose_reward_id(i), target);
  }

  // optional uint32 task_flag = 3;
  if (has_task_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->task_flag(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int submit_task_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional uint32 task_flag = 3;
    if (has_task_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_flag());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 chose_reward_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->chose_reward_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chose_reward_id(i));
    }
    total_size += 1 * this->chose_reward_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void submit_task_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const submit_task_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const submit_task_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void submit_task_req::MergeFrom(const submit_task_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  chose_reward_id_.MergeFrom(from.chose_reward_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_flag()) {
      set_task_flag(from.task_flag());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void submit_task_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void submit_task_req::CopyFrom(const submit_task_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool submit_task_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void submit_task_req::Swap(submit_task_req* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    chose_reward_id_.Swap(&other->chose_reward_id_);
    std::swap(task_flag_, other->task_flag_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata submit_task_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = submit_task_req_descriptor_;
  metadata.reflection = submit_task_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int submit_task_rsp::kRetFieldNumber;
const int submit_task_rsp::kTaskIdFieldNumber;
#endif  // !_MSC_VER

submit_task_rsp::submit_task_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void submit_task_rsp::InitAsDefaultInstance() {
}

submit_task_rsp::submit_task_rsp(const submit_task_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void submit_task_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

submit_task_rsp::~submit_task_rsp() {
  SharedDtor();
}

void submit_task_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void submit_task_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* submit_task_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return submit_task_rsp_descriptor_;
}

const submit_task_rsp& submit_task_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

submit_task_rsp* submit_task_rsp::default_instance_ = NULL;

submit_task_rsp* submit_task_rsp::New() const {
  return new submit_task_rsp;
}

void submit_task_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool submit_task_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.TASK_RESULT ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::TASK_RESULT_IsValid(value)) {
            set_ret(static_cast< ::client::TASK_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // required uint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void submit_task_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.TASK_RESULT ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required uint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* submit_task_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.TASK_RESULT ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required uint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int submit_task_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.TASK_RESULT ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void submit_task_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const submit_task_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const submit_task_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void submit_task_rsp::MergeFrom(const submit_task_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void submit_task_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void submit_task_rsp::CopyFrom(const submit_task_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool submit_task_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void submit_task_rsp::Swap(submit_task_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata submit_task_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = submit_task_rsp_descriptor_;
  metadata.reflection = submit_task_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talk_task_req::kTaskIdFieldNumber;
const int talk_task_req::kNpcIdFieldNumber;
const int talk_task_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

talk_task_req::talk_task_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talk_task_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

talk_task_req::talk_task_req(const talk_task_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talk_task_req::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  npc_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talk_task_req::~talk_task_req() {
  SharedDtor();
}

void talk_task_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void talk_task_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talk_task_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talk_task_req_descriptor_;
}

const talk_task_req& talk_task_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

talk_task_req* talk_task_req::default_instance_ = NULL;

talk_task_req* talk_task_req::New() const {
  return new talk_task_req;
}

void talk_task_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    npc_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talk_task_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npc_id;
        break;
      }

      // required uint32 npc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talk_task_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // required uint32 npc_id = 2;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npc_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talk_task_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // required uint32 npc_id = 2;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npc_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talk_task_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // required uint32 npc_id = 2;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talk_task_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talk_task_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talk_task_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talk_task_req::MergeFrom(const talk_task_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talk_task_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_task_req::CopyFrom(const talk_task_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_task_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void talk_task_req::Swap(talk_task_req* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(npc_id_, other->npc_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talk_task_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talk_task_req_descriptor_;
  metadata.reflection = talk_task_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talk_task_rsp::kRetFieldNumber;
const int talk_task_rsp::kTaskIdFieldNumber;
#endif  // !_MSC_VER

talk_task_rsp::talk_task_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talk_task_rsp::InitAsDefaultInstance() {
}

talk_task_rsp::talk_task_rsp(const talk_task_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talk_task_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talk_task_rsp::~talk_task_rsp() {
  SharedDtor();
}

void talk_task_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talk_task_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talk_task_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talk_task_rsp_descriptor_;
}

const talk_task_rsp& talk_task_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

talk_task_rsp* talk_task_rsp::default_instance_ = NULL;

talk_task_rsp* talk_task_rsp::New() const {
  return new talk_task_rsp;
}

void talk_task_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talk_task_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.TASK_RESULT ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::TASK_RESULT_IsValid(value)) {
            set_ret(static_cast< ::client::TASK_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // required uint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talk_task_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.TASK_RESULT ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // required uint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talk_task_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.TASK_RESULT ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // required uint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talk_task_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.TASK_RESULT ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talk_task_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talk_task_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talk_task_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talk_task_rsp::MergeFrom(const talk_task_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talk_task_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_task_rsp::CopyFrom(const talk_task_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_task_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void talk_task_rsp::Swap(talk_task_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talk_task_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talk_task_rsp_descriptor_;
  metadata.reflection = talk_task_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int story_end_req::kIdFieldNumber;
const int story_end_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

story_end_req::story_end_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void story_end_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

story_end_req::story_end_req(const story_end_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void story_end_req::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

story_end_req::~story_end_req() {
  SharedDtor();
}

void story_end_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void story_end_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* story_end_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return story_end_req_descriptor_;
}

const story_end_req& story_end_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etask_2eproto();
  return *default_instance_;
}

story_end_req* story_end_req::default_instance_ = NULL;

story_end_req* story_end_req::New() const {
  return new story_end_req;
}

void story_end_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool story_end_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void story_end_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* story_end_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int story_end_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void story_end_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const story_end_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const story_end_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void story_end_req::MergeFrom(const story_end_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void story_end_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void story_end_req::CopyFrom(const story_end_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool story_end_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void story_end_req::Swap(story_end_req* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata story_end_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = story_end_req_descriptor_;
  metadata.reflection = story_end_req_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
