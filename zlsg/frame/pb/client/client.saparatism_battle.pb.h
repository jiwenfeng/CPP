// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.saparatism_battle.proto

#ifndef PROTOBUF_client_2esaparatism_5fbattle_2eproto__INCLUDED
#define PROTOBUF_client_2esaparatism_5fbattle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

class sa_battle_enter_req;
class sa_battle_enter_check;
class sa_battle_enter_rsp;
class sa_self_condition_info;
class sa_capture_condition_ntf;
class sa_capture_flag_req;
class sa_capture_flag_check;
class sa_capture_flag_rsp;
class sa_init_data_req;
class sa_init_data_rsp;
class sa_query_family_info_req;
class sa_query_family_info_rsp;
class sa_battle_personal_record;

enum SA_BATTLE_OPERATE_RET_E {
  SBORE_SUCCESS = 0,
  SBORE_TIME_LIMIT = 1,
  SBORE_ROLE_NUM_LIMIT = 2,
  SBORE_BATTLE_LIMIT = 3,
  SBORE_LEVEL_LIMIT = 4,
  SBORE_ACTIVITY_OCCUPTION = 5,
  SBORE_SYS_ERR = 999
};
bool SA_BATTLE_OPERATE_RET_E_IsValid(int value);
const SA_BATTLE_OPERATE_RET_E SA_BATTLE_OPERATE_RET_E_MIN = SBORE_SUCCESS;
const SA_BATTLE_OPERATE_RET_E SA_BATTLE_OPERATE_RET_E_MAX = SBORE_SYS_ERR;
const int SA_BATTLE_OPERATE_RET_E_ARRAYSIZE = SA_BATTLE_OPERATE_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* SA_BATTLE_OPERATE_RET_E_descriptor();
inline const ::std::string& SA_BATTLE_OPERATE_RET_E_Name(SA_BATTLE_OPERATE_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    SA_BATTLE_OPERATE_RET_E_descriptor(), value);
}
inline bool SA_BATTLE_OPERATE_RET_E_Parse(
    const ::std::string& name, SA_BATTLE_OPERATE_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SA_BATTLE_OPERATE_RET_E>(
    SA_BATTLE_OPERATE_RET_E_descriptor(), name, value);
}
enum SA_FLAG_OPERATOR_RET {
  SFOR_SUCCESS = 0,
  SFOR_TIME_LIMIT = 1,
  SFOR_FAMILY_POS_LIMIT = 2,
  SFOR_FLAG_POS_LIMIT = 3,
  SFOR_FAMILY_MONEY_LIMIT = 4,
  SFOR_BREAK_LIMIT = 5,
  SFOR_FLAG_CAPTURING = 6
};
bool SA_FLAG_OPERATOR_RET_IsValid(int value);
const SA_FLAG_OPERATOR_RET SA_FLAG_OPERATOR_RET_MIN = SFOR_SUCCESS;
const SA_FLAG_OPERATOR_RET SA_FLAG_OPERATOR_RET_MAX = SFOR_FLAG_CAPTURING;
const int SA_FLAG_OPERATOR_RET_ARRAYSIZE = SA_FLAG_OPERATOR_RET_MAX + 1;

const ::google::protobuf::EnumDescriptor* SA_FLAG_OPERATOR_RET_descriptor();
inline const ::std::string& SA_FLAG_OPERATOR_RET_Name(SA_FLAG_OPERATOR_RET value) {
  return ::google::protobuf::internal::NameOfEnum(
    SA_FLAG_OPERATOR_RET_descriptor(), value);
}
inline bool SA_FLAG_OPERATOR_RET_Parse(
    const ::std::string& name, SA_FLAG_OPERATOR_RET* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SA_FLAG_OPERATOR_RET>(
    SA_FLAG_OPERATOR_RET_descriptor(), name, value);
}
// ===================================================================

class sa_battle_enter_req : public ::google::protobuf::Message {
 public:
  sa_battle_enter_req();
  virtual ~sa_battle_enter_req();

  sa_battle_enter_req(const sa_battle_enter_req& from);

  inline sa_battle_enter_req& operator=(const sa_battle_enter_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_battle_enter_req& default_instance();

  void Swap(sa_battle_enter_req* other);

  // implements Message ----------------------------------------------

  sa_battle_enter_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_battle_enter_req& from);
  void MergeFrom(const sa_battle_enter_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.sa_battle_enter_req)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_battle_enter_req* default_instance_;
};
// -------------------------------------------------------------------

class sa_battle_enter_check : public ::google::protobuf::Message {
 public:
  sa_battle_enter_check();
  virtual ~sa_battle_enter_check();

  sa_battle_enter_check(const sa_battle_enter_check& from);

  inline sa_battle_enter_check& operator=(const sa_battle_enter_check& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_battle_enter_check& default_instance();

  void Swap(sa_battle_enter_check* other);

  // implements Message ----------------------------------------------

  sa_battle_enter_check* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_battle_enter_check& from);
  void MergeFrom(const sa_battle_enter_check& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.sa_battle_enter_req sber = 1;
  inline bool has_sber() const;
  inline void clear_sber();
  static const int kSberFieldNumber = 1;
  inline const ::client::sa_battle_enter_req& sber() const;
  inline ::client::sa_battle_enter_req* mutable_sber();
  inline ::client::sa_battle_enter_req* release_sber();
  inline void set_allocated_sber(::client::sa_battle_enter_req* sber);

  // @@protoc_insertion_point(class_scope:client.sa_battle_enter_check)
 private:
  inline void set_has_sber();
  inline void clear_has_sber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::sa_battle_enter_req* sber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_battle_enter_check* default_instance_;
};
// -------------------------------------------------------------------

class sa_battle_enter_rsp : public ::google::protobuf::Message {
 public:
  sa_battle_enter_rsp();
  virtual ~sa_battle_enter_rsp();

  sa_battle_enter_rsp(const sa_battle_enter_rsp& from);

  inline sa_battle_enter_rsp& operator=(const sa_battle_enter_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_battle_enter_rsp& default_instance();

  void Swap(sa_battle_enter_rsp* other);

  // implements Message ----------------------------------------------

  sa_battle_enter_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_battle_enter_rsp& from);
  void MergeFrom(const sa_battle_enter_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.SA_BATTLE_OPERATE_RET_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::SA_BATTLE_OPERATE_RET_E ret() const;
  inline void set_ret(::client::SA_BATTLE_OPERATE_RET_E value);

  // @@protoc_insertion_point(class_scope:client.sa_battle_enter_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_battle_enter_rsp* default_instance_;
};
// -------------------------------------------------------------------

class sa_self_condition_info : public ::google::protobuf::Message {
 public:
  sa_self_condition_info();
  virtual ~sa_self_condition_info();

  sa_self_condition_info(const sa_self_condition_info& from);

  inline sa_self_condition_info& operator=(const sa_self_condition_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_self_condition_info& default_instance();

  void Swap(sa_self_condition_info* other);

  // implements Message ----------------------------------------------

  sa_self_condition_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_self_condition_info& from);
  void MergeFrom(const sa_self_condition_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 benifit_multipe = 1;
  inline bool has_benifit_multipe() const;
  inline void clear_benifit_multipe();
  static const int kBenifitMultipeFieldNumber = 1;
  inline ::google::protobuf::uint32 benifit_multipe() const;
  inline void set_benifit_multipe(::google::protobuf::uint32 value);

  // required uint32 benifit_radix = 2;
  inline bool has_benifit_radix() const;
  inline void clear_benifit_radix();
  static const int kBenifitRadixFieldNumber = 2;
  inline ::google::protobuf::uint32 benifit_radix() const;
  inline void set_benifit_radix(::google::protobuf::uint32 value);

  // required uint32 total_get_exp = 3;
  inline bool has_total_get_exp() const;
  inline void clear_total_get_exp();
  static const int kTotalGetExpFieldNumber = 3;
  inline ::google::protobuf::uint32 total_get_exp() const;
  inline void set_total_get_exp(::google::protobuf::uint32 value);

  // required uint32 total_stop_time = 4;
  inline bool has_total_stop_time() const;
  inline void clear_total_stop_time();
  static const int kTotalStopTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 total_stop_time() const;
  inline void set_total_stop_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.sa_self_condition_info)
 private:
  inline void set_has_benifit_multipe();
  inline void clear_has_benifit_multipe();
  inline void set_has_benifit_radix();
  inline void clear_has_benifit_radix();
  inline void set_has_total_get_exp();
  inline void clear_has_total_get_exp();
  inline void set_has_total_stop_time();
  inline void clear_has_total_stop_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 benifit_multipe_;
  ::google::protobuf::uint32 benifit_radix_;
  ::google::protobuf::uint32 total_get_exp_;
  ::google::protobuf::uint32 total_stop_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_self_condition_info* default_instance_;
};
// -------------------------------------------------------------------

class sa_capture_condition_ntf : public ::google::protobuf::Message {
 public:
  sa_capture_condition_ntf();
  virtual ~sa_capture_condition_ntf();

  sa_capture_condition_ntf(const sa_capture_condition_ntf& from);

  inline sa_capture_condition_ntf& operator=(const sa_capture_condition_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_capture_condition_ntf& default_instance();

  void Swap(sa_capture_condition_ntf* other);

  // implements Message ----------------------------------------------

  sa_capture_condition_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_capture_condition_ntf& from);
  void MergeFrom(const sa_capture_condition_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.client_map_pos flag_pos = 1;
  inline bool has_flag_pos() const;
  inline void clear_flag_pos();
  static const int kFlagPosFieldNumber = 1;
  inline const ::client::client_map_pos& flag_pos() const;
  inline ::client::client_map_pos* mutable_flag_pos();
  inline ::client::client_map_pos* release_flag_pos();
  inline void set_allocated_flag_pos(::client::client_map_pos* flag_pos);

  // required string occuption_name = 2;
  inline bool has_occuption_name() const;
  inline void clear_occuption_name();
  static const int kOccuptionNameFieldNumber = 2;
  inline const ::std::string& occuption_name() const;
  inline void set_occuption_name(const ::std::string& value);
  inline void set_occuption_name(const char* value);
  inline void set_occuption_name(const char* value, size_t size);
  inline ::std::string* mutable_occuption_name();
  inline ::std::string* release_occuption_name();
  inline void set_allocated_occuption_name(::std::string* occuption_name);

  // required string family_name = 3;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 3;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const char* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // required uint32 family_flag_id = 4;
  inline bool has_family_flag_id() const;
  inline void clear_family_flag_id();
  static const int kFamilyFlagIdFieldNumber = 4;
  inline ::google::protobuf::uint32 family_flag_id() const;
  inline void set_family_flag_id(::google::protobuf::uint32 value);

  // required uint32 occuption_time = 5;
  inline bool has_occuption_time() const;
  inline void clear_occuption_time();
  static const int kOccuptionTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 occuption_time() const;
  inline void set_occuption_time(::google::protobuf::uint32 value);

  // required .client.sa_self_condition_info selfinfo = 6;
  inline bool has_selfinfo() const;
  inline void clear_selfinfo();
  static const int kSelfinfoFieldNumber = 6;
  inline const ::client::sa_self_condition_info& selfinfo() const;
  inline ::client::sa_self_condition_info* mutable_selfinfo();
  inline ::client::sa_self_condition_info* release_selfinfo();
  inline void set_allocated_selfinfo(::client::sa_self_condition_info* selfinfo);

  // @@protoc_insertion_point(class_scope:client.sa_capture_condition_ntf)
 private:
  inline void set_has_flag_pos();
  inline void clear_has_flag_pos();
  inline void set_has_occuption_name();
  inline void clear_has_occuption_name();
  inline void set_has_family_name();
  inline void clear_has_family_name();
  inline void set_has_family_flag_id();
  inline void clear_has_family_flag_id();
  inline void set_has_occuption_time();
  inline void clear_has_occuption_time();
  inline void set_has_selfinfo();
  inline void clear_has_selfinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::client_map_pos* flag_pos_;
  ::std::string* occuption_name_;
  ::std::string* family_name_;
  ::google::protobuf::uint32 family_flag_id_;
  ::google::protobuf::uint32 occuption_time_;
  ::client::sa_self_condition_info* selfinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_capture_condition_ntf* default_instance_;
};
// -------------------------------------------------------------------

class sa_capture_flag_req : public ::google::protobuf::Message {
 public:
  sa_capture_flag_req();
  virtual ~sa_capture_flag_req();

  sa_capture_flag_req(const sa_capture_flag_req& from);

  inline sa_capture_flag_req& operator=(const sa_capture_flag_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_capture_flag_req& default_instance();

  void Swap(sa_capture_flag_req* other);

  // implements Message ----------------------------------------------

  sa_capture_flag_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_capture_flag_req& from);
  void MergeFrom(const sa_capture_flag_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.sa_capture_flag_req)
 private:
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_capture_flag_req* default_instance_;
};
// -------------------------------------------------------------------

class sa_capture_flag_check : public ::google::protobuf::Message {
 public:
  sa_capture_flag_check();
  virtual ~sa_capture_flag_check();

  sa_capture_flag_check(const sa_capture_flag_check& from);

  inline sa_capture_flag_check& operator=(const sa_capture_flag_check& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_capture_flag_check& default_instance();

  void Swap(sa_capture_flag_check* other);

  // implements Message ----------------------------------------------

  sa_capture_flag_check* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_capture_flag_check& from);
  void MergeFrom(const sa_capture_flag_check& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.sa_capture_flag_req req = 1;
  inline bool has_req() const;
  inline void clear_req();
  static const int kReqFieldNumber = 1;
  inline const ::client::sa_capture_flag_req& req() const;
  inline ::client::sa_capture_flag_req* mutable_req();
  inline ::client::sa_capture_flag_req* release_req();
  inline void set_allocated_req(::client::sa_capture_flag_req* req);

  // @@protoc_insertion_point(class_scope:client.sa_capture_flag_check)
 private:
  inline void set_has_req();
  inline void clear_has_req();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::sa_capture_flag_req* req_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_capture_flag_check* default_instance_;
};
// -------------------------------------------------------------------

class sa_capture_flag_rsp : public ::google::protobuf::Message {
 public:
  sa_capture_flag_rsp();
  virtual ~sa_capture_flag_rsp();

  sa_capture_flag_rsp(const sa_capture_flag_rsp& from);

  inline sa_capture_flag_rsp& operator=(const sa_capture_flag_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_capture_flag_rsp& default_instance();

  void Swap(sa_capture_flag_rsp* other);

  // implements Message ----------------------------------------------

  sa_capture_flag_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_capture_flag_rsp& from);
  void MergeFrom(const sa_capture_flag_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.SA_FLAG_OPERATOR_RET ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::SA_FLAG_OPERATOR_RET ret() const;
  inline void set_ret(::client::SA_FLAG_OPERATOR_RET value);

  // optional uint32 capture_time = 2;
  inline bool has_capture_time() const;
  inline void clear_capture_time();
  static const int kCaptureTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 capture_time() const;
  inline void set_capture_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.sa_capture_flag_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_capture_time();
  inline void clear_has_capture_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 capture_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_capture_flag_rsp* default_instance_;
};
// -------------------------------------------------------------------

class sa_init_data_req : public ::google::protobuf::Message {
 public:
  sa_init_data_req();
  virtual ~sa_init_data_req();

  sa_init_data_req(const sa_init_data_req& from);

  inline sa_init_data_req& operator=(const sa_init_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_init_data_req& default_instance();

  void Swap(sa_init_data_req* other);

  // implements Message ----------------------------------------------

  sa_init_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_init_data_req& from);
  void MergeFrom(const sa_init_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 region_id() const;
  inline void set_region_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.sa_init_data_req)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 region_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_init_data_req* default_instance_;
};
// -------------------------------------------------------------------

class sa_init_data_rsp : public ::google::protobuf::Message {
 public:
  sa_init_data_rsp();
  virtual ~sa_init_data_rsp();

  sa_init_data_rsp(const sa_init_data_rsp& from);

  inline sa_init_data_rsp& operator=(const sa_init_data_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_init_data_rsp& default_instance();

  void Swap(sa_init_data_rsp* other);

  // implements Message ----------------------------------------------

  sa_init_data_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_init_data_rsp& from);
  void MergeFrom(const sa_init_data_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 family_flag_id = 2;
  inline bool has_family_flag_id() const;
  inline void clear_family_flag_id();
  static const int kFamilyFlagIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_flag_id() const;
  inline void set_family_flag_id(::google::protobuf::uint32 value);

  // required string family_name = 3;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 3;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const char* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // @@protoc_insertion_point(class_scope:client.sa_init_data_rsp)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_family_flag_id();
  inline void clear_has_family_flag_id();
  inline void set_has_family_name();
  inline void clear_has_family_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 family_flag_id_;
  ::std::string* family_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_init_data_rsp* default_instance_;
};
// -------------------------------------------------------------------

class sa_query_family_info_req : public ::google::protobuf::Message {
 public:
  sa_query_family_info_req();
  virtual ~sa_query_family_info_req();

  sa_query_family_info_req(const sa_query_family_info_req& from);

  inline sa_query_family_info_req& operator=(const sa_query_family_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_query_family_info_req& default_instance();

  void Swap(sa_query_family_info_req* other);

  // implements Message ----------------------------------------------

  sa_query_family_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_query_family_info_req& from);
  void MergeFrom(const sa_query_family_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // required uint32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // required uint32 family_id = 3;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.sa_query_family_info_req)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_family_id();
  inline void clear_has_family_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_query_family_info_req* default_instance_;
};
// -------------------------------------------------------------------

class sa_query_family_info_rsp : public ::google::protobuf::Message {
 public:
  sa_query_family_info_rsp();
  virtual ~sa_query_family_info_rsp();

  sa_query_family_info_rsp(const sa_query_family_info_rsp& from);

  inline sa_query_family_info_rsp& operator=(const sa_query_family_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_query_family_info_rsp& default_instance();

  void Swap(sa_query_family_info_rsp* other);

  // implements Message ----------------------------------------------

  sa_query_family_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_query_family_info_rsp& from);
  void MergeFrom(const sa_query_family_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_flag_id = 1;
  inline bool has_family_flag_id() const;
  inline void clear_family_flag_id();
  static const int kFamilyFlagIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_flag_id() const;
  inline void set_family_flag_id(::google::protobuf::uint32 value);

  // required string family_name = 2;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 2;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const char* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // @@protoc_insertion_point(class_scope:client.sa_query_family_info_rsp)
 private:
  inline void set_has_family_flag_id();
  inline void clear_has_family_flag_id();
  inline void set_has_family_name();
  inline void clear_has_family_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* family_name_;
  ::google::protobuf::uint32 family_flag_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_query_family_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class sa_battle_personal_record : public ::google::protobuf::Message {
 public:
  sa_battle_personal_record();
  virtual ~sa_battle_personal_record();

  sa_battle_personal_record(const sa_battle_personal_record& from);

  inline sa_battle_personal_record& operator=(const sa_battle_personal_record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sa_battle_personal_record& default_instance();

  void Swap(sa_battle_personal_record* other);

  // implements Message ----------------------------------------------

  sa_battle_personal_record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sa_battle_personal_record& from);
  void MergeFrom(const sa_battle_personal_record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 benifit_multipe = 2;
  inline bool has_benifit_multipe() const;
  inline void clear_benifit_multipe();
  static const int kBenifitMultipeFieldNumber = 2;
  inline ::google::protobuf::uint32 benifit_multipe() const;
  inline void set_benifit_multipe(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.sa_battle_personal_record)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_benifit_multipe();
  inline void clear_has_benifit_multipe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 benifit_multipe_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto();
  friend void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto();

  void InitAsDefaultInstance();
  static sa_battle_personal_record* default_instance_;
};
// ===================================================================


// ===================================================================

// sa_battle_enter_req

// required uint32 time = 1;
inline bool sa_battle_enter_req::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_battle_enter_req::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_battle_enter_req::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_battle_enter_req::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 sa_battle_enter_req::time() const {
  return time_;
}
inline void sa_battle_enter_req::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 id = 2;
inline bool sa_battle_enter_req::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sa_battle_enter_req::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sa_battle_enter_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sa_battle_enter_req::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 sa_battle_enter_req::id() const {
  return id_;
}
inline void sa_battle_enter_req::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool sa_battle_enter_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sa_battle_enter_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sa_battle_enter_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sa_battle_enter_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& sa_battle_enter_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* sa_battle_enter_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* sa_battle_enter_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void sa_battle_enter_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// sa_battle_enter_check

// required .client.sa_battle_enter_req sber = 1;
inline bool sa_battle_enter_check::has_sber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_battle_enter_check::set_has_sber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_battle_enter_check::clear_has_sber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_battle_enter_check::clear_sber() {
  if (sber_ != NULL) sber_->::client::sa_battle_enter_req::Clear();
  clear_has_sber();
}
inline const ::client::sa_battle_enter_req& sa_battle_enter_check::sber() const {
  return sber_ != NULL ? *sber_ : *default_instance_->sber_;
}
inline ::client::sa_battle_enter_req* sa_battle_enter_check::mutable_sber() {
  set_has_sber();
  if (sber_ == NULL) sber_ = new ::client::sa_battle_enter_req;
  return sber_;
}
inline ::client::sa_battle_enter_req* sa_battle_enter_check::release_sber() {
  clear_has_sber();
  ::client::sa_battle_enter_req* temp = sber_;
  sber_ = NULL;
  return temp;
}
inline void sa_battle_enter_check::set_allocated_sber(::client::sa_battle_enter_req* sber) {
  delete sber_;
  sber_ = sber;
  if (sber) {
    set_has_sber();
  } else {
    clear_has_sber();
  }
}

// -------------------------------------------------------------------

// sa_battle_enter_rsp

// required .client.SA_BATTLE_OPERATE_RET_E ret = 1;
inline bool sa_battle_enter_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_battle_enter_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_battle_enter_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_battle_enter_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::SA_BATTLE_OPERATE_RET_E sa_battle_enter_rsp::ret() const {
  return static_cast< ::client::SA_BATTLE_OPERATE_RET_E >(ret_);
}
inline void sa_battle_enter_rsp::set_ret(::client::SA_BATTLE_OPERATE_RET_E value) {
  assert(::client::SA_BATTLE_OPERATE_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// sa_self_condition_info

// required uint32 benifit_multipe = 1;
inline bool sa_self_condition_info::has_benifit_multipe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_self_condition_info::set_has_benifit_multipe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_self_condition_info::clear_has_benifit_multipe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_self_condition_info::clear_benifit_multipe() {
  benifit_multipe_ = 0u;
  clear_has_benifit_multipe();
}
inline ::google::protobuf::uint32 sa_self_condition_info::benifit_multipe() const {
  return benifit_multipe_;
}
inline void sa_self_condition_info::set_benifit_multipe(::google::protobuf::uint32 value) {
  set_has_benifit_multipe();
  benifit_multipe_ = value;
}

// required uint32 benifit_radix = 2;
inline bool sa_self_condition_info::has_benifit_radix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sa_self_condition_info::set_has_benifit_radix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sa_self_condition_info::clear_has_benifit_radix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sa_self_condition_info::clear_benifit_radix() {
  benifit_radix_ = 0u;
  clear_has_benifit_radix();
}
inline ::google::protobuf::uint32 sa_self_condition_info::benifit_radix() const {
  return benifit_radix_;
}
inline void sa_self_condition_info::set_benifit_radix(::google::protobuf::uint32 value) {
  set_has_benifit_radix();
  benifit_radix_ = value;
}

// required uint32 total_get_exp = 3;
inline bool sa_self_condition_info::has_total_get_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sa_self_condition_info::set_has_total_get_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sa_self_condition_info::clear_has_total_get_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sa_self_condition_info::clear_total_get_exp() {
  total_get_exp_ = 0u;
  clear_has_total_get_exp();
}
inline ::google::protobuf::uint32 sa_self_condition_info::total_get_exp() const {
  return total_get_exp_;
}
inline void sa_self_condition_info::set_total_get_exp(::google::protobuf::uint32 value) {
  set_has_total_get_exp();
  total_get_exp_ = value;
}

// required uint32 total_stop_time = 4;
inline bool sa_self_condition_info::has_total_stop_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sa_self_condition_info::set_has_total_stop_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sa_self_condition_info::clear_has_total_stop_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sa_self_condition_info::clear_total_stop_time() {
  total_stop_time_ = 0u;
  clear_has_total_stop_time();
}
inline ::google::protobuf::uint32 sa_self_condition_info::total_stop_time() const {
  return total_stop_time_;
}
inline void sa_self_condition_info::set_total_stop_time(::google::protobuf::uint32 value) {
  set_has_total_stop_time();
  total_stop_time_ = value;
}

// -------------------------------------------------------------------

// sa_capture_condition_ntf

// required .client.client_map_pos flag_pos = 1;
inline bool sa_capture_condition_ntf::has_flag_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_capture_condition_ntf::set_has_flag_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_capture_condition_ntf::clear_has_flag_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_capture_condition_ntf::clear_flag_pos() {
  if (flag_pos_ != NULL) flag_pos_->::client::client_map_pos::Clear();
  clear_has_flag_pos();
}
inline const ::client::client_map_pos& sa_capture_condition_ntf::flag_pos() const {
  return flag_pos_ != NULL ? *flag_pos_ : *default_instance_->flag_pos_;
}
inline ::client::client_map_pos* sa_capture_condition_ntf::mutable_flag_pos() {
  set_has_flag_pos();
  if (flag_pos_ == NULL) flag_pos_ = new ::client::client_map_pos;
  return flag_pos_;
}
inline ::client::client_map_pos* sa_capture_condition_ntf::release_flag_pos() {
  clear_has_flag_pos();
  ::client::client_map_pos* temp = flag_pos_;
  flag_pos_ = NULL;
  return temp;
}
inline void sa_capture_condition_ntf::set_allocated_flag_pos(::client::client_map_pos* flag_pos) {
  delete flag_pos_;
  flag_pos_ = flag_pos;
  if (flag_pos) {
    set_has_flag_pos();
  } else {
    clear_has_flag_pos();
  }
}

// required string occuption_name = 2;
inline bool sa_capture_condition_ntf::has_occuption_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sa_capture_condition_ntf::set_has_occuption_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sa_capture_condition_ntf::clear_has_occuption_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sa_capture_condition_ntf::clear_occuption_name() {
  if (occuption_name_ != &::google::protobuf::internal::kEmptyString) {
    occuption_name_->clear();
  }
  clear_has_occuption_name();
}
inline const ::std::string& sa_capture_condition_ntf::occuption_name() const {
  return *occuption_name_;
}
inline void sa_capture_condition_ntf::set_occuption_name(const ::std::string& value) {
  set_has_occuption_name();
  if (occuption_name_ == &::google::protobuf::internal::kEmptyString) {
    occuption_name_ = new ::std::string;
  }
  occuption_name_->assign(value);
}
inline void sa_capture_condition_ntf::set_occuption_name(const char* value) {
  set_has_occuption_name();
  if (occuption_name_ == &::google::protobuf::internal::kEmptyString) {
    occuption_name_ = new ::std::string;
  }
  occuption_name_->assign(value);
}
inline void sa_capture_condition_ntf::set_occuption_name(const char* value, size_t size) {
  set_has_occuption_name();
  if (occuption_name_ == &::google::protobuf::internal::kEmptyString) {
    occuption_name_ = new ::std::string;
  }
  occuption_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sa_capture_condition_ntf::mutable_occuption_name() {
  set_has_occuption_name();
  if (occuption_name_ == &::google::protobuf::internal::kEmptyString) {
    occuption_name_ = new ::std::string;
  }
  return occuption_name_;
}
inline ::std::string* sa_capture_condition_ntf::release_occuption_name() {
  clear_has_occuption_name();
  if (occuption_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = occuption_name_;
    occuption_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sa_capture_condition_ntf::set_allocated_occuption_name(::std::string* occuption_name) {
  if (occuption_name_ != &::google::protobuf::internal::kEmptyString) {
    delete occuption_name_;
  }
  if (occuption_name) {
    set_has_occuption_name();
    occuption_name_ = occuption_name;
  } else {
    clear_has_occuption_name();
    occuption_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string family_name = 3;
inline bool sa_capture_condition_ntf::has_family_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sa_capture_condition_ntf::set_has_family_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sa_capture_condition_ntf::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sa_capture_condition_ntf::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& sa_capture_condition_ntf::family_name() const {
  return *family_name_;
}
inline void sa_capture_condition_ntf::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void sa_capture_condition_ntf::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void sa_capture_condition_ntf::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sa_capture_condition_ntf::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* sa_capture_condition_ntf::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sa_capture_condition_ntf::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 family_flag_id = 4;
inline bool sa_capture_condition_ntf::has_family_flag_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sa_capture_condition_ntf::set_has_family_flag_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sa_capture_condition_ntf::clear_has_family_flag_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sa_capture_condition_ntf::clear_family_flag_id() {
  family_flag_id_ = 0u;
  clear_has_family_flag_id();
}
inline ::google::protobuf::uint32 sa_capture_condition_ntf::family_flag_id() const {
  return family_flag_id_;
}
inline void sa_capture_condition_ntf::set_family_flag_id(::google::protobuf::uint32 value) {
  set_has_family_flag_id();
  family_flag_id_ = value;
}

// required uint32 occuption_time = 5;
inline bool sa_capture_condition_ntf::has_occuption_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sa_capture_condition_ntf::set_has_occuption_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sa_capture_condition_ntf::clear_has_occuption_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sa_capture_condition_ntf::clear_occuption_time() {
  occuption_time_ = 0u;
  clear_has_occuption_time();
}
inline ::google::protobuf::uint32 sa_capture_condition_ntf::occuption_time() const {
  return occuption_time_;
}
inline void sa_capture_condition_ntf::set_occuption_time(::google::protobuf::uint32 value) {
  set_has_occuption_time();
  occuption_time_ = value;
}

// required .client.sa_self_condition_info selfinfo = 6;
inline bool sa_capture_condition_ntf::has_selfinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sa_capture_condition_ntf::set_has_selfinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sa_capture_condition_ntf::clear_has_selfinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sa_capture_condition_ntf::clear_selfinfo() {
  if (selfinfo_ != NULL) selfinfo_->::client::sa_self_condition_info::Clear();
  clear_has_selfinfo();
}
inline const ::client::sa_self_condition_info& sa_capture_condition_ntf::selfinfo() const {
  return selfinfo_ != NULL ? *selfinfo_ : *default_instance_->selfinfo_;
}
inline ::client::sa_self_condition_info* sa_capture_condition_ntf::mutable_selfinfo() {
  set_has_selfinfo();
  if (selfinfo_ == NULL) selfinfo_ = new ::client::sa_self_condition_info;
  return selfinfo_;
}
inline ::client::sa_self_condition_info* sa_capture_condition_ntf::release_selfinfo() {
  clear_has_selfinfo();
  ::client::sa_self_condition_info* temp = selfinfo_;
  selfinfo_ = NULL;
  return temp;
}
inline void sa_capture_condition_ntf::set_allocated_selfinfo(::client::sa_self_condition_info* selfinfo) {
  delete selfinfo_;
  selfinfo_ = selfinfo;
  if (selfinfo) {
    set_has_selfinfo();
  } else {
    clear_has_selfinfo();
  }
}

// -------------------------------------------------------------------

// sa_capture_flag_req

// optional .client.server_head svr_head = 1000;
inline bool sa_capture_flag_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_capture_flag_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_capture_flag_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_capture_flag_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& sa_capture_flag_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* sa_capture_flag_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* sa_capture_flag_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void sa_capture_flag_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// sa_capture_flag_check

// required .client.sa_capture_flag_req req = 1;
inline bool sa_capture_flag_check::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_capture_flag_check::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_capture_flag_check::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_capture_flag_check::clear_req() {
  if (req_ != NULL) req_->::client::sa_capture_flag_req::Clear();
  clear_has_req();
}
inline const ::client::sa_capture_flag_req& sa_capture_flag_check::req() const {
  return req_ != NULL ? *req_ : *default_instance_->req_;
}
inline ::client::sa_capture_flag_req* sa_capture_flag_check::mutable_req() {
  set_has_req();
  if (req_ == NULL) req_ = new ::client::sa_capture_flag_req;
  return req_;
}
inline ::client::sa_capture_flag_req* sa_capture_flag_check::release_req() {
  clear_has_req();
  ::client::sa_capture_flag_req* temp = req_;
  req_ = NULL;
  return temp;
}
inline void sa_capture_flag_check::set_allocated_req(::client::sa_capture_flag_req* req) {
  delete req_;
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
}

// -------------------------------------------------------------------

// sa_capture_flag_rsp

// required .client.SA_FLAG_OPERATOR_RET ret = 1;
inline bool sa_capture_flag_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_capture_flag_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_capture_flag_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_capture_flag_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::SA_FLAG_OPERATOR_RET sa_capture_flag_rsp::ret() const {
  return static_cast< ::client::SA_FLAG_OPERATOR_RET >(ret_);
}
inline void sa_capture_flag_rsp::set_ret(::client::SA_FLAG_OPERATOR_RET value) {
  assert(::client::SA_FLAG_OPERATOR_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 capture_time = 2;
inline bool sa_capture_flag_rsp::has_capture_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sa_capture_flag_rsp::set_has_capture_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sa_capture_flag_rsp::clear_has_capture_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sa_capture_flag_rsp::clear_capture_time() {
  capture_time_ = 0u;
  clear_has_capture_time();
}
inline ::google::protobuf::uint32 sa_capture_flag_rsp::capture_time() const {
  return capture_time_;
}
inline void sa_capture_flag_rsp::set_capture_time(::google::protobuf::uint32 value) {
  set_has_capture_time();
  capture_time_ = value;
}

// -------------------------------------------------------------------

// sa_init_data_req

// required uint32 region_id = 1;
inline bool sa_init_data_req::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_init_data_req::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_init_data_req::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_init_data_req::clear_region_id() {
  region_id_ = 0u;
  clear_has_region_id();
}
inline ::google::protobuf::uint32 sa_init_data_req::region_id() const {
  return region_id_;
}
inline void sa_init_data_req::set_region_id(::google::protobuf::uint32 value) {
  set_has_region_id();
  region_id_ = value;
}

// -------------------------------------------------------------------

// sa_init_data_rsp

// required uint32 family_id = 1;
inline bool sa_init_data_rsp::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_init_data_rsp::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_init_data_rsp::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_init_data_rsp::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 sa_init_data_rsp::family_id() const {
  return family_id_;
}
inline void sa_init_data_rsp::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 family_flag_id = 2;
inline bool sa_init_data_rsp::has_family_flag_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sa_init_data_rsp::set_has_family_flag_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sa_init_data_rsp::clear_has_family_flag_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sa_init_data_rsp::clear_family_flag_id() {
  family_flag_id_ = 0u;
  clear_has_family_flag_id();
}
inline ::google::protobuf::uint32 sa_init_data_rsp::family_flag_id() const {
  return family_flag_id_;
}
inline void sa_init_data_rsp::set_family_flag_id(::google::protobuf::uint32 value) {
  set_has_family_flag_id();
  family_flag_id_ = value;
}

// required string family_name = 3;
inline bool sa_init_data_rsp::has_family_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sa_init_data_rsp::set_has_family_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sa_init_data_rsp::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sa_init_data_rsp::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& sa_init_data_rsp::family_name() const {
  return *family_name_;
}
inline void sa_init_data_rsp::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void sa_init_data_rsp::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void sa_init_data_rsp::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sa_init_data_rsp::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* sa_init_data_rsp::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sa_init_data_rsp::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sa_query_family_info_req

// required uint32 map_id = 1;
inline bool sa_query_family_info_req::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_query_family_info_req::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_query_family_info_req::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_query_family_info_req::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 sa_query_family_info_req::map_id() const {
  return map_id_;
}
inline void sa_query_family_info_req::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// required uint32 scene_id = 2;
inline bool sa_query_family_info_req::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sa_query_family_info_req::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sa_query_family_info_req::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sa_query_family_info_req::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 sa_query_family_info_req::scene_id() const {
  return scene_id_;
}
inline void sa_query_family_info_req::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required uint32 family_id = 3;
inline bool sa_query_family_info_req::has_family_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sa_query_family_info_req::set_has_family_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sa_query_family_info_req::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sa_query_family_info_req::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 sa_query_family_info_req::family_id() const {
  return family_id_;
}
inline void sa_query_family_info_req::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// -------------------------------------------------------------------

// sa_query_family_info_rsp

// required uint32 family_flag_id = 1;
inline bool sa_query_family_info_rsp::has_family_flag_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_query_family_info_rsp::set_has_family_flag_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_query_family_info_rsp::clear_has_family_flag_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_query_family_info_rsp::clear_family_flag_id() {
  family_flag_id_ = 0u;
  clear_has_family_flag_id();
}
inline ::google::protobuf::uint32 sa_query_family_info_rsp::family_flag_id() const {
  return family_flag_id_;
}
inline void sa_query_family_info_rsp::set_family_flag_id(::google::protobuf::uint32 value) {
  set_has_family_flag_id();
  family_flag_id_ = value;
}

// required string family_name = 2;
inline bool sa_query_family_info_rsp::has_family_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sa_query_family_info_rsp::set_has_family_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sa_query_family_info_rsp::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sa_query_family_info_rsp::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& sa_query_family_info_rsp::family_name() const {
  return *family_name_;
}
inline void sa_query_family_info_rsp::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void sa_query_family_info_rsp::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void sa_query_family_info_rsp::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sa_query_family_info_rsp::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* sa_query_family_info_rsp::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sa_query_family_info_rsp::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sa_battle_personal_record

// required uint32 role_id = 1;
inline bool sa_battle_personal_record::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sa_battle_personal_record::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sa_battle_personal_record::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sa_battle_personal_record::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 sa_battle_personal_record::role_id() const {
  return role_id_;
}
inline void sa_battle_personal_record::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 benifit_multipe = 2;
inline bool sa_battle_personal_record::has_benifit_multipe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sa_battle_personal_record::set_has_benifit_multipe() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sa_battle_personal_record::clear_has_benifit_multipe() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sa_battle_personal_record::clear_benifit_multipe() {
  benifit_multipe_ = 0u;
  clear_has_benifit_multipe();
}
inline ::google::protobuf::uint32 sa_battle_personal_record::benifit_multipe() const {
  return benifit_multipe_;
}
inline void sa_battle_personal_record::set_benifit_multipe(::google::protobuf::uint32 value) {
  set_has_benifit_multipe();
  benifit_multipe_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::SA_BATTLE_OPERATE_RET_E>() {
  return ::client::SA_BATTLE_OPERATE_RET_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::SA_FLAG_OPERATOR_RET>() {
  return ::client::SA_FLAG_OPERATOR_RET_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2esaparatism_5fbattle_2eproto__INCLUDED
