// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.team.proto

#ifndef PROTOBUF_client_2eteam_2eproto__INCLUDED
#define PROTOBUF_client_2eteam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eteam_2eproto();
void protobuf_AssignDesc_client_2eteam_2eproto();
void protobuf_ShutdownFile_client_2eteam_2eproto();

class member_info;
class team_info;
class team_notify;
class team_member;
class team_info_rsp;
class join_team_req;
class join_team_rsp;
class fire_member_req;
class fire_member_rsp;
class create_team_req;
class create_team_rsp;
class team_ready_req;
class team_enter_raid_req;
class team_enter_prepare_req;
class team_enter_prepare_rsp;
class team_enter_raid_rsp;
class team_add_robot;
class team_kill_statistics_rsp;
class team_join_check;

enum team_info_status_e {
  team_info_status_e_normal = 1,
  team_info_status_e_ready = 2
};
bool team_info_status_e_IsValid(int value);
const team_info_status_e team_info_status_e_status_e_MIN = team_info_status_e_normal;
const team_info_status_e team_info_status_e_status_e_MAX = team_info_status_e_ready;
const int team_info_status_e_status_e_ARRAYSIZE = team_info_status_e_status_e_MAX + 1;

const ::google::protobuf::EnumDescriptor* team_info_status_e_descriptor();
inline const ::std::string& team_info_status_e_Name(team_info_status_e value) {
  return ::google::protobuf::internal::NameOfEnum(
    team_info_status_e_descriptor(), value);
}
inline bool team_info_status_e_Parse(
    const ::std::string& name, team_info_status_e* value) {
  return ::google::protobuf::internal::ParseNamedEnum<team_info_status_e>(
    team_info_status_e_descriptor(), name, value);
}
// ===================================================================

class member_info : public ::google::protobuf::Message {
 public:
  member_info();
  virtual ~member_info();

  member_info(const member_info& from);

  inline member_info& operator=(const member_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const member_info& default_instance();

  void Swap(member_info* other);

  // implements Message ----------------------------------------------

  member_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const member_info& from);
  void MergeFrom(const member_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1 [default = 0];
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required bool ready = 2 [default = false];
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 2;
  inline bool ready() const;
  inline void set_ready(bool value);

  // @@protoc_insertion_point(class_scope:client.member_info)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_ready();
  inline void clear_has_ready();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  bool ready_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static member_info* default_instance_;
};
// -------------------------------------------------------------------

class team_info : public ::google::protobuf::Message {
 public:
  team_info();
  virtual ~team_info();

  team_info(const team_info& from);

  inline team_info& operator=(const team_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_info& default_instance();

  void Swap(team_info* other);

  // implements Message ----------------------------------------------

  team_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_info& from);
  void MergeFrom(const team_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef team_info_status_e status_e;
  static const status_e normal = team_info_status_e_normal;
  static const status_e ready = team_info_status_e_ready;
  static inline bool status_e_IsValid(int value) {
    return team_info_status_e_IsValid(value);
  }
  static const status_e status_e_MIN =
    team_info_status_e_status_e_MIN;
  static const status_e status_e_MAX =
    team_info_status_e_status_e_MAX;
  static const int status_e_ARRAYSIZE =
    team_info_status_e_status_e_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  status_e_descriptor() {
    return team_info_status_e_descriptor();
  }
  static inline const ::std::string& status_e_Name(status_e value) {
    return team_info_status_e_Name(value);
  }
  static inline bool status_e_Parse(const ::std::string& name,
      status_e* value) {
    return team_info_status_e_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // required uint32 raid_id = 2;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 2;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // required uint32 captain = 3;
  inline bool has_captain() const;
  inline void clear_captain();
  static const int kCaptainFieldNumber = 3;
  inline ::google::protobuf::uint32 captain() const;
  inline void set_captain(::google::protobuf::uint32 value);

  // repeated .client.member_info member = 4;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 4;
  inline const ::client::member_info& member(int index) const;
  inline ::client::member_info* mutable_member(int index);
  inline ::client::member_info* add_member();
  inline const ::google::protobuf::RepeatedPtrField< ::client::member_info >&
      member() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::member_info >*
      mutable_member();

  // required .client.team_info.status_e status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::client::team_info_status_e status() const;
  inline void set_status(::client::team_info_status_e value);

  // @@protoc_insertion_point(class_scope:client.team_info)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_captain();
  inline void clear_has_captain();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::RepeatedPtrField< ::client::member_info > member_;
  ::google::protobuf::uint32 captain_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static team_info* default_instance_;
};
// -------------------------------------------------------------------

class team_notify : public ::google::protobuf::Message {
 public:
  team_notify();
  virtual ~team_notify();

  team_notify(const team_notify& from);

  inline team_notify& operator=(const team_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_notify& default_instance();

  void Swap(team_notify* other);

  // implements Message ----------------------------------------------

  team_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_notify& from);
  void MergeFrom(const team_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.team_notify)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static team_notify* default_instance_;
};
// -------------------------------------------------------------------

class team_member : public ::google::protobuf::Message {
 public:
  team_member();
  virtual ~team_member();

  team_member(const team_member& from);

  inline team_member& operator=(const team_member& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_member& default_instance();

  void Swap(team_member* other);

  // implements Message ----------------------------------------------

  team_member* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_member& from);
  void MergeFrom(const team_member& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // required uint32 power = 5;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 5;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // required bool captain = 6;
  inline bool has_captain() const;
  inline void clear_captain();
  static const int kCaptainFieldNumber = 6;
  inline bool captain() const;
  inline void set_captain(bool value);

  // required bool ready = 7;
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 7;
  inline bool ready() const;
  inline void set_ready(bool value);

  // optional uint32 vip_lv = 8;
  inline bool has_vip_lv() const;
  inline void clear_vip_lv();
  static const int kVipLvFieldNumber = 8;
  inline ::google::protobuf::uint32 vip_lv() const;
  inline void set_vip_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.team_member)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_captain();
  inline void clear_has_captain();
  inline void set_has_ready();
  inline void clear_has_ready();
  inline void set_has_vip_lv();
  inline void clear_has_vip_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 level_;
  ::std::string* name_;
  ::google::protobuf::uint32 profession_;
  ::google::protobuf::uint32 power_;
  bool captain_;
  bool ready_;
  ::google::protobuf::uint32 vip_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static team_member* default_instance_;
};
// -------------------------------------------------------------------

class team_info_rsp : public ::google::protobuf::Message {
 public:
  team_info_rsp();
  virtual ~team_info_rsp();

  team_info_rsp(const team_info_rsp& from);

  inline team_info_rsp& operator=(const team_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_info_rsp& default_instance();

  void Swap(team_info_rsp* other);

  // implements Message ----------------------------------------------

  team_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_info_rsp& from);
  void MergeFrom(const team_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // required uint32 raid_id = 2;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 2;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // repeated .client.team_member tm = 3;
  inline int tm_size() const;
  inline void clear_tm();
  static const int kTmFieldNumber = 3;
  inline const ::client::team_member& tm(int index) const;
  inline ::client::team_member* mutable_tm(int index);
  inline ::client::team_member* add_tm();
  inline const ::google::protobuf::RepeatedPtrField< ::client::team_member >&
      tm() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::team_member >*
      mutable_tm();

  // @@protoc_insertion_point(class_scope:client.team_info_rsp)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_raid_id();
  inline void clear_has_raid_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::RepeatedPtrField< ::client::team_member > tm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static team_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class join_team_req : public ::google::protobuf::Message {
 public:
  join_team_req();
  virtual ~join_team_req();

  join_team_req(const join_team_req& from);

  inline join_team_req& operator=(const join_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const join_team_req& default_instance();

  void Swap(join_team_req* other);

  // implements Message ----------------------------------------------

  join_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const join_team_req& from);
  void MergeFrom(const join_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.join_team_req)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 team_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static join_team_req* default_instance_;
};
// -------------------------------------------------------------------

class join_team_rsp : public ::google::protobuf::Message {
 public:
  join_team_rsp();
  virtual ~join_team_rsp();

  join_team_rsp(const join_team_rsp& from);

  inline join_team_rsp& operator=(const join_team_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const join_team_rsp& default_instance();

  void Swap(join_team_rsp* other);

  // implements Message ----------------------------------------------

  join_team_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const join_team_rsp& from);
  void MergeFrom(const join_team_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 raid_id = 2;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 2;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.join_team_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_raid_id();
  inline void clear_has_raid_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 raid_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static join_team_rsp* default_instance_;
};
// -------------------------------------------------------------------

class fire_member_req : public ::google::protobuf::Message {
 public:
  fire_member_req();
  virtual ~fire_member_req();

  fire_member_req(const fire_member_req& from);

  inline fire_member_req& operator=(const fire_member_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fire_member_req& default_instance();

  void Swap(fire_member_req* other);

  // implements Message ----------------------------------------------

  fire_member_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fire_member_req& from);
  void MergeFrom(const fire_member_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.fire_member_req)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static fire_member_req* default_instance_;
};
// -------------------------------------------------------------------

class fire_member_rsp : public ::google::protobuf::Message {
 public:
  fire_member_rsp();
  virtual ~fire_member_rsp();

  fire_member_rsp(const fire_member_rsp& from);

  inline fire_member_rsp& operator=(const fire_member_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fire_member_rsp& default_instance();

  void Swap(fire_member_rsp* other);

  // implements Message ----------------------------------------------

  fire_member_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fire_member_rsp& from);
  void MergeFrom(const fire_member_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.fire_member_rsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static fire_member_rsp* default_instance_;
};
// -------------------------------------------------------------------

class create_team_req : public ::google::protobuf::Message {
 public:
  create_team_req();
  virtual ~create_team_req();

  create_team_req(const create_team_req& from);

  inline create_team_req& operator=(const create_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_team_req& default_instance();

  void Swap(create_team_req* other);

  // implements Message ----------------------------------------------

  create_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const create_team_req& from);
  void MergeFrom(const create_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 raid_id = 1;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 1;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.create_team_req)
 private:
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 raid_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static create_team_req* default_instance_;
};
// -------------------------------------------------------------------

class create_team_rsp : public ::google::protobuf::Message {
 public:
  create_team_rsp();
  virtual ~create_team_rsp();

  create_team_rsp(const create_team_rsp& from);

  inline create_team_rsp& operator=(const create_team_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_team_rsp& default_instance();

  void Swap(create_team_rsp* other);

  // implements Message ----------------------------------------------

  create_team_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const create_team_rsp& from);
  void MergeFrom(const create_team_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.create_team_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static create_team_rsp* default_instance_;
};
// -------------------------------------------------------------------

class team_ready_req : public ::google::protobuf::Message {
 public:
  team_ready_req();
  virtual ~team_ready_req();

  team_ready_req(const team_ready_req& from);

  inline team_ready_req& operator=(const team_ready_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_ready_req& default_instance();

  void Swap(team_ready_req* other);

  // implements Message ----------------------------------------------

  team_ready_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_ready_req& from);
  void MergeFrom(const team_ready_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline bool status() const;
  inline void set_status(bool value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.team_ready_req)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static team_ready_req* default_instance_;
};
// -------------------------------------------------------------------

class team_enter_raid_req : public ::google::protobuf::Message {
 public:
  team_enter_raid_req();
  virtual ~team_enter_raid_req();

  team_enter_raid_req(const team_enter_raid_req& from);

  inline team_enter_raid_req& operator=(const team_enter_raid_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_enter_raid_req& default_instance();

  void Swap(team_enter_raid_req* other);

  // implements Message ----------------------------------------------

  team_enter_raid_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_enter_raid_req& from);
  void MergeFrom(const team_enter_raid_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.team_enter_raid_req)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 team_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static team_enter_raid_req* default_instance_;
};
// -------------------------------------------------------------------

class team_enter_prepare_req : public ::google::protobuf::Message {
 public:
  team_enter_prepare_req();
  virtual ~team_enter_prepare_req();

  team_enter_prepare_req(const team_enter_prepare_req& from);

  inline team_enter_prepare_req& operator=(const team_enter_prepare_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_enter_prepare_req& default_instance();

  void Swap(team_enter_prepare_req* other);

  // implements Message ----------------------------------------------

  team_enter_prepare_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_enter_prepare_req& from);
  void MergeFrom(const team_enter_prepare_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.team_enter_prepare_req)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static team_enter_prepare_req* default_instance_;
};
// -------------------------------------------------------------------

class team_enter_prepare_rsp : public ::google::protobuf::Message {
 public:
  team_enter_prepare_rsp();
  virtual ~team_enter_prepare_rsp();

  team_enter_prepare_rsp(const team_enter_prepare_rsp& from);

  inline team_enter_prepare_rsp& operator=(const team_enter_prepare_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_enter_prepare_rsp& default_instance();

  void Swap(team_enter_prepare_rsp* other);

  // implements Message ----------------------------------------------

  team_enter_prepare_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_enter_prepare_rsp& from);
  void MergeFrom(const team_enter_prepare_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.team_enter_prepare_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static team_enter_prepare_rsp* default_instance_;
};
// -------------------------------------------------------------------

class team_enter_raid_rsp : public ::google::protobuf::Message {
 public:
  team_enter_raid_rsp();
  virtual ~team_enter_raid_rsp();

  team_enter_raid_rsp(const team_enter_raid_rsp& from);

  inline team_enter_raid_rsp& operator=(const team_enter_raid_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_enter_raid_rsp& default_instance();

  void Swap(team_enter_raid_rsp* other);

  // implements Message ----------------------------------------------

  team_enter_raid_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_enter_raid_rsp& from);
  void MergeFrom(const team_enter_raid_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.team_enter_raid_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static team_enter_raid_rsp* default_instance_;
};
// -------------------------------------------------------------------

class team_add_robot : public ::google::protobuf::Message {
 public:
  team_add_robot();
  virtual ~team_add_robot();

  team_add_robot(const team_add_robot& from);

  inline team_add_robot& operator=(const team_add_robot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_add_robot& default_instance();

  void Swap(team_add_robot* other);

  // implements Message ----------------------------------------------

  team_add_robot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_add_robot& from);
  void MergeFrom(const team_add_robot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // repeated uint32 robot = 2;
  inline int robot_size() const;
  inline void clear_robot();
  static const int kRobotFieldNumber = 2;
  inline ::google::protobuf::uint32 robot(int index) const;
  inline void set_robot(int index, ::google::protobuf::uint32 value);
  inline void add_robot(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      robot() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_robot();

  // @@protoc_insertion_point(class_scope:client.team_add_robot)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > robot_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static team_add_robot* default_instance_;
};
// -------------------------------------------------------------------

class team_kill_statistics_rsp : public ::google::protobuf::Message {
 public:
  team_kill_statistics_rsp();
  virtual ~team_kill_statistics_rsp();

  team_kill_statistics_rsp(const team_kill_statistics_rsp& from);

  inline team_kill_statistics_rsp& operator=(const team_kill_statistics_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_kill_statistics_rsp& default_instance();

  void Swap(team_kill_statistics_rsp* other);

  // implements Message ----------------------------------------------

  team_kill_statistics_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_kill_statistics_rsp& from);
  void MergeFrom(const team_kill_statistics_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // required uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.team_kill_statistics_rsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static team_kill_statistics_rsp* default_instance_;
};
// -------------------------------------------------------------------

class team_join_check : public ::google::protobuf::Message {
 public:
  team_join_check();
  virtual ~team_join_check();

  team_join_check(const team_join_check& from);

  inline team_join_check& operator=(const team_join_check& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_join_check& default_instance();

  void Swap(team_join_check* other);

  // implements Message ----------------------------------------------

  team_join_check* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_join_check& from);
  void MergeFrom(const team_join_check& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 raid_id = 2;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 2;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // required uint32 team_id = 3;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 3;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.team_join_check)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 team_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_2eproto();

  void InitAsDefaultInstance();
  static team_join_check* default_instance_;
};
// ===================================================================


// ===================================================================

// member_info

// required uint32 role_id = 1 [default = 0];
inline bool member_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void member_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void member_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void member_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 member_info::role_id() const {
  return role_id_;
}
inline void member_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required bool ready = 2 [default = false];
inline bool member_info::has_ready() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void member_info::set_has_ready() {
  _has_bits_[0] |= 0x00000002u;
}
inline void member_info::clear_has_ready() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void member_info::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
inline bool member_info::ready() const {
  return ready_;
}
inline void member_info::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
}

// -------------------------------------------------------------------

// team_info

// required uint32 team_id = 1;
inline bool team_info::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_info::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_info::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_info::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 team_info::team_id() const {
  return team_id_;
}
inline void team_info::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// required uint32 raid_id = 2;
inline bool team_info::has_raid_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_info::set_has_raid_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_info::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_info::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 team_info::raid_id() const {
  return raid_id_;
}
inline void team_info::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 captain = 3;
inline bool team_info::has_captain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void team_info::set_has_captain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void team_info::clear_has_captain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void team_info::clear_captain() {
  captain_ = 0u;
  clear_has_captain();
}
inline ::google::protobuf::uint32 team_info::captain() const {
  return captain_;
}
inline void team_info::set_captain(::google::protobuf::uint32 value) {
  set_has_captain();
  captain_ = value;
}

// repeated .client.member_info member = 4;
inline int team_info::member_size() const {
  return member_.size();
}
inline void team_info::clear_member() {
  member_.Clear();
}
inline const ::client::member_info& team_info::member(int index) const {
  return member_.Get(index);
}
inline ::client::member_info* team_info::mutable_member(int index) {
  return member_.Mutable(index);
}
inline ::client::member_info* team_info::add_member() {
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::member_info >&
team_info::member() const {
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::member_info >*
team_info::mutable_member() {
  return &member_;
}

// required .client.team_info.status_e status = 5;
inline bool team_info::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void team_info::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void team_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void team_info::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::client::team_info_status_e team_info::status() const {
  return static_cast< ::client::team_info_status_e >(status_);
}
inline void team_info::set_status(::client::team_info_status_e value) {
  assert(::client::team_info_status_e_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// team_notify

// required uint32 role_id = 1;
inline bool team_notify::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_notify::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_notify::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_notify::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 team_notify::role_id() const {
  return role_id_;
}
inline void team_notify::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 type = 2;
inline bool team_notify::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_notify::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_notify::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_notify::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 team_notify::type() const {
  return type_;
}
inline void team_notify::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// team_member

// required uint32 role_id = 1;
inline bool team_member::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_member::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_member::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_member::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 team_member::role_id() const {
  return role_id_;
}
inline void team_member::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 level = 2;
inline bool team_member::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_member::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_member::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_member::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 team_member::level() const {
  return level_;
}
inline void team_member::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required string name = 3;
inline bool team_member::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void team_member::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void team_member::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void team_member::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& team_member::name() const {
  return *name_;
}
inline void team_member::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void team_member::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void team_member::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* team_member::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* team_member::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void team_member::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 profession = 4;
inline bool team_member::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void team_member::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void team_member::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void team_member::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 team_member::profession() const {
  return profession_;
}
inline void team_member::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
}

// required uint32 power = 5;
inline bool team_member::has_power() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void team_member::set_has_power() {
  _has_bits_[0] |= 0x00000010u;
}
inline void team_member::clear_has_power() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void team_member::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 team_member::power() const {
  return power_;
}
inline void team_member::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// required bool captain = 6;
inline bool team_member::has_captain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void team_member::set_has_captain() {
  _has_bits_[0] |= 0x00000020u;
}
inline void team_member::clear_has_captain() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void team_member::clear_captain() {
  captain_ = false;
  clear_has_captain();
}
inline bool team_member::captain() const {
  return captain_;
}
inline void team_member::set_captain(bool value) {
  set_has_captain();
  captain_ = value;
}

// required bool ready = 7;
inline bool team_member::has_ready() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void team_member::set_has_ready() {
  _has_bits_[0] |= 0x00000040u;
}
inline void team_member::clear_has_ready() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void team_member::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
inline bool team_member::ready() const {
  return ready_;
}
inline void team_member::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
}

// optional uint32 vip_lv = 8;
inline bool team_member::has_vip_lv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void team_member::set_has_vip_lv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void team_member::clear_has_vip_lv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void team_member::clear_vip_lv() {
  vip_lv_ = 0u;
  clear_has_vip_lv();
}
inline ::google::protobuf::uint32 team_member::vip_lv() const {
  return vip_lv_;
}
inline void team_member::set_vip_lv(::google::protobuf::uint32 value) {
  set_has_vip_lv();
  vip_lv_ = value;
}

// -------------------------------------------------------------------

// team_info_rsp

// required uint32 team_id = 1;
inline bool team_info_rsp::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_info_rsp::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_info_rsp::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_info_rsp::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 team_info_rsp::team_id() const {
  return team_id_;
}
inline void team_info_rsp::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// required uint32 raid_id = 2;
inline bool team_info_rsp::has_raid_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_info_rsp::set_has_raid_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_info_rsp::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_info_rsp::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 team_info_rsp::raid_id() const {
  return raid_id_;
}
inline void team_info_rsp::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// repeated .client.team_member tm = 3;
inline int team_info_rsp::tm_size() const {
  return tm_.size();
}
inline void team_info_rsp::clear_tm() {
  tm_.Clear();
}
inline const ::client::team_member& team_info_rsp::tm(int index) const {
  return tm_.Get(index);
}
inline ::client::team_member* team_info_rsp::mutable_tm(int index) {
  return tm_.Mutable(index);
}
inline ::client::team_member* team_info_rsp::add_tm() {
  return tm_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::team_member >&
team_info_rsp::tm() const {
  return tm_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::team_member >*
team_info_rsp::mutable_tm() {
  return &tm_;
}

// -------------------------------------------------------------------

// join_team_req

// required uint32 team_id = 1;
inline bool join_team_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void join_team_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void join_team_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void join_team_req::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 join_team_req::team_id() const {
  return team_id_;
}
inline void join_team_req::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool join_team_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void join_team_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void join_team_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void join_team_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& join_team_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* join_team_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* join_team_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void join_team_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// join_team_rsp

// required uint32 ret = 1;
inline bool join_team_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void join_team_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void join_team_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void join_team_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 join_team_rsp::ret() const {
  return ret_;
}
inline void join_team_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 raid_id = 2;
inline bool join_team_rsp::has_raid_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void join_team_rsp::set_has_raid_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void join_team_rsp::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void join_team_rsp::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 join_team_rsp::raid_id() const {
  return raid_id_;
}
inline void join_team_rsp::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// -------------------------------------------------------------------

// fire_member_req

// required uint32 role_id = 1;
inline bool fire_member_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fire_member_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fire_member_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fire_member_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 fire_member_req::role_id() const {
  return role_id_;
}
inline void fire_member_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool fire_member_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fire_member_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fire_member_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fire_member_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& fire_member_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* fire_member_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* fire_member_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void fire_member_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// fire_member_rsp

// required uint32 type = 1;
inline bool fire_member_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fire_member_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fire_member_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fire_member_rsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 fire_member_rsp::type() const {
  return type_;
}
inline void fire_member_rsp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// create_team_req

// required uint32 raid_id = 1;
inline bool create_team_req::has_raid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_team_req::set_has_raid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_team_req::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_team_req::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 create_team_req::raid_id() const {
  return raid_id_;
}
inline void create_team_req::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool create_team_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void create_team_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void create_team_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void create_team_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& create_team_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* create_team_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* create_team_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void create_team_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// create_team_rsp

// required uint32 ret = 1;
inline bool create_team_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_team_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_team_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_team_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 create_team_rsp::ret() const {
  return ret_;
}
inline void create_team_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// team_ready_req

// required bool status = 1;
inline bool team_ready_req::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_ready_req::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_ready_req::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_ready_req::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool team_ready_req::status() const {
  return status_;
}
inline void team_ready_req::set_status(bool value) {
  set_has_status();
  status_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool team_ready_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_ready_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_ready_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_ready_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& team_ready_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* team_ready_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* team_ready_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void team_ready_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// team_enter_raid_req

// required uint32 team_id = 1;
inline bool team_enter_raid_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_enter_raid_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_enter_raid_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_enter_raid_req::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 team_enter_raid_req::team_id() const {
  return team_id_;
}
inline void team_enter_raid_req::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool team_enter_raid_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_enter_raid_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_enter_raid_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_enter_raid_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& team_enter_raid_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* team_enter_raid_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* team_enter_raid_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void team_enter_raid_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// team_enter_prepare_req

// required uint32 time = 1;
inline bool team_enter_prepare_req::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_enter_prepare_req::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_enter_prepare_req::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_enter_prepare_req::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 team_enter_prepare_req::time() const {
  return time_;
}
inline void team_enter_prepare_req::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool team_enter_prepare_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_enter_prepare_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_enter_prepare_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_enter_prepare_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& team_enter_prepare_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* team_enter_prepare_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* team_enter_prepare_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void team_enter_prepare_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// team_enter_prepare_rsp

// required uint32 ret = 1;
inline bool team_enter_prepare_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_enter_prepare_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_enter_prepare_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_enter_prepare_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 team_enter_prepare_rsp::ret() const {
  return ret_;
}
inline void team_enter_prepare_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// team_enter_raid_rsp

// required uint32 ret = 1;
inline bool team_enter_raid_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_enter_raid_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_enter_raid_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_enter_raid_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 team_enter_raid_rsp::ret() const {
  return ret_;
}
inline void team_enter_raid_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// team_add_robot

// required uint32 role_id = 1;
inline bool team_add_robot::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_add_robot::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_add_robot::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_add_robot::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 team_add_robot::role_id() const {
  return role_id_;
}
inline void team_add_robot::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// repeated uint32 robot = 2;
inline int team_add_robot::robot_size() const {
  return robot_.size();
}
inline void team_add_robot::clear_robot() {
  robot_.Clear();
}
inline ::google::protobuf::uint32 team_add_robot::robot(int index) const {
  return robot_.Get(index);
}
inline void team_add_robot::set_robot(int index, ::google::protobuf::uint32 value) {
  robot_.Set(index, value);
}
inline void team_add_robot::add_robot(::google::protobuf::uint32 value) {
  robot_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
team_add_robot::robot() const {
  return robot_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
team_add_robot::mutable_robot() {
  return &robot_;
}

// -------------------------------------------------------------------

// team_kill_statistics_rsp

// required uint32 role_id = 1;
inline bool team_kill_statistics_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_kill_statistics_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_kill_statistics_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_kill_statistics_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 team_kill_statistics_rsp::role_id() const {
  return role_id_;
}
inline void team_kill_statistics_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required string role_name = 2;
inline bool team_kill_statistics_rsp::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_kill_statistics_rsp::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_kill_statistics_rsp::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_kill_statistics_rsp::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& team_kill_statistics_rsp::role_name() const {
  return *role_name_;
}
inline void team_kill_statistics_rsp::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void team_kill_statistics_rsp::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void team_kill_statistics_rsp::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* team_kill_statistics_rsp::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* team_kill_statistics_rsp::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void team_kill_statistics_rsp::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 num = 3;
inline bool team_kill_statistics_rsp::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void team_kill_statistics_rsp::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void team_kill_statistics_rsp::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void team_kill_statistics_rsp::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 team_kill_statistics_rsp::num() const {
  return num_;
}
inline void team_kill_statistics_rsp::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// team_join_check

// required uint32 role_id = 1;
inline bool team_join_check::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_join_check::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_join_check::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_join_check::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 team_join_check::role_id() const {
  return role_id_;
}
inline void team_join_check::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 raid_id = 2;
inline bool team_join_check::has_raid_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_join_check::set_has_raid_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_join_check::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_join_check::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 team_join_check::raid_id() const {
  return raid_id_;
}
inline void team_join_check::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 team_id = 3;
inline bool team_join_check::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void team_join_check::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void team_join_check::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void team_join_check::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 team_join_check::team_id() const {
  return team_id_;
}
inline void team_join_check::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::team_info_status_e>() {
  return ::client::team_info_status_e_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eteam_2eproto__INCLUDED
