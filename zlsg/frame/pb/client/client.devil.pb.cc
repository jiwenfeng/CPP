// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.devil.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.devil.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* devil_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  devil_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* devil_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  devil_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* devil_raid_detail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  devil_raid_detail_reflection_ = NULL;
const ::google::protobuf::Descriptor* devil_stage_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  devil_stage_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* devil_award_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  devil_award_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* devil_award_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  devil_award_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* devil_stage_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  devil_stage_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* devil_raid_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  devil_raid_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* devil_center_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  devil_center_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* devil_fight_over_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  devil_fight_over_reflection_ = NULL;
const ::google::protobuf::Descriptor* devil_fight_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  devil_fight_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2edevil_2eproto() {
  protobuf_AddDesc_client_2edevil_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.devil.proto");
  GOOGLE_CHECK(file != NULL);
  devil_info_req_descriptor_ = file->message_type(0);
  static const int devil_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_info_req, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_info_req, svr_head_),
  };
  devil_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      devil_info_req_descriptor_,
      devil_info_req::default_instance_,
      devil_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(devil_info_req));
  devil_info_rsp_descriptor_ = file->message_type(1);
  static const int devil_info_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_info_rsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_info_rsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_info_rsp, tick_),
  };
  devil_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      devil_info_rsp_descriptor_,
      devil_info_rsp::default_instance_,
      devil_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(devil_info_rsp));
  devil_raid_detail_descriptor_ = file->message_type(2);
  static const int devil_raid_detail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_detail, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_detail, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_detail, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_detail, champion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_detail, reward_type_),
  };
  devil_raid_detail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      devil_raid_detail_descriptor_,
      devil_raid_detail::default_instance_,
      devil_raid_detail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_detail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_detail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(devil_raid_detail));
  devil_stage_list_descriptor_ = file->message_type(3);
  static const int devil_stage_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_stage_list, drd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_stage_list, dsi_),
  };
  devil_stage_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      devil_stage_list_descriptor_,
      devil_stage_list::default_instance_,
      devil_stage_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_stage_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_stage_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(devil_stage_list));
  devil_award_req_descriptor_ = file->message_type(4);
  static const int devil_award_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_award_req, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_award_req, svr_head_),
  };
  devil_award_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      devil_award_req_descriptor_,
      devil_award_req::default_instance_,
      devil_award_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_award_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_award_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(devil_award_req));
  devil_award_rsp_descriptor_ = file->message_type(5);
  static const int devil_award_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_award_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_award_rsp, id_),
  };
  devil_award_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      devil_award_rsp_descriptor_,
      devil_award_rsp::default_instance_,
      devil_award_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_award_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_award_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(devil_award_rsp));
  devil_stage_info_descriptor_ = file->message_type(6);
  static const int devil_stage_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_stage_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_stage_info, state_),
  };
  devil_stage_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      devil_stage_info_descriptor_,
      devil_stage_info::default_instance_,
      devil_stage_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_stage_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_stage_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(devil_stage_info));
  devil_raid_info_descriptor_ = file->message_type(7);
  static const int devil_raid_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_info, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_info, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_info, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_info, champion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_info, time_),
  };
  devil_raid_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      devil_raid_info_descriptor_,
      devil_raid_info::default_instance_,
      devil_raid_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_raid_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(devil_raid_info));
  devil_center_info_descriptor_ = file->message_type(8);
  static const int devil_center_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_center_info, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_center_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_center_info, tick_),
  };
  devil_center_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      devil_center_info_descriptor_,
      devil_center_info::default_instance_,
      devil_center_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_center_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_center_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(devil_center_info));
  devil_fight_over_descriptor_ = file->message_type(9);
  static const int devil_fight_over_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_over, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_over, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_over, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_over, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_over, champion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_over, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_over, failure_),
  };
  devil_fight_over_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      devil_fight_over_descriptor_,
      devil_fight_over::default_instance_,
      devil_fight_over_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_over, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_over, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(devil_fight_over));
  devil_fight_result_descriptor_ = file->message_type(10);
  static const int devil_fight_result_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_result, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_result, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_result, used_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_result, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_result, champion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_result, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_result, failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_result, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_result, tick_),
  };
  devil_fight_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      devil_fight_result_descriptor_,
      devil_fight_result::default_instance_,
      devil_fight_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(devil_fight_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(devil_fight_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2edevil_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    devil_info_req_descriptor_, &devil_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    devil_info_rsp_descriptor_, &devil_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    devil_raid_detail_descriptor_, &devil_raid_detail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    devil_stage_list_descriptor_, &devil_stage_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    devil_award_req_descriptor_, &devil_award_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    devil_award_rsp_descriptor_, &devil_award_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    devil_stage_info_descriptor_, &devil_stage_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    devil_raid_info_descriptor_, &devil_raid_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    devil_center_info_descriptor_, &devil_center_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    devil_fight_over_descriptor_, &devil_fight_over::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    devil_fight_result_descriptor_, &devil_fight_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2edevil_2eproto() {
  delete devil_info_req::default_instance_;
  delete devil_info_req_reflection_;
  delete devil_info_rsp::default_instance_;
  delete devil_info_rsp_reflection_;
  delete devil_raid_detail::default_instance_;
  delete devil_raid_detail_reflection_;
  delete devil_stage_list::default_instance_;
  delete devil_stage_list_reflection_;
  delete devil_award_req::default_instance_;
  delete devil_award_req_reflection_;
  delete devil_award_rsp::default_instance_;
  delete devil_award_rsp_reflection_;
  delete devil_stage_info::default_instance_;
  delete devil_stage_info_reflection_;
  delete devil_raid_info::default_instance_;
  delete devil_raid_info_reflection_;
  delete devil_center_info::default_instance_;
  delete devil_center_info_reflection_;
  delete devil_fight_over::default_instance_;
  delete devil_fight_over_reflection_;
  delete devil_fight_result::default_instance_;
  delete devil_fight_result_reflection_;
}

void protobuf_AddDesc_client_2edevil_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2eraid_5foperate_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022client.devil.proto\022\006client\032\021client.com"
    "m.proto\032\031client.raid_operate.proto\"D\n\016de"
    "vil_info_req\022\n\n\002id\030\001 \002(\r\022&\n\010svr_head\030\350\007 "
    "\001(\0132\023.client.server_head\"8\n\016devil_info_r"
    "sp\022\n\n\002id\030\001 \002(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004tick\030\003 \001"
    "(\r\"g\n\021devil_raid_detail\022\017\n\007raid_id\030\001 \002(\r"
    "\022\014\n\004star\030\002 \002(\r\022\014\n\004tick\030\003 \002(\r\022\020\n\010champion"
    "\030\004 \002(\r\022\023\n\013reward_type\030\005 \002(\r\"a\n\020devil_sta"
    "ge_list\022&\n\003drd\030\001 \003(\0132\031.client.devil_raid"
    "_detail\022%\n\003dsi\030\002 \003(\0132\030.client.devil_stag"
    "e_info\"E\n\017devil_award_req\022\n\n\002id\030\001 \002(\r\022&\n"
    "\010svr_head\030\350\007 \001(\0132\023.client.server_head\"*\n"
    "\017devil_award_rsp\022\013\n\003ret\030\001 \002(\r\022\n\n\002id\030\002 \002("
    "\r\"-\n\020devil_stage_info\022\n\n\002id\030\001 \002(\r\022\r\n\005sta"
    "te\030\002 \002(\r\"^\n\017devil_raid_info\022\017\n\007raid_id\030\001"
    " \002(\r\022\014\n\004star\030\002 \002(\r\022\014\n\004tick\030\003 \002(\r\022\020\n\010cham"
    "pion\030\004 \002(\r\022\014\n\004time\030\005 \002(\r\"C\n\021devil_center"
    "_info\022\017\n\007raid_id\030\001 \002(\r\022\017\n\007role_id\030\002 \002(\r\022"
    "\014\n\004tick\030\003 \002(\r\"\272\001\n\020devil_fight_over\022\017\n\007ro"
    "le_id\030\001 \002(\r\022\017\n\007raid_id\030\002 \002(\r\022\014\n\004tick\030\003 \002"
    "(\r\022\014\n\004star\030\004 \002(\r\022\020\n\010champion\030\005 \002(\010\022*\n\007su"
    "ccess\030\006 \001(\0132\031.client.raid_success_info\022*"
    "\n\007failure\030\007 \001(\0132\031.client.raid_failure_in"
    "fo\"\342\001\n\022devil_fight_result\022\017\n\007role_id\030\001 \002"
    "(\r\022\017\n\007raid_id\030\002 \002(\r\022\021\n\tused_tick\030\003 \002(\r\022\014"
    "\n\004star\030\004 \002(\r\022\020\n\010champion\030\005 \002(\r\022*\n\007succes"
    "s\030\006 \001(\0132\031.client.raid_success_info\022*\n\007fa"
    "ilure\030\007 \001(\0132\031.client.raid_failure_info\022\021"
    "\n\trole_name\030\010 \001(\t\022\014\n\004tick\030\t \001(\r", 1151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.devil.proto", &protobuf_RegisterTypes);
  devil_info_req::default_instance_ = new devil_info_req();
  devil_info_rsp::default_instance_ = new devil_info_rsp();
  devil_raid_detail::default_instance_ = new devil_raid_detail();
  devil_stage_list::default_instance_ = new devil_stage_list();
  devil_award_req::default_instance_ = new devil_award_req();
  devil_award_rsp::default_instance_ = new devil_award_rsp();
  devil_stage_info::default_instance_ = new devil_stage_info();
  devil_raid_info::default_instance_ = new devil_raid_info();
  devil_center_info::default_instance_ = new devil_center_info();
  devil_fight_over::default_instance_ = new devil_fight_over();
  devil_fight_result::default_instance_ = new devil_fight_result();
  devil_info_req::default_instance_->InitAsDefaultInstance();
  devil_info_rsp::default_instance_->InitAsDefaultInstance();
  devil_raid_detail::default_instance_->InitAsDefaultInstance();
  devil_stage_list::default_instance_->InitAsDefaultInstance();
  devil_award_req::default_instance_->InitAsDefaultInstance();
  devil_award_rsp::default_instance_->InitAsDefaultInstance();
  devil_stage_info::default_instance_->InitAsDefaultInstance();
  devil_raid_info::default_instance_->InitAsDefaultInstance();
  devil_center_info::default_instance_->InitAsDefaultInstance();
  devil_fight_over::default_instance_->InitAsDefaultInstance();
  devil_fight_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2edevil_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2edevil_2eproto {
  StaticDescriptorInitializer_client_2edevil_2eproto() {
    protobuf_AddDesc_client_2edevil_2eproto();
  }
} static_descriptor_initializer_client_2edevil_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int devil_info_req::kIdFieldNumber;
const int devil_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

devil_info_req::devil_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void devil_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

devil_info_req::devil_info_req(const devil_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void devil_info_req::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

devil_info_req::~devil_info_req() {
  SharedDtor();
}

void devil_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void devil_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devil_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return devil_info_req_descriptor_;
}

const devil_info_req& devil_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2edevil_2eproto();
  return *default_instance_;
}

devil_info_req* devil_info_req::default_instance_ = NULL;

devil_info_req* devil_info_req::New() const {
  return new devil_info_req;
}

void devil_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool devil_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void devil_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* devil_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int devil_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devil_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const devil_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const devil_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void devil_info_req::MergeFrom(const devil_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void devil_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devil_info_req::CopyFrom(const devil_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devil_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void devil_info_req::Swap(devil_info_req* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata devil_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = devil_info_req_descriptor_;
  metadata.reflection = devil_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int devil_info_rsp::kIdFieldNumber;
const int devil_info_rsp::kNameFieldNumber;
const int devil_info_rsp::kTickFieldNumber;
#endif  // !_MSC_VER

devil_info_rsp::devil_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void devil_info_rsp::InitAsDefaultInstance() {
}

devil_info_rsp::devil_info_rsp(const devil_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void devil_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

devil_info_rsp::~devil_info_rsp() {
  SharedDtor();
}

void devil_info_rsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void devil_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devil_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return devil_info_rsp_descriptor_;
}

const devil_info_rsp& devil_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2edevil_2eproto();
  return *default_instance_;
}

devil_info_rsp* devil_info_rsp::default_instance_ = NULL;

devil_info_rsp* devil_info_rsp::New() const {
  return new devil_info_rsp;
}

void devil_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool devil_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // optional uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void devil_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* devil_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int devil_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devil_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const devil_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const devil_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void devil_info_rsp::MergeFrom(const devil_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void devil_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devil_info_rsp::CopyFrom(const devil_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devil_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void devil_info_rsp::Swap(devil_info_rsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata devil_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = devil_info_rsp_descriptor_;
  metadata.reflection = devil_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int devil_raid_detail::kRaidIdFieldNumber;
const int devil_raid_detail::kStarFieldNumber;
const int devil_raid_detail::kTickFieldNumber;
const int devil_raid_detail::kChampionFieldNumber;
const int devil_raid_detail::kRewardTypeFieldNumber;
#endif  // !_MSC_VER

devil_raid_detail::devil_raid_detail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void devil_raid_detail::InitAsDefaultInstance() {
}

devil_raid_detail::devil_raid_detail(const devil_raid_detail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void devil_raid_detail::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  star_ = 0u;
  tick_ = 0u;
  champion_ = 0u;
  reward_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

devil_raid_detail::~devil_raid_detail() {
  SharedDtor();
}

void devil_raid_detail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void devil_raid_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devil_raid_detail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return devil_raid_detail_descriptor_;
}

const devil_raid_detail& devil_raid_detail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2edevil_2eproto();
  return *default_instance_;
}

devil_raid_detail* devil_raid_detail::default_instance_ = NULL;

devil_raid_detail* devil_raid_detail::New() const {
  return new devil_raid_detail;
}

void devil_raid_detail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    star_ = 0u;
    tick_ = 0u;
    champion_ = 0u;
    reward_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool devil_raid_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // required uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_champion;
        break;
      }

      // required uint32 champion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_champion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &champion_)));
          set_has_champion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_type;
        break;
      }

      // required uint32 reward_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_type_)));
          set_has_reward_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void devil_raid_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }

  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  // required uint32 champion = 4;
  if (has_champion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->champion(), output);
  }

  // required uint32 reward_type = 5;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reward_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* devil_raid_detail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }

  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  // required uint32 champion = 4;
  if (has_champion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->champion(), target);
  }

  // required uint32 reward_type = 5;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reward_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int devil_raid_detail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // required uint32 champion = 4;
    if (has_champion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->champion());
    }

    // required uint32 reward_type = 5;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devil_raid_detail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const devil_raid_detail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const devil_raid_detail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void devil_raid_detail::MergeFrom(const devil_raid_detail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_champion()) {
      set_champion(from.champion());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void devil_raid_detail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devil_raid_detail::CopyFrom(const devil_raid_detail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devil_raid_detail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void devil_raid_detail::Swap(devil_raid_detail* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(star_, other->star_);
    std::swap(tick_, other->tick_);
    std::swap(champion_, other->champion_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata devil_raid_detail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = devil_raid_detail_descriptor_;
  metadata.reflection = devil_raid_detail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int devil_stage_list::kDrdFieldNumber;
const int devil_stage_list::kDsiFieldNumber;
#endif  // !_MSC_VER

devil_stage_list::devil_stage_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void devil_stage_list::InitAsDefaultInstance() {
}

devil_stage_list::devil_stage_list(const devil_stage_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void devil_stage_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

devil_stage_list::~devil_stage_list() {
  SharedDtor();
}

void devil_stage_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void devil_stage_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devil_stage_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return devil_stage_list_descriptor_;
}

const devil_stage_list& devil_stage_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2edevil_2eproto();
  return *default_instance_;
}

devil_stage_list* devil_stage_list::default_instance_ = NULL;

devil_stage_list* devil_stage_list::New() const {
  return new devil_stage_list;
}

void devil_stage_list::Clear() {
  drd_.Clear();
  dsi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool devil_stage_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.devil_raid_detail drd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_drd;
        if (input->ExpectTag(18)) goto parse_dsi;
        break;
      }

      // repeated .client.devil_stage_info dsi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dsi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dsi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void devil_stage_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.devil_raid_detail drd = 1;
  for (int i = 0; i < this->drd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drd(i), output);
  }

  // repeated .client.devil_stage_info dsi = 2;
  for (int i = 0; i < this->dsi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dsi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* devil_stage_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.devil_raid_detail drd = 1;
  for (int i = 0; i < this->drd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drd(i), target);
  }

  // repeated .client.devil_stage_info dsi = 2;
  for (int i = 0; i < this->dsi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dsi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int devil_stage_list::ByteSize() const {
  int total_size = 0;

  // repeated .client.devil_raid_detail drd = 1;
  total_size += 1 * this->drd_size();
  for (int i = 0; i < this->drd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drd(i));
  }

  // repeated .client.devil_stage_info dsi = 2;
  total_size += 1 * this->dsi_size();
  for (int i = 0; i < this->dsi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dsi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devil_stage_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const devil_stage_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const devil_stage_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void devil_stage_list::MergeFrom(const devil_stage_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  drd_.MergeFrom(from.drd_);
  dsi_.MergeFrom(from.dsi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void devil_stage_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devil_stage_list::CopyFrom(const devil_stage_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devil_stage_list::IsInitialized() const {

  for (int i = 0; i < drd_size(); i++) {
    if (!this->drd(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dsi_size(); i++) {
    if (!this->dsi(i).IsInitialized()) return false;
  }
  return true;
}

void devil_stage_list::Swap(devil_stage_list* other) {
  if (other != this) {
    drd_.Swap(&other->drd_);
    dsi_.Swap(&other->dsi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata devil_stage_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = devil_stage_list_descriptor_;
  metadata.reflection = devil_stage_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int devil_award_req::kIdFieldNumber;
const int devil_award_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

devil_award_req::devil_award_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void devil_award_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

devil_award_req::devil_award_req(const devil_award_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void devil_award_req::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

devil_award_req::~devil_award_req() {
  SharedDtor();
}

void devil_award_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void devil_award_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devil_award_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return devil_award_req_descriptor_;
}

const devil_award_req& devil_award_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2edevil_2eproto();
  return *default_instance_;
}

devil_award_req* devil_award_req::default_instance_ = NULL;

devil_award_req* devil_award_req::New() const {
  return new devil_award_req;
}

void devil_award_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool devil_award_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void devil_award_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* devil_award_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int devil_award_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devil_award_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const devil_award_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const devil_award_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void devil_award_req::MergeFrom(const devil_award_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void devil_award_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devil_award_req::CopyFrom(const devil_award_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devil_award_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void devil_award_req::Swap(devil_award_req* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata devil_award_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = devil_award_req_descriptor_;
  metadata.reflection = devil_award_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int devil_award_rsp::kRetFieldNumber;
const int devil_award_rsp::kIdFieldNumber;
#endif  // !_MSC_VER

devil_award_rsp::devil_award_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void devil_award_rsp::InitAsDefaultInstance() {
}

devil_award_rsp::devil_award_rsp(const devil_award_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void devil_award_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

devil_award_rsp::~devil_award_rsp() {
  SharedDtor();
}

void devil_award_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void devil_award_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devil_award_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return devil_award_rsp_descriptor_;
}

const devil_award_rsp& devil_award_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2edevil_2eproto();
  return *default_instance_;
}

devil_award_rsp* devil_award_rsp::default_instance_ = NULL;

devil_award_rsp* devil_award_rsp::New() const {
  return new devil_award_rsp;
}

void devil_award_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool devil_award_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void devil_award_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* devil_award_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int devil_award_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devil_award_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const devil_award_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const devil_award_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void devil_award_rsp::MergeFrom(const devil_award_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void devil_award_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devil_award_rsp::CopyFrom(const devil_award_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devil_award_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void devil_award_rsp::Swap(devil_award_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata devil_award_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = devil_award_rsp_descriptor_;
  metadata.reflection = devil_award_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int devil_stage_info::kIdFieldNumber;
const int devil_stage_info::kStateFieldNumber;
#endif  // !_MSC_VER

devil_stage_info::devil_stage_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void devil_stage_info::InitAsDefaultInstance() {
}

devil_stage_info::devil_stage_info(const devil_stage_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void devil_stage_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

devil_stage_info::~devil_stage_info() {
  SharedDtor();
}

void devil_stage_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void devil_stage_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devil_stage_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return devil_stage_info_descriptor_;
}

const devil_stage_info& devil_stage_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2edevil_2eproto();
  return *default_instance_;
}

devil_stage_info* devil_stage_info::default_instance_ = NULL;

devil_stage_info* devil_stage_info::New() const {
  return new devil_stage_info;
}

void devil_stage_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool devil_stage_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void devil_stage_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* devil_stage_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int devil_stage_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devil_stage_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const devil_stage_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const devil_stage_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void devil_stage_info::MergeFrom(const devil_stage_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void devil_stage_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devil_stage_info::CopyFrom(const devil_stage_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devil_stage_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void devil_stage_info::Swap(devil_stage_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata devil_stage_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = devil_stage_info_descriptor_;
  metadata.reflection = devil_stage_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int devil_raid_info::kRaidIdFieldNumber;
const int devil_raid_info::kStarFieldNumber;
const int devil_raid_info::kTickFieldNumber;
const int devil_raid_info::kChampionFieldNumber;
const int devil_raid_info::kTimeFieldNumber;
#endif  // !_MSC_VER

devil_raid_info::devil_raid_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void devil_raid_info::InitAsDefaultInstance() {
}

devil_raid_info::devil_raid_info(const devil_raid_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void devil_raid_info::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  star_ = 0u;
  tick_ = 0u;
  champion_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

devil_raid_info::~devil_raid_info() {
  SharedDtor();
}

void devil_raid_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void devil_raid_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devil_raid_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return devil_raid_info_descriptor_;
}

const devil_raid_info& devil_raid_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2edevil_2eproto();
  return *default_instance_;
}

devil_raid_info* devil_raid_info::default_instance_ = NULL;

devil_raid_info* devil_raid_info::New() const {
  return new devil_raid_info;
}

void devil_raid_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    star_ = 0u;
    tick_ = 0u;
    champion_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool devil_raid_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // required uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_champion;
        break;
      }

      // required uint32 champion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_champion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &champion_)));
          set_has_champion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // required uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void devil_raid_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }

  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  // required uint32 champion = 4;
  if (has_champion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->champion(), output);
  }

  // required uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* devil_raid_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }

  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  // required uint32 champion = 4;
  if (has_champion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->champion(), target);
  }

  // required uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int devil_raid_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // required uint32 champion = 4;
    if (has_champion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->champion());
    }

    // required uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devil_raid_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const devil_raid_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const devil_raid_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void devil_raid_info::MergeFrom(const devil_raid_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_champion()) {
      set_champion(from.champion());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void devil_raid_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devil_raid_info::CopyFrom(const devil_raid_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devil_raid_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void devil_raid_info::Swap(devil_raid_info* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(star_, other->star_);
    std::swap(tick_, other->tick_);
    std::swap(champion_, other->champion_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata devil_raid_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = devil_raid_info_descriptor_;
  metadata.reflection = devil_raid_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int devil_center_info::kRaidIdFieldNumber;
const int devil_center_info::kRoleIdFieldNumber;
const int devil_center_info::kTickFieldNumber;
#endif  // !_MSC_VER

devil_center_info::devil_center_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void devil_center_info::InitAsDefaultInstance() {
}

devil_center_info::devil_center_info(const devil_center_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void devil_center_info::SharedCtor() {
  _cached_size_ = 0;
  raid_id_ = 0u;
  role_id_ = 0u;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

devil_center_info::~devil_center_info() {
  SharedDtor();
}

void devil_center_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void devil_center_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devil_center_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return devil_center_info_descriptor_;
}

const devil_center_info& devil_center_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2edevil_2eproto();
  return *default_instance_;
}

devil_center_info* devil_center_info::default_instance_ = NULL;

devil_center_info* devil_center_info::New() const {
  return new devil_center_info;
}

void devil_center_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_id_ = 0u;
    role_id_ = 0u;
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool devil_center_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 raid_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // required uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void devil_center_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->raid_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* devil_center_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 raid_id = 1;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->raid_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int devil_center_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 raid_id = 1;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devil_center_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const devil_center_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const devil_center_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void devil_center_info::MergeFrom(const devil_center_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void devil_center_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devil_center_info::CopyFrom(const devil_center_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devil_center_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void devil_center_info::Swap(devil_center_info* other) {
  if (other != this) {
    std::swap(raid_id_, other->raid_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata devil_center_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = devil_center_info_descriptor_;
  metadata.reflection = devil_center_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int devil_fight_over::kRoleIdFieldNumber;
const int devil_fight_over::kRaidIdFieldNumber;
const int devil_fight_over::kTickFieldNumber;
const int devil_fight_over::kStarFieldNumber;
const int devil_fight_over::kChampionFieldNumber;
const int devil_fight_over::kSuccessFieldNumber;
const int devil_fight_over::kFailureFieldNumber;
#endif  // !_MSC_VER

devil_fight_over::devil_fight_over()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void devil_fight_over::InitAsDefaultInstance() {
  success_ = const_cast< ::client::raid_success_info*>(&::client::raid_success_info::default_instance());
  failure_ = const_cast< ::client::raid_failure_info*>(&::client::raid_failure_info::default_instance());
}

devil_fight_over::devil_fight_over(const devil_fight_over& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void devil_fight_over::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  raid_id_ = 0u;
  tick_ = 0u;
  star_ = 0u;
  champion_ = false;
  success_ = NULL;
  failure_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

devil_fight_over::~devil_fight_over() {
  SharedDtor();
}

void devil_fight_over::SharedDtor() {
  if (this != default_instance_) {
    delete success_;
    delete failure_;
  }
}

void devil_fight_over::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devil_fight_over::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return devil_fight_over_descriptor_;
}

const devil_fight_over& devil_fight_over::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2edevil_2eproto();
  return *default_instance_;
}

devil_fight_over* devil_fight_over::default_instance_ = NULL;

devil_fight_over* devil_fight_over::New() const {
  return new devil_fight_over;
}

void devil_fight_over::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    raid_id_ = 0u;
    tick_ = 0u;
    star_ = 0u;
    champion_ = false;
    if (has_success()) {
      if (success_ != NULL) success_->::client::raid_success_info::Clear();
    }
    if (has_failure()) {
      if (failure_ != NULL) failure_->::client::raid_failure_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool devil_fight_over::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick;
        break;
      }

      // required uint32 tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // required uint32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_champion;
        break;
      }

      // required bool champion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_champion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &champion_)));
          set_has_champion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_success;
        break;
      }

      // optional .client.raid_success_info success = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_success:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_failure;
        break;
      }

      // optional .client.raid_failure_info failure = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_failure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void devil_fight_over::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raid_id(), output);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick(), output);
  }

  // required uint32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->star(), output);
  }

  // required bool champion = 5;
  if (has_champion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->champion(), output);
  }

  // optional .client.raid_success_info success = 6;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->success(), output);
  }

  // optional .client.raid_failure_info failure = 7;
  if (has_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->failure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* devil_fight_over::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raid_id(), target);
  }

  // required uint32 tick = 3;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick(), target);
  }

  // required uint32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->star(), target);
  }

  // required bool champion = 5;
  if (has_champion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->champion(), target);
  }

  // optional .client.raid_success_info success = 6;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->success(), target);
  }

  // optional .client.raid_failure_info failure = 7;
  if (has_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->failure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int devil_fight_over::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 raid_id = 2;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 tick = 3;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // required uint32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required bool champion = 5;
    if (has_champion()) {
      total_size += 1 + 1;
    }

    // optional .client.raid_success_info success = 6;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->success());
    }

    // optional .client.raid_failure_info failure = 7;
    if (has_failure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->failure());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devil_fight_over::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const devil_fight_over* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const devil_fight_over*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void devil_fight_over::MergeFrom(const devil_fight_over& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_champion()) {
      set_champion(from.champion());
    }
    if (from.has_success()) {
      mutable_success()->::client::raid_success_info::MergeFrom(from.success());
    }
    if (from.has_failure()) {
      mutable_failure()->::client::raid_failure_info::MergeFrom(from.failure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void devil_fight_over::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devil_fight_over::CopyFrom(const devil_fight_over& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devil_fight_over::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_success()) {
    if (!this->success().IsInitialized()) return false;
  }
  return true;
}

void devil_fight_over::Swap(devil_fight_over* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(tick_, other->tick_);
    std::swap(star_, other->star_);
    std::swap(champion_, other->champion_);
    std::swap(success_, other->success_);
    std::swap(failure_, other->failure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata devil_fight_over::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = devil_fight_over_descriptor_;
  metadata.reflection = devil_fight_over_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int devil_fight_result::kRoleIdFieldNumber;
const int devil_fight_result::kRaidIdFieldNumber;
const int devil_fight_result::kUsedTickFieldNumber;
const int devil_fight_result::kStarFieldNumber;
const int devil_fight_result::kChampionFieldNumber;
const int devil_fight_result::kSuccessFieldNumber;
const int devil_fight_result::kFailureFieldNumber;
const int devil_fight_result::kRoleNameFieldNumber;
const int devil_fight_result::kTickFieldNumber;
#endif  // !_MSC_VER

devil_fight_result::devil_fight_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void devil_fight_result::InitAsDefaultInstance() {
  success_ = const_cast< ::client::raid_success_info*>(&::client::raid_success_info::default_instance());
  failure_ = const_cast< ::client::raid_failure_info*>(&::client::raid_failure_info::default_instance());
}

devil_fight_result::devil_fight_result(const devil_fight_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void devil_fight_result::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  raid_id_ = 0u;
  used_tick_ = 0u;
  star_ = 0u;
  champion_ = 0u;
  success_ = NULL;
  failure_ = NULL;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

devil_fight_result::~devil_fight_result() {
  SharedDtor();
}

void devil_fight_result::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
    delete success_;
    delete failure_;
  }
}

void devil_fight_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* devil_fight_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return devil_fight_result_descriptor_;
}

const devil_fight_result& devil_fight_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2edevil_2eproto();
  return *default_instance_;
}

devil_fight_result* devil_fight_result::default_instance_ = NULL;

devil_fight_result* devil_fight_result::New() const {
  return new devil_fight_result;
}

void devil_fight_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    raid_id_ = 0u;
    used_tick_ = 0u;
    star_ = 0u;
    champion_ = 0u;
    if (has_success()) {
      if (success_ != NULL) success_->::client::raid_success_info::Clear();
    }
    if (has_failure()) {
      if (failure_ != NULL) failure_->::client::raid_failure_info::Clear();
    }
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool devil_fight_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_used_tick;
        break;
      }

      // required uint32 used_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_tick_)));
          set_has_used_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // required uint32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_champion;
        break;
      }

      // required uint32 champion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_champion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &champion_)));
          set_has_champion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_success;
        break;
      }

      // optional .client.raid_success_info success = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_success:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_failure;
        break;
      }

      // optional .client.raid_failure_info failure = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_failure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_role_name;
        break;
      }

      // optional string role_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tick;
        break;
      }

      // optional uint32 tick = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void devil_fight_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raid_id(), output);
  }

  // required uint32 used_tick = 3;
  if (has_used_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->used_tick(), output);
  }

  // required uint32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->star(), output);
  }

  // required uint32 champion = 5;
  if (has_champion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->champion(), output);
  }

  // optional .client.raid_success_info success = 6;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->success(), output);
  }

  // optional .client.raid_failure_info failure = 7;
  if (has_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->failure(), output);
  }

  // optional string role_name = 8;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->role_name(), output);
  }

  // optional uint32 tick = 9;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* devil_fight_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raid_id(), target);
  }

  // required uint32 used_tick = 3;
  if (has_used_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->used_tick(), target);
  }

  // required uint32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->star(), target);
  }

  // required uint32 champion = 5;
  if (has_champion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->champion(), target);
  }

  // optional .client.raid_success_info success = 6;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->success(), target);
  }

  // optional .client.raid_failure_info failure = 7;
  if (has_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->failure(), target);
  }

  // optional string role_name = 8;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->role_name(), target);
  }

  // optional uint32 tick = 9;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int devil_fight_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 raid_id = 2;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 used_tick = 3;
    if (has_used_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->used_tick());
    }

    // required uint32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 champion = 5;
    if (has_champion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->champion());
    }

    // optional .client.raid_success_info success = 6;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->success());
    }

    // optional .client.raid_failure_info failure = 7;
    if (has_failure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->failure());
    }

    // optional string role_name = 8;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 tick = 9;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void devil_fight_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const devil_fight_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const devil_fight_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void devil_fight_result::MergeFrom(const devil_fight_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_used_tick()) {
      set_used_tick(from.used_tick());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_champion()) {
      set_champion(from.champion());
    }
    if (from.has_success()) {
      mutable_success()->::client::raid_success_info::MergeFrom(from.success());
    }
    if (from.has_failure()) {
      mutable_failure()->::client::raid_failure_info::MergeFrom(from.failure());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void devil_fight_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void devil_fight_result::CopyFrom(const devil_fight_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool devil_fight_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_success()) {
    if (!this->success().IsInitialized()) return false;
  }
  return true;
}

void devil_fight_result::Swap(devil_fight_result* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(used_tick_, other->used_tick_);
    std::swap(star_, other->star_);
    std::swap(champion_, other->champion_);
    std::swap(success_, other->success_);
    std::swap(failure_, other->failure_);
    std::swap(role_name_, other->role_name_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata devil_fight_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = devil_fight_result_descriptor_;
  metadata.reflection = devil_fight_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
