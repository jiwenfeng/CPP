// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.effect.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.effect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* buffer_effect_val_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buffer_effect_val_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* buffer_effect_val_OP_descriptor_ = NULL;
const ::google::protobuf::Descriptor* each_bear_harm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  each_bear_harm_reflection_ = NULL;
const ::google::protobuf::Descriptor* buffer_effect_shield_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buffer_effect_shield_reflection_ = NULL;
const ::google::protobuf::Descriptor* rebound_damage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rebound_damage_reflection_ = NULL;
const ::google::protobuf::Descriptor* trigger_skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  trigger_skill_reflection_ = NULL;
const ::google::protobuf::Descriptor* immune_effect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  immune_effect_reflection_ = NULL;
const ::google::protobuf::Descriptor* taunt_effect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taunt_effect_reflection_ = NULL;
const ::google::protobuf::Descriptor* halo_effect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  halo_effect_reflection_ = NULL;
const ::google::protobuf::Descriptor* buffer_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buffer_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* buffer_operate_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buffer_operate_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* buffer_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buffer_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* buffer_hurt_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buffer_hurt_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* buffer_immune_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buffer_immune_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* buffer_rebound_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buffer_rebound_msg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BUFFER_LIST_METHOD_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eeffect_2eproto() {
  protobuf_AddDesc_client_2eeffect_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.effect.proto");
  GOOGLE_CHECK(file != NULL);
  buffer_effect_val_descriptor_ = file->message_type(0);
  static const int buffer_effect_val_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_val, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_val, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_val, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_val, max_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_val, min_val_),
  };
  buffer_effect_val_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buffer_effect_val_descriptor_,
      buffer_effect_val::default_instance_,
      buffer_effect_val_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_val, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_val, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buffer_effect_val));
  buffer_effect_val_OP_descriptor_ = buffer_effect_val_descriptor_->enum_type(0);
  each_bear_harm_descriptor_ = file->message_type(1);
  static const int each_bear_harm_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(each_bear_harm, molecular_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(each_bear_harm, denominator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(each_bear_harm, val_),
  };
  each_bear_harm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      each_bear_harm_descriptor_,
      each_bear_harm::default_instance_,
      each_bear_harm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(each_bear_harm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(each_bear_harm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(each_bear_harm));
  buffer_effect_shield_descriptor_ = file->message_type(2);
  static const int buffer_effect_shield_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_shield, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_shield, durable_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_shield, ebh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_shield, over_back_proportion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_shield, over_back_max_),
  };
  buffer_effect_shield_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buffer_effect_shield_descriptor_,
      buffer_effect_shield::default_instance_,
      buffer_effect_shield_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_shield, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_effect_shield, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buffer_effect_shield));
  rebound_damage_descriptor_ = file->message_type(3);
  static const int rebound_damage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rebound_damage, rebound_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rebound_damage, rebound_proportion_),
  };
  rebound_damage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rebound_damage_descriptor_,
      rebound_damage::default_instance_,
      rebound_damage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rebound_damage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rebound_damage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rebound_damage));
  trigger_skill_descriptor_ = file->message_type(4);
  static const int trigger_skill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_skill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_skill, cd_),
  };
  trigger_skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      trigger_skill_descriptor_,
      trigger_skill::default_instance_,
      trigger_skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trigger_skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(trigger_skill));
  immune_effect_descriptor_ = file->message_type(5);
  static const int immune_effect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(immune_effect, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(immune_effect, proportion_),
  };
  immune_effect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      immune_effect_descriptor_,
      immune_effect::default_instance_,
      immune_effect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(immune_effect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(immune_effect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(immune_effect));
  taunt_effect_descriptor_ = file->message_type(6);
  static const int taunt_effect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taunt_effect, inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taunt_effect, ms_),
  };
  taunt_effect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taunt_effect_descriptor_,
      taunt_effect::default_instance_,
      taunt_effect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taunt_effect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taunt_effect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taunt_effect));
  halo_effect_descriptor_ = file->message_type(7);
  static const int halo_effect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(halo_effect, radius_),
  };
  halo_effect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      halo_effect_descriptor_,
      halo_effect::default_instance_,
      halo_effect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(halo_effect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(halo_effect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(halo_effect));
  buffer_info_descriptor_ = file->message_type(8);
  static const int buffer_info_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, repeat_levels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, cur_stacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, effect_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, remain_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, max_effect_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, effected_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, status_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, attr_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, rebound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, immune_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, taunt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, seckill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, halo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, caster_),
  };
  buffer_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buffer_info_descriptor_,
      buffer_info::default_instance_,
      buffer_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buffer_info));
  buffer_operate_info_descriptor_ = file->message_type(9);
  static const int buffer_operate_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_operate_info, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_operate_info, bi_),
  };
  buffer_operate_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buffer_operate_info_descriptor_,
      buffer_operate_info::default_instance_,
      buffer_operate_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_operate_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_operate_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buffer_operate_info));
  buffer_list_descriptor_ = file->message_type(10);
  static const int buffer_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_list, boi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_list, rd_),
  };
  buffer_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buffer_list_descriptor_,
      buffer_list::default_instance_,
      buffer_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buffer_list));
  buffer_hurt_msg_descriptor_ = file->message_type(11);
  static const int buffer_hurt_msg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_hurt_msg, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_hurt_msg, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_hurt_msg, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_hurt_msg, dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_hurt_msg, cur_hp_),
  };
  buffer_hurt_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buffer_hurt_msg_descriptor_,
      buffer_hurt_msg::default_instance_,
      buffer_hurt_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_hurt_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_hurt_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buffer_hurt_msg));
  buffer_immune_msg_descriptor_ = file->message_type(12);
  static const int buffer_immune_msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_immune_msg, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_immune_msg, caster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_immune_msg, id_),
  };
  buffer_immune_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buffer_immune_msg_descriptor_,
      buffer_immune_msg::default_instance_,
      buffer_immune_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_immune_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_immune_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buffer_immune_msg));
  buffer_rebound_msg_descriptor_ = file->message_type(13);
  static const int buffer_rebound_msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_rebound_msg, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_rebound_msg, caster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_rebound_msg, hp_),
  };
  buffer_rebound_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buffer_rebound_msg_descriptor_,
      buffer_rebound_msg::default_instance_,
      buffer_rebound_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_rebound_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buffer_rebound_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buffer_rebound_msg));
  BUFFER_LIST_METHOD_E_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eeffect_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buffer_effect_val_descriptor_, &buffer_effect_val::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    each_bear_harm_descriptor_, &each_bear_harm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buffer_effect_shield_descriptor_, &buffer_effect_shield::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rebound_damage_descriptor_, &rebound_damage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    trigger_skill_descriptor_, &trigger_skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    immune_effect_descriptor_, &immune_effect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taunt_effect_descriptor_, &taunt_effect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    halo_effect_descriptor_, &halo_effect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buffer_info_descriptor_, &buffer_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buffer_operate_info_descriptor_, &buffer_operate_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buffer_list_descriptor_, &buffer_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buffer_hurt_msg_descriptor_, &buffer_hurt_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buffer_immune_msg_descriptor_, &buffer_immune_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buffer_rebound_msg_descriptor_, &buffer_rebound_msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eeffect_2eproto() {
  delete buffer_effect_val::default_instance_;
  delete buffer_effect_val_reflection_;
  delete each_bear_harm::default_instance_;
  delete each_bear_harm_reflection_;
  delete buffer_effect_shield::default_instance_;
  delete buffer_effect_shield_reflection_;
  delete rebound_damage::default_instance_;
  delete rebound_damage_reflection_;
  delete trigger_skill::default_instance_;
  delete trigger_skill_reflection_;
  delete immune_effect::default_instance_;
  delete immune_effect_reflection_;
  delete taunt_effect::default_instance_;
  delete taunt_effect_reflection_;
  delete halo_effect::default_instance_;
  delete halo_effect_reflection_;
  delete buffer_info::default_instance_;
  delete buffer_info_reflection_;
  delete buffer_operate_info::default_instance_;
  delete buffer_operate_info_reflection_;
  delete buffer_list::default_instance_;
  delete buffer_list_reflection_;
  delete buffer_hurt_msg::default_instance_;
  delete buffer_hurt_msg_reflection_;
  delete buffer_immune_msg::default_instance_;
  delete buffer_immune_msg_reflection_;
  delete buffer_rebound_msg::default_instance_;
  delete buffer_rebound_msg_reflection_;
}

void protobuf_AddDesc_client_2eeffect_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023client.effect.proto\022\006client\032\021client.co"
    "mm.proto\"\244\001\n\021buffer_effect_val\022\017\n\004type\030\001"
    " \002(\r:\0010\022\016\n\003val\030\002 \002(\005:\0010\0222\n\007operate\030\003 \001(\016"
    "2\034.client.buffer_effect_val.OP:\003ADD\022\017\n\007m"
    "ax_val\030\004 \001(\005\022\017\n\007min_val\030\005 \001(\005\"\030\n\002OP\022\007\n\003A"
    "DD\020\000\022\t\n\005MULTI\020\001\"E\n\016each_bear_harm\022\021\n\tmol"
    "ecular\030\001 \001(\005\022\023\n\013denominator\030\002 \001(\005\022\013\n\003val"
    "\030\003 \001(\005\"\230\001\n\024buffer_effect_shield\022\021\n\teffec"
    "t_id\030\001 \002(\r\022\023\n\013durable_max\030\002 \002(\005\022#\n\003ebh\030\004"
    " \002(\0132\026.client.each_bear_harm\022\034\n\024over_bac"
    "k_proportion\030\005 \002(\002\022\025\n\rover_back_max\030\006 \002("
    "\005\"C\n\016rebound_damage\022\025\n\rrebound_count\030\001 \002"
    "(\r\022\032\n\022rebound_proportion\030\002 \002(\r\"-\n\rtrigge"
    "r_skill\022\020\n\010skill_id\030\001 \002(\r\022\n\n\002cd\030\002 \001(\r\"1\n"
    "\rimmune_effect\022\014\n\004type\030\001 \002(\r\022\022\n\nproporti"
    "on\030\002 \001(\r\"+\n\014taunt_effect\022\017\n\007inst_id\030\001 \002("
    "\004\022\n\n\002ms\030\002 \002(\r\"\035\n\013halo_effect\022\016\n\006radius\030\001"
    " \002(\r\"\376\004\n\013buffer_info\022\024\n\teffect_id\030\001 \002(\r:"
    "\0010\022\030\n\rrepeat_levels\030\002 \002(\r:\0010\022\025\n\ncur_stac"
    "ks\030\003 \001(\r:\0010\022\023\n\010duration\030\004 \001(\r:\0010\022\023\n\010inte"
    "rval\030\005 \001(\r:\0010\022\026\n\013effect_tick\030\006 \001(\r:\0010\022\026\n"
    "\013remain_tick\030\007 \001(\r:\0010\022\033\n\020max_effect_time"
    "s\030\010 \001(\r:\0010\022\031\n\016effected_times\030\t \001(\r:\0010\022-\n"
    "\nstatus_val\030\n \003(\0132\031.client.buffer_effect"
    "_val\022+\n\010attr_val\030\013 \003(\0132\031.client.buffer_e"
    "ffect_val\022,\n\006shield\030\014 \001(\0132\034.client.buffe"
    "r_effect_shield\022\'\n\007rebound\030\r \001(\0132\026.clien"
    "t.rebound_damage\022%\n\006skills\030\016 \003(\0132\025.clien"
    "t.trigger_skill\022%\n\006immune\030\017 \003(\0132\025.client"
    ".immune_effect\022#\n\005taunt\030\020 \001(\0132\024.client.t"
    "aunt_effect\022*\n\007seckill\030\021 \001(\0132\031.client.bu"
    "ffer_effect_val\022!\n\004halo\030\022 \001(\0132\023.client.h"
    "alo_effect\022!\n\006caster\030\023 \001(\0132\021.client.role"
    "_data\"d\n\023buffer_operate_info\022,\n\006method\030\001"
    " \002(\0162\034.client.BUFFER_LIST_METHOD_E\022\037\n\002bi"
    "\030\002 \002(\0132\023.client.buffer_info\"V\n\013buffer_li"
    "st\022(\n\003boi\030\001 \003(\0132\033.client.buffer_operate_"
    "info\022\035\n\002rd\030\002 \002(\0132\021.client.role_data\"v\n\017b"
    "uffer_hurt_msg\022\035\n\002rd\030\001 \002(\0132\021.client.role"
    "_data\022\r\n\002hp\030\002 \001(\005:\0010\022\r\n\002mp\030\003 \001(\005:\0010\022\023\n\004d"
    "ead\030\004 \001(\010:\005false\022\021\n\006cur_hp\030\005 \001(\r:\0010\"e\n\021b"
    "uffer_immune_msg\022!\n\006target\030\001 \002(\0132\021.clien"
    "t.role_data\022!\n\006caster\030\002 \002(\0132\021.client.rol"
    "e_data\022\n\n\002id\030\003 \002(\r\"f\n\022buffer_rebound_msg"
    "\022!\n\006target\030\001 \002(\0132\021.client.role_data\022!\n\006c"
    "aster\030\002 \002(\0132\021.client.role_data\022\n\n\002hp\030\003 \002"
    "(\r*F\n\024BUFFER_LIST_METHOD_E\022\014\n\010BLME_ADD\020\001"
    "\022\017\n\013BLME_UPDATE\020\002\022\017\n\013BLME_DELETE\020\003", 1914);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.effect.proto", &protobuf_RegisterTypes);
  buffer_effect_val::default_instance_ = new buffer_effect_val();
  each_bear_harm::default_instance_ = new each_bear_harm();
  buffer_effect_shield::default_instance_ = new buffer_effect_shield();
  rebound_damage::default_instance_ = new rebound_damage();
  trigger_skill::default_instance_ = new trigger_skill();
  immune_effect::default_instance_ = new immune_effect();
  taunt_effect::default_instance_ = new taunt_effect();
  halo_effect::default_instance_ = new halo_effect();
  buffer_info::default_instance_ = new buffer_info();
  buffer_operate_info::default_instance_ = new buffer_operate_info();
  buffer_list::default_instance_ = new buffer_list();
  buffer_hurt_msg::default_instance_ = new buffer_hurt_msg();
  buffer_immune_msg::default_instance_ = new buffer_immune_msg();
  buffer_rebound_msg::default_instance_ = new buffer_rebound_msg();
  buffer_effect_val::default_instance_->InitAsDefaultInstance();
  each_bear_harm::default_instance_->InitAsDefaultInstance();
  buffer_effect_shield::default_instance_->InitAsDefaultInstance();
  rebound_damage::default_instance_->InitAsDefaultInstance();
  trigger_skill::default_instance_->InitAsDefaultInstance();
  immune_effect::default_instance_->InitAsDefaultInstance();
  taunt_effect::default_instance_->InitAsDefaultInstance();
  halo_effect::default_instance_->InitAsDefaultInstance();
  buffer_info::default_instance_->InitAsDefaultInstance();
  buffer_operate_info::default_instance_->InitAsDefaultInstance();
  buffer_list::default_instance_->InitAsDefaultInstance();
  buffer_hurt_msg::default_instance_->InitAsDefaultInstance();
  buffer_immune_msg::default_instance_->InitAsDefaultInstance();
  buffer_rebound_msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eeffect_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eeffect_2eproto {
  StaticDescriptorInitializer_client_2eeffect_2eproto() {
    protobuf_AddDesc_client_2eeffect_2eproto();
  }
} static_descriptor_initializer_client_2eeffect_2eproto_;
const ::google::protobuf::EnumDescriptor* BUFFER_LIST_METHOD_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BUFFER_LIST_METHOD_E_descriptor_;
}
bool BUFFER_LIST_METHOD_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* buffer_effect_val_OP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buffer_effect_val_OP_descriptor_;
}
bool buffer_effect_val_OP_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const buffer_effect_val_OP buffer_effect_val::ADD;
const buffer_effect_val_OP buffer_effect_val::MULTI;
const buffer_effect_val_OP buffer_effect_val::OP_MIN;
const buffer_effect_val_OP buffer_effect_val::OP_MAX;
const int buffer_effect_val::OP_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int buffer_effect_val::kTypeFieldNumber;
const int buffer_effect_val::kValFieldNumber;
const int buffer_effect_val::kOperateFieldNumber;
const int buffer_effect_val::kMaxValFieldNumber;
const int buffer_effect_val::kMinValFieldNumber;
#endif  // !_MSC_VER

buffer_effect_val::buffer_effect_val()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buffer_effect_val::InitAsDefaultInstance() {
}

buffer_effect_val::buffer_effect_val(const buffer_effect_val& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buffer_effect_val::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  val_ = 0;
  operate_ = 0;
  max_val_ = 0;
  min_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buffer_effect_val::~buffer_effect_val() {
  SharedDtor();
}

void buffer_effect_val::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buffer_effect_val::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buffer_effect_val::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buffer_effect_val_descriptor_;
}

const buffer_effect_val& buffer_effect_val::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

buffer_effect_val* buffer_effect_val::default_instance_ = NULL;

buffer_effect_val* buffer_effect_val::New() const {
  return new buffer_effect_val;
}

void buffer_effect_val::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    val_ = 0;
    operate_ = 0;
    max_val_ = 0;
    min_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buffer_effect_val::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // required int32 val = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate;
        break;
      }

      // optional .client.buffer_effect_val.OP operate = 3 [default = ADD];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::buffer_effect_val_OP_IsValid(value)) {
            set_operate(static_cast< ::client::buffer_effect_val_OP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_val;
        break;
      }

      // optional int32 max_val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_val_)));
          set_has_max_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_min_val;
        break;
      }

      // optional int32 min_val = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_val_)));
          set_has_min_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buffer_effect_val::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required int32 val = 2 [default = 0];
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->val(), output);
  }

  // optional .client.buffer_effect_val.OP operate = 3 [default = ADD];
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operate(), output);
  }

  // optional int32 max_val = 4;
  if (has_max_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_val(), output);
  }

  // optional int32 min_val = 5;
  if (has_min_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buffer_effect_val::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required int32 val = 2 [default = 0];
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->val(), target);
  }

  // optional .client.buffer_effect_val.OP operate = 3 [default = ADD];
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operate(), target);
  }

  // optional int32 max_val = 4;
  if (has_max_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_val(), target);
  }

  // optional int32 min_val = 5;
  if (has_min_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buffer_effect_val::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required int32 val = 2 [default = 0];
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }

    // optional .client.buffer_effect_val.OP operate = 3 [default = ADD];
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operate());
    }

    // optional int32 max_val = 4;
    if (has_max_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_val());
    }

    // optional int32 min_val = 5;
    if (has_min_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buffer_effect_val::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buffer_effect_val* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buffer_effect_val*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buffer_effect_val::MergeFrom(const buffer_effect_val& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_max_val()) {
      set_max_val(from.max_val());
    }
    if (from.has_min_val()) {
      set_min_val(from.min_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buffer_effect_val::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buffer_effect_val::CopyFrom(const buffer_effect_val& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buffer_effect_val::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void buffer_effect_val::Swap(buffer_effect_val* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(val_, other->val_);
    std::swap(operate_, other->operate_);
    std::swap(max_val_, other->max_val_);
    std::swap(min_val_, other->min_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buffer_effect_val::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buffer_effect_val_descriptor_;
  metadata.reflection = buffer_effect_val_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int each_bear_harm::kMolecularFieldNumber;
const int each_bear_harm::kDenominatorFieldNumber;
const int each_bear_harm::kValFieldNumber;
#endif  // !_MSC_VER

each_bear_harm::each_bear_harm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void each_bear_harm::InitAsDefaultInstance() {
}

each_bear_harm::each_bear_harm(const each_bear_harm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void each_bear_harm::SharedCtor() {
  _cached_size_ = 0;
  molecular_ = 0;
  denominator_ = 0;
  val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

each_bear_harm::~each_bear_harm() {
  SharedDtor();
}

void each_bear_harm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void each_bear_harm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* each_bear_harm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return each_bear_harm_descriptor_;
}

const each_bear_harm& each_bear_harm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

each_bear_harm* each_bear_harm::default_instance_ = NULL;

each_bear_harm* each_bear_harm::New() const {
  return new each_bear_harm;
}

void each_bear_harm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    molecular_ = 0;
    denominator_ = 0;
    val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool each_bear_harm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 molecular = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &molecular_)));
          set_has_molecular();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_denominator;
        break;
      }

      // optional int32 denominator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_denominator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &denominator_)));
          set_has_denominator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val;
        break;
      }

      // optional int32 val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void each_bear_harm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 molecular = 1;
  if (has_molecular()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->molecular(), output);
  }

  // optional int32 denominator = 2;
  if (has_denominator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->denominator(), output);
  }

  // optional int32 val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* each_bear_harm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 molecular = 1;
  if (has_molecular()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->molecular(), target);
  }

  // optional int32 denominator = 2;
  if (has_denominator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->denominator(), target);
  }

  // optional int32 val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int each_bear_harm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 molecular = 1;
    if (has_molecular()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->molecular());
    }

    // optional int32 denominator = 2;
    if (has_denominator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->denominator());
    }

    // optional int32 val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void each_bear_harm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const each_bear_harm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const each_bear_harm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void each_bear_harm::MergeFrom(const each_bear_harm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_molecular()) {
      set_molecular(from.molecular());
    }
    if (from.has_denominator()) {
      set_denominator(from.denominator());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void each_bear_harm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void each_bear_harm::CopyFrom(const each_bear_harm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool each_bear_harm::IsInitialized() const {

  return true;
}

void each_bear_harm::Swap(each_bear_harm* other) {
  if (other != this) {
    std::swap(molecular_, other->molecular_);
    std::swap(denominator_, other->denominator_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata each_bear_harm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = each_bear_harm_descriptor_;
  metadata.reflection = each_bear_harm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buffer_effect_shield::kEffectIdFieldNumber;
const int buffer_effect_shield::kDurableMaxFieldNumber;
const int buffer_effect_shield::kEbhFieldNumber;
const int buffer_effect_shield::kOverBackProportionFieldNumber;
const int buffer_effect_shield::kOverBackMaxFieldNumber;
#endif  // !_MSC_VER

buffer_effect_shield::buffer_effect_shield()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buffer_effect_shield::InitAsDefaultInstance() {
  ebh_ = const_cast< ::client::each_bear_harm*>(&::client::each_bear_harm::default_instance());
}

buffer_effect_shield::buffer_effect_shield(const buffer_effect_shield& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buffer_effect_shield::SharedCtor() {
  _cached_size_ = 0;
  effect_id_ = 0u;
  durable_max_ = 0;
  ebh_ = NULL;
  over_back_proportion_ = 0;
  over_back_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buffer_effect_shield::~buffer_effect_shield() {
  SharedDtor();
}

void buffer_effect_shield::SharedDtor() {
  if (this != default_instance_) {
    delete ebh_;
  }
}

void buffer_effect_shield::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buffer_effect_shield::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buffer_effect_shield_descriptor_;
}

const buffer_effect_shield& buffer_effect_shield::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

buffer_effect_shield* buffer_effect_shield::default_instance_ = NULL;

buffer_effect_shield* buffer_effect_shield::New() const {
  return new buffer_effect_shield;
}

void buffer_effect_shield::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    effect_id_ = 0u;
    durable_max_ = 0;
    if (has_ebh()) {
      if (ebh_ != NULL) ebh_->::client::each_bear_harm::Clear();
    }
    over_back_proportion_ = 0;
    over_back_max_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buffer_effect_shield::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 effect_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_durable_max;
        break;
      }

      // required int32 durable_max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_durable_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &durable_max_)));
          set_has_durable_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ebh;
        break;
      }

      // required .client.each_bear_harm ebh = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ebh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ebh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_over_back_proportion;
        break;
      }

      // required float over_back_proportion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_over_back_proportion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &over_back_proportion_)));
          set_has_over_back_proportion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_over_back_max;
        break;
      }

      // required int32 over_back_max = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over_back_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &over_back_max_)));
          set_has_over_back_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buffer_effect_shield::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 effect_id = 1;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->effect_id(), output);
  }

  // required int32 durable_max = 2;
  if (has_durable_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->durable_max(), output);
  }

  // required .client.each_bear_harm ebh = 4;
  if (has_ebh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ebh(), output);
  }

  // required float over_back_proportion = 5;
  if (has_over_back_proportion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->over_back_proportion(), output);
  }

  // required int32 over_back_max = 6;
  if (has_over_back_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->over_back_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buffer_effect_shield::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 effect_id = 1;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->effect_id(), target);
  }

  // required int32 durable_max = 2;
  if (has_durable_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->durable_max(), target);
  }

  // required .client.each_bear_harm ebh = 4;
  if (has_ebh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ebh(), target);
  }

  // required float over_back_proportion = 5;
  if (has_over_back_proportion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->over_back_proportion(), target);
  }

  // required int32 over_back_max = 6;
  if (has_over_back_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->over_back_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buffer_effect_shield::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 effect_id = 1;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }

    // required int32 durable_max = 2;
    if (has_durable_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->durable_max());
    }

    // required .client.each_bear_harm ebh = 4;
    if (has_ebh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ebh());
    }

    // required float over_back_proportion = 5;
    if (has_over_back_proportion()) {
      total_size += 1 + 4;
    }

    // required int32 over_back_max = 6;
    if (has_over_back_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->over_back_max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buffer_effect_shield::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buffer_effect_shield* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buffer_effect_shield*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buffer_effect_shield::MergeFrom(const buffer_effect_shield& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_durable_max()) {
      set_durable_max(from.durable_max());
    }
    if (from.has_ebh()) {
      mutable_ebh()->::client::each_bear_harm::MergeFrom(from.ebh());
    }
    if (from.has_over_back_proportion()) {
      set_over_back_proportion(from.over_back_proportion());
    }
    if (from.has_over_back_max()) {
      set_over_back_max(from.over_back_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buffer_effect_shield::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buffer_effect_shield::CopyFrom(const buffer_effect_shield& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buffer_effect_shield::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void buffer_effect_shield::Swap(buffer_effect_shield* other) {
  if (other != this) {
    std::swap(effect_id_, other->effect_id_);
    std::swap(durable_max_, other->durable_max_);
    std::swap(ebh_, other->ebh_);
    std::swap(over_back_proportion_, other->over_back_proportion_);
    std::swap(over_back_max_, other->over_back_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buffer_effect_shield::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buffer_effect_shield_descriptor_;
  metadata.reflection = buffer_effect_shield_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rebound_damage::kReboundCountFieldNumber;
const int rebound_damage::kReboundProportionFieldNumber;
#endif  // !_MSC_VER

rebound_damage::rebound_damage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rebound_damage::InitAsDefaultInstance() {
}

rebound_damage::rebound_damage(const rebound_damage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rebound_damage::SharedCtor() {
  _cached_size_ = 0;
  rebound_count_ = 0u;
  rebound_proportion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rebound_damage::~rebound_damage() {
  SharedDtor();
}

void rebound_damage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rebound_damage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rebound_damage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rebound_damage_descriptor_;
}

const rebound_damage& rebound_damage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

rebound_damage* rebound_damage::default_instance_ = NULL;

rebound_damage* rebound_damage::New() const {
  return new rebound_damage;
}

void rebound_damage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rebound_count_ = 0u;
    rebound_proportion_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rebound_damage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rebound_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebound_count_)));
          set_has_rebound_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rebound_proportion;
        break;
      }

      // required uint32 rebound_proportion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebound_proportion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebound_proportion_)));
          set_has_rebound_proportion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rebound_damage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rebound_count = 1;
  if (has_rebound_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rebound_count(), output);
  }

  // required uint32 rebound_proportion = 2;
  if (has_rebound_proportion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rebound_proportion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rebound_damage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rebound_count = 1;
  if (has_rebound_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rebound_count(), target);
  }

  // required uint32 rebound_proportion = 2;
  if (has_rebound_proportion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rebound_proportion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rebound_damage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rebound_count = 1;
    if (has_rebound_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebound_count());
    }

    // required uint32 rebound_proportion = 2;
    if (has_rebound_proportion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebound_proportion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rebound_damage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rebound_damage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rebound_damage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rebound_damage::MergeFrom(const rebound_damage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rebound_count()) {
      set_rebound_count(from.rebound_count());
    }
    if (from.has_rebound_proportion()) {
      set_rebound_proportion(from.rebound_proportion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rebound_damage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rebound_damage::CopyFrom(const rebound_damage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rebound_damage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void rebound_damage::Swap(rebound_damage* other) {
  if (other != this) {
    std::swap(rebound_count_, other->rebound_count_);
    std::swap(rebound_proportion_, other->rebound_proportion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rebound_damage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rebound_damage_descriptor_;
  metadata.reflection = rebound_damage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int trigger_skill::kSkillIdFieldNumber;
const int trigger_skill::kCdFieldNumber;
#endif  // !_MSC_VER

trigger_skill::trigger_skill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void trigger_skill::InitAsDefaultInstance() {
}

trigger_skill::trigger_skill(const trigger_skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void trigger_skill::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  cd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

trigger_skill::~trigger_skill() {
  SharedDtor();
}

void trigger_skill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void trigger_skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trigger_skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return trigger_skill_descriptor_;
}

const trigger_skill& trigger_skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

trigger_skill* trigger_skill::default_instance_ = NULL;

trigger_skill* trigger_skill::New() const {
  return new trigger_skill;
}

void trigger_skill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    cd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool trigger_skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // optional uint32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void trigger_skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // optional uint32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* trigger_skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // optional uint32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int trigger_skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // optional uint32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trigger_skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const trigger_skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const trigger_skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void trigger_skill::MergeFrom(const trigger_skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void trigger_skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trigger_skill::CopyFrom(const trigger_skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trigger_skill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void trigger_skill::Swap(trigger_skill* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata trigger_skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = trigger_skill_descriptor_;
  metadata.reflection = trigger_skill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int immune_effect::kTypeFieldNumber;
const int immune_effect::kProportionFieldNumber;
#endif  // !_MSC_VER

immune_effect::immune_effect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void immune_effect::InitAsDefaultInstance() {
}

immune_effect::immune_effect(const immune_effect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void immune_effect::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  proportion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

immune_effect::~immune_effect() {
  SharedDtor();
}

void immune_effect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void immune_effect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* immune_effect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return immune_effect_descriptor_;
}

const immune_effect& immune_effect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

immune_effect* immune_effect::default_instance_ = NULL;

immune_effect* immune_effect::New() const {
  return new immune_effect;
}

void immune_effect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    proportion_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool immune_effect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proportion;
        break;
      }

      // optional uint32 proportion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proportion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proportion_)));
          set_has_proportion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void immune_effect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 proportion = 2;
  if (has_proportion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proportion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* immune_effect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 proportion = 2;
  if (has_proportion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proportion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int immune_effect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 proportion = 2;
    if (has_proportion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proportion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void immune_effect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const immune_effect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const immune_effect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void immune_effect::MergeFrom(const immune_effect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_proportion()) {
      set_proportion(from.proportion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void immune_effect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void immune_effect::CopyFrom(const immune_effect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool immune_effect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void immune_effect::Swap(immune_effect* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(proportion_, other->proportion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata immune_effect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = immune_effect_descriptor_;
  metadata.reflection = immune_effect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taunt_effect::kInstIdFieldNumber;
const int taunt_effect::kMsFieldNumber;
#endif  // !_MSC_VER

taunt_effect::taunt_effect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taunt_effect::InitAsDefaultInstance() {
}

taunt_effect::taunt_effect(const taunt_effect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taunt_effect::SharedCtor() {
  _cached_size_ = 0;
  inst_id_ = GOOGLE_ULONGLONG(0);
  ms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taunt_effect::~taunt_effect() {
  SharedDtor();
}

void taunt_effect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void taunt_effect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taunt_effect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taunt_effect_descriptor_;
}

const taunt_effect& taunt_effect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

taunt_effect* taunt_effect::default_instance_ = NULL;

taunt_effect* taunt_effect::New() const {
  return new taunt_effect;
}

void taunt_effect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inst_id_ = GOOGLE_ULONGLONG(0);
    ms_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taunt_effect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 inst_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inst_id_)));
          set_has_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ms;
        break;
      }

      // required uint32 ms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ms_)));
          set_has_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taunt_effect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 inst_id = 1;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->inst_id(), output);
  }

  // required uint32 ms = 2;
  if (has_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taunt_effect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 inst_id = 1;
  if (has_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->inst_id(), target);
  }

  // required uint32 ms = 2;
  if (has_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taunt_effect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 inst_id = 1;
    if (has_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inst_id());
    }

    // required uint32 ms = 2;
    if (has_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taunt_effect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taunt_effect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taunt_effect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taunt_effect::MergeFrom(const taunt_effect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
    if (from.has_ms()) {
      set_ms(from.ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taunt_effect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taunt_effect::CopyFrom(const taunt_effect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taunt_effect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void taunt_effect::Swap(taunt_effect* other) {
  if (other != this) {
    std::swap(inst_id_, other->inst_id_);
    std::swap(ms_, other->ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taunt_effect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taunt_effect_descriptor_;
  metadata.reflection = taunt_effect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int halo_effect::kRadiusFieldNumber;
#endif  // !_MSC_VER

halo_effect::halo_effect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void halo_effect::InitAsDefaultInstance() {
}

halo_effect::halo_effect(const halo_effect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void halo_effect::SharedCtor() {
  _cached_size_ = 0;
  radius_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

halo_effect::~halo_effect() {
  SharedDtor();
}

void halo_effect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void halo_effect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* halo_effect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return halo_effect_descriptor_;
}

const halo_effect& halo_effect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

halo_effect* halo_effect::default_instance_ = NULL;

halo_effect* halo_effect::New() const {
  return new halo_effect;
}

void halo_effect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    radius_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool halo_effect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 radius = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void halo_effect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 radius = 1;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->radius(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* halo_effect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 radius = 1;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->radius(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int halo_effect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 radius = 1;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radius());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void halo_effect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const halo_effect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const halo_effect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void halo_effect::MergeFrom(const halo_effect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void halo_effect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void halo_effect::CopyFrom(const halo_effect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool halo_effect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void halo_effect::Swap(halo_effect* other) {
  if (other != this) {
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata halo_effect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = halo_effect_descriptor_;
  metadata.reflection = halo_effect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buffer_info::kEffectIdFieldNumber;
const int buffer_info::kRepeatLevelsFieldNumber;
const int buffer_info::kCurStacksFieldNumber;
const int buffer_info::kDurationFieldNumber;
const int buffer_info::kIntervalFieldNumber;
const int buffer_info::kEffectTickFieldNumber;
const int buffer_info::kRemainTickFieldNumber;
const int buffer_info::kMaxEffectTimesFieldNumber;
const int buffer_info::kEffectedTimesFieldNumber;
const int buffer_info::kStatusValFieldNumber;
const int buffer_info::kAttrValFieldNumber;
const int buffer_info::kShieldFieldNumber;
const int buffer_info::kReboundFieldNumber;
const int buffer_info::kSkillsFieldNumber;
const int buffer_info::kImmuneFieldNumber;
const int buffer_info::kTauntFieldNumber;
const int buffer_info::kSeckillFieldNumber;
const int buffer_info::kHaloFieldNumber;
const int buffer_info::kCasterFieldNumber;
#endif  // !_MSC_VER

buffer_info::buffer_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buffer_info::InitAsDefaultInstance() {
  shield_ = const_cast< ::client::buffer_effect_shield*>(&::client::buffer_effect_shield::default_instance());
  rebound_ = const_cast< ::client::rebound_damage*>(&::client::rebound_damage::default_instance());
  taunt_ = const_cast< ::client::taunt_effect*>(&::client::taunt_effect::default_instance());
  seckill_ = const_cast< ::client::buffer_effect_val*>(&::client::buffer_effect_val::default_instance());
  halo_ = const_cast< ::client::halo_effect*>(&::client::halo_effect::default_instance());
  caster_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

buffer_info::buffer_info(const buffer_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buffer_info::SharedCtor() {
  _cached_size_ = 0;
  effect_id_ = 0u;
  repeat_levels_ = 0u;
  cur_stacks_ = 0u;
  duration_ = 0u;
  interval_ = 0u;
  effect_tick_ = 0u;
  remain_tick_ = 0u;
  max_effect_times_ = 0u;
  effected_times_ = 0u;
  shield_ = NULL;
  rebound_ = NULL;
  taunt_ = NULL;
  seckill_ = NULL;
  halo_ = NULL;
  caster_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buffer_info::~buffer_info() {
  SharedDtor();
}

void buffer_info::SharedDtor() {
  if (this != default_instance_) {
    delete shield_;
    delete rebound_;
    delete taunt_;
    delete seckill_;
    delete halo_;
    delete caster_;
  }
}

void buffer_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buffer_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buffer_info_descriptor_;
}

const buffer_info& buffer_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

buffer_info* buffer_info::default_instance_ = NULL;

buffer_info* buffer_info::New() const {
  return new buffer_info;
}

void buffer_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    effect_id_ = 0u;
    repeat_levels_ = 0u;
    cur_stacks_ = 0u;
    duration_ = 0u;
    interval_ = 0u;
    effect_tick_ = 0u;
    remain_tick_ = 0u;
    max_effect_times_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    effected_times_ = 0u;
    if (has_shield()) {
      if (shield_ != NULL) shield_->::client::buffer_effect_shield::Clear();
    }
    if (has_rebound()) {
      if (rebound_ != NULL) rebound_->::client::rebound_damage::Clear();
    }
    if (has_taunt()) {
      if (taunt_ != NULL) taunt_->::client::taunt_effect::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_seckill()) {
      if (seckill_ != NULL) seckill_->::client::buffer_effect_val::Clear();
    }
    if (has_halo()) {
      if (halo_ != NULL) halo_->::client::halo_effect::Clear();
    }
    if (has_caster()) {
      if (caster_ != NULL) caster_->::client::role_data::Clear();
    }
  }
  status_val_.Clear();
  attr_val_.Clear();
  skills_.Clear();
  immune_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buffer_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 effect_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_repeat_levels;
        break;
      }

      // required uint32 repeat_levels = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeat_levels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeat_levels_)));
          set_has_repeat_levels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_stacks;
        break;
      }

      // optional uint32 cur_stacks = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_stacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_stacks_)));
          set_has_cur_stacks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duration;
        break;
      }

      // optional uint32 duration = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_interval;
        break;
      }

      // optional uint32 interval = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_effect_tick;
        break;
      }

      // optional uint32 effect_tick = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_tick_)));
          set_has_effect_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_remain_tick;
        break;
      }

      // optional uint32 remain_tick = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_tick_)));
          set_has_remain_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_effect_times;
        break;
      }

      // optional uint32 max_effect_times = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_effect_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_effect_times_)));
          set_has_max_effect_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_effected_times;
        break;
      }

      // optional uint32 effected_times = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effected_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effected_times_)));
          set_has_effected_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_status_val;
        break;
      }

      // repeated .client.buffer_effect_val status_val = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status_val()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_status_val;
        if (input->ExpectTag(90)) goto parse_attr_val;
        break;
      }

      // repeated .client.buffer_effect_val attr_val = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr_val()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_attr_val;
        if (input->ExpectTag(98)) goto parse_shield;
        break;
      }

      // optional .client.buffer_effect_shield shield = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shield:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_rebound;
        break;
      }

      // optional .client.rebound_damage rebound = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rebound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rebound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_skills;
        break;
      }

      // repeated .client.trigger_skill skills = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_skills;
        if (input->ExpectTag(122)) goto parse_immune;
        break;
      }

      // repeated .client.immune_effect immune = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_immune:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_immune()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_immune;
        if (input->ExpectTag(130)) goto parse_taunt;
        break;
      }

      // optional .client.taunt_effect taunt = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taunt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taunt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_seckill;
        break;
      }

      // optional .client.buffer_effect_val seckill = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seckill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seckill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_halo;
        break;
      }

      // optional .client.halo_effect halo = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_halo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_halo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_caster;
        break;
      }

      // optional .client.role_data caster = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buffer_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 effect_id = 1 [default = 0];
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->effect_id(), output);
  }

  // required uint32 repeat_levels = 2 [default = 0];
  if (has_repeat_levels()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->repeat_levels(), output);
  }

  // optional uint32 cur_stacks = 3 [default = 0];
  if (has_cur_stacks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_stacks(), output);
  }

  // optional uint32 duration = 4 [default = 0];
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duration(), output);
  }

  // optional uint32 interval = 5 [default = 0];
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->interval(), output);
  }

  // optional uint32 effect_tick = 6 [default = 0];
  if (has_effect_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->effect_tick(), output);
  }

  // optional uint32 remain_tick = 7 [default = 0];
  if (has_remain_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->remain_tick(), output);
  }

  // optional uint32 max_effect_times = 8 [default = 0];
  if (has_max_effect_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_effect_times(), output);
  }

  // optional uint32 effected_times = 9 [default = 0];
  if (has_effected_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->effected_times(), output);
  }

  // repeated .client.buffer_effect_val status_val = 10;
  for (int i = 0; i < this->status_val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->status_val(i), output);
  }

  // repeated .client.buffer_effect_val attr_val = 11;
  for (int i = 0; i < this->attr_val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->attr_val(i), output);
  }

  // optional .client.buffer_effect_shield shield = 12;
  if (has_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->shield(), output);
  }

  // optional .client.rebound_damage rebound = 13;
  if (has_rebound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->rebound(), output);
  }

  // repeated .client.trigger_skill skills = 14;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->skills(i), output);
  }

  // repeated .client.immune_effect immune = 15;
  for (int i = 0; i < this->immune_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->immune(i), output);
  }

  // optional .client.taunt_effect taunt = 16;
  if (has_taunt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->taunt(), output);
  }

  // optional .client.buffer_effect_val seckill = 17;
  if (has_seckill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->seckill(), output);
  }

  // optional .client.halo_effect halo = 18;
  if (has_halo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->halo(), output);
  }

  // optional .client.role_data caster = 19;
  if (has_caster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->caster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buffer_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 effect_id = 1 [default = 0];
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->effect_id(), target);
  }

  // required uint32 repeat_levels = 2 [default = 0];
  if (has_repeat_levels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->repeat_levels(), target);
  }

  // optional uint32 cur_stacks = 3 [default = 0];
  if (has_cur_stacks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_stacks(), target);
  }

  // optional uint32 duration = 4 [default = 0];
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duration(), target);
  }

  // optional uint32 interval = 5 [default = 0];
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->interval(), target);
  }

  // optional uint32 effect_tick = 6 [default = 0];
  if (has_effect_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->effect_tick(), target);
  }

  // optional uint32 remain_tick = 7 [default = 0];
  if (has_remain_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->remain_tick(), target);
  }

  // optional uint32 max_effect_times = 8 [default = 0];
  if (has_max_effect_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_effect_times(), target);
  }

  // optional uint32 effected_times = 9 [default = 0];
  if (has_effected_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->effected_times(), target);
  }

  // repeated .client.buffer_effect_val status_val = 10;
  for (int i = 0; i < this->status_val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->status_val(i), target);
  }

  // repeated .client.buffer_effect_val attr_val = 11;
  for (int i = 0; i < this->attr_val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->attr_val(i), target);
  }

  // optional .client.buffer_effect_shield shield = 12;
  if (has_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->shield(), target);
  }

  // optional .client.rebound_damage rebound = 13;
  if (has_rebound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->rebound(), target);
  }

  // repeated .client.trigger_skill skills = 14;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->skills(i), target);
  }

  // repeated .client.immune_effect immune = 15;
  for (int i = 0; i < this->immune_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->immune(i), target);
  }

  // optional .client.taunt_effect taunt = 16;
  if (has_taunt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->taunt(), target);
  }

  // optional .client.buffer_effect_val seckill = 17;
  if (has_seckill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->seckill(), target);
  }

  // optional .client.halo_effect halo = 18;
  if (has_halo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->halo(), target);
  }

  // optional .client.role_data caster = 19;
  if (has_caster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->caster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buffer_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 effect_id = 1 [default = 0];
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }

    // required uint32 repeat_levels = 2 [default = 0];
    if (has_repeat_levels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeat_levels());
    }

    // optional uint32 cur_stacks = 3 [default = 0];
    if (has_cur_stacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_stacks());
    }

    // optional uint32 duration = 4 [default = 0];
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional uint32 interval = 5 [default = 0];
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }

    // optional uint32 effect_tick = 6 [default = 0];
    if (has_effect_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_tick());
    }

    // optional uint32 remain_tick = 7 [default = 0];
    if (has_remain_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_tick());
    }

    // optional uint32 max_effect_times = 8 [default = 0];
    if (has_max_effect_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_effect_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 effected_times = 9 [default = 0];
    if (has_effected_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effected_times());
    }

    // optional .client.buffer_effect_shield shield = 12;
    if (has_shield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shield());
    }

    // optional .client.rebound_damage rebound = 13;
    if (has_rebound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rebound());
    }

    // optional .client.taunt_effect taunt = 16;
    if (has_taunt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taunt());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .client.buffer_effect_val seckill = 17;
    if (has_seckill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seckill());
    }

    // optional .client.halo_effect halo = 18;
    if (has_halo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->halo());
    }

    // optional .client.role_data caster = 19;
    if (has_caster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caster());
    }

  }
  // repeated .client.buffer_effect_val status_val = 10;
  total_size += 1 * this->status_val_size();
  for (int i = 0; i < this->status_val_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status_val(i));
  }

  // repeated .client.buffer_effect_val attr_val = 11;
  total_size += 1 * this->attr_val_size();
  for (int i = 0; i < this->attr_val_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr_val(i));
  }

  // repeated .client.trigger_skill skills = 14;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  // repeated .client.immune_effect immune = 15;
  total_size += 1 * this->immune_size();
  for (int i = 0; i < this->immune_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->immune(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buffer_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buffer_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buffer_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buffer_info::MergeFrom(const buffer_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_val_.MergeFrom(from.status_val_);
  attr_val_.MergeFrom(from.attr_val_);
  skills_.MergeFrom(from.skills_);
  immune_.MergeFrom(from.immune_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_repeat_levels()) {
      set_repeat_levels(from.repeat_levels());
    }
    if (from.has_cur_stacks()) {
      set_cur_stacks(from.cur_stacks());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_effect_tick()) {
      set_effect_tick(from.effect_tick());
    }
    if (from.has_remain_tick()) {
      set_remain_tick(from.remain_tick());
    }
    if (from.has_max_effect_times()) {
      set_max_effect_times(from.max_effect_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_effected_times()) {
      set_effected_times(from.effected_times());
    }
    if (from.has_shield()) {
      mutable_shield()->::client::buffer_effect_shield::MergeFrom(from.shield());
    }
    if (from.has_rebound()) {
      mutable_rebound()->::client::rebound_damage::MergeFrom(from.rebound());
    }
    if (from.has_taunt()) {
      mutable_taunt()->::client::taunt_effect::MergeFrom(from.taunt());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_seckill()) {
      mutable_seckill()->::client::buffer_effect_val::MergeFrom(from.seckill());
    }
    if (from.has_halo()) {
      mutable_halo()->::client::halo_effect::MergeFrom(from.halo());
    }
    if (from.has_caster()) {
      mutable_caster()->::client::role_data::MergeFrom(from.caster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buffer_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buffer_info::CopyFrom(const buffer_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buffer_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < status_val_size(); i++) {
    if (!this->status_val(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attr_val_size(); i++) {
    if (!this->attr_val(i).IsInitialized()) return false;
  }
  if (has_shield()) {
    if (!this->shield().IsInitialized()) return false;
  }
  if (has_rebound()) {
    if (!this->rebound().IsInitialized()) return false;
  }
  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  for (int i = 0; i < immune_size(); i++) {
    if (!this->immune(i).IsInitialized()) return false;
  }
  if (has_taunt()) {
    if (!this->taunt().IsInitialized()) return false;
  }
  if (has_seckill()) {
    if (!this->seckill().IsInitialized()) return false;
  }
  if (has_halo()) {
    if (!this->halo().IsInitialized()) return false;
  }
  if (has_caster()) {
    if (!this->caster().IsInitialized()) return false;
  }
  return true;
}

void buffer_info::Swap(buffer_info* other) {
  if (other != this) {
    std::swap(effect_id_, other->effect_id_);
    std::swap(repeat_levels_, other->repeat_levels_);
    std::swap(cur_stacks_, other->cur_stacks_);
    std::swap(duration_, other->duration_);
    std::swap(interval_, other->interval_);
    std::swap(effect_tick_, other->effect_tick_);
    std::swap(remain_tick_, other->remain_tick_);
    std::swap(max_effect_times_, other->max_effect_times_);
    std::swap(effected_times_, other->effected_times_);
    status_val_.Swap(&other->status_val_);
    attr_val_.Swap(&other->attr_val_);
    std::swap(shield_, other->shield_);
    std::swap(rebound_, other->rebound_);
    skills_.Swap(&other->skills_);
    immune_.Swap(&other->immune_);
    std::swap(taunt_, other->taunt_);
    std::swap(seckill_, other->seckill_);
    std::swap(halo_, other->halo_);
    std::swap(caster_, other->caster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buffer_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buffer_info_descriptor_;
  metadata.reflection = buffer_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buffer_operate_info::kMethodFieldNumber;
const int buffer_operate_info::kBiFieldNumber;
#endif  // !_MSC_VER

buffer_operate_info::buffer_operate_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buffer_operate_info::InitAsDefaultInstance() {
  bi_ = const_cast< ::client::buffer_info*>(&::client::buffer_info::default_instance());
}

buffer_operate_info::buffer_operate_info(const buffer_operate_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buffer_operate_info::SharedCtor() {
  _cached_size_ = 0;
  method_ = 1;
  bi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buffer_operate_info::~buffer_operate_info() {
  SharedDtor();
}

void buffer_operate_info::SharedDtor() {
  if (this != default_instance_) {
    delete bi_;
  }
}

void buffer_operate_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buffer_operate_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buffer_operate_info_descriptor_;
}

const buffer_operate_info& buffer_operate_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

buffer_operate_info* buffer_operate_info::default_instance_ = NULL;

buffer_operate_info* buffer_operate_info::New() const {
  return new buffer_operate_info;
}

void buffer_operate_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    method_ = 1;
    if (has_bi()) {
      if (bi_ != NULL) bi_->::client::buffer_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buffer_operate_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.BUFFER_LIST_METHOD_E method = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::BUFFER_LIST_METHOD_E_IsValid(value)) {
            set_method(static_cast< ::client::BUFFER_LIST_METHOD_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bi;
        break;
      }

      // required .client.buffer_info bi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buffer_operate_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.BUFFER_LIST_METHOD_E method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // required .client.buffer_info bi = 2;
  if (has_bi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buffer_operate_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.BUFFER_LIST_METHOD_E method = 1;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->method(), target);
  }

  // required .client.buffer_info bi = 2;
  if (has_bi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buffer_operate_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.BUFFER_LIST_METHOD_E method = 1;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

    // required .client.buffer_info bi = 2;
    if (has_bi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buffer_operate_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buffer_operate_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buffer_operate_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buffer_operate_info::MergeFrom(const buffer_operate_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_bi()) {
      mutable_bi()->::client::buffer_info::MergeFrom(from.bi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buffer_operate_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buffer_operate_info::CopyFrom(const buffer_operate_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buffer_operate_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_bi()) {
    if (!this->bi().IsInitialized()) return false;
  }
  return true;
}

void buffer_operate_info::Swap(buffer_operate_info* other) {
  if (other != this) {
    std::swap(method_, other->method_);
    std::swap(bi_, other->bi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buffer_operate_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buffer_operate_info_descriptor_;
  metadata.reflection = buffer_operate_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buffer_list::kBoiFieldNumber;
const int buffer_list::kRdFieldNumber;
#endif  // !_MSC_VER

buffer_list::buffer_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buffer_list::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

buffer_list::buffer_list(const buffer_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buffer_list::SharedCtor() {
  _cached_size_ = 0;
  rd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buffer_list::~buffer_list() {
  SharedDtor();
}

void buffer_list::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
  }
}

void buffer_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buffer_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buffer_list_descriptor_;
}

const buffer_list& buffer_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

buffer_list* buffer_list::default_instance_ = NULL;

buffer_list* buffer_list::New() const {
  return new buffer_list;
}

void buffer_list::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
  }
  boi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buffer_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.buffer_operate_info boi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_boi;
        if (input->ExpectTag(18)) goto parse_rd;
        break;
      }

      // required .client.role_data rd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buffer_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.buffer_operate_info boi = 1;
  for (int i = 0; i < this->boi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boi(i), output);
  }

  // required .client.role_data rd = 2;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buffer_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.buffer_operate_info boi = 1;
  for (int i = 0; i < this->boi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boi(i), target);
  }

  // required .client.role_data rd = 2;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buffer_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .client.role_data rd = 2;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

  }
  // repeated .client.buffer_operate_info boi = 1;
  total_size += 1 * this->boi_size();
  for (int i = 0; i < this->boi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buffer_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buffer_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buffer_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buffer_list::MergeFrom(const buffer_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  boi_.MergeFrom(from.boi_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buffer_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buffer_list::CopyFrom(const buffer_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buffer_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < boi_size(); i++) {
    if (!this->boi(i).IsInitialized()) return false;
  }
  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  return true;
}

void buffer_list::Swap(buffer_list* other) {
  if (other != this) {
    boi_.Swap(&other->boi_);
    std::swap(rd_, other->rd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buffer_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buffer_list_descriptor_;
  metadata.reflection = buffer_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buffer_hurt_msg::kRdFieldNumber;
const int buffer_hurt_msg::kHpFieldNumber;
const int buffer_hurt_msg::kMpFieldNumber;
const int buffer_hurt_msg::kDeadFieldNumber;
const int buffer_hurt_msg::kCurHpFieldNumber;
#endif  // !_MSC_VER

buffer_hurt_msg::buffer_hurt_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buffer_hurt_msg::InitAsDefaultInstance() {
  rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

buffer_hurt_msg::buffer_hurt_msg(const buffer_hurt_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buffer_hurt_msg::SharedCtor() {
  _cached_size_ = 0;
  rd_ = NULL;
  hp_ = 0;
  mp_ = 0;
  dead_ = false;
  cur_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buffer_hurt_msg::~buffer_hurt_msg() {
  SharedDtor();
}

void buffer_hurt_msg::SharedDtor() {
  if (this != default_instance_) {
    delete rd_;
  }
}

void buffer_hurt_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buffer_hurt_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buffer_hurt_msg_descriptor_;
}

const buffer_hurt_msg& buffer_hurt_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

buffer_hurt_msg* buffer_hurt_msg::default_instance_ = NULL;

buffer_hurt_msg* buffer_hurt_msg::New() const {
  return new buffer_hurt_msg;
}

void buffer_hurt_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rd()) {
      if (rd_ != NULL) rd_->::client::role_data::Clear();
    }
    hp_ = 0;
    mp_ = 0;
    dead_ = false;
    cur_hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buffer_hurt_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_data rd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // optional int32 hp = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mp;
        break;
      }

      // optional int32 mp = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead;
        break;
      }

      // optional bool dead = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dead_)));
          set_has_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_hp;
        break;
      }

      // optional uint32 cur_hp = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buffer_hurt_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rd(), output);
  }

  // optional int32 hp = 2 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  // optional int32 mp = 3 [default = 0];
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mp(), output);
  }

  // optional bool dead = 4 [default = false];
  if (has_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->dead(), output);
  }

  // optional uint32 cur_hp = 5 [default = 0];
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cur_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buffer_hurt_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_data rd = 1;
  if (has_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rd(), target);
  }

  // optional int32 hp = 2 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }

  // optional int32 mp = 3 [default = 0];
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mp(), target);
  }

  // optional bool dead = 4 [default = false];
  if (has_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->dead(), target);
  }

  // optional uint32 cur_hp = 5 [default = 0];
  if (has_cur_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cur_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buffer_hurt_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data rd = 1;
    if (has_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rd());
    }

    // optional int32 hp = 2 [default = 0];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 3 [default = 0];
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional bool dead = 4 [default = false];
    if (has_dead()) {
      total_size += 1 + 1;
    }

    // optional uint32 cur_hp = 5 [default = 0];
    if (has_cur_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buffer_hurt_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buffer_hurt_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buffer_hurt_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buffer_hurt_msg::MergeFrom(const buffer_hurt_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rd()) {
      mutable_rd()->::client::role_data::MergeFrom(from.rd());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_dead()) {
      set_dead(from.dead());
    }
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buffer_hurt_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buffer_hurt_msg::CopyFrom(const buffer_hurt_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buffer_hurt_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rd()) {
    if (!this->rd().IsInitialized()) return false;
  }
  return true;
}

void buffer_hurt_msg::Swap(buffer_hurt_msg* other) {
  if (other != this) {
    std::swap(rd_, other->rd_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(dead_, other->dead_);
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buffer_hurt_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buffer_hurt_msg_descriptor_;
  metadata.reflection = buffer_hurt_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buffer_immune_msg::kTargetFieldNumber;
const int buffer_immune_msg::kCasterFieldNumber;
const int buffer_immune_msg::kIdFieldNumber;
#endif  // !_MSC_VER

buffer_immune_msg::buffer_immune_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buffer_immune_msg::InitAsDefaultInstance() {
  target_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
  caster_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

buffer_immune_msg::buffer_immune_msg(const buffer_immune_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buffer_immune_msg::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  caster_ = NULL;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buffer_immune_msg::~buffer_immune_msg() {
  SharedDtor();
}

void buffer_immune_msg::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
    delete caster_;
  }
}

void buffer_immune_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buffer_immune_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buffer_immune_msg_descriptor_;
}

const buffer_immune_msg& buffer_immune_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

buffer_immune_msg* buffer_immune_msg::default_instance_ = NULL;

buffer_immune_msg* buffer_immune_msg::New() const {
  return new buffer_immune_msg;
}

void buffer_immune_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::client::role_data::Clear();
    }
    if (has_caster()) {
      if (caster_ != NULL) caster_->::client::role_data::Clear();
    }
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buffer_immune_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_data target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_caster;
        break;
      }

      // required .client.role_data caster = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buffer_immune_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_data target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }

  // required .client.role_data caster = 2;
  if (has_caster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->caster(), output);
  }

  // required uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buffer_immune_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_data target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }

  // required .client.role_data caster = 2;
  if (has_caster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->caster(), target);
  }

  // required uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buffer_immune_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // required .client.role_data caster = 2;
    if (has_caster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caster());
    }

    // required uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buffer_immune_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buffer_immune_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buffer_immune_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buffer_immune_msg::MergeFrom(const buffer_immune_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      mutable_target()->::client::role_data::MergeFrom(from.target());
    }
    if (from.has_caster()) {
      mutable_caster()->::client::role_data::MergeFrom(from.caster());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buffer_immune_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buffer_immune_msg::CopyFrom(const buffer_immune_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buffer_immune_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  if (has_caster()) {
    if (!this->caster().IsInitialized()) return false;
  }
  return true;
}

void buffer_immune_msg::Swap(buffer_immune_msg* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(caster_, other->caster_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buffer_immune_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buffer_immune_msg_descriptor_;
  metadata.reflection = buffer_immune_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buffer_rebound_msg::kTargetFieldNumber;
const int buffer_rebound_msg::kCasterFieldNumber;
const int buffer_rebound_msg::kHpFieldNumber;
#endif  // !_MSC_VER

buffer_rebound_msg::buffer_rebound_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buffer_rebound_msg::InitAsDefaultInstance() {
  target_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
  caster_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
}

buffer_rebound_msg::buffer_rebound_msg(const buffer_rebound_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buffer_rebound_msg::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  caster_ = NULL;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buffer_rebound_msg::~buffer_rebound_msg() {
  SharedDtor();
}

void buffer_rebound_msg::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
    delete caster_;
  }
}

void buffer_rebound_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buffer_rebound_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buffer_rebound_msg_descriptor_;
}

const buffer_rebound_msg& buffer_rebound_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eeffect_2eproto();
  return *default_instance_;
}

buffer_rebound_msg* buffer_rebound_msg::default_instance_ = NULL;

buffer_rebound_msg* buffer_rebound_msg::New() const {
  return new buffer_rebound_msg;
}

void buffer_rebound_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::client::role_data::Clear();
    }
    if (has_caster()) {
      if (caster_ != NULL) caster_->::client::role_data::Clear();
    }
    hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buffer_rebound_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_data target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_caster;
        break;
      }

      // required .client.role_data caster = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required uint32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buffer_rebound_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_data target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }

  // required .client.role_data caster = 2;
  if (has_caster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->caster(), output);
  }

  // required uint32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buffer_rebound_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_data target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }

  // required .client.role_data caster = 2;
  if (has_caster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->caster(), target);
  }

  // required uint32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buffer_rebound_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // required .client.role_data caster = 2;
    if (has_caster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caster());
    }

    // required uint32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buffer_rebound_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buffer_rebound_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buffer_rebound_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buffer_rebound_msg::MergeFrom(const buffer_rebound_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      mutable_target()->::client::role_data::MergeFrom(from.target());
    }
    if (from.has_caster()) {
      mutable_caster()->::client::role_data::MergeFrom(from.caster());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buffer_rebound_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buffer_rebound_msg::CopyFrom(const buffer_rebound_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buffer_rebound_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  if (has_caster()) {
    if (!this->caster().IsInitialized()) return false;
  }
  return true;
}

void buffer_rebound_msg::Swap(buffer_rebound_msg* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(caster_, other->caster_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buffer_rebound_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buffer_rebound_msg_descriptor_;
  metadata.reflection = buffer_rebound_msg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
