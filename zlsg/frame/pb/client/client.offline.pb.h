// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.offline.proto

#ifndef PROTOBUF_client_2eoffline_2eproto__INCLUDED
#define PROTOBUF_client_2eoffline_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eoffline_2eproto();
void protobuf_AssignDesc_client_2eoffline_2eproto();
void protobuf_ShutdownFile_client_2eoffline_2eproto();

class offline;
class user_lose;
class offline_timelong_req;
class offline_timelong_rsp;
class offline_reward_req;
class offline_reward_rsp;
class offline_load_image;

// ===================================================================

class offline : public ::google::protobuf::Message {
 public:
  offline();
  virtual ~offline();

  offline(const offline& from);

  inline offline& operator=(const offline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline& default_instance();

  void Swap(offline* other);

  // implements Message ----------------------------------------------

  offline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offline& from);
  void MergeFrom(const offline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 scene_server_id = 3;
  inline bool has_scene_server_id() const;
  inline void clear_scene_server_id();
  static const int kSceneServerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 scene_server_id() const;
  inline void set_scene_server_id(::google::protobuf::uint32 value);

  // optional bool active = 4 [default = false];
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 4;
  inline bool active() const;
  inline void set_active(bool value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.offline)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_scene_server_id();
  inline void clear_has_scene_server_id();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 scene_server_id_;
  bool active_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoffline_2eproto();
  friend void protobuf_AssignDesc_client_2eoffline_2eproto();
  friend void protobuf_ShutdownFile_client_2eoffline_2eproto();

  void InitAsDefaultInstance();
  static offline* default_instance_;
};
// -------------------------------------------------------------------

class user_lose : public ::google::protobuf::Message {
 public:
  user_lose();
  virtual ~user_lose();

  user_lose(const user_lose& from);

  inline user_lose& operator=(const user_lose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_lose& default_instance();

  void Swap(user_lose* other);

  // implements Message ----------------------------------------------

  user_lose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_lose& from);
  void MergeFrom(const user_lose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.user_lose)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoffline_2eproto();
  friend void protobuf_AssignDesc_client_2eoffline_2eproto();
  friend void protobuf_ShutdownFile_client_2eoffline_2eproto();

  void InitAsDefaultInstance();
  static user_lose* default_instance_;
};
// -------------------------------------------------------------------

class offline_timelong_req : public ::google::protobuf::Message {
 public:
  offline_timelong_req();
  virtual ~offline_timelong_req();

  offline_timelong_req(const offline_timelong_req& from);

  inline offline_timelong_req& operator=(const offline_timelong_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_timelong_req& default_instance();

  void Swap(offline_timelong_req* other);

  // implements Message ----------------------------------------------

  offline_timelong_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offline_timelong_req& from);
  void MergeFrom(const offline_timelong_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.offline_timelong_req)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoffline_2eproto();
  friend void protobuf_AssignDesc_client_2eoffline_2eproto();
  friend void protobuf_ShutdownFile_client_2eoffline_2eproto();

  void InitAsDefaultInstance();
  static offline_timelong_req* default_instance_;
};
// -------------------------------------------------------------------

class offline_timelong_rsp : public ::google::protobuf::Message {
 public:
  offline_timelong_rsp();
  virtual ~offline_timelong_rsp();

  offline_timelong_rsp(const offline_timelong_rsp& from);

  inline offline_timelong_rsp& operator=(const offline_timelong_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_timelong_rsp& default_instance();

  void Swap(offline_timelong_rsp* other);

  // implements Message ----------------------------------------------

  offline_timelong_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offline_timelong_rsp& from);
  void MergeFrom(const offline_timelong_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 total = 2;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 2;
  inline ::google::protobuf::uint32 total() const;
  inline void set_total(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.offline_timelong_rsp)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoffline_2eproto();
  friend void protobuf_AssignDesc_client_2eoffline_2eproto();
  friend void protobuf_ShutdownFile_client_2eoffline_2eproto();

  void InitAsDefaultInstance();
  static offline_timelong_rsp* default_instance_;
};
// -------------------------------------------------------------------

class offline_reward_req : public ::google::protobuf::Message {
 public:
  offline_reward_req();
  virtual ~offline_reward_req();

  offline_reward_req(const offline_reward_req& from);

  inline offline_reward_req& operator=(const offline_reward_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_reward_req& default_instance();

  void Swap(offline_reward_req* other);

  // implements Message ----------------------------------------------

  offline_reward_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offline_reward_req& from);
  void MergeFrom(const offline_reward_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.offline_reward_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoffline_2eproto();
  friend void protobuf_AssignDesc_client_2eoffline_2eproto();
  friend void protobuf_ShutdownFile_client_2eoffline_2eproto();

  void InitAsDefaultInstance();
  static offline_reward_req* default_instance_;
};
// -------------------------------------------------------------------

class offline_reward_rsp : public ::google::protobuf::Message {
 public:
  offline_reward_rsp();
  virtual ~offline_reward_rsp();

  offline_reward_rsp(const offline_reward_rsp& from);

  inline offline_reward_rsp& operator=(const offline_reward_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_reward_rsp& default_instance();

  void Swap(offline_reward_rsp* other);

  // implements Message ----------------------------------------------

  offline_reward_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offline_reward_rsp& from);
  void MergeFrom(const offline_reward_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.offline_reward_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoffline_2eproto();
  friend void protobuf_AssignDesc_client_2eoffline_2eproto();
  friend void protobuf_ShutdownFile_client_2eoffline_2eproto();

  void InitAsDefaultInstance();
  static offline_reward_rsp* default_instance_;
};
// -------------------------------------------------------------------

class offline_load_image : public ::google::protobuf::Message {
 public:
  offline_load_image();
  virtual ~offline_load_image();

  offline_load_image(const offline_load_image& from);

  inline offline_load_image& operator=(const offline_load_image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_load_image& default_instance();

  void Swap(offline_load_image* other);

  // implements Message ----------------------------------------------

  offline_load_image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offline_load_image& from);
  void MergeFrom(const offline_load_image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // required uint32 limit_tl = 2;
  inline bool has_limit_tl() const;
  inline void clear_limit_tl();
  static const int kLimitTlFieldNumber = 2;
  inline ::google::protobuf::uint32 limit_tl() const;
  inline void set_limit_tl(::google::protobuf::uint32 value);

  // optional uint32 limit_lv = 3 [default = 0];
  inline bool has_limit_lv() const;
  inline void clear_limit_lv();
  static const int kLimitLvFieldNumber = 3;
  inline ::google::protobuf::uint32 limit_lv() const;
  inline void set_limit_lv(::google::protobuf::uint32 value);

  // optional uint32 limit_power = 4 [default = 0];
  inline bool has_limit_power() const;
  inline void clear_limit_power();
  static const int kLimitPowerFieldNumber = 4;
  inline ::google::protobuf::uint32 limit_power() const;
  inline void set_limit_power(::google::protobuf::uint32 value);

  // repeated uint32 role = 5;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 5;
  inline ::google::protobuf::uint32 role(int index) const;
  inline void set_role(int index, ::google::protobuf::uint32 value);
  inline void add_role(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role();

  // repeated uint32 family = 6;
  inline int family_size() const;
  inline void clear_family();
  static const int kFamilyFieldNumber = 6;
  inline ::google::protobuf::uint32 family(int index) const;
  inline void set_family(int index, ::google::protobuf::uint32 value);
  inline void add_family(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      family() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_family();

  // optional uint32 flag = 7 [default = 0];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 7;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.offline_load_image)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_limit_tl();
  inline void clear_has_limit_tl();
  inline void set_has_limit_lv();
  inline void clear_has_limit_lv();
  inline void set_has_limit_power();
  inline void clear_has_limit_power();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint32 limit_tl_;
  ::google::protobuf::uint32 limit_lv_;
  ::google::protobuf::uint32 limit_power_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > family_;
  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoffline_2eproto();
  friend void protobuf_AssignDesc_client_2eoffline_2eproto();
  friend void protobuf_ShutdownFile_client_2eoffline_2eproto();

  void InitAsDefaultInstance();
  static offline_load_image* default_instance_;
};
// ===================================================================


// ===================================================================

// offline

// required uint32 user_id = 1;
inline bool offline::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offline::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 offline::user_id() const {
  return user_id_;
}
inline void offline::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 role_id = 2;
inline bool offline::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offline::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offline::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offline::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 offline::role_id() const {
  return role_id_;
}
inline void offline::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 scene_server_id = 3;
inline bool offline::has_scene_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offline::set_has_scene_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offline::clear_has_scene_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offline::clear_scene_server_id() {
  scene_server_id_ = 0u;
  clear_has_scene_server_id();
}
inline ::google::protobuf::uint32 offline::scene_server_id() const {
  return scene_server_id_;
}
inline void offline::set_scene_server_id(::google::protobuf::uint32 value) {
  set_has_scene_server_id();
  scene_server_id_ = value;
}

// optional bool active = 4 [default = false];
inline bool offline::has_active() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offline::set_has_active() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offline::clear_has_active() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offline::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool offline::active() const {
  return active_;
}
inline void offline::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool offline::has_svr_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void offline::set_has_svr_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void offline::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void offline::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& offline::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* offline::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* offline::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void offline::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// user_lose

// required uint32 role_id = 1;
inline bool user_lose::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_lose::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_lose::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_lose::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 user_lose::role_id() const {
  return role_id_;
}
inline void user_lose::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// offline_timelong_req

// required uint32 time = 1;
inline bool offline_timelong_req::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_timelong_req::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_timelong_req::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offline_timelong_req::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 offline_timelong_req::time() const {
  return time_;
}
inline void offline_timelong_req::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool offline_timelong_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offline_timelong_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offline_timelong_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offline_timelong_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& offline_timelong_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* offline_timelong_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* offline_timelong_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void offline_timelong_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// offline_timelong_rsp

// required uint32 time = 1;
inline bool offline_timelong_rsp::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_timelong_rsp::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_timelong_rsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offline_timelong_rsp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 offline_timelong_rsp::time() const {
  return time_;
}
inline void offline_timelong_rsp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 total = 2;
inline bool offline_timelong_rsp::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offline_timelong_rsp::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offline_timelong_rsp::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offline_timelong_rsp::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 offline_timelong_rsp::total() const {
  return total_;
}
inline void offline_timelong_rsp::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
}

// -------------------------------------------------------------------

// offline_reward_req

// required uint32 type = 1;
inline bool offline_reward_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_reward_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_reward_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offline_reward_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 offline_reward_req::type() const {
  return type_;
}
inline void offline_reward_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool offline_reward_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offline_reward_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offline_reward_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offline_reward_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& offline_reward_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* offline_reward_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* offline_reward_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void offline_reward_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// offline_reward_rsp

// required uint32 ret = 1;
inline bool offline_reward_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_reward_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_reward_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offline_reward_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 offline_reward_rsp::ret() const {
  return ret_;
}
inline void offline_reward_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// offline_load_image

// required uint32 scene_id = 1;
inline bool offline_load_image::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_load_image::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_load_image::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offline_load_image::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 offline_load_image::scene_id() const {
  return scene_id_;
}
inline void offline_load_image::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required uint32 limit_tl = 2;
inline bool offline_load_image::has_limit_tl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offline_load_image::set_has_limit_tl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offline_load_image::clear_has_limit_tl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offline_load_image::clear_limit_tl() {
  limit_tl_ = 0u;
  clear_has_limit_tl();
}
inline ::google::protobuf::uint32 offline_load_image::limit_tl() const {
  return limit_tl_;
}
inline void offline_load_image::set_limit_tl(::google::protobuf::uint32 value) {
  set_has_limit_tl();
  limit_tl_ = value;
}

// optional uint32 limit_lv = 3 [default = 0];
inline bool offline_load_image::has_limit_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offline_load_image::set_has_limit_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offline_load_image::clear_has_limit_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offline_load_image::clear_limit_lv() {
  limit_lv_ = 0u;
  clear_has_limit_lv();
}
inline ::google::protobuf::uint32 offline_load_image::limit_lv() const {
  return limit_lv_;
}
inline void offline_load_image::set_limit_lv(::google::protobuf::uint32 value) {
  set_has_limit_lv();
  limit_lv_ = value;
}

// optional uint32 limit_power = 4 [default = 0];
inline bool offline_load_image::has_limit_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offline_load_image::set_has_limit_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offline_load_image::clear_has_limit_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offline_load_image::clear_limit_power() {
  limit_power_ = 0u;
  clear_has_limit_power();
}
inline ::google::protobuf::uint32 offline_load_image::limit_power() const {
  return limit_power_;
}
inline void offline_load_image::set_limit_power(::google::protobuf::uint32 value) {
  set_has_limit_power();
  limit_power_ = value;
}

// repeated uint32 role = 5;
inline int offline_load_image::role_size() const {
  return role_.size();
}
inline void offline_load_image::clear_role() {
  role_.Clear();
}
inline ::google::protobuf::uint32 offline_load_image::role(int index) const {
  return role_.Get(index);
}
inline void offline_load_image::set_role(int index, ::google::protobuf::uint32 value) {
  role_.Set(index, value);
}
inline void offline_load_image::add_role(::google::protobuf::uint32 value) {
  role_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
offline_load_image::role() const {
  return role_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
offline_load_image::mutable_role() {
  return &role_;
}

// repeated uint32 family = 6;
inline int offline_load_image::family_size() const {
  return family_.size();
}
inline void offline_load_image::clear_family() {
  family_.Clear();
}
inline ::google::protobuf::uint32 offline_load_image::family(int index) const {
  return family_.Get(index);
}
inline void offline_load_image::set_family(int index, ::google::protobuf::uint32 value) {
  family_.Set(index, value);
}
inline void offline_load_image::add_family(::google::protobuf::uint32 value) {
  family_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
offline_load_image::family() const {
  return family_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
offline_load_image::mutable_family() {
  return &family_;
}

// optional uint32 flag = 7 [default = 0];
inline bool offline_load_image::has_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void offline_load_image::set_has_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void offline_load_image::clear_has_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void offline_load_image::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 offline_load_image::flag() const {
  return flag_;
}
inline void offline_load_image::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eoffline_2eproto__INCLUDED
