// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.cycle.proto

#ifndef PROTOBUF_client_2ecycle_2eproto__INCLUDED
#define PROTOBUF_client_2ecycle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
#include "client.role_props.pb.h"
#include "client.raid_operate.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2ecycle_2eproto();
void protobuf_AssignDesc_client_2ecycle_2eproto();
void protobuf_ShutdownFile_client_2ecycle_2eproto();

class helper_info;
class cycle_helpers;
class cycle_passed_levels;
class cycle_level_info;
class cycle_add_helped_count;
class cycle_fetch_helpers;
class cycle_update_record_req;
class cycle_update_record_rsp;
class cycle_info_req;
class cycle_info_rsp;
class cycle_challenge_req;
class cycle_helpers_req;
class cycle_helper_info;
class cycle_helpers_rsp;
class cycle_mopup_req;
class cycle_mopup_result;
class cycle_mopup_rsp;

// ===================================================================

class helper_info : public ::google::protobuf::Message {
 public:
  helper_info();
  virtual ~helper_info();

  helper_info(const helper_info& from);

  inline helper_info& operator=(const helper_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const helper_info& default_instance();

  void Swap(helper_info* other);

  // implements Message ----------------------------------------------

  helper_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const helper_info& from);
  void MergeFrom(const helper_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.helper_info)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static helper_info* default_instance_;
};
// -------------------------------------------------------------------

class cycle_helpers : public ::google::protobuf::Message {
 public:
  cycle_helpers();
  virtual ~cycle_helpers();

  cycle_helpers(const cycle_helpers& from);

  inline cycle_helpers& operator=(const cycle_helpers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_helpers& default_instance();

  void Swap(cycle_helpers* other);

  // implements Message ----------------------------------------------

  cycle_helpers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_helpers& from);
  void MergeFrom(const cycle_helpers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.helper_info hi = 1;
  inline int hi_size() const;
  inline void clear_hi();
  static const int kHiFieldNumber = 1;
  inline const ::client::helper_info& hi(int index) const;
  inline ::client::helper_info* mutable_hi(int index);
  inline ::client::helper_info* add_hi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::helper_info >&
      hi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::helper_info >*
      mutable_hi();

  // @@protoc_insertion_point(class_scope:client.cycle_helpers)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::helper_info > hi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_helpers* default_instance_;
};
// -------------------------------------------------------------------

class cycle_passed_levels : public ::google::protobuf::Message {
 public:
  cycle_passed_levels();
  virtual ~cycle_passed_levels();

  cycle_passed_levels(const cycle_passed_levels& from);

  inline cycle_passed_levels& operator=(const cycle_passed_levels& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_passed_levels& default_instance();

  void Swap(cycle_passed_levels* other);

  // implements Message ----------------------------------------------

  cycle_passed_levels* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_passed_levels& from);
  void MergeFrom(const cycle_passed_levels& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 level = 1;
  inline int level_size() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level(int index) const;
  inline void set_level(int index, ::google::protobuf::uint32 value);
  inline void add_level(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_level();

  // @@protoc_insertion_point(class_scope:client.cycle_passed_levels)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_passed_levels* default_instance_;
};
// -------------------------------------------------------------------

class cycle_level_info : public ::google::protobuf::Message {
 public:
  cycle_level_info();
  virtual ~cycle_level_info();

  cycle_level_info(const cycle_level_info& from);

  inline cycle_level_info& operator=(const cycle_level_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_level_info& default_instance();

  void Swap(cycle_level_info* other);

  // implements Message ----------------------------------------------

  cycle_level_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_level_info& from);
  void MergeFrom(const cycle_level_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 update = 2;
  inline bool has_update() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 2;
  inline ::google::protobuf::uint32 update() const;
  inline void set_update(::google::protobuf::uint32 value);

  // required uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 tick = 4;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 4;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.cycle_level_info)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_update();
  inline void clear_has_update();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_tick();
  inline void clear_has_tick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 update_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 tick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_level_info* default_instance_;
};
// -------------------------------------------------------------------

class cycle_add_helped_count : public ::google::protobuf::Message {
 public:
  cycle_add_helped_count();
  virtual ~cycle_add_helped_count();

  cycle_add_helped_count(const cycle_add_helped_count& from);

  inline cycle_add_helped_count& operator=(const cycle_add_helped_count& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_add_helped_count& default_instance();

  void Swap(cycle_add_helped_count* other);

  // implements Message ----------------------------------------------

  cycle_add_helped_count* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_add_helped_count& from);
  void MergeFrom(const cycle_add_helped_count& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.cycle_add_helped_count)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_add_helped_count* default_instance_;
};
// -------------------------------------------------------------------

class cycle_fetch_helpers : public ::google::protobuf::Message {
 public:
  cycle_fetch_helpers();
  virtual ~cycle_fetch_helpers();

  cycle_fetch_helpers(const cycle_fetch_helpers& from);

  inline cycle_fetch_helpers& operator=(const cycle_fetch_helpers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_fetch_helpers& default_instance();

  void Swap(cycle_fetch_helpers* other);

  // implements Message ----------------------------------------------

  cycle_fetch_helpers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_fetch_helpers& from);
  void MergeFrom(const cycle_fetch_helpers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required .client.server_head svr_head = 2;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 2;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // repeated uint32 except = 3;
  inline int except_size() const;
  inline void clear_except();
  static const int kExceptFieldNumber = 3;
  inline ::google::protobuf::uint32 except(int index) const;
  inline void set_except(int index, ::google::protobuf::uint32 value);
  inline void add_except(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      except() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_except();

  // @@protoc_insertion_point(class_scope:client.cycle_fetch_helpers)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > except_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_fetch_helpers* default_instance_;
};
// -------------------------------------------------------------------

class cycle_update_record_req : public ::google::protobuf::Message {
 public:
  cycle_update_record_req();
  virtual ~cycle_update_record_req();

  cycle_update_record_req(const cycle_update_record_req& from);

  inline cycle_update_record_req& operator=(const cycle_update_record_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_update_record_req& default_instance();

  void Swap(cycle_update_record_req* other);

  // implements Message ----------------------------------------------

  cycle_update_record_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_update_record_req& from);
  void MergeFrom(const cycle_update_record_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 update = 2;
  inline bool has_update() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 2;
  inline ::google::protobuf::uint32 update() const;
  inline void set_update(::google::protobuf::uint32 value);

  // required uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 raid_id = 4;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 4;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // required uint32 tick = 5;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 5;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // optional .client.raid_success_info success = 6;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 6;
  inline const ::client::raid_success_info& success() const;
  inline ::client::raid_success_info* mutable_success();
  inline ::client::raid_success_info* release_success();
  inline void set_allocated_success(::client::raid_success_info* success);

  // @@protoc_insertion_point(class_scope:client.cycle_update_record_req)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_update();
  inline void clear_has_update();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 update_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 raid_id_;
  ::client::raid_success_info* success_;
  ::google::protobuf::uint32 tick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_update_record_req* default_instance_;
};
// -------------------------------------------------------------------

class cycle_update_record_rsp : public ::google::protobuf::Message {
 public:
  cycle_update_record_rsp();
  virtual ~cycle_update_record_rsp();

  cycle_update_record_rsp(const cycle_update_record_rsp& from);

  inline cycle_update_record_rsp& operator=(const cycle_update_record_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_update_record_rsp& default_instance();

  void Swap(cycle_update_record_rsp* other);

  // implements Message ----------------------------------------------

  cycle_update_record_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_update_record_rsp& from);
  void MergeFrom(const cycle_update_record_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 update = 3;
  inline bool has_update() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 3;
  inline ::google::protobuf::uint32 update() const;
  inline void set_update(::google::protobuf::uint32 value);

  // required uint32 tick = 4;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 4;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // required uint32 raid_id = 5;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 5;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // optional string role_name = 6;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 6;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint32 record = 7;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 7;
  inline ::google::protobuf::uint32 record() const;
  inline void set_record(::google::protobuf::uint32 value);

  // optional .client.raid_success_info success = 8;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 8;
  inline const ::client::raid_success_info& success() const;
  inline ::client::raid_success_info* mutable_success();
  inline ::client::raid_success_info* release_success();
  inline void set_allocated_success(::client::raid_success_info* success);

  // @@protoc_insertion_point(class_scope:client.cycle_update_record_rsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_update();
  inline void clear_has_update();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 update_;
  ::google::protobuf::uint32 tick_;
  ::std::string* role_name_;
  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 record_;
  ::client::raid_success_info* success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_update_record_rsp* default_instance_;
};
// -------------------------------------------------------------------

class cycle_info_req : public ::google::protobuf::Message {
 public:
  cycle_info_req();
  virtual ~cycle_info_req();

  cycle_info_req(const cycle_info_req& from);

  inline cycle_info_req& operator=(const cycle_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_info_req& default_instance();

  void Swap(cycle_info_req* other);

  // implements Message ----------------------------------------------

  cycle_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_info_req& from);
  void MergeFrom(const cycle_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.cycle_info_req)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_info_req* default_instance_;
};
// -------------------------------------------------------------------

class cycle_info_rsp : public ::google::protobuf::Message {
 public:
  cycle_info_rsp();
  virtual ~cycle_info_rsp();

  cycle_info_rsp(const cycle_info_rsp& from);

  inline cycle_info_rsp& operator=(const cycle_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_info_rsp& default_instance();

  void Swap(cycle_info_rsp* other);

  // implements Message ----------------------------------------------

  cycle_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_info_rsp& from);
  void MergeFrom(const cycle_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 top = 3;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 3;
  inline ::google::protobuf::uint32 top() const;
  inline void set_top(::google::protobuf::uint32 value);

  // optional uint32 record = 4;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 4;
  inline ::google::protobuf::uint32 record() const;
  inline void set_record(::google::protobuf::uint32 value);

  // optional string role_name = 5;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 5;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint32 tick = 6;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 6;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // optional bool award = 7;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 7;
  inline bool award() const;
  inline void set_award(bool value);

  // optional uint32 type = 8;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 count = 9;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 9;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.cycle_info_rsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_tick();
  inline void clear_has_tick();
  inline void set_has_award();
  inline void clear_has_award();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 top_;
  ::google::protobuf::uint32 record_;
  ::std::string* role_name_;
  ::google::protobuf::uint32 tick_;
  bool award_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class cycle_challenge_req : public ::google::protobuf::Message {
 public:
  cycle_challenge_req();
  virtual ~cycle_challenge_req();

  cycle_challenge_req(const cycle_challenge_req& from);

  inline cycle_challenge_req& operator=(const cycle_challenge_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_challenge_req& default_instance();

  void Swap(cycle_challenge_req* other);

  // implements Message ----------------------------------------------

  cycle_challenge_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_challenge_req& from);
  void MergeFrom(const cycle_challenge_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 helper = 2;
  inline bool has_helper() const;
  inline void clear_helper();
  static const int kHelperFieldNumber = 2;
  inline ::google::protobuf::uint32 helper() const;
  inline void set_helper(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.cycle_challenge_req)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_helper();
  inline void clear_has_helper();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 helper_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_challenge_req* default_instance_;
};
// -------------------------------------------------------------------

class cycle_helpers_req : public ::google::protobuf::Message {
 public:
  cycle_helpers_req();
  virtual ~cycle_helpers_req();

  cycle_helpers_req(const cycle_helpers_req& from);

  inline cycle_helpers_req& operator=(const cycle_helpers_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_helpers_req& default_instance();

  void Swap(cycle_helpers_req* other);

  // implements Message ----------------------------------------------

  cycle_helpers_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_helpers_req& from);
  void MergeFrom(const cycle_helpers_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.cycle_helpers_req)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_helpers_req* default_instance_;
};
// -------------------------------------------------------------------

class cycle_helper_info : public ::google::protobuf::Message {
 public:
  cycle_helper_info();
  virtual ~cycle_helper_info();

  cycle_helper_info(const cycle_helper_info& from);

  inline cycle_helper_info& operator=(const cycle_helper_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_helper_info& default_instance();

  void Swap(cycle_helper_info* other);

  // implements Message ----------------------------------------------

  cycle_helper_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_helper_info& from);
  void MergeFrom(const cycle_helper_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // required uint32 fighting_power = 3;
  inline bool has_fighting_power() const;
  inline void clear_fighting_power();
  static const int kFightingPowerFieldNumber = 3;
  inline ::google::protobuf::uint32 fighting_power() const;
  inline void set_fighting_power(::google::protobuf::uint32 value);

  // required uint32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.cycle_helper_info)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_fighting_power();
  inline void clear_has_fighting_power();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 fighting_power_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_helper_info* default_instance_;
};
// -------------------------------------------------------------------

class cycle_helpers_rsp : public ::google::protobuf::Message {
 public:
  cycle_helpers_rsp();
  virtual ~cycle_helpers_rsp();

  cycle_helpers_rsp(const cycle_helpers_rsp& from);

  inline cycle_helpers_rsp& operator=(const cycle_helpers_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_helpers_rsp& default_instance();

  void Swap(cycle_helpers_rsp* other);

  // implements Message ----------------------------------------------

  cycle_helpers_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_helpers_rsp& from);
  void MergeFrom(const cycle_helpers_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // repeated .client.cycle_helper_info chi = 2;
  inline int chi_size() const;
  inline void clear_chi();
  static const int kChiFieldNumber = 2;
  inline const ::client::cycle_helper_info& chi(int index) const;
  inline ::client::cycle_helper_info* mutable_chi(int index);
  inline ::client::cycle_helper_info* add_chi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::cycle_helper_info >&
      chi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::cycle_helper_info >*
      mutable_chi();

  // @@protoc_insertion_point(class_scope:client.cycle_helpers_rsp)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::cycle_helper_info > chi_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_helpers_rsp* default_instance_;
};
// -------------------------------------------------------------------

class cycle_mopup_req : public ::google::protobuf::Message {
 public:
  cycle_mopup_req();
  virtual ~cycle_mopup_req();

  cycle_mopup_req(const cycle_mopup_req& from);

  inline cycle_mopup_req& operator=(const cycle_mopup_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_mopup_req& default_instance();

  void Swap(cycle_mopup_req* other);

  // implements Message ----------------------------------------------

  cycle_mopup_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_mopup_req& from);
  void MergeFrom(const cycle_mopup_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.cycle_mopup_req)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_mopup_req* default_instance_;
};
// -------------------------------------------------------------------

class cycle_mopup_result : public ::google::protobuf::Message {
 public:
  cycle_mopup_result();
  virtual ~cycle_mopup_result();

  cycle_mopup_result(const cycle_mopup_result& from);

  inline cycle_mopup_result& operator=(const cycle_mopup_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_mopup_result& default_instance();

  void Swap(cycle_mopup_result* other);

  // implements Message ----------------------------------------------

  cycle_mopup_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_mopup_result& from);
  void MergeFrom(const cycle_mopup_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional .client.raid_result_info rri = 2;
  inline bool has_rri() const;
  inline void clear_rri();
  static const int kRriFieldNumber = 2;
  inline const ::client::raid_result_info& rri() const;
  inline ::client::raid_result_info* mutable_rri();
  inline ::client::raid_result_info* release_rri();
  inline void set_allocated_rri(::client::raid_result_info* rri);

  // @@protoc_insertion_point(class_scope:client.cycle_mopup_result)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_rri();
  inline void clear_has_rri();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::raid_result_info* rri_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_mopup_result* default_instance_;
};
// -------------------------------------------------------------------

class cycle_mopup_rsp : public ::google::protobuf::Message {
 public:
  cycle_mopup_rsp();
  virtual ~cycle_mopup_rsp();

  cycle_mopup_rsp(const cycle_mopup_rsp& from);

  inline cycle_mopup_rsp& operator=(const cycle_mopup_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cycle_mopup_rsp& default_instance();

  void Swap(cycle_mopup_rsp* other);

  // implements Message ----------------------------------------------

  cycle_mopup_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cycle_mopup_rsp& from);
  void MergeFrom(const cycle_mopup_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.cycle_mopup_result cmr = 1;
  inline int cmr_size() const;
  inline void clear_cmr();
  static const int kCmrFieldNumber = 1;
  inline const ::client::cycle_mopup_result& cmr(int index) const;
  inline ::client::cycle_mopup_result* mutable_cmr(int index);
  inline ::client::cycle_mopup_result* add_cmr();
  inline const ::google::protobuf::RepeatedPtrField< ::client::cycle_mopup_result >&
      cmr() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::cycle_mopup_result >*
      mutable_cmr();

  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.cycle_mopup_rsp)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::cycle_mopup_result > cmr_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecycle_2eproto();
  friend void protobuf_AssignDesc_client_2ecycle_2eproto();
  friend void protobuf_ShutdownFile_client_2ecycle_2eproto();

  void InitAsDefaultInstance();
  static cycle_mopup_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// helper_info

// required uint32 role_id = 1;
inline bool helper_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void helper_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void helper_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void helper_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 helper_info::role_id() const {
  return role_id_;
}
inline void helper_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 time = 2;
inline bool helper_info::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void helper_info::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void helper_info::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void helper_info::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 helper_info::time() const {
  return time_;
}
inline void helper_info::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// cycle_helpers

// repeated .client.helper_info hi = 1;
inline int cycle_helpers::hi_size() const {
  return hi_.size();
}
inline void cycle_helpers::clear_hi() {
  hi_.Clear();
}
inline const ::client::helper_info& cycle_helpers::hi(int index) const {
  return hi_.Get(index);
}
inline ::client::helper_info* cycle_helpers::mutable_hi(int index) {
  return hi_.Mutable(index);
}
inline ::client::helper_info* cycle_helpers::add_hi() {
  return hi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::helper_info >&
cycle_helpers::hi() const {
  return hi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::helper_info >*
cycle_helpers::mutable_hi() {
  return &hi_;
}

// -------------------------------------------------------------------

// cycle_passed_levels

// repeated uint32 level = 1;
inline int cycle_passed_levels::level_size() const {
  return level_.size();
}
inline void cycle_passed_levels::clear_level() {
  level_.Clear();
}
inline ::google::protobuf::uint32 cycle_passed_levels::level(int index) const {
  return level_.Get(index);
}
inline void cycle_passed_levels::set_level(int index, ::google::protobuf::uint32 value) {
  level_.Set(index, value);
}
inline void cycle_passed_levels::add_level(::google::protobuf::uint32 value) {
  level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
cycle_passed_levels::level() const {
  return level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
cycle_passed_levels::mutable_level() {
  return &level_;
}

// -------------------------------------------------------------------

// cycle_level_info

// required uint32 level = 1;
inline bool cycle_level_info::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_level_info::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_level_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_level_info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 cycle_level_info::level() const {
  return level_;
}
inline void cycle_level_info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 update = 2;
inline bool cycle_level_info::has_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cycle_level_info::set_has_update() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cycle_level_info::clear_has_update() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cycle_level_info::clear_update() {
  update_ = 0u;
  clear_has_update();
}
inline ::google::protobuf::uint32 cycle_level_info::update() const {
  return update_;
}
inline void cycle_level_info::set_update(::google::protobuf::uint32 value) {
  set_has_update();
  update_ = value;
}

// required uint32 time = 3;
inline bool cycle_level_info::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cycle_level_info::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cycle_level_info::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cycle_level_info::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 cycle_level_info::time() const {
  return time_;
}
inline void cycle_level_info::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 tick = 4;
inline bool cycle_level_info::has_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cycle_level_info::set_has_tick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cycle_level_info::clear_has_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cycle_level_info::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 cycle_level_info::tick() const {
  return tick_;
}
inline void cycle_level_info::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// -------------------------------------------------------------------

// cycle_add_helped_count

// required uint32 role_id = 1;
inline bool cycle_add_helped_count::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_add_helped_count::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_add_helped_count::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_add_helped_count::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 cycle_add_helped_count::role_id() const {
  return role_id_;
}
inline void cycle_add_helped_count::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// cycle_fetch_helpers

// required uint32 level = 1;
inline bool cycle_fetch_helpers::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_fetch_helpers::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_fetch_helpers::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_fetch_helpers::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 cycle_fetch_helpers::level() const {
  return level_;
}
inline void cycle_fetch_helpers::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required .client.server_head svr_head = 2;
inline bool cycle_fetch_helpers::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cycle_fetch_helpers::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cycle_fetch_helpers::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cycle_fetch_helpers::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& cycle_fetch_helpers::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* cycle_fetch_helpers::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* cycle_fetch_helpers::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void cycle_fetch_helpers::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// repeated uint32 except = 3;
inline int cycle_fetch_helpers::except_size() const {
  return except_.size();
}
inline void cycle_fetch_helpers::clear_except() {
  except_.Clear();
}
inline ::google::protobuf::uint32 cycle_fetch_helpers::except(int index) const {
  return except_.Get(index);
}
inline void cycle_fetch_helpers::set_except(int index, ::google::protobuf::uint32 value) {
  except_.Set(index, value);
}
inline void cycle_fetch_helpers::add_except(::google::protobuf::uint32 value) {
  except_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
cycle_fetch_helpers::except() const {
  return except_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
cycle_fetch_helpers::mutable_except() {
  return &except_;
}

// -------------------------------------------------------------------

// cycle_update_record_req

// required uint32 level = 1;
inline bool cycle_update_record_req::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_update_record_req::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_update_record_req::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_update_record_req::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 cycle_update_record_req::level() const {
  return level_;
}
inline void cycle_update_record_req::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 update = 2;
inline bool cycle_update_record_req::has_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cycle_update_record_req::set_has_update() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cycle_update_record_req::clear_has_update() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cycle_update_record_req::clear_update() {
  update_ = 0u;
  clear_has_update();
}
inline ::google::protobuf::uint32 cycle_update_record_req::update() const {
  return update_;
}
inline void cycle_update_record_req::set_update(::google::protobuf::uint32 value) {
  set_has_update();
  update_ = value;
}

// required uint32 role_id = 3;
inline bool cycle_update_record_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cycle_update_record_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cycle_update_record_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cycle_update_record_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 cycle_update_record_req::role_id() const {
  return role_id_;
}
inline void cycle_update_record_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 raid_id = 4;
inline bool cycle_update_record_req::has_raid_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cycle_update_record_req::set_has_raid_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cycle_update_record_req::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cycle_update_record_req::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 cycle_update_record_req::raid_id() const {
  return raid_id_;
}
inline void cycle_update_record_req::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// required uint32 tick = 5;
inline bool cycle_update_record_req::has_tick() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cycle_update_record_req::set_has_tick() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cycle_update_record_req::clear_has_tick() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cycle_update_record_req::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 cycle_update_record_req::tick() const {
  return tick_;
}
inline void cycle_update_record_req::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// optional .client.raid_success_info success = 6;
inline bool cycle_update_record_req::has_success() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cycle_update_record_req::set_has_success() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cycle_update_record_req::clear_has_success() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cycle_update_record_req::clear_success() {
  if (success_ != NULL) success_->::client::raid_success_info::Clear();
  clear_has_success();
}
inline const ::client::raid_success_info& cycle_update_record_req::success() const {
  return success_ != NULL ? *success_ : *default_instance_->success_;
}
inline ::client::raid_success_info* cycle_update_record_req::mutable_success() {
  set_has_success();
  if (success_ == NULL) success_ = new ::client::raid_success_info;
  return success_;
}
inline ::client::raid_success_info* cycle_update_record_req::release_success() {
  clear_has_success();
  ::client::raid_success_info* temp = success_;
  success_ = NULL;
  return temp;
}
inline void cycle_update_record_req::set_allocated_success(::client::raid_success_info* success) {
  delete success_;
  success_ = success;
  if (success) {
    set_has_success();
  } else {
    clear_has_success();
  }
}

// -------------------------------------------------------------------

// cycle_update_record_rsp

// required uint32 role_id = 1;
inline bool cycle_update_record_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_update_record_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_update_record_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_update_record_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 cycle_update_record_rsp::role_id() const {
  return role_id_;
}
inline void cycle_update_record_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 level = 2;
inline bool cycle_update_record_rsp::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cycle_update_record_rsp::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cycle_update_record_rsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cycle_update_record_rsp::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 cycle_update_record_rsp::level() const {
  return level_;
}
inline void cycle_update_record_rsp::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 update = 3;
inline bool cycle_update_record_rsp::has_update() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cycle_update_record_rsp::set_has_update() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cycle_update_record_rsp::clear_has_update() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cycle_update_record_rsp::clear_update() {
  update_ = 0u;
  clear_has_update();
}
inline ::google::protobuf::uint32 cycle_update_record_rsp::update() const {
  return update_;
}
inline void cycle_update_record_rsp::set_update(::google::protobuf::uint32 value) {
  set_has_update();
  update_ = value;
}

// required uint32 tick = 4;
inline bool cycle_update_record_rsp::has_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cycle_update_record_rsp::set_has_tick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cycle_update_record_rsp::clear_has_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cycle_update_record_rsp::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 cycle_update_record_rsp::tick() const {
  return tick_;
}
inline void cycle_update_record_rsp::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// required uint32 raid_id = 5;
inline bool cycle_update_record_rsp::has_raid_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cycle_update_record_rsp::set_has_raid_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cycle_update_record_rsp::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cycle_update_record_rsp::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 cycle_update_record_rsp::raid_id() const {
  return raid_id_;
}
inline void cycle_update_record_rsp::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// optional string role_name = 6;
inline bool cycle_update_record_rsp::has_role_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cycle_update_record_rsp::set_has_role_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cycle_update_record_rsp::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cycle_update_record_rsp::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& cycle_update_record_rsp::role_name() const {
  return *role_name_;
}
inline void cycle_update_record_rsp::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void cycle_update_record_rsp::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void cycle_update_record_rsp::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cycle_update_record_rsp::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* cycle_update_record_rsp::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cycle_update_record_rsp::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 record = 7;
inline bool cycle_update_record_rsp::has_record() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cycle_update_record_rsp::set_has_record() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cycle_update_record_rsp::clear_has_record() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cycle_update_record_rsp::clear_record() {
  record_ = 0u;
  clear_has_record();
}
inline ::google::protobuf::uint32 cycle_update_record_rsp::record() const {
  return record_;
}
inline void cycle_update_record_rsp::set_record(::google::protobuf::uint32 value) {
  set_has_record();
  record_ = value;
}

// optional .client.raid_success_info success = 8;
inline bool cycle_update_record_rsp::has_success() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cycle_update_record_rsp::set_has_success() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cycle_update_record_rsp::clear_has_success() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cycle_update_record_rsp::clear_success() {
  if (success_ != NULL) success_->::client::raid_success_info::Clear();
  clear_has_success();
}
inline const ::client::raid_success_info& cycle_update_record_rsp::success() const {
  return success_ != NULL ? *success_ : *default_instance_->success_;
}
inline ::client::raid_success_info* cycle_update_record_rsp::mutable_success() {
  set_has_success();
  if (success_ == NULL) success_ = new ::client::raid_success_info;
  return success_;
}
inline ::client::raid_success_info* cycle_update_record_rsp::release_success() {
  clear_has_success();
  ::client::raid_success_info* temp = success_;
  success_ = NULL;
  return temp;
}
inline void cycle_update_record_rsp::set_allocated_success(::client::raid_success_info* success) {
  delete success_;
  success_ = success;
  if (success) {
    set_has_success();
  } else {
    clear_has_success();
  }
}

// -------------------------------------------------------------------

// cycle_info_req

// required uint32 level = 1;
inline bool cycle_info_req::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_info_req::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_info_req::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_info_req::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 cycle_info_req::level() const {
  return level_;
}
inline void cycle_info_req::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool cycle_info_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cycle_info_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cycle_info_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cycle_info_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& cycle_info_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* cycle_info_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* cycle_info_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void cycle_info_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// cycle_info_rsp

// required uint32 role_id = 1;
inline bool cycle_info_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_info_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_info_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_info_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 cycle_info_rsp::role_id() const {
  return role_id_;
}
inline void cycle_info_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 level = 2;
inline bool cycle_info_rsp::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cycle_info_rsp::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cycle_info_rsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cycle_info_rsp::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 cycle_info_rsp::level() const {
  return level_;
}
inline void cycle_info_rsp::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 top = 3;
inline bool cycle_info_rsp::has_top() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cycle_info_rsp::set_has_top() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cycle_info_rsp::clear_has_top() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cycle_info_rsp::clear_top() {
  top_ = 0u;
  clear_has_top();
}
inline ::google::protobuf::uint32 cycle_info_rsp::top() const {
  return top_;
}
inline void cycle_info_rsp::set_top(::google::protobuf::uint32 value) {
  set_has_top();
  top_ = value;
}

// optional uint32 record = 4;
inline bool cycle_info_rsp::has_record() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cycle_info_rsp::set_has_record() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cycle_info_rsp::clear_has_record() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cycle_info_rsp::clear_record() {
  record_ = 0u;
  clear_has_record();
}
inline ::google::protobuf::uint32 cycle_info_rsp::record() const {
  return record_;
}
inline void cycle_info_rsp::set_record(::google::protobuf::uint32 value) {
  set_has_record();
  record_ = value;
}

// optional string role_name = 5;
inline bool cycle_info_rsp::has_role_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cycle_info_rsp::set_has_role_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cycle_info_rsp::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cycle_info_rsp::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& cycle_info_rsp::role_name() const {
  return *role_name_;
}
inline void cycle_info_rsp::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void cycle_info_rsp::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void cycle_info_rsp::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cycle_info_rsp::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* cycle_info_rsp::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cycle_info_rsp::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 tick = 6;
inline bool cycle_info_rsp::has_tick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cycle_info_rsp::set_has_tick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cycle_info_rsp::clear_has_tick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cycle_info_rsp::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 cycle_info_rsp::tick() const {
  return tick_;
}
inline void cycle_info_rsp::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}

// optional bool award = 7;
inline bool cycle_info_rsp::has_award() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cycle_info_rsp::set_has_award() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cycle_info_rsp::clear_has_award() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cycle_info_rsp::clear_award() {
  award_ = false;
  clear_has_award();
}
inline bool cycle_info_rsp::award() const {
  return award_;
}
inline void cycle_info_rsp::set_award(bool value) {
  set_has_award();
  award_ = value;
}

// optional uint32 type = 8;
inline bool cycle_info_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void cycle_info_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void cycle_info_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void cycle_info_rsp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 cycle_info_rsp::type() const {
  return type_;
}
inline void cycle_info_rsp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 count = 9;
inline bool cycle_info_rsp::has_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void cycle_info_rsp::set_has_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void cycle_info_rsp::clear_has_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void cycle_info_rsp::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 cycle_info_rsp::count() const {
  return count_;
}
inline void cycle_info_rsp::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// cycle_challenge_req

// required uint32 level = 1;
inline bool cycle_challenge_req::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_challenge_req::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_challenge_req::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_challenge_req::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 cycle_challenge_req::level() const {
  return level_;
}
inline void cycle_challenge_req::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 helper = 2;
inline bool cycle_challenge_req::has_helper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cycle_challenge_req::set_has_helper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cycle_challenge_req::clear_has_helper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cycle_challenge_req::clear_helper() {
  helper_ = 0u;
  clear_has_helper();
}
inline ::google::protobuf::uint32 cycle_challenge_req::helper() const {
  return helper_;
}
inline void cycle_challenge_req::set_helper(::google::protobuf::uint32 value) {
  set_has_helper();
  helper_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool cycle_challenge_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cycle_challenge_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cycle_challenge_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cycle_challenge_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& cycle_challenge_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* cycle_challenge_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* cycle_challenge_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void cycle_challenge_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// cycle_helpers_req

// required uint32 level = 1;
inline bool cycle_helpers_req::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_helpers_req::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_helpers_req::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_helpers_req::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 cycle_helpers_req::level() const {
  return level_;
}
inline void cycle_helpers_req::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool cycle_helpers_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cycle_helpers_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cycle_helpers_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cycle_helpers_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& cycle_helpers_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* cycle_helpers_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* cycle_helpers_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void cycle_helpers_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// cycle_helper_info

// required uint32 role_id = 1;
inline bool cycle_helper_info::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_helper_info::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_helper_info::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_helper_info::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 cycle_helper_info::role_id() const {
  return role_id_;
}
inline void cycle_helper_info::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required string role_name = 2;
inline bool cycle_helper_info::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cycle_helper_info::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cycle_helper_info::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cycle_helper_info::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& cycle_helper_info::role_name() const {
  return *role_name_;
}
inline void cycle_helper_info::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void cycle_helper_info::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void cycle_helper_info::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cycle_helper_info::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* cycle_helper_info::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cycle_helper_info::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 fighting_power = 3;
inline bool cycle_helper_info::has_fighting_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cycle_helper_info::set_has_fighting_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cycle_helper_info::clear_has_fighting_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cycle_helper_info::clear_fighting_power() {
  fighting_power_ = 0u;
  clear_has_fighting_power();
}
inline ::google::protobuf::uint32 cycle_helper_info::fighting_power() const {
  return fighting_power_;
}
inline void cycle_helper_info::set_fighting_power(::google::protobuf::uint32 value) {
  set_has_fighting_power();
  fighting_power_ = value;
}

// required uint32 count = 4;
inline bool cycle_helper_info::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cycle_helper_info::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cycle_helper_info::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cycle_helper_info::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 cycle_helper_info::count() const {
  return count_;
}
inline void cycle_helper_info::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// cycle_helpers_rsp

// required uint32 time = 1;
inline bool cycle_helpers_rsp::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_helpers_rsp::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_helpers_rsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_helpers_rsp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 cycle_helpers_rsp::time() const {
  return time_;
}
inline void cycle_helpers_rsp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// repeated .client.cycle_helper_info chi = 2;
inline int cycle_helpers_rsp::chi_size() const {
  return chi_.size();
}
inline void cycle_helpers_rsp::clear_chi() {
  chi_.Clear();
}
inline const ::client::cycle_helper_info& cycle_helpers_rsp::chi(int index) const {
  return chi_.Get(index);
}
inline ::client::cycle_helper_info* cycle_helpers_rsp::mutable_chi(int index) {
  return chi_.Mutable(index);
}
inline ::client::cycle_helper_info* cycle_helpers_rsp::add_chi() {
  return chi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::cycle_helper_info >&
cycle_helpers_rsp::chi() const {
  return chi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::cycle_helper_info >*
cycle_helpers_rsp::mutable_chi() {
  return &chi_;
}

// -------------------------------------------------------------------

// cycle_mopup_req

// required uint32 time = 1;
inline bool cycle_mopup_req::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_mopup_req::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_mopup_req::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_mopup_req::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 cycle_mopup_req::time() const {
  return time_;
}
inline void cycle_mopup_req::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool cycle_mopup_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cycle_mopup_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cycle_mopup_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cycle_mopup_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& cycle_mopup_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* cycle_mopup_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* cycle_mopup_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void cycle_mopup_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// cycle_mopup_result

// required uint32 level = 1;
inline bool cycle_mopup_result::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cycle_mopup_result::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cycle_mopup_result::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cycle_mopup_result::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 cycle_mopup_result::level() const {
  return level_;
}
inline void cycle_mopup_result::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional .client.raid_result_info rri = 2;
inline bool cycle_mopup_result::has_rri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cycle_mopup_result::set_has_rri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cycle_mopup_result::clear_has_rri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cycle_mopup_result::clear_rri() {
  if (rri_ != NULL) rri_->::client::raid_result_info::Clear();
  clear_has_rri();
}
inline const ::client::raid_result_info& cycle_mopup_result::rri() const {
  return rri_ != NULL ? *rri_ : *default_instance_->rri_;
}
inline ::client::raid_result_info* cycle_mopup_result::mutable_rri() {
  set_has_rri();
  if (rri_ == NULL) rri_ = new ::client::raid_result_info;
  return rri_;
}
inline ::client::raid_result_info* cycle_mopup_result::release_rri() {
  clear_has_rri();
  ::client::raid_result_info* temp = rri_;
  rri_ = NULL;
  return temp;
}
inline void cycle_mopup_result::set_allocated_rri(::client::raid_result_info* rri) {
  delete rri_;
  rri_ = rri;
  if (rri) {
    set_has_rri();
  } else {
    clear_has_rri();
  }
}

// -------------------------------------------------------------------

// cycle_mopup_rsp

// repeated .client.cycle_mopup_result cmr = 1;
inline int cycle_mopup_rsp::cmr_size() const {
  return cmr_.size();
}
inline void cycle_mopup_rsp::clear_cmr() {
  cmr_.Clear();
}
inline const ::client::cycle_mopup_result& cycle_mopup_rsp::cmr(int index) const {
  return cmr_.Get(index);
}
inline ::client::cycle_mopup_result* cycle_mopup_rsp::mutable_cmr(int index) {
  return cmr_.Mutable(index);
}
inline ::client::cycle_mopup_result* cycle_mopup_rsp::add_cmr() {
  return cmr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::cycle_mopup_result >&
cycle_mopup_rsp::cmr() const {
  return cmr_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::cycle_mopup_result >*
cycle_mopup_rsp::mutable_cmr() {
  return &cmr_;
}

// required uint32 time = 2;
inline bool cycle_mopup_rsp::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cycle_mopup_rsp::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cycle_mopup_rsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cycle_mopup_rsp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 cycle_mopup_rsp::time() const {
  return time_;
}
inline void cycle_mopup_rsp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2ecycle_2eproto__INCLUDED
