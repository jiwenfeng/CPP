// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.team_raid.proto

#ifndef PROTOBUF_client_2eteam_5fraid_2eproto__INCLUDED
#define PROTOBUF_client_2eteam_5fraid_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
#include "client.team.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eteam_5fraid_2eproto();
void protobuf_AssignDesc_client_2eteam_5fraid_2eproto();
void protobuf_ShutdownFile_client_2eteam_5fraid_2eproto();

class team_raid_enter_req;
class team_raid_enter_cmd;
class team_raid_try_enter_req;
class team_raid_try_enter_rsp;

// ===================================================================

class team_raid_enter_req : public ::google::protobuf::Message {
 public:
  team_raid_enter_req();
  virtual ~team_raid_enter_req();

  team_raid_enter_req(const team_raid_enter_req& from);

  inline team_raid_enter_req& operator=(const team_raid_enter_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_raid_enter_req& default_instance();

  void Swap(team_raid_enter_req* other);

  // implements Message ----------------------------------------------

  team_raid_enter_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_raid_enter_req& from);
  void MergeFrom(const team_raid_enter_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.team_raid_enter_req)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_5fraid_2eproto();

  void InitAsDefaultInstance();
  static team_raid_enter_req* default_instance_;
};
// -------------------------------------------------------------------

class team_raid_enter_cmd : public ::google::protobuf::Message {
 public:
  team_raid_enter_cmd();
  virtual ~team_raid_enter_cmd();

  team_raid_enter_cmd(const team_raid_enter_cmd& from);

  inline team_raid_enter_cmd& operator=(const team_raid_enter_cmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_raid_enter_cmd& default_instance();

  void Swap(team_raid_enter_cmd* other);

  // implements Message ----------------------------------------------

  team_raid_enter_cmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_raid_enter_cmd& from);
  void MergeFrom(const team_raid_enter_cmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // required uint32 raid_id = 3;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 3;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.team_raid_enter_cmd)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_raid_id();
  inline void clear_has_raid_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 raid_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_5fraid_2eproto();

  void InitAsDefaultInstance();
  static team_raid_enter_cmd* default_instance_;
};
// -------------------------------------------------------------------

class team_raid_try_enter_req : public ::google::protobuf::Message {
 public:
  team_raid_try_enter_req();
  virtual ~team_raid_try_enter_req();

  team_raid_try_enter_req(const team_raid_try_enter_req& from);

  inline team_raid_try_enter_req& operator=(const team_raid_try_enter_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_raid_try_enter_req& default_instance();

  void Swap(team_raid_try_enter_req* other);

  // implements Message ----------------------------------------------

  team_raid_try_enter_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_raid_try_enter_req& from);
  void MergeFrom(const team_raid_try_enter_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // required uint32 raid_id = 3;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 3;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.team_raid_try_enter_req)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_raid_id();
  inline void clear_has_raid_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 raid_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_5fraid_2eproto();

  void InitAsDefaultInstance();
  static team_raid_try_enter_req* default_instance_;
};
// -------------------------------------------------------------------

class team_raid_try_enter_rsp : public ::google::protobuf::Message {
 public:
  team_raid_try_enter_rsp();
  virtual ~team_raid_try_enter_rsp();

  team_raid_try_enter_rsp(const team_raid_try_enter_rsp& from);

  inline team_raid_try_enter_rsp& operator=(const team_raid_try_enter_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const team_raid_try_enter_rsp& default_instance();

  void Swap(team_raid_try_enter_rsp* other);

  // implements Message ----------------------------------------------

  team_raid_try_enter_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const team_raid_try_enter_rsp& from);
  void MergeFrom(const team_raid_try_enter_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.team_raid_try_enter_req req = 1;
  inline bool has_req() const;
  inline void clear_req();
  static const int kReqFieldNumber = 1;
  inline const ::client::team_raid_try_enter_req& req() const;
  inline ::client::team_raid_try_enter_req* mutable_req();
  inline ::client::team_raid_try_enter_req* release_req();
  inline void set_allocated_req(::client::team_raid_try_enter_req* req);

  // required uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.team_raid_try_enter_rsp)
 private:
  inline void set_has_req();
  inline void clear_has_req();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::team_raid_try_enter_req* req_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eteam_5fraid_2eproto();
  friend void protobuf_AssignDesc_client_2eteam_5fraid_2eproto();
  friend void protobuf_ShutdownFile_client_2eteam_5fraid_2eproto();

  void InitAsDefaultInstance();
  static team_raid_try_enter_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// team_raid_enter_req

// required uint32 time = 1;
inline bool team_raid_enter_req::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_raid_enter_req::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_raid_enter_req::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_raid_enter_req::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 team_raid_enter_req::time() const {
  return time_;
}
inline void team_raid_enter_req::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool team_raid_enter_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_raid_enter_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_raid_enter_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_raid_enter_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& team_raid_enter_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* team_raid_enter_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* team_raid_enter_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void team_raid_enter_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// team_raid_enter_cmd

// required uint32 role_id = 1;
inline bool team_raid_enter_cmd::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_raid_enter_cmd::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_raid_enter_cmd::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_raid_enter_cmd::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 team_raid_enter_cmd::role_id() const {
  return role_id_;
}
inline void team_raid_enter_cmd::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 team_id = 2;
inline bool team_raid_enter_cmd::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_raid_enter_cmd::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_raid_enter_cmd::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_raid_enter_cmd::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 team_raid_enter_cmd::team_id() const {
  return team_id_;
}
inline void team_raid_enter_cmd::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// required uint32 raid_id = 3;
inline bool team_raid_enter_cmd::has_raid_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void team_raid_enter_cmd::set_has_raid_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void team_raid_enter_cmd::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void team_raid_enter_cmd::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 team_raid_enter_cmd::raid_id() const {
  return raid_id_;
}
inline void team_raid_enter_cmd::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// -------------------------------------------------------------------

// team_raid_try_enter_req

// required uint32 role_id = 1;
inline bool team_raid_try_enter_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_raid_try_enter_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_raid_try_enter_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_raid_try_enter_req::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 team_raid_try_enter_req::role_id() const {
  return role_id_;
}
inline void team_raid_try_enter_req::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 team_id = 2;
inline bool team_raid_try_enter_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_raid_try_enter_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_raid_try_enter_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_raid_try_enter_req::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 team_raid_try_enter_req::team_id() const {
  return team_id_;
}
inline void team_raid_try_enter_req::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// required uint32 raid_id = 3;
inline bool team_raid_try_enter_req::has_raid_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void team_raid_try_enter_req::set_has_raid_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void team_raid_try_enter_req::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void team_raid_try_enter_req::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 team_raid_try_enter_req::raid_id() const {
  return raid_id_;
}
inline void team_raid_try_enter_req::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// -------------------------------------------------------------------

// team_raid_try_enter_rsp

// required .client.team_raid_try_enter_req req = 1;
inline bool team_raid_try_enter_rsp::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void team_raid_try_enter_rsp::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void team_raid_try_enter_rsp::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void team_raid_try_enter_rsp::clear_req() {
  if (req_ != NULL) req_->::client::team_raid_try_enter_req::Clear();
  clear_has_req();
}
inline const ::client::team_raid_try_enter_req& team_raid_try_enter_rsp::req() const {
  return req_ != NULL ? *req_ : *default_instance_->req_;
}
inline ::client::team_raid_try_enter_req* team_raid_try_enter_rsp::mutable_req() {
  set_has_req();
  if (req_ == NULL) req_ = new ::client::team_raid_try_enter_req;
  return req_;
}
inline ::client::team_raid_try_enter_req* team_raid_try_enter_rsp::release_req() {
  clear_has_req();
  ::client::team_raid_try_enter_req* temp = req_;
  req_ = NULL;
  return temp;
}
inline void team_raid_try_enter_rsp::set_allocated_req(::client::team_raid_try_enter_req* req) {
  delete req_;
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
}

// required uint32 ret = 2;
inline bool team_raid_try_enter_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void team_raid_try_enter_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void team_raid_try_enter_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void team_raid_try_enter_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 team_raid_try_enter_rsp::ret() const {
  return ret_;
}
inline void team_raid_try_enter_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eteam_5fraid_2eproto__INCLUDED
