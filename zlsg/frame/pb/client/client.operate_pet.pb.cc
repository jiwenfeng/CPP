// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.operate_pet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.operate_pet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* pet_skill_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_skill_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_add_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_add_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_update_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_update_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_remove_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_remove_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_remove_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_remove_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_fight_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_fight_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_fight_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_fight_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_rest_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_rest_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_rest_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_rest_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_rename_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_rename_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_rename_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_rename_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_upgrade_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_upgrade_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_upgrade_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_upgrade_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_reset_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_reset_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_reset_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_reset_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_learn_skill_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_learn_skill_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_learn_skill_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_learn_skill_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ROLE_PET_STATUS_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_FIGHT_RET_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_REST_RET_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_UPGRADE_RET_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_RESET_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PET_RESET_RET_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eoperate_5fpet_2eproto() {
  protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.operate_pet.proto");
  GOOGLE_CHECK(file != NULL);
  pet_skill_info_descriptor_ = file->message_type(0);
  static const int pet_skill_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_skill_info, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_skill_info, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_skill_info, skill_grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_skill_info, end_cd_time_),
  };
  pet_skill_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_skill_info_descriptor_,
      pet_skill_info::default_instance_,
      pet_skill_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_skill_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_skill_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_skill_info));
  pet_info_descriptor_ = file->message_type(1);
  static const int pet_info_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, max_life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, cur_life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, max_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, cur_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, defense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, hitpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, critical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, agisity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, tougnen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, bless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, order_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, quality_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, class_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, psi_),
  };
  pet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_info_descriptor_,
      pet_info::default_instance_,
      pet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_info));
  pet_add_msg_descriptor_ = file->message_type(2);
  static const int pet_add_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_add_msg, pi_),
  };
  pet_add_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_add_msg_descriptor_,
      pet_add_msg::default_instance_,
      pet_add_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_add_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_add_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_add_msg));
  pet_update_msg_descriptor_ = file->message_type(3);
  static const int pet_update_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_update_msg, pi_),
  };
  pet_update_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_update_msg_descriptor_,
      pet_update_msg::default_instance_,
      pet_update_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_update_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_update_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_update_msg));
  pet_remove_req_descriptor_ = file->message_type(4);
  static const int pet_remove_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_remove_req, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_remove_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_remove_req, svr_head_),
  };
  pet_remove_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_remove_req_descriptor_,
      pet_remove_req::default_instance_,
      pet_remove_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_remove_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_remove_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_remove_req));
  pet_remove_msg_descriptor_ = file->message_type(5);
  static const int pet_remove_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_remove_msg, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_remove_msg, pet_id_),
  };
  pet_remove_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_remove_msg_descriptor_,
      pet_remove_msg::default_instance_,
      pet_remove_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_remove_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_remove_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_remove_msg));
  pet_fight_req_descriptor_ = file->message_type(6);
  static const int pet_fight_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_req, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_req, svr_head_),
  };
  pet_fight_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_fight_req_descriptor_,
      pet_fight_req::default_instance_,
      pet_fight_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_fight_req));
  pet_fight_rsp_descriptor_ = file->message_type(7);
  static const int pet_fight_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_rsp, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_rsp, ret_),
  };
  pet_fight_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_fight_rsp_descriptor_,
      pet_fight_rsp::default_instance_,
      pet_fight_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_fight_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_fight_rsp));
  pet_rest_req_descriptor_ = file->message_type(8);
  static const int pet_rest_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_req, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_req, svr_head_),
  };
  pet_rest_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_rest_req_descriptor_,
      pet_rest_req::default_instance_,
      pet_rest_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_rest_req));
  pet_rest_rsp_descriptor_ = file->message_type(9);
  static const int pet_rest_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_rsp, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_rsp, ret_),
  };
  pet_rest_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_rest_rsp_descriptor_,
      pet_rest_rsp::default_instance_,
      pet_rest_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rest_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_rest_rsp));
  pet_rename_req_descriptor_ = file->message_type(10);
  static const int pet_rename_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rename_req, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rename_req, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rename_req, svr_head_),
  };
  pet_rename_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_rename_req_descriptor_,
      pet_rename_req::default_instance_,
      pet_rename_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rename_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rename_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_rename_req));
  pet_rename_rsp_descriptor_ = file->message_type(11);
  static const int pet_rename_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rename_rsp, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rename_rsp, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rename_rsp, name_),
  };
  pet_rename_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_rename_rsp_descriptor_,
      pet_rename_rsp::default_instance_,
      pet_rename_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rename_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_rename_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_rename_rsp));
  pet_upgrade_req_descriptor_ = file->message_type(12);
  static const int pet_upgrade_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_upgrade_req, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_upgrade_req, auto_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_upgrade_req, svr_head_),
  };
  pet_upgrade_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_upgrade_req_descriptor_,
      pet_upgrade_req::default_instance_,
      pet_upgrade_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_upgrade_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_upgrade_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_upgrade_req));
  pet_upgrade_rsp_descriptor_ = file->message_type(13);
  static const int pet_upgrade_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_upgrade_rsp, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_upgrade_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_upgrade_rsp, bless_val_),
  };
  pet_upgrade_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_upgrade_rsp_descriptor_,
      pet_upgrade_rsp::default_instance_,
      pet_upgrade_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_upgrade_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_upgrade_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_upgrade_rsp));
  pet_reset_req_descriptor_ = file->message_type(14);
  static const int pet_reset_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_reset_req, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_reset_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_reset_req, auto__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_reset_req, svr_head_),
  };
  pet_reset_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_reset_req_descriptor_,
      pet_reset_req::default_instance_,
      pet_reset_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_reset_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_reset_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_reset_req));
  pet_reset_rsp_descriptor_ = file->message_type(15);
  static const int pet_reset_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_reset_rsp, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_reset_rsp, ret_),
  };
  pet_reset_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_reset_rsp_descriptor_,
      pet_reset_rsp::default_instance_,
      pet_reset_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_reset_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_reset_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_reset_rsp));
  pet_learn_skill_req_descriptor_ = file->message_type(16);
  static const int pet_learn_skill_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_learn_skill_req, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_learn_skill_req, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_learn_skill_req, svr_head_),
  };
  pet_learn_skill_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_learn_skill_req_descriptor_,
      pet_learn_skill_req::default_instance_,
      pet_learn_skill_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_learn_skill_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_learn_skill_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_learn_skill_req));
  pet_learn_skill_rsp_descriptor_ = file->message_type(17);
  static const int pet_learn_skill_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_learn_skill_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_learn_skill_rsp, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_learn_skill_rsp, grid_index_),
  };
  pet_learn_skill_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_learn_skill_rsp_descriptor_,
      pet_learn_skill_rsp::default_instance_,
      pet_learn_skill_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_learn_skill_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_learn_skill_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_learn_skill_rsp));
  ROLE_PET_STATUS_E_descriptor_ = file->enum_type(0);
  PET_FIGHT_RET_E_descriptor_ = file->enum_type(1);
  PET_REST_RET_E_descriptor_ = file->enum_type(2);
  PET_UPGRADE_RET_E_descriptor_ = file->enum_type(3);
  PET_RESET_TYPE_E_descriptor_ = file->enum_type(4);
  PET_RESET_RET_E_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eoperate_5fpet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_skill_info_descriptor_, &pet_skill_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_info_descriptor_, &pet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_add_msg_descriptor_, &pet_add_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_update_msg_descriptor_, &pet_update_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_remove_req_descriptor_, &pet_remove_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_remove_msg_descriptor_, &pet_remove_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_fight_req_descriptor_, &pet_fight_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_fight_rsp_descriptor_, &pet_fight_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_rest_req_descriptor_, &pet_rest_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_rest_rsp_descriptor_, &pet_rest_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_rename_req_descriptor_, &pet_rename_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_rename_rsp_descriptor_, &pet_rename_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_upgrade_req_descriptor_, &pet_upgrade_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_upgrade_rsp_descriptor_, &pet_upgrade_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_reset_req_descriptor_, &pet_reset_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_reset_rsp_descriptor_, &pet_reset_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_learn_skill_req_descriptor_, &pet_learn_skill_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_learn_skill_rsp_descriptor_, &pet_learn_skill_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto() {
  delete pet_skill_info::default_instance_;
  delete pet_skill_info_reflection_;
  delete pet_info::default_instance_;
  delete pet_info_reflection_;
  delete pet_add_msg::default_instance_;
  delete pet_add_msg_reflection_;
  delete pet_update_msg::default_instance_;
  delete pet_update_msg_reflection_;
  delete pet_remove_req::default_instance_;
  delete pet_remove_req_reflection_;
  delete pet_remove_msg::default_instance_;
  delete pet_remove_msg_reflection_;
  delete pet_fight_req::default_instance_;
  delete pet_fight_req_reflection_;
  delete pet_fight_rsp::default_instance_;
  delete pet_fight_rsp_reflection_;
  delete pet_rest_req::default_instance_;
  delete pet_rest_req_reflection_;
  delete pet_rest_rsp::default_instance_;
  delete pet_rest_rsp_reflection_;
  delete pet_rename_req::default_instance_;
  delete pet_rename_req_reflection_;
  delete pet_rename_rsp::default_instance_;
  delete pet_rename_rsp_reflection_;
  delete pet_upgrade_req::default_instance_;
  delete pet_upgrade_req_reflection_;
  delete pet_upgrade_rsp::default_instance_;
  delete pet_upgrade_rsp_reflection_;
  delete pet_reset_req::default_instance_;
  delete pet_reset_req_reflection_;
  delete pet_reset_rsp::default_instance_;
  delete pet_reset_rsp_reflection_;
  delete pet_learn_skill_req::default_instance_;
  delete pet_learn_skill_req_reflection_;
  delete pet_learn_skill_rsp::default_instance_;
  delete pet_learn_skill_rsp_reflection_;
}

void protobuf_AddDesc_client_2eoperate_5fpet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030client.operate_pet.proto\022\006client\032\021clie"
    "nt.comm.proto\"r\n\016pet_skill_info\022\023\n\010skill"
    "_id\030\001 \002(\r:\0010\022\026\n\013skill_level\030\002 \002(\r:\0010\022\033\n\020"
    "skill_grid_index\030\003 \002(\r:\0010\022\026\n\013end_cd_time"
    "\030\004 \002(\r:\0010\"\356\003\n\010pet_info\022\021\n\006serial\030\001 \002(\r:\001"
    "0\022\021\n\006pet_id\030\002 \002(\r:\0010\022\014\n\004name\030\003 \002(\t\022\023\n\010ma"
    "x_life\030\004 \002(\r:\0010\022\023\n\010cur_life\030\005 \002(\r:\0010\022\024\n\t"
    "max_power\030\006 \002(\r:\0010\022\024\n\tcur_power\030\007 \002(\r:\0010"
    "\022\021\n\006attack\030\010 \002(\r:\0010\022\022\n\007defense\030\t \002(\r:\0010\022"
    "\023\n\010hitpoint\030\n \002(\r:\0010\022\020\n\005dodge\030\013 \002(\r:\0010\022\023"
    "\n\010critical\030\014 \002(\r:\0010\022\022\n\007agisity\030\r \002(\r:\0010\022"
    "\022\n\007tougnen\030\016 \002(\r:\0010\022\023\n\010strength\030\017 \002(\r:\0010"
    "\022\021\n\006status\030\020 \002(\r:\0010\022\020\n\005bless\030\021 \002(\r:\0010\022\025\n"
    "\nexperience\030\022 \002(\r:\0010\022\026\n\013order_ratio\030\023 \002("
    "\r:\0010\022\030\n\rquality_ratio\030\024 \002(\r:\0010\022\020\n\005level\030"
    "\025 \002(\r:\0010\022\023\n\010class_lv\030\026 \002(\r:\0010\022#\n\003psi\030\027 \003"
    "(\0132\026.client.pet_skill_info\"+\n\013pet_add_ms"
    "g\022\034\n\002pi\030\001 \003(\0132\020.client.pet_info\".\n\016pet_u"
    "pdate_msg\022\034\n\002pi\030\001 \003(\0132\020.client.pet_info\""
    "X\n\016pet_remove_req\022\016\n\006serial\030\001 \002(\r\022\016\n\006pet"
    "_id\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.se"
    "rver_head\"0\n\016pet_remove_msg\022\016\n\006serial\030\001 "
    "\002(\r\022\016\n\006pet_id\030\002 \002(\r\"G\n\rpet_fight_req\022\016\n\006"
    "serial\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client"
    ".server_head\"E\n\rpet_fight_rsp\022\016\n\006serial\030"
    "\001 \002(\r\022$\n\003ret\030\002 \002(\0162\027.client.PET_FIGHT_RE"
    "T_E\"F\n\014pet_rest_req\022\016\n\006serial\030\001 \002(\r\022&\n\010s"
    "vr_head\030\350\007 \001(\0132\023.client.server_head\"C\n\014p"
    "et_rest_rsp\022\016\n\006serial\030\001 \002(\r\022#\n\003ret\030\002 \002(\016"
    "2\026.client.PET_REST_RET_E\"V\n\016pet_rename_r"
    "eq\022\016\n\006serial\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022&\n\010svr_"
    "head\030\350\007 \001(\0132\023.client.server_head\"\?\n\016pet_"
    "rename_rsp\022\016\n\006serial\030\001 \002(\r\022\017\n\007success\030\002 "
    "\002(\010\022\014\n\004name\030\003 \001(\t\"[\n\017pet_upgrade_req\022\016\n\006"
    "serial\030\001 \002(\r\022\020\n\010auto_buy\030\002 \002(\010\022&\n\010svr_he"
    "ad\030\350\007 \001(\0132\023.client.server_head\"\\\n\017pet_up"
    "grade_rsp\022\016\n\006serial\030\001 \002(\r\022&\n\003ret\030\002 \002(\0162\031"
    ".client.PET_UPGRADE_RET_E\022\021\n\tbless_val\030\003"
    " \001(\r\"}\n\rpet_reset_req\022\016\n\006serial\030\001 \002(\r\022&\n"
    "\004type\030\002 \002(\0162\030.client.PET_RESET_TYPE_E\022\014\n"
    "\004auto\030\003 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client."
    "server_head\"E\n\rpet_reset_rsp\022\016\n\006serial\030\001"
    " \002(\r\022$\n\003ret\030\002 \002(\0162\027.client.PET_RESET_RET"
    "_E\"a\n\023pet_learn_skill_req\022\022\n\ngrid_index\030"
    "\001 \002(\r\022\016\n\006serial\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\013"
    "2\023.client.server_head\"F\n\023pet_learn_skill"
    "_rsp\022\013\n\003ret\030\001 \002(\r\022\016\n\006serial\030\002 \002(\r\022\022\n\ngri"
    "d_index\030\003 \002(\r*2\n\021ROLE_PET_STATUS_E\022\r\n\tRP"
    "SE_REST\020\000\022\016\n\nRPSE_FIGHT\020\001*[\n\017PET_FIGHT_R"
    "ET_E\022\020\n\014PTRE_SUCCESS\020\000\022\020\n\014PTRE_FIGHTED\020\001"
    "\022\023\n\017PTRE_LIFE_LIMIT\020\002\022\017\n\013PTRE_FAILED\020\003*E"
    "\n\016PET_REST_RET_E\022\020\n\014PRRE_SUCCESS\020\000\022\020\n\014PR"
    "RE_RESETED\020\001\022\017\n\013PRRE_FAILED\020\002*j\n\021PET_UPG"
    "RADE_RET_E\022\020\n\014PURE_SUCCESS\020\000\022\020\n\014PURE_NOM"
    "OENY\020\001\022\016\n\nPURE_NOMAT\020\002\022\021\n\rPURE_PETLIMIT\020"
    "\003\022\016\n\nPURE_BLESS\020\004*J\n\020PET_RESET_TYPE_E\022\014\n"
    "\010PRTE_XTJ\020\001\022\014\n\010PRTE_DTJ\020\002\022\014\n\010PRTE_SJT\020\003\022"
    "\014\n\010PRTE_JJT\020\004*h\n\017PET_RESET_RET_E\022\024\n\020PRES"
    "ETRE_SUCCESS\020\001\022\024\n\020PRESETRE_NOMONEY\020\002\022\022\n\016"
    "PRESETRE_NOMAT\020\003\022\025\n\021PRESETRE_PETLIMIT\020\004", 2399);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.operate_pet.proto", &protobuf_RegisterTypes);
  pet_skill_info::default_instance_ = new pet_skill_info();
  pet_info::default_instance_ = new pet_info();
  pet_add_msg::default_instance_ = new pet_add_msg();
  pet_update_msg::default_instance_ = new pet_update_msg();
  pet_remove_req::default_instance_ = new pet_remove_req();
  pet_remove_msg::default_instance_ = new pet_remove_msg();
  pet_fight_req::default_instance_ = new pet_fight_req();
  pet_fight_rsp::default_instance_ = new pet_fight_rsp();
  pet_rest_req::default_instance_ = new pet_rest_req();
  pet_rest_rsp::default_instance_ = new pet_rest_rsp();
  pet_rename_req::default_instance_ = new pet_rename_req();
  pet_rename_rsp::default_instance_ = new pet_rename_rsp();
  pet_upgrade_req::default_instance_ = new pet_upgrade_req();
  pet_upgrade_rsp::default_instance_ = new pet_upgrade_rsp();
  pet_reset_req::default_instance_ = new pet_reset_req();
  pet_reset_rsp::default_instance_ = new pet_reset_rsp();
  pet_learn_skill_req::default_instance_ = new pet_learn_skill_req();
  pet_learn_skill_rsp::default_instance_ = new pet_learn_skill_rsp();
  pet_skill_info::default_instance_->InitAsDefaultInstance();
  pet_info::default_instance_->InitAsDefaultInstance();
  pet_add_msg::default_instance_->InitAsDefaultInstance();
  pet_update_msg::default_instance_->InitAsDefaultInstance();
  pet_remove_req::default_instance_->InitAsDefaultInstance();
  pet_remove_msg::default_instance_->InitAsDefaultInstance();
  pet_fight_req::default_instance_->InitAsDefaultInstance();
  pet_fight_rsp::default_instance_->InitAsDefaultInstance();
  pet_rest_req::default_instance_->InitAsDefaultInstance();
  pet_rest_rsp::default_instance_->InitAsDefaultInstance();
  pet_rename_req::default_instance_->InitAsDefaultInstance();
  pet_rename_rsp::default_instance_->InitAsDefaultInstance();
  pet_upgrade_req::default_instance_->InitAsDefaultInstance();
  pet_upgrade_rsp::default_instance_->InitAsDefaultInstance();
  pet_reset_req::default_instance_->InitAsDefaultInstance();
  pet_reset_rsp::default_instance_->InitAsDefaultInstance();
  pet_learn_skill_req::default_instance_->InitAsDefaultInstance();
  pet_learn_skill_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eoperate_5fpet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eoperate_5fpet_2eproto {
  StaticDescriptorInitializer_client_2eoperate_5fpet_2eproto() {
    protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  }
} static_descriptor_initializer_client_2eoperate_5fpet_2eproto_;
const ::google::protobuf::EnumDescriptor* ROLE_PET_STATUS_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROLE_PET_STATUS_E_descriptor_;
}
bool ROLE_PET_STATUS_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_FIGHT_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_FIGHT_RET_E_descriptor_;
}
bool PET_FIGHT_RET_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_REST_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_REST_RET_E_descriptor_;
}
bool PET_REST_RET_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_UPGRADE_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_UPGRADE_RET_E_descriptor_;
}
bool PET_UPGRADE_RET_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_RESET_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_RESET_TYPE_E_descriptor_;
}
bool PET_RESET_TYPE_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PET_RESET_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PET_RESET_RET_E_descriptor_;
}
bool PET_RESET_RET_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int pet_skill_info::kSkillIdFieldNumber;
const int pet_skill_info::kSkillLevelFieldNumber;
const int pet_skill_info::kSkillGridIndexFieldNumber;
const int pet_skill_info::kEndCdTimeFieldNumber;
#endif  // !_MSC_VER

pet_skill_info::pet_skill_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_skill_info::InitAsDefaultInstance() {
}

pet_skill_info::pet_skill_info(const pet_skill_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_skill_info::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  skill_level_ = 0u;
  skill_grid_index_ = 0u;
  end_cd_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_skill_info::~pet_skill_info() {
  SharedDtor();
}

void pet_skill_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_skill_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_skill_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_skill_info_descriptor_;
}

const pet_skill_info& pet_skill_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_skill_info* pet_skill_info::default_instance_ = NULL;

pet_skill_info* pet_skill_info::New() const {
  return new pet_skill_info;
}

void pet_skill_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    skill_level_ = 0u;
    skill_grid_index_ = 0u;
    end_cd_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_skill_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // required uint32 skill_level = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_grid_index;
        break;
      }

      // required uint32 skill_grid_index = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_grid_index_)));
          set_has_skill_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_cd_time;
        break;
      }

      // required uint32 end_cd_time = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_cd_time_)));
          set_has_end_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_skill_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1 [default = 0];
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // required uint32 skill_level = 2 [default = 0];
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_level(), output);
  }

  // required uint32 skill_grid_index = 3 [default = 0];
  if (has_skill_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_grid_index(), output);
  }

  // required uint32 end_cd_time = 4 [default = 0];
  if (has_end_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_cd_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_skill_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1 [default = 0];
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // required uint32 skill_level = 2 [default = 0];
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_level(), target);
  }

  // required uint32 skill_grid_index = 3 [default = 0];
  if (has_skill_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_grid_index(), target);
  }

  // required uint32 end_cd_time = 4 [default = 0];
  if (has_end_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_cd_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_skill_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1 [default = 0];
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 skill_level = 2 [default = 0];
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // required uint32 skill_grid_index = 3 [default = 0];
    if (has_skill_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_grid_index());
    }

    // required uint32 end_cd_time = 4 [default = 0];
    if (has_end_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_cd_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_skill_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_skill_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_skill_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_skill_info::MergeFrom(const pet_skill_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_skill_grid_index()) {
      set_skill_grid_index(from.skill_grid_index());
    }
    if (from.has_end_cd_time()) {
      set_end_cd_time(from.end_cd_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_skill_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_skill_info::CopyFrom(const pet_skill_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_skill_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void pet_skill_info::Swap(pet_skill_info* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(skill_grid_index_, other->skill_grid_index_);
    std::swap(end_cd_time_, other->end_cd_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_skill_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_skill_info_descriptor_;
  metadata.reflection = pet_skill_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_info::kSerialFieldNumber;
const int pet_info::kPetIdFieldNumber;
const int pet_info::kNameFieldNumber;
const int pet_info::kMaxLifeFieldNumber;
const int pet_info::kCurLifeFieldNumber;
const int pet_info::kMaxPowerFieldNumber;
const int pet_info::kCurPowerFieldNumber;
const int pet_info::kAttackFieldNumber;
const int pet_info::kDefenseFieldNumber;
const int pet_info::kHitpointFieldNumber;
const int pet_info::kDodgeFieldNumber;
const int pet_info::kCriticalFieldNumber;
const int pet_info::kAgisityFieldNumber;
const int pet_info::kTougnenFieldNumber;
const int pet_info::kStrengthFieldNumber;
const int pet_info::kStatusFieldNumber;
const int pet_info::kBlessFieldNumber;
const int pet_info::kExperienceFieldNumber;
const int pet_info::kOrderRatioFieldNumber;
const int pet_info::kQualityRatioFieldNumber;
const int pet_info::kLevelFieldNumber;
const int pet_info::kClassLvFieldNumber;
const int pet_info::kPsiFieldNumber;
#endif  // !_MSC_VER

pet_info::pet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_info::InitAsDefaultInstance() {
}

pet_info::pet_info(const pet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_info::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  pet_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_life_ = 0u;
  cur_life_ = 0u;
  max_power_ = 0u;
  cur_power_ = 0u;
  attack_ = 0u;
  defense_ = 0u;
  hitpoint_ = 0u;
  dodge_ = 0u;
  critical_ = 0u;
  agisity_ = 0u;
  tougnen_ = 0u;
  strength_ = 0u;
  status_ = 0u;
  bless_ = 0u;
  experience_ = 0u;
  order_ratio_ = 0u;
  quality_ratio_ = 0u;
  level_ = 0u;
  class_lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_info::~pet_info() {
  SharedDtor();
}

void pet_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void pet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_info_descriptor_;
}

const pet_info& pet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_info* pet_info::default_instance_ = NULL;

pet_info* pet_info::New() const {
  return new pet_info;
}

void pet_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    pet_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    max_life_ = 0u;
    cur_life_ = 0u;
    max_power_ = 0u;
    cur_power_ = 0u;
    attack_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    defense_ = 0u;
    hitpoint_ = 0u;
    dodge_ = 0u;
    critical_ = 0u;
    agisity_ = 0u;
    tougnen_ = 0u;
    strength_ = 0u;
    status_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bless_ = 0u;
    experience_ = 0u;
    order_ratio_ = 0u;
    quality_ratio_ = 0u;
    level_ = 0u;
    class_lv_ = 0u;
  }
  psi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // required uint32 pet_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_life;
        break;
      }

      // required uint32 max_life = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_life_)));
          set_has_max_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_life;
        break;
      }

      // required uint32 cur_life = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_life_)));
          set_has_cur_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_power;
        break;
      }

      // required uint32 max_power = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_power_)));
          set_has_max_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cur_power;
        break;
      }

      // required uint32 cur_power = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_power_)));
          set_has_cur_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_attack;
        break;
      }

      // required uint32 attack = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_defense;
        break;
      }

      // required uint32 defense = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defense_)));
          set_has_defense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hitpoint;
        break;
      }

      // required uint32 hitpoint = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitpoint_)));
          set_has_hitpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_dodge;
        break;
      }

      // required uint32 dodge = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_critical;
        break;
      }

      // required uint32 critical = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_agisity;
        break;
      }

      // required uint32 agisity = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agisity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agisity_)));
          set_has_agisity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tougnen;
        break;
      }

      // required uint32 tougnen = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tougnen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tougnen_)));
          set_has_tougnen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_strength;
        break;
      }

      // required uint32 strength = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_status;
        break;
      }

      // required uint32 status = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bless;
        break;
      }

      // required uint32 bless = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bless_)));
          set_has_bless();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_experience;
        break;
      }

      // required uint32 experience = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_order_ratio;
        break;
      }

      // required uint32 order_ratio = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_ratio_)));
          set_has_order_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_quality_ratio;
        break;
      }

      // required uint32 quality_ratio = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ratio_)));
          set_has_quality_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_level;
        break;
      }

      // required uint32 level = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_class_lv;
        break;
      }

      // required uint32 class_lv = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_class_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_lv_)));
          set_has_class_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_psi;
        break;
      }

      // repeated .client.pet_skill_info psi = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_psi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_psi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1 [default = 0];
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // required uint32 pet_id = 2 [default = 0];
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pet_id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 max_life = 4 [default = 0];
  if (has_max_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_life(), output);
  }

  // required uint32 cur_life = 5 [default = 0];
  if (has_cur_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cur_life(), output);
  }

  // required uint32 max_power = 6 [default = 0];
  if (has_max_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_power(), output);
  }

  // required uint32 cur_power = 7 [default = 0];
  if (has_cur_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_power(), output);
  }

  // required uint32 attack = 8 [default = 0];
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->attack(), output);
  }

  // required uint32 defense = 9 [default = 0];
  if (has_defense()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->defense(), output);
  }

  // required uint32 hitpoint = 10 [default = 0];
  if (has_hitpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->hitpoint(), output);
  }

  // required uint32 dodge = 11 [default = 0];
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->dodge(), output);
  }

  // required uint32 critical = 12 [default = 0];
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->critical(), output);
  }

  // required uint32 agisity = 13 [default = 0];
  if (has_agisity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->agisity(), output);
  }

  // required uint32 tougnen = 14 [default = 0];
  if (has_tougnen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tougnen(), output);
  }

  // required uint32 strength = 15 [default = 0];
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->strength(), output);
  }

  // required uint32 status = 16 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->status(), output);
  }

  // required uint32 bless = 17 [default = 0];
  if (has_bless()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->bless(), output);
  }

  // required uint32 experience = 18 [default = 0];
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->experience(), output);
  }

  // required uint32 order_ratio = 19 [default = 0];
  if (has_order_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->order_ratio(), output);
  }

  // required uint32 quality_ratio = 20 [default = 0];
  if (has_quality_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->quality_ratio(), output);
  }

  // required uint32 level = 21 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->level(), output);
  }

  // required uint32 class_lv = 22 [default = 0];
  if (has_class_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->class_lv(), output);
  }

  // repeated .client.pet_skill_info psi = 23;
  for (int i = 0; i < this->psi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->psi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1 [default = 0];
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // required uint32 pet_id = 2 [default = 0];
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pet_id(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 max_life = 4 [default = 0];
  if (has_max_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_life(), target);
  }

  // required uint32 cur_life = 5 [default = 0];
  if (has_cur_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cur_life(), target);
  }

  // required uint32 max_power = 6 [default = 0];
  if (has_max_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_power(), target);
  }

  // required uint32 cur_power = 7 [default = 0];
  if (has_cur_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_power(), target);
  }

  // required uint32 attack = 8 [default = 0];
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->attack(), target);
  }

  // required uint32 defense = 9 [default = 0];
  if (has_defense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->defense(), target);
  }

  // required uint32 hitpoint = 10 [default = 0];
  if (has_hitpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->hitpoint(), target);
  }

  // required uint32 dodge = 11 [default = 0];
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->dodge(), target);
  }

  // required uint32 critical = 12 [default = 0];
  if (has_critical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->critical(), target);
  }

  // required uint32 agisity = 13 [default = 0];
  if (has_agisity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->agisity(), target);
  }

  // required uint32 tougnen = 14 [default = 0];
  if (has_tougnen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tougnen(), target);
  }

  // required uint32 strength = 15 [default = 0];
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->strength(), target);
  }

  // required uint32 status = 16 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->status(), target);
  }

  // required uint32 bless = 17 [default = 0];
  if (has_bless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->bless(), target);
  }

  // required uint32 experience = 18 [default = 0];
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->experience(), target);
  }

  // required uint32 order_ratio = 19 [default = 0];
  if (has_order_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->order_ratio(), target);
  }

  // required uint32 quality_ratio = 20 [default = 0];
  if (has_quality_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->quality_ratio(), target);
  }

  // required uint32 level = 21 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->level(), target);
  }

  // required uint32 class_lv = 22 [default = 0];
  if (has_class_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->class_lv(), target);
  }

  // repeated .client.pet_skill_info psi = 23;
  for (int i = 0; i < this->psi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->psi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1 [default = 0];
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required uint32 pet_id = 2 [default = 0];
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 max_life = 4 [default = 0];
    if (has_max_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_life());
    }

    // required uint32 cur_life = 5 [default = 0];
    if (has_cur_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_life());
    }

    // required uint32 max_power = 6 [default = 0];
    if (has_max_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_power());
    }

    // required uint32 cur_power = 7 [default = 0];
    if (has_cur_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_power());
    }

    // required uint32 attack = 8 [default = 0];
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 defense = 9 [default = 0];
    if (has_defense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defense());
    }

    // required uint32 hitpoint = 10 [default = 0];
    if (has_hitpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitpoint());
    }

    // required uint32 dodge = 11 [default = 0];
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }

    // required uint32 critical = 12 [default = 0];
    if (has_critical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critical());
    }

    // required uint32 agisity = 13 [default = 0];
    if (has_agisity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agisity());
    }

    // required uint32 tougnen = 14 [default = 0];
    if (has_tougnen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tougnen());
    }

    // required uint32 strength = 15 [default = 0];
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // required uint32 status = 16 [default = 0];
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 bless = 17 [default = 0];
    if (has_bless()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bless());
    }

    // required uint32 experience = 18 [default = 0];
    if (has_experience()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->experience());
    }

    // required uint32 order_ratio = 19 [default = 0];
    if (has_order_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_ratio());
    }

    // required uint32 quality_ratio = 20 [default = 0];
    if (has_quality_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ratio());
    }

    // required uint32 level = 21 [default = 0];
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 class_lv = 22 [default = 0];
    if (has_class_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_lv());
    }

  }
  // repeated .client.pet_skill_info psi = 23;
  total_size += 2 * this->psi_size();
  for (int i = 0; i < this->psi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->psi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_info::MergeFrom(const pet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  psi_.MergeFrom(from.psi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_max_life()) {
      set_max_life(from.max_life());
    }
    if (from.has_cur_life()) {
      set_cur_life(from.cur_life());
    }
    if (from.has_max_power()) {
      set_max_power(from.max_power());
    }
    if (from.has_cur_power()) {
      set_cur_power(from.cur_power());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defense()) {
      set_defense(from.defense());
    }
    if (from.has_hitpoint()) {
      set_hitpoint(from.hitpoint());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
    if (from.has_agisity()) {
      set_agisity(from.agisity());
    }
    if (from.has_tougnen()) {
      set_tougnen(from.tougnen());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bless()) {
      set_bless(from.bless());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_order_ratio()) {
      set_order_ratio(from.order_ratio());
    }
    if (from.has_quality_ratio()) {
      set_quality_ratio(from.quality_ratio());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_class_lv()) {
      set_class_lv(from.class_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_info::CopyFrom(const pet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  for (int i = 0; i < psi_size(); i++) {
    if (!this->psi(i).IsInitialized()) return false;
  }
  return true;
}

void pet_info::Swap(pet_info* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(name_, other->name_);
    std::swap(max_life_, other->max_life_);
    std::swap(cur_life_, other->cur_life_);
    std::swap(max_power_, other->max_power_);
    std::swap(cur_power_, other->cur_power_);
    std::swap(attack_, other->attack_);
    std::swap(defense_, other->defense_);
    std::swap(hitpoint_, other->hitpoint_);
    std::swap(dodge_, other->dodge_);
    std::swap(critical_, other->critical_);
    std::swap(agisity_, other->agisity_);
    std::swap(tougnen_, other->tougnen_);
    std::swap(strength_, other->strength_);
    std::swap(status_, other->status_);
    std::swap(bless_, other->bless_);
    std::swap(experience_, other->experience_);
    std::swap(order_ratio_, other->order_ratio_);
    std::swap(quality_ratio_, other->quality_ratio_);
    std::swap(level_, other->level_);
    std::swap(class_lv_, other->class_lv_);
    psi_.Swap(&other->psi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_info_descriptor_;
  metadata.reflection = pet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_add_msg::kPiFieldNumber;
#endif  // !_MSC_VER

pet_add_msg::pet_add_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_add_msg::InitAsDefaultInstance() {
}

pet_add_msg::pet_add_msg(const pet_add_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_add_msg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_add_msg::~pet_add_msg() {
  SharedDtor();
}

void pet_add_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_add_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_add_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_add_msg_descriptor_;
}

const pet_add_msg& pet_add_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_add_msg* pet_add_msg::default_instance_ = NULL;

pet_add_msg* pet_add_msg::New() const {
  return new pet_add_msg;
}

void pet_add_msg::Clear() {
  pi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_add_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.pet_info pi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_add_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.pet_info pi = 1;
  for (int i = 0; i < this->pi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_add_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.pet_info pi = 1;
  for (int i = 0; i < this->pi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_add_msg::ByteSize() const {
  int total_size = 0;

  // repeated .client.pet_info pi = 1;
  total_size += 1 * this->pi_size();
  for (int i = 0; i < this->pi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_add_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_add_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_add_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_add_msg::MergeFrom(const pet_add_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  pi_.MergeFrom(from.pi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_add_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_add_msg::CopyFrom(const pet_add_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_add_msg::IsInitialized() const {

  for (int i = 0; i < pi_size(); i++) {
    if (!this->pi(i).IsInitialized()) return false;
  }
  return true;
}

void pet_add_msg::Swap(pet_add_msg* other) {
  if (other != this) {
    pi_.Swap(&other->pi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_add_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_add_msg_descriptor_;
  metadata.reflection = pet_add_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_update_msg::kPiFieldNumber;
#endif  // !_MSC_VER

pet_update_msg::pet_update_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_update_msg::InitAsDefaultInstance() {
}

pet_update_msg::pet_update_msg(const pet_update_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_update_msg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_update_msg::~pet_update_msg() {
  SharedDtor();
}

void pet_update_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_update_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_update_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_update_msg_descriptor_;
}

const pet_update_msg& pet_update_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_update_msg* pet_update_msg::default_instance_ = NULL;

pet_update_msg* pet_update_msg::New() const {
  return new pet_update_msg;
}

void pet_update_msg::Clear() {
  pi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_update_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.pet_info pi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_update_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.pet_info pi = 1;
  for (int i = 0; i < this->pi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_update_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.pet_info pi = 1;
  for (int i = 0; i < this->pi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_update_msg::ByteSize() const {
  int total_size = 0;

  // repeated .client.pet_info pi = 1;
  total_size += 1 * this->pi_size();
  for (int i = 0; i < this->pi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_update_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_update_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_update_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_update_msg::MergeFrom(const pet_update_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  pi_.MergeFrom(from.pi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_update_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_update_msg::CopyFrom(const pet_update_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_update_msg::IsInitialized() const {

  for (int i = 0; i < pi_size(); i++) {
    if (!this->pi(i).IsInitialized()) return false;
  }
  return true;
}

void pet_update_msg::Swap(pet_update_msg* other) {
  if (other != this) {
    pi_.Swap(&other->pi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_update_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_update_msg_descriptor_;
  metadata.reflection = pet_update_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_remove_req::kSerialFieldNumber;
const int pet_remove_req::kPetIdFieldNumber;
const int pet_remove_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_remove_req::pet_remove_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_remove_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_remove_req::pet_remove_req(const pet_remove_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_remove_req::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  pet_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_remove_req::~pet_remove_req() {
  SharedDtor();
}

void pet_remove_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_remove_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_remove_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_remove_req_descriptor_;
}

const pet_remove_req& pet_remove_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_remove_req* pet_remove_req::default_instance_ = NULL;

pet_remove_req* pet_remove_req::New() const {
  return new pet_remove_req;
}

void pet_remove_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    pet_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_remove_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // required uint32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_remove_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // required uint32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pet_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_remove_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // required uint32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pet_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_remove_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required uint32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_remove_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_remove_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_remove_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_remove_req::MergeFrom(const pet_remove_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_remove_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_remove_req::CopyFrom(const pet_remove_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_remove_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_remove_req::Swap(pet_remove_req* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_remove_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_remove_req_descriptor_;
  metadata.reflection = pet_remove_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_remove_msg::kSerialFieldNumber;
const int pet_remove_msg::kPetIdFieldNumber;
#endif  // !_MSC_VER

pet_remove_msg::pet_remove_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_remove_msg::InitAsDefaultInstance() {
}

pet_remove_msg::pet_remove_msg(const pet_remove_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_remove_msg::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  pet_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_remove_msg::~pet_remove_msg() {
  SharedDtor();
}

void pet_remove_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_remove_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_remove_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_remove_msg_descriptor_;
}

const pet_remove_msg& pet_remove_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_remove_msg* pet_remove_msg::default_instance_ = NULL;

pet_remove_msg* pet_remove_msg::New() const {
  return new pet_remove_msg;
}

void pet_remove_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    pet_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_remove_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // required uint32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_remove_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // required uint32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_remove_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // required uint32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_remove_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required uint32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_remove_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_remove_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_remove_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_remove_msg::MergeFrom(const pet_remove_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_remove_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_remove_msg::CopyFrom(const pet_remove_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_remove_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_remove_msg::Swap(pet_remove_msg* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_remove_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_remove_msg_descriptor_;
  metadata.reflection = pet_remove_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_fight_req::kSerialFieldNumber;
const int pet_fight_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_fight_req::pet_fight_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_fight_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_fight_req::pet_fight_req(const pet_fight_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_fight_req::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_fight_req::~pet_fight_req() {
  SharedDtor();
}

void pet_fight_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_fight_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_fight_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_fight_req_descriptor_;
}

const pet_fight_req& pet_fight_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_fight_req* pet_fight_req::default_instance_ = NULL;

pet_fight_req* pet_fight_req::New() const {
  return new pet_fight_req;
}

void pet_fight_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_fight_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_fight_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_fight_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_fight_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_fight_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_fight_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_fight_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_fight_req::MergeFrom(const pet_fight_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_fight_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_fight_req::CopyFrom(const pet_fight_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_fight_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pet_fight_req::Swap(pet_fight_req* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_fight_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_fight_req_descriptor_;
  metadata.reflection = pet_fight_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_fight_rsp::kSerialFieldNumber;
const int pet_fight_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

pet_fight_rsp::pet_fight_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_fight_rsp::InitAsDefaultInstance() {
}

pet_fight_rsp::pet_fight_rsp(const pet_fight_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_fight_rsp::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_fight_rsp::~pet_fight_rsp() {
  SharedDtor();
}

void pet_fight_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_fight_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_fight_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_fight_rsp_descriptor_;
}

const pet_fight_rsp& pet_fight_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_fight_rsp* pet_fight_rsp::default_instance_ = NULL;

pet_fight_rsp* pet_fight_rsp::New() const {
  return new pet_fight_rsp;
}

void pet_fight_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_fight_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .client.PET_FIGHT_RET_E ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::PET_FIGHT_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::PET_FIGHT_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_fight_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // required .client.PET_FIGHT_RET_E ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_fight_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // required .client.PET_FIGHT_RET_E ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_fight_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required .client.PET_FIGHT_RET_E ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_fight_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_fight_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_fight_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_fight_rsp::MergeFrom(const pet_fight_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_fight_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_fight_rsp::CopyFrom(const pet_fight_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_fight_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_fight_rsp::Swap(pet_fight_rsp* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_fight_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_fight_rsp_descriptor_;
  metadata.reflection = pet_fight_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_rest_req::kSerialFieldNumber;
const int pet_rest_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_rest_req::pet_rest_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_rest_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_rest_req::pet_rest_req(const pet_rest_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_rest_req::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_rest_req::~pet_rest_req() {
  SharedDtor();
}

void pet_rest_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_rest_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_rest_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_rest_req_descriptor_;
}

const pet_rest_req& pet_rest_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_rest_req* pet_rest_req::default_instance_ = NULL;

pet_rest_req* pet_rest_req::New() const {
  return new pet_rest_req;
}

void pet_rest_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_rest_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_rest_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_rest_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_rest_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_rest_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_rest_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_rest_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_rest_req::MergeFrom(const pet_rest_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_rest_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_rest_req::CopyFrom(const pet_rest_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_rest_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pet_rest_req::Swap(pet_rest_req* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_rest_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_rest_req_descriptor_;
  metadata.reflection = pet_rest_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_rest_rsp::kSerialFieldNumber;
const int pet_rest_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

pet_rest_rsp::pet_rest_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_rest_rsp::InitAsDefaultInstance() {
}

pet_rest_rsp::pet_rest_rsp(const pet_rest_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_rest_rsp::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_rest_rsp::~pet_rest_rsp() {
  SharedDtor();
}

void pet_rest_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_rest_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_rest_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_rest_rsp_descriptor_;
}

const pet_rest_rsp& pet_rest_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_rest_rsp* pet_rest_rsp::default_instance_ = NULL;

pet_rest_rsp* pet_rest_rsp::New() const {
  return new pet_rest_rsp;
}

void pet_rest_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_rest_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .client.PET_REST_RET_E ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::PET_REST_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::PET_REST_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_rest_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // required .client.PET_REST_RET_E ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_rest_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // required .client.PET_REST_RET_E ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_rest_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required .client.PET_REST_RET_E ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_rest_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_rest_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_rest_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_rest_rsp::MergeFrom(const pet_rest_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_rest_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_rest_rsp::CopyFrom(const pet_rest_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_rest_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_rest_rsp::Swap(pet_rest_rsp* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_rest_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_rest_rsp_descriptor_;
  metadata.reflection = pet_rest_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_rename_req::kSerialFieldNumber;
const int pet_rename_req::kNameFieldNumber;
const int pet_rename_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_rename_req::pet_rename_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_rename_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_rename_req::pet_rename_req(const pet_rename_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_rename_req::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_rename_req::~pet_rename_req() {
  SharedDtor();
}

void pet_rename_req::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_rename_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_rename_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_rename_req_descriptor_;
}

const pet_rename_req& pet_rename_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_rename_req* pet_rename_req::default_instance_ = NULL;

pet_rename_req* pet_rename_req::New() const {
  return new pet_rename_req;
}

void pet_rename_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_rename_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_rename_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_rename_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_rename_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_rename_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_rename_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_rename_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_rename_req::MergeFrom(const pet_rename_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_rename_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_rename_req::CopyFrom(const pet_rename_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_rename_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_rename_req::Swap(pet_rename_req* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(name_, other->name_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_rename_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_rename_req_descriptor_;
  metadata.reflection = pet_rename_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_rename_rsp::kSerialFieldNumber;
const int pet_rename_rsp::kSuccessFieldNumber;
const int pet_rename_rsp::kNameFieldNumber;
#endif  // !_MSC_VER

pet_rename_rsp::pet_rename_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_rename_rsp::InitAsDefaultInstance() {
}

pet_rename_rsp::pet_rename_rsp(const pet_rename_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_rename_rsp::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  success_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_rename_rsp::~pet_rename_rsp() {
  SharedDtor();
}

void pet_rename_rsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void pet_rename_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_rename_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_rename_rsp_descriptor_;
}

const pet_rename_rsp& pet_rename_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_rename_rsp* pet_rename_rsp::default_instance_ = NULL;

pet_rename_rsp* pet_rename_rsp::New() const {
  return new pet_rename_rsp;
}

void pet_rename_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    success_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_rename_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_rename_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_rename_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_rename_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_rename_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_rename_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_rename_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_rename_rsp::MergeFrom(const pet_rename_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_rename_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_rename_rsp::CopyFrom(const pet_rename_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_rename_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_rename_rsp::Swap(pet_rename_rsp* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(success_, other->success_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_rename_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_rename_rsp_descriptor_;
  metadata.reflection = pet_rename_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_upgrade_req::kSerialFieldNumber;
const int pet_upgrade_req::kAutoBuyFieldNumber;
const int pet_upgrade_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_upgrade_req::pet_upgrade_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_upgrade_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_upgrade_req::pet_upgrade_req(const pet_upgrade_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_upgrade_req::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  auto_buy_ = false;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_upgrade_req::~pet_upgrade_req() {
  SharedDtor();
}

void pet_upgrade_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_upgrade_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_upgrade_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_upgrade_req_descriptor_;
}

const pet_upgrade_req& pet_upgrade_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_upgrade_req* pet_upgrade_req::default_instance_ = NULL;

pet_upgrade_req* pet_upgrade_req::New() const {
  return new pet_upgrade_req;
}

void pet_upgrade_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    auto_buy_ = false;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_upgrade_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auto_buy;
        break;
      }

      // required bool auto_buy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_buy_)));
          set_has_auto_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_upgrade_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // required bool auto_buy = 2;
  if (has_auto_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->auto_buy(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_upgrade_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // required bool auto_buy = 2;
  if (has_auto_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->auto_buy(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_upgrade_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required bool auto_buy = 2;
    if (has_auto_buy()) {
      total_size += 1 + 1;
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_upgrade_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_upgrade_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_upgrade_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_upgrade_req::MergeFrom(const pet_upgrade_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_auto_buy()) {
      set_auto_buy(from.auto_buy());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_upgrade_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_upgrade_req::CopyFrom(const pet_upgrade_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_upgrade_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_upgrade_req::Swap(pet_upgrade_req* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(auto_buy_, other->auto_buy_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_upgrade_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_upgrade_req_descriptor_;
  metadata.reflection = pet_upgrade_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_upgrade_rsp::kSerialFieldNumber;
const int pet_upgrade_rsp::kRetFieldNumber;
const int pet_upgrade_rsp::kBlessValFieldNumber;
#endif  // !_MSC_VER

pet_upgrade_rsp::pet_upgrade_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_upgrade_rsp::InitAsDefaultInstance() {
}

pet_upgrade_rsp::pet_upgrade_rsp(const pet_upgrade_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_upgrade_rsp::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  ret_ = 0;
  bless_val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_upgrade_rsp::~pet_upgrade_rsp() {
  SharedDtor();
}

void pet_upgrade_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_upgrade_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_upgrade_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_upgrade_rsp_descriptor_;
}

const pet_upgrade_rsp& pet_upgrade_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_upgrade_rsp* pet_upgrade_rsp::default_instance_ = NULL;

pet_upgrade_rsp* pet_upgrade_rsp::New() const {
  return new pet_upgrade_rsp;
}

void pet_upgrade_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    ret_ = 0;
    bless_val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_upgrade_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .client.PET_UPGRADE_RET_E ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::PET_UPGRADE_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::PET_UPGRADE_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bless_val;
        break;
      }

      // optional uint32 bless_val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bless_val_)));
          set_has_bless_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_upgrade_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // required .client.PET_UPGRADE_RET_E ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  // optional uint32 bless_val = 3;
  if (has_bless_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bless_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_upgrade_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // required .client.PET_UPGRADE_RET_E ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  // optional uint32 bless_val = 3;
  if (has_bless_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bless_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_upgrade_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required .client.PET_UPGRADE_RET_E ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 bless_val = 3;
    if (has_bless_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bless_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_upgrade_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_upgrade_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_upgrade_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_upgrade_rsp::MergeFrom(const pet_upgrade_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_bless_val()) {
      set_bless_val(from.bless_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_upgrade_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_upgrade_rsp::CopyFrom(const pet_upgrade_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_upgrade_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_upgrade_rsp::Swap(pet_upgrade_rsp* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(ret_, other->ret_);
    std::swap(bless_val_, other->bless_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_upgrade_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_upgrade_rsp_descriptor_;
  metadata.reflection = pet_upgrade_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_reset_req::kSerialFieldNumber;
const int pet_reset_req::kTypeFieldNumber;
const int pet_reset_req::kAutoFieldNumber;
const int pet_reset_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_reset_req::pet_reset_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_reset_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_reset_req::pet_reset_req(const pet_reset_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_reset_req::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  type_ = 1;
  auto__ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_reset_req::~pet_reset_req() {
  SharedDtor();
}

void pet_reset_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_reset_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_reset_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_reset_req_descriptor_;
}

const pet_reset_req& pet_reset_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_reset_req* pet_reset_req::default_instance_ = NULL;

pet_reset_req* pet_reset_req::New() const {
  return new pet_reset_req;
}

void pet_reset_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    type_ = 1;
    auto__ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_reset_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .client.PET_RESET_TYPE_E type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::PET_RESET_TYPE_E_IsValid(value)) {
            set_type(static_cast< ::client::PET_RESET_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auto;
        break;
      }

      // required uint32 auto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto__)));
          set_has_auto_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_reset_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // required .client.PET_RESET_TYPE_E type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required uint32 auto = 3;
  if (has_auto_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->auto_(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_reset_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // required .client.PET_RESET_TYPE_E type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required uint32 auto = 3;
  if (has_auto_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->auto_(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_reset_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required .client.PET_RESET_TYPE_E type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 auto = 3;
    if (has_auto_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_reset_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_reset_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_reset_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_reset_req::MergeFrom(const pet_reset_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_auto_()) {
      set_auto_(from.auto_());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_reset_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_reset_req::CopyFrom(const pet_reset_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_reset_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void pet_reset_req::Swap(pet_reset_req* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(type_, other->type_);
    std::swap(auto__, other->auto__);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_reset_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_reset_req_descriptor_;
  metadata.reflection = pet_reset_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_reset_rsp::kSerialFieldNumber;
const int pet_reset_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

pet_reset_rsp::pet_reset_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_reset_rsp::InitAsDefaultInstance() {
}

pet_reset_rsp::pet_reset_rsp(const pet_reset_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_reset_rsp::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_reset_rsp::~pet_reset_rsp() {
  SharedDtor();
}

void pet_reset_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_reset_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_reset_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_reset_rsp_descriptor_;
}

const pet_reset_rsp& pet_reset_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_reset_rsp* pet_reset_rsp::default_instance_ = NULL;

pet_reset_rsp* pet_reset_rsp::New() const {
  return new pet_reset_rsp;
}

void pet_reset_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_reset_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .client.PET_RESET_RET_E ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::PET_RESET_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::PET_RESET_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_reset_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // required .client.PET_RESET_RET_E ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_reset_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // required .client.PET_RESET_RET_E ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_reset_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required .client.PET_RESET_RET_E ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_reset_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_reset_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_reset_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_reset_rsp::MergeFrom(const pet_reset_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_reset_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_reset_rsp::CopyFrom(const pet_reset_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_reset_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_reset_rsp::Swap(pet_reset_rsp* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_reset_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_reset_rsp_descriptor_;
  metadata.reflection = pet_reset_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_learn_skill_req::kGridIndexFieldNumber;
const int pet_learn_skill_req::kSerialFieldNumber;
const int pet_learn_skill_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

pet_learn_skill_req::pet_learn_skill_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_learn_skill_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

pet_learn_skill_req::pet_learn_skill_req(const pet_learn_skill_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_learn_skill_req::SharedCtor() {
  _cached_size_ = 0;
  grid_index_ = 0u;
  serial_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_learn_skill_req::~pet_learn_skill_req() {
  SharedDtor();
}

void pet_learn_skill_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void pet_learn_skill_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_learn_skill_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_learn_skill_req_descriptor_;
}

const pet_learn_skill_req& pet_learn_skill_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_learn_skill_req* pet_learn_skill_req::default_instance_ = NULL;

pet_learn_skill_req* pet_learn_skill_req::New() const {
  return new pet_learn_skill_req;
}

void pet_learn_skill_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_index_ = 0u;
    serial_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_learn_skill_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serial;
        break;
      }

      // required uint32 serial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_learn_skill_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_index(), output);
  }

  // required uint32 serial = 2;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serial(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_learn_skill_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grid_index = 1;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_index(), target);
  }

  // required uint32 serial = 2;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serial(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_learn_skill_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grid_index = 1;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // required uint32 serial = 2;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_learn_skill_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_learn_skill_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_learn_skill_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_learn_skill_req::MergeFrom(const pet_learn_skill_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_learn_skill_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_learn_skill_req::CopyFrom(const pet_learn_skill_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_learn_skill_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pet_learn_skill_req::Swap(pet_learn_skill_req* other) {
  if (other != this) {
    std::swap(grid_index_, other->grid_index_);
    std::swap(serial_, other->serial_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_learn_skill_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_learn_skill_req_descriptor_;
  metadata.reflection = pet_learn_skill_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_learn_skill_rsp::kRetFieldNumber;
const int pet_learn_skill_rsp::kSerialFieldNumber;
const int pet_learn_skill_rsp::kGridIndexFieldNumber;
#endif  // !_MSC_VER

pet_learn_skill_rsp::pet_learn_skill_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_learn_skill_rsp::InitAsDefaultInstance() {
}

pet_learn_skill_rsp::pet_learn_skill_rsp(const pet_learn_skill_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_learn_skill_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  serial_ = 0u;
  grid_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_learn_skill_rsp::~pet_learn_skill_rsp() {
  SharedDtor();
}

void pet_learn_skill_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_learn_skill_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_learn_skill_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_learn_skill_rsp_descriptor_;
}

const pet_learn_skill_rsp& pet_learn_skill_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eoperate_5fpet_2eproto();
  return *default_instance_;
}

pet_learn_skill_rsp* pet_learn_skill_rsp::default_instance_ = NULL;

pet_learn_skill_rsp* pet_learn_skill_rsp::New() const {
  return new pet_learn_skill_rsp;
}

void pet_learn_skill_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    serial_ = 0u;
    grid_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_learn_skill_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serial;
        break;
      }

      // required uint32 serial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grid_index;
        break;
      }

      // required uint32 grid_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_learn_skill_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required uint32 serial = 2;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serial(), output);
  }

  // required uint32 grid_index = 3;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grid_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_learn_skill_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // required uint32 serial = 2;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serial(), target);
  }

  // required uint32 grid_index = 3;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grid_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_learn_skill_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 serial = 2;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required uint32 grid_index = 3;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_learn_skill_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_learn_skill_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_learn_skill_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_learn_skill_rsp::MergeFrom(const pet_learn_skill_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_learn_skill_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_learn_skill_rsp::CopyFrom(const pet_learn_skill_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_learn_skill_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void pet_learn_skill_rsp::Swap(pet_learn_skill_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(serial_, other->serial_);
    std::swap(grid_index_, other->grid_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_learn_skill_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_learn_skill_rsp_descriptor_;
  metadata.reflection = pet_learn_skill_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
