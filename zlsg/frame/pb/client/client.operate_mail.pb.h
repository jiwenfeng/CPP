// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.operate_mail.proto

#ifndef PROTOBUF_client_2eoperate_5fmail_2eproto__INCLUDED
#define PROTOBUF_client_2eoperate_5fmail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
#include "client.role_props.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

class mail_head;
class content_data;
class mail_body;
class mail_attr;
class mail_info;
class delivery_mail_info;
class new_mail_recv;
class mail_list_req;
class mail_list_rsp;
class mail_open_req;
class mail_open_rsp;
class send_mail_attachment;
class send_mail_req;
class send_mail_rsp;
class extract_attachment_req;
class extract_attachment_rsp;
class remove_mail_req;
class remove_mail_rsp;
class send_mail_check_role;
class send_mail_check_complete;
class broadcast_area_rsp;
class broadcast_area_to_center;
class broadcast_msg_req;
class broadcast_backdoor_area_req;

enum send_mail_rsp_SEND_RET {
  send_mail_rsp_SEND_RET_SRET_SUCCESS = 0,
  send_mail_rsp_SEND_RET_SRET_RECV_ERR = 1,
  send_mail_rsp_SEND_RET_SRET_ATTACH_ERR = 2
};
bool send_mail_rsp_SEND_RET_IsValid(int value);
const send_mail_rsp_SEND_RET send_mail_rsp_SEND_RET_SEND_RET_MIN = send_mail_rsp_SEND_RET_SRET_SUCCESS;
const send_mail_rsp_SEND_RET send_mail_rsp_SEND_RET_SEND_RET_MAX = send_mail_rsp_SEND_RET_SRET_ATTACH_ERR;
const int send_mail_rsp_SEND_RET_SEND_RET_ARRAYSIZE = send_mail_rsp_SEND_RET_SEND_RET_MAX + 1;

const ::google::protobuf::EnumDescriptor* send_mail_rsp_SEND_RET_descriptor();
inline const ::std::string& send_mail_rsp_SEND_RET_Name(send_mail_rsp_SEND_RET value) {
  return ::google::protobuf::internal::NameOfEnum(
    send_mail_rsp_SEND_RET_descriptor(), value);
}
inline bool send_mail_rsp_SEND_RET_Parse(
    const ::std::string& name, send_mail_rsp_SEND_RET* value) {
  return ::google::protobuf::internal::ParseNamedEnum<send_mail_rsp_SEND_RET>(
    send_mail_rsp_SEND_RET_descriptor(), name, value);
}
enum extract_attachment_rsp_EXTRACT_RET {
  extract_attachment_rsp_EXTRACT_RET_ERET_SUCCESS = 0,
  extract_attachment_rsp_EXTRACT_RET_ERET_PACK_FULL = 1,
  extract_attachment_rsp_EXTRACT_RET_ERET_ATTACH_ERR = 2,
  extract_attachment_rsp_EXTRACT_RET_ERET_TIME_OUT = 3
};
bool extract_attachment_rsp_EXTRACT_RET_IsValid(int value);
const extract_attachment_rsp_EXTRACT_RET extract_attachment_rsp_EXTRACT_RET_EXTRACT_RET_MIN = extract_attachment_rsp_EXTRACT_RET_ERET_SUCCESS;
const extract_attachment_rsp_EXTRACT_RET extract_attachment_rsp_EXTRACT_RET_EXTRACT_RET_MAX = extract_attachment_rsp_EXTRACT_RET_ERET_TIME_OUT;
const int extract_attachment_rsp_EXTRACT_RET_EXTRACT_RET_ARRAYSIZE = extract_attachment_rsp_EXTRACT_RET_EXTRACT_RET_MAX + 1;

const ::google::protobuf::EnumDescriptor* extract_attachment_rsp_EXTRACT_RET_descriptor();
inline const ::std::string& extract_attachment_rsp_EXTRACT_RET_Name(extract_attachment_rsp_EXTRACT_RET value) {
  return ::google::protobuf::internal::NameOfEnum(
    extract_attachment_rsp_EXTRACT_RET_descriptor(), value);
}
inline bool extract_attachment_rsp_EXTRACT_RET_Parse(
    const ::std::string& name, extract_attachment_rsp_EXTRACT_RET* value) {
  return ::google::protobuf::internal::ParseNamedEnum<extract_attachment_rsp_EXTRACT_RET>(
    extract_attachment_rsp_EXTRACT_RET_descriptor(), name, value);
}
enum remove_mail_rsp_REMOVE_RET {
  remove_mail_rsp_REMOVE_RET_RRET_SUCCESS = 0,
  remove_mail_rsp_REMOVE_RET_RRET_SYS_ERR = 1,
  remove_mail_rsp_REMOVE_RET_RRET_ATTACH_ERR = 2
};
bool remove_mail_rsp_REMOVE_RET_IsValid(int value);
const remove_mail_rsp_REMOVE_RET remove_mail_rsp_REMOVE_RET_REMOVE_RET_MIN = remove_mail_rsp_REMOVE_RET_RRET_SUCCESS;
const remove_mail_rsp_REMOVE_RET remove_mail_rsp_REMOVE_RET_REMOVE_RET_MAX = remove_mail_rsp_REMOVE_RET_RRET_ATTACH_ERR;
const int remove_mail_rsp_REMOVE_RET_REMOVE_RET_ARRAYSIZE = remove_mail_rsp_REMOVE_RET_REMOVE_RET_MAX + 1;

const ::google::protobuf::EnumDescriptor* remove_mail_rsp_REMOVE_RET_descriptor();
inline const ::std::string& remove_mail_rsp_REMOVE_RET_Name(remove_mail_rsp_REMOVE_RET value) {
  return ::google::protobuf::internal::NameOfEnum(
    remove_mail_rsp_REMOVE_RET_descriptor(), value);
}
inline bool remove_mail_rsp_REMOVE_RET_Parse(
    const ::std::string& name, remove_mail_rsp_REMOVE_RET* value) {
  return ::google::protobuf::internal::ParseNamedEnum<remove_mail_rsp_REMOVE_RET>(
    remove_mail_rsp_REMOVE_RET_descriptor(), name, value);
}
enum MAIL_TYPE_E {
  MAIL_TYPE_SYSTEM = 0,
  MAIL_TYPE_PLAYER = 1,
  MAIL_TYPE_ADMIN = 2,
  MAIL_TYPE_FAMILY = 3,
  MAIL_TYPE_ARMY = 4
};
bool MAIL_TYPE_E_IsValid(int value);
const MAIL_TYPE_E MAIL_TYPE_E_MIN = MAIL_TYPE_SYSTEM;
const MAIL_TYPE_E MAIL_TYPE_E_MAX = MAIL_TYPE_ARMY;
const int MAIL_TYPE_E_ARRAYSIZE = MAIL_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* MAIL_TYPE_E_descriptor();
inline const ::std::string& MAIL_TYPE_E_Name(MAIL_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    MAIL_TYPE_E_descriptor(), value);
}
inline bool MAIL_TYPE_E_Parse(
    const ::std::string& name, MAIL_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MAIL_TYPE_E>(
    MAIL_TYPE_E_descriptor(), name, value);
}
enum MAIL_LIST_UPDATE_TYPE {
  MAIL_LIST_UPDATE_TYPE_ALL = 1,
  MAIL_LIST_UPDATE_TYPE_DEL = 2,
  MAIL_LIST_UPDATE_TYPE_ADD = 3
};
bool MAIL_LIST_UPDATE_TYPE_IsValid(int value);
const MAIL_LIST_UPDATE_TYPE MAIL_LIST_UPDATE_TYPE_MIN = MAIL_LIST_UPDATE_TYPE_ALL;
const MAIL_LIST_UPDATE_TYPE MAIL_LIST_UPDATE_TYPE_MAX = MAIL_LIST_UPDATE_TYPE_ADD;
const int MAIL_LIST_UPDATE_TYPE_ARRAYSIZE = MAIL_LIST_UPDATE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MAIL_LIST_UPDATE_TYPE_descriptor();
inline const ::std::string& MAIL_LIST_UPDATE_TYPE_Name(MAIL_LIST_UPDATE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MAIL_LIST_UPDATE_TYPE_descriptor(), value);
}
inline bool MAIL_LIST_UPDATE_TYPE_Parse(
    const ::std::string& name, MAIL_LIST_UPDATE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MAIL_LIST_UPDATE_TYPE>(
    MAIL_LIST_UPDATE_TYPE_descriptor(), name, value);
}
// ===================================================================

class mail_head : public ::google::protobuf::Message {
 public:
  mail_head();
  virtual ~mail_head();

  mail_head(const mail_head& from);

  inline mail_head& operator=(const mail_head& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_head& default_instance();

  void Swap(mail_head* other);

  // implements Message ----------------------------------------------

  mail_head* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_head& from);
  void MergeFrom(const mail_head& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mail_id = 1 [default = 0];
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);

  // required uint32 mail_type = 2 [default = 0];
  inline bool has_mail_type() const;
  inline void clear_mail_type();
  static const int kMailTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 mail_type() const;
  inline void set_mail_type(::google::protobuf::uint32 value);

  // required uint32 recv_role_id = 3 [default = 0];
  inline bool has_recv_role_id() const;
  inline void clear_recv_role_id();
  static const int kRecvRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 recv_role_id() const;
  inline void set_recv_role_id(::google::protobuf::uint32 value);

  // required uint32 send_role_id = 4 [default = 0];
  inline bool has_send_role_id() const;
  inline void clear_send_role_id();
  static const int kSendRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint32 send_role_id() const;
  inline void set_send_role_id(::google::protobuf::uint32 value);

  // required string title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string send_role_name = 6;
  inline bool has_send_role_name() const;
  inline void clear_send_role_name();
  static const int kSendRoleNameFieldNumber = 6;
  inline const ::std::string& send_role_name() const;
  inline void set_send_role_name(const ::std::string& value);
  inline void set_send_role_name(const char* value);
  inline void set_send_role_name(const char* value, size_t size);
  inline ::std::string* mutable_send_role_name();
  inline ::std::string* release_send_role_name();
  inline void set_allocated_send_role_name(::std::string* send_role_name);

  // optional uint32 send_time = 7;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 send_time() const;
  inline void set_send_time(::google::protobuf::uint32 value);

  // optional uint32 past_time = 8;
  inline bool has_past_time() const;
  inline void clear_past_time();
  static const int kPastTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 past_time() const;
  inline void set_past_time(::google::protobuf::uint32 value);

  // optional uint32 attachment_num = 9;
  inline bool has_attachment_num() const;
  inline void clear_attachment_num();
  static const int kAttachmentNumFieldNumber = 9;
  inline ::google::protobuf::uint32 attachment_num() const;
  inline void set_attachment_num(::google::protobuf::uint32 value);

  // optional bool opened = 10;
  inline bool has_opened() const;
  inline void clear_opened();
  static const int kOpenedFieldNumber = 10;
  inline bool opened() const;
  inline void set_opened(bool value);

  // optional bool is_take = 11;
  inline bool has_is_take() const;
  inline void clear_is_take();
  static const int kIsTakeFieldNumber = 11;
  inline bool is_take() const;
  inline void set_is_take(bool value);

  // @@protoc_insertion_point(class_scope:client.mail_head)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_mail_type();
  inline void clear_has_mail_type();
  inline void set_has_recv_role_id();
  inline void clear_has_recv_role_id();
  inline void set_has_send_role_id();
  inline void clear_has_send_role_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_send_role_name();
  inline void clear_has_send_role_name();
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_past_time();
  inline void clear_has_past_time();
  inline void set_has_attachment_num();
  inline void clear_has_attachment_num();
  inline void set_has_opened();
  inline void clear_has_opened();
  inline void set_has_is_take();
  inline void clear_has_is_take();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mail_id_;
  ::google::protobuf::uint32 mail_type_;
  ::google::protobuf::uint32 recv_role_id_;
  ::google::protobuf::uint32 send_role_id_;
  ::std::string* title_;
  ::std::string* send_role_name_;
  ::google::protobuf::uint32 send_time_;
  ::google::protobuf::uint32 past_time_;
  ::google::protobuf::uint32 attachment_num_;
  bool opened_;
  bool is_take_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_head* default_instance_;
};
// -------------------------------------------------------------------

class content_data : public ::google::protobuf::Message {
 public:
  content_data();
  virtual ~content_data();

  content_data(const content_data& from);

  inline content_data& operator=(const content_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const content_data& default_instance();

  void Swap(content_data* other);

  // implements Message ----------------------------------------------

  content_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const content_data& from);
  void MergeFrom(const content_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 n = 1;
  inline bool has_n() const;
  inline void clear_n();
  static const int kNFieldNumber = 1;
  inline ::google::protobuf::uint32 n() const;
  inline void set_n(::google::protobuf::uint32 value);

  // optional string s = 2;
  inline bool has_s() const;
  inline void clear_s();
  static const int kSFieldNumber = 2;
  inline const ::std::string& s() const;
  inline void set_s(const ::std::string& value);
  inline void set_s(const char* value);
  inline void set_s(const char* value, size_t size);
  inline ::std::string* mutable_s();
  inline ::std::string* release_s();
  inline void set_allocated_s(::std::string* s);

  // optional float f = 3;
  inline bool has_f() const;
  inline void clear_f();
  static const int kFFieldNumber = 3;
  inline float f() const;
  inline void set_f(float value);

  // @@protoc_insertion_point(class_scope:client.content_data)
 private:
  inline void set_has_n();
  inline void clear_has_n();
  inline void set_has_s();
  inline void clear_has_s();
  inline void set_has_f();
  inline void clear_has_f();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* s_;
  ::google::protobuf::uint32 n_;
  float f_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static content_data* default_instance_;
};
// -------------------------------------------------------------------

class mail_body : public ::google::protobuf::Message {
 public:
  mail_body();
  virtual ~mail_body();

  mail_body(const mail_body& from);

  inline mail_body& operator=(const mail_body& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_body& default_instance();

  void Swap(mail_body* other);

  // implements Message ----------------------------------------------

  mail_body* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_body& from);
  void MergeFrom(const mail_body& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated .client.content_data data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::client::content_data& data(int index) const;
  inline ::client::content_data* mutable_data(int index);
  inline ::client::content_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::client::content_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::content_data >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:client.mail_body)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::client::content_data > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_body* default_instance_;
};
// -------------------------------------------------------------------

class mail_attr : public ::google::protobuf::Message {
 public:
  mail_attr();
  virtual ~mail_attr();

  mail_attr(const mail_attr& from);

  inline mail_attr& operator=(const mail_attr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_attr& default_instance();

  void Swap(mail_attr* other);

  // implements Message ----------------------------------------------

  mail_attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_attr& from);
  void MergeFrom(const mail_attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 attr_type = 1;
  inline bool has_attr_type() const;
  inline void clear_attr_type();
  static const int kAttrTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 attr_type() const;
  inline void set_attr_type(::google::protobuf::uint32 value);

  // optional uint32 attr_value = 2;
  inline bool has_attr_value() const;
  inline void clear_attr_value();
  static const int kAttrValueFieldNumber = 2;
  inline ::google::protobuf::uint32 attr_value() const;
  inline void set_attr_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.mail_attr)
 private:
  inline void set_has_attr_type();
  inline void clear_has_attr_type();
  inline void set_has_attr_value();
  inline void clear_has_attr_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 attr_type_;
  ::google::protobuf::uint32 attr_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_attr* default_instance_;
};
// -------------------------------------------------------------------

class mail_info : public ::google::protobuf::Message {
 public:
  mail_info();
  virtual ~mail_info();

  mail_info(const mail_info& from);

  inline mail_info& operator=(const mail_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_info& default_instance();

  void Swap(mail_info* other);

  // implements Message ----------------------------------------------

  mail_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_info& from);
  void MergeFrom(const mail_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.mail_head mh = 1;
  inline bool has_mh() const;
  inline void clear_mh();
  static const int kMhFieldNumber = 1;
  inline const ::client::mail_head& mh() const;
  inline ::client::mail_head* mutable_mh();
  inline ::client::mail_head* release_mh();
  inline void set_allocated_mh(::client::mail_head* mh);

  // optional .client.mail_body mb = 2;
  inline bool has_mb() const;
  inline void clear_mb();
  static const int kMbFieldNumber = 2;
  inline const ::client::mail_body& mb() const;
  inline ::client::mail_body* mutable_mb();
  inline ::client::mail_body* release_mb();
  inline void set_allocated_mb(::client::mail_body* mb);

  // repeated .client.mail_attr attr = 3;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 3;
  inline const ::client::mail_attr& attr(int index) const;
  inline ::client::mail_attr* mutable_attr(int index);
  inline ::client::mail_attr* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::client::mail_attr >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::mail_attr >*
      mutable_attr();

  // repeated .client.props_info ma = 4;
  inline int ma_size() const;
  inline void clear_ma();
  static const int kMaFieldNumber = 4;
  inline const ::client::props_info& ma(int index) const;
  inline ::client::props_info* mutable_ma(int index);
  inline ::client::props_info* add_ma();
  inline const ::google::protobuf::RepeatedPtrField< ::client::props_info >&
      ma() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::props_info >*
      mutable_ma();

  // @@protoc_insertion_point(class_scope:client.mail_info)
 private:
  inline void set_has_mh();
  inline void clear_has_mh();
  inline void set_has_mb();
  inline void clear_has_mb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::mail_head* mh_;
  ::client::mail_body* mb_;
  ::google::protobuf::RepeatedPtrField< ::client::mail_attr > attr_;
  ::google::protobuf::RepeatedPtrField< ::client::props_info > ma_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_info* default_instance_;
};
// -------------------------------------------------------------------

class delivery_mail_info : public ::google::protobuf::Message {
 public:
  delivery_mail_info();
  virtual ~delivery_mail_info();

  delivery_mail_info(const delivery_mail_info& from);

  inline delivery_mail_info& operator=(const delivery_mail_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const delivery_mail_info& default_instance();

  void Swap(delivery_mail_info* other);

  // implements Message ----------------------------------------------

  delivery_mail_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const delivery_mail_info& from);
  void MergeFrom(const delivery_mail_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.mail_info mi = 1;
  inline bool has_mi() const;
  inline void clear_mi();
  static const int kMiFieldNumber = 1;
  inline const ::client::mail_info& mi() const;
  inline ::client::mail_info* mutable_mi();
  inline ::client::mail_info* release_mi();
  inline void set_allocated_mi(::client::mail_info* mi);

  // required string recv_name = 2;
  inline bool has_recv_name() const;
  inline void clear_recv_name();
  static const int kRecvNameFieldNumber = 2;
  inline const ::std::string& recv_name() const;
  inline void set_recv_name(const ::std::string& value);
  inline void set_recv_name(const char* value);
  inline void set_recv_name(const char* value, size_t size);
  inline ::std::string* mutable_recv_name();
  inline ::std::string* release_recv_name();
  inline void set_allocated_recv_name(::std::string* recv_name);

  // @@protoc_insertion_point(class_scope:client.delivery_mail_info)
 private:
  inline void set_has_mi();
  inline void clear_has_mi();
  inline void set_has_recv_name();
  inline void clear_has_recv_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::mail_info* mi_;
  ::std::string* recv_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static delivery_mail_info* default_instance_;
};
// -------------------------------------------------------------------

class new_mail_recv : public ::google::protobuf::Message {
 public:
  new_mail_recv();
  virtual ~new_mail_recv();

  new_mail_recv(const new_mail_recv& from);

  inline new_mail_recv& operator=(const new_mail_recv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const new_mail_recv& default_instance();

  void Swap(new_mail_recv* other);

  // implements Message ----------------------------------------------

  new_mail_recv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const new_mail_recv& from);
  void MergeFrom(const new_mail_recv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.mail_head mh = 1;
  inline int mh_size() const;
  inline void clear_mh();
  static const int kMhFieldNumber = 1;
  inline const ::client::mail_head& mh(int index) const;
  inline ::client::mail_head* mutable_mh(int index);
  inline ::client::mail_head* add_mh();
  inline const ::google::protobuf::RepeatedPtrField< ::client::mail_head >&
      mh() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::mail_head >*
      mutable_mh();

  // @@protoc_insertion_point(class_scope:client.new_mail_recv)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::mail_head > mh_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static new_mail_recv* default_instance_;
};
// -------------------------------------------------------------------

class mail_list_req : public ::google::protobuf::Message {
 public:
  mail_list_req();
  virtual ~mail_list_req();

  mail_list_req(const mail_list_req& from);

  inline mail_list_req& operator=(const mail_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_list_req& default_instance();

  void Swap(mail_list_req* other);

  // implements Message ----------------------------------------------

  mail_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_list_req& from);
  void MergeFrom(const mail_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 svr_time = 1;
  inline bool has_svr_time() const;
  inline void clear_svr_time();
  static const int kSvrTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_time() const;
  inline void set_svr_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.mail_list_req)
 private:
  inline void set_has_svr_time();
  inline void clear_has_svr_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 svr_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_list_req* default_instance_;
};
// -------------------------------------------------------------------

class mail_list_rsp : public ::google::protobuf::Message {
 public:
  mail_list_rsp();
  virtual ~mail_list_rsp();

  mail_list_rsp(const mail_list_rsp& from);

  inline mail_list_rsp& operator=(const mail_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_list_rsp& default_instance();

  void Swap(mail_list_rsp* other);

  // implements Message ----------------------------------------------

  mail_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_list_rsp& from);
  void MergeFrom(const mail_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.mail_head mh = 1;
  inline int mh_size() const;
  inline void clear_mh();
  static const int kMhFieldNumber = 1;
  inline const ::client::mail_head& mh(int index) const;
  inline ::client::mail_head* mutable_mh(int index);
  inline ::client::mail_head* add_mh();
  inline const ::google::protobuf::RepeatedPtrField< ::client::mail_head >&
      mh() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::mail_head >*
      mutable_mh();

  // optional .client.MAIL_LIST_UPDATE_TYPE update_type = 2;
  inline bool has_update_type() const;
  inline void clear_update_type();
  static const int kUpdateTypeFieldNumber = 2;
  inline ::client::MAIL_LIST_UPDATE_TYPE update_type() const;
  inline void set_update_type(::client::MAIL_LIST_UPDATE_TYPE value);

  // @@protoc_insertion_point(class_scope:client.mail_list_rsp)
 private:
  inline void set_has_update_type();
  inline void clear_has_update_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::mail_head > mh_;
  int update_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class mail_open_req : public ::google::protobuf::Message {
 public:
  mail_open_req();
  virtual ~mail_open_req();

  mail_open_req(const mail_open_req& from);

  inline mail_open_req& operator=(const mail_open_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_open_req& default_instance();

  void Swap(mail_open_req* other);

  // implements Message ----------------------------------------------

  mail_open_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_open_req& from);
  void MergeFrom(const mail_open_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.mail_open_req)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 mail_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_open_req* default_instance_;
};
// -------------------------------------------------------------------

class mail_open_rsp : public ::google::protobuf::Message {
 public:
  mail_open_rsp();
  virtual ~mail_open_rsp();

  mail_open_rsp(const mail_open_rsp& from);

  inline mail_open_rsp& operator=(const mail_open_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_open_rsp& default_instance();

  void Swap(mail_open_rsp* other);

  // implements Message ----------------------------------------------

  mail_open_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_open_rsp& from);
  void MergeFrom(const mail_open_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);

  // optional .client.mail_body mb = 2;
  inline bool has_mb() const;
  inline void clear_mb();
  static const int kMbFieldNumber = 2;
  inline const ::client::mail_body& mb() const;
  inline ::client::mail_body* mutable_mb();
  inline ::client::mail_body* release_mb();
  inline void set_allocated_mb(::client::mail_body* mb);

  // repeated .client.mail_attr attr = 3;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 3;
  inline const ::client::mail_attr& attr(int index) const;
  inline ::client::mail_attr* mutable_attr(int index);
  inline ::client::mail_attr* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::client::mail_attr >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::mail_attr >*
      mutable_attr();

  // repeated .client.props_info ma = 4;
  inline int ma_size() const;
  inline void clear_ma();
  static const int kMaFieldNumber = 4;
  inline const ::client::props_info& ma(int index) const;
  inline ::client::props_info* mutable_ma(int index);
  inline ::client::props_info* add_ma();
  inline const ::google::protobuf::RepeatedPtrField< ::client::props_info >&
      ma() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::props_info >*
      mutable_ma();

  // @@protoc_insertion_point(class_scope:client.mail_open_rsp)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_mb();
  inline void clear_has_mb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::mail_body* mb_;
  ::google::protobuf::RepeatedPtrField< ::client::mail_attr > attr_;
  ::google::protobuf::RepeatedPtrField< ::client::props_info > ma_;
  ::google::protobuf::uint32 mail_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_open_rsp* default_instance_;
};
// -------------------------------------------------------------------

class send_mail_attachment : public ::google::protobuf::Message {
 public:
  send_mail_attachment();
  virtual ~send_mail_attachment();

  send_mail_attachment(const send_mail_attachment& from);

  inline send_mail_attachment& operator=(const send_mail_attachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const send_mail_attachment& default_instance();

  void Swap(send_mail_attachment* other);

  // implements Message ----------------------------------------------

  send_mail_attachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const send_mail_attachment& from);
  void MergeFrom(const send_mail_attachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // required uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.send_mail_attachment)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 grid_index_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static send_mail_attachment* default_instance_;
};
// -------------------------------------------------------------------

class send_mail_req : public ::google::protobuf::Message {
 public:
  send_mail_req();
  virtual ~send_mail_req();

  send_mail_req(const send_mail_req& from);

  inline send_mail_req& operator=(const send_mail_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const send_mail_req& default_instance();

  void Swap(send_mail_req* other);

  // implements Message ----------------------------------------------

  send_mail_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const send_mail_req& from);
  void MergeFrom(const send_mail_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.mail_info info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::client::mail_info& info() const;
  inline ::client::mail_info* mutable_info();
  inline ::client::mail_info* release_info();
  inline void set_allocated_info(::client::mail_info* info);

  // required string recv_name = 2;
  inline bool has_recv_name() const;
  inline void clear_recv_name();
  static const int kRecvNameFieldNumber = 2;
  inline const ::std::string& recv_name() const;
  inline void set_recv_name(const ::std::string& value);
  inline void set_recv_name(const char* value);
  inline void set_recv_name(const char* value, size_t size);
  inline ::std::string* mutable_recv_name();
  inline ::std::string* release_recv_name();
  inline void set_allocated_recv_name(::std::string* recv_name);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.send_mail_req)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_recv_name();
  inline void clear_has_recv_name();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::mail_info* info_;
  ::std::string* recv_name_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static send_mail_req* default_instance_;
};
// -------------------------------------------------------------------

class send_mail_rsp : public ::google::protobuf::Message {
 public:
  send_mail_rsp();
  virtual ~send_mail_rsp();

  send_mail_rsp(const send_mail_rsp& from);

  inline send_mail_rsp& operator=(const send_mail_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const send_mail_rsp& default_instance();

  void Swap(send_mail_rsp* other);

  // implements Message ----------------------------------------------

  send_mail_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const send_mail_rsp& from);
  void MergeFrom(const send_mail_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef send_mail_rsp_SEND_RET SEND_RET;
  static const SEND_RET SRET_SUCCESS = send_mail_rsp_SEND_RET_SRET_SUCCESS;
  static const SEND_RET SRET_RECV_ERR = send_mail_rsp_SEND_RET_SRET_RECV_ERR;
  static const SEND_RET SRET_ATTACH_ERR = send_mail_rsp_SEND_RET_SRET_ATTACH_ERR;
  static inline bool SEND_RET_IsValid(int value) {
    return send_mail_rsp_SEND_RET_IsValid(value);
  }
  static const SEND_RET SEND_RET_MIN =
    send_mail_rsp_SEND_RET_SEND_RET_MIN;
  static const SEND_RET SEND_RET_MAX =
    send_mail_rsp_SEND_RET_SEND_RET_MAX;
  static const int SEND_RET_ARRAYSIZE =
    send_mail_rsp_SEND_RET_SEND_RET_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SEND_RET_descriptor() {
    return send_mail_rsp_SEND_RET_descriptor();
  }
  static inline const ::std::string& SEND_RET_Name(SEND_RET value) {
    return send_mail_rsp_SEND_RET_Name(value);
  }
  static inline bool SEND_RET_Parse(const ::std::string& name,
      SEND_RET* value) {
    return send_mail_rsp_SEND_RET_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.send_mail_rsp.SEND_RET ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::send_mail_rsp_SEND_RET ret() const;
  inline void set_ret(::client::send_mail_rsp_SEND_RET value);

  // optional uint32 err_code = 2;
  inline bool has_err_code() const;
  inline void clear_err_code();
  static const int kErrCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 err_code() const;
  inline void set_err_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.send_mail_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_err_code();
  inline void clear_has_err_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 err_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static send_mail_rsp* default_instance_;
};
// -------------------------------------------------------------------

class extract_attachment_req : public ::google::protobuf::Message {
 public:
  extract_attachment_req();
  virtual ~extract_attachment_req();

  extract_attachment_req(const extract_attachment_req& from);

  inline extract_attachment_req& operator=(const extract_attachment_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const extract_attachment_req& default_instance();

  void Swap(extract_attachment_req* other);

  // implements Message ----------------------------------------------

  extract_attachment_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const extract_attachment_req& from);
  void MergeFrom(const extract_attachment_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.extract_attachment_req)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 mail_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static extract_attachment_req* default_instance_;
};
// -------------------------------------------------------------------

class extract_attachment_rsp : public ::google::protobuf::Message {
 public:
  extract_attachment_rsp();
  virtual ~extract_attachment_rsp();

  extract_attachment_rsp(const extract_attachment_rsp& from);

  inline extract_attachment_rsp& operator=(const extract_attachment_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const extract_attachment_rsp& default_instance();

  void Swap(extract_attachment_rsp* other);

  // implements Message ----------------------------------------------

  extract_attachment_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const extract_attachment_rsp& from);
  void MergeFrom(const extract_attachment_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef extract_attachment_rsp_EXTRACT_RET EXTRACT_RET;
  static const EXTRACT_RET ERET_SUCCESS = extract_attachment_rsp_EXTRACT_RET_ERET_SUCCESS;
  static const EXTRACT_RET ERET_PACK_FULL = extract_attachment_rsp_EXTRACT_RET_ERET_PACK_FULL;
  static const EXTRACT_RET ERET_ATTACH_ERR = extract_attachment_rsp_EXTRACT_RET_ERET_ATTACH_ERR;
  static const EXTRACT_RET ERET_TIME_OUT = extract_attachment_rsp_EXTRACT_RET_ERET_TIME_OUT;
  static inline bool EXTRACT_RET_IsValid(int value) {
    return extract_attachment_rsp_EXTRACT_RET_IsValid(value);
  }
  static const EXTRACT_RET EXTRACT_RET_MIN =
    extract_attachment_rsp_EXTRACT_RET_EXTRACT_RET_MIN;
  static const EXTRACT_RET EXTRACT_RET_MAX =
    extract_attachment_rsp_EXTRACT_RET_EXTRACT_RET_MAX;
  static const int EXTRACT_RET_ARRAYSIZE =
    extract_attachment_rsp_EXTRACT_RET_EXTRACT_RET_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EXTRACT_RET_descriptor() {
    return extract_attachment_rsp_EXTRACT_RET_descriptor();
  }
  static inline const ::std::string& EXTRACT_RET_Name(EXTRACT_RET value) {
    return extract_attachment_rsp_EXTRACT_RET_Name(value);
  }
  static inline bool EXTRACT_RET_Parse(const ::std::string& name,
      EXTRACT_RET* value) {
    return extract_attachment_rsp_EXTRACT_RET_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);

  // required .client.extract_attachment_rsp.EXTRACT_RET ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::client::extract_attachment_rsp_EXTRACT_RET ret() const;
  inline void set_ret(::client::extract_attachment_rsp_EXTRACT_RET value);

  // @@protoc_insertion_point(class_scope:client.extract_attachment_rsp)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mail_id_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static extract_attachment_rsp* default_instance_;
};
// -------------------------------------------------------------------

class remove_mail_req : public ::google::protobuf::Message {
 public:
  remove_mail_req();
  virtual ~remove_mail_req();

  remove_mail_req(const remove_mail_req& from);

  inline remove_mail_req& operator=(const remove_mail_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const remove_mail_req& default_instance();

  void Swap(remove_mail_req* other);

  // implements Message ----------------------------------------------

  remove_mail_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const remove_mail_req& from);
  void MergeFrom(const remove_mail_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 mail_id = 1;
  inline int mail_id_size() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mail_id(int index) const;
  inline void set_mail_id(int index, ::google::protobuf::uint32 value);
  inline void add_mail_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mail_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mail_id();

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.remove_mail_req)
 private:
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mail_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static remove_mail_req* default_instance_;
};
// -------------------------------------------------------------------

class remove_mail_rsp : public ::google::protobuf::Message {
 public:
  remove_mail_rsp();
  virtual ~remove_mail_rsp();

  remove_mail_rsp(const remove_mail_rsp& from);

  inline remove_mail_rsp& operator=(const remove_mail_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const remove_mail_rsp& default_instance();

  void Swap(remove_mail_rsp* other);

  // implements Message ----------------------------------------------

  remove_mail_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const remove_mail_rsp& from);
  void MergeFrom(const remove_mail_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef remove_mail_rsp_REMOVE_RET REMOVE_RET;
  static const REMOVE_RET RRET_SUCCESS = remove_mail_rsp_REMOVE_RET_RRET_SUCCESS;
  static const REMOVE_RET RRET_SYS_ERR = remove_mail_rsp_REMOVE_RET_RRET_SYS_ERR;
  static const REMOVE_RET RRET_ATTACH_ERR = remove_mail_rsp_REMOVE_RET_RRET_ATTACH_ERR;
  static inline bool REMOVE_RET_IsValid(int value) {
    return remove_mail_rsp_REMOVE_RET_IsValid(value);
  }
  static const REMOVE_RET REMOVE_RET_MIN =
    remove_mail_rsp_REMOVE_RET_REMOVE_RET_MIN;
  static const REMOVE_RET REMOVE_RET_MAX =
    remove_mail_rsp_REMOVE_RET_REMOVE_RET_MAX;
  static const int REMOVE_RET_ARRAYSIZE =
    remove_mail_rsp_REMOVE_RET_REMOVE_RET_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REMOVE_RET_descriptor() {
    return remove_mail_rsp_REMOVE_RET_descriptor();
  }
  static inline const ::std::string& REMOVE_RET_Name(REMOVE_RET value) {
    return remove_mail_rsp_REMOVE_RET_Name(value);
  }
  static inline bool REMOVE_RET_Parse(const ::std::string& name,
      REMOVE_RET* value) {
    return remove_mail_rsp_REMOVE_RET_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.remove_mail_rsp.REMOVE_RET ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::remove_mail_rsp_REMOVE_RET ret() const;
  inline void set_ret(::client::remove_mail_rsp_REMOVE_RET value);

  // @@protoc_insertion_point(class_scope:client.remove_mail_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static remove_mail_rsp* default_instance_;
};
// -------------------------------------------------------------------

class send_mail_check_role : public ::google::protobuf::Message {
 public:
  send_mail_check_role();
  virtual ~send_mail_check_role();

  send_mail_check_role(const send_mail_check_role& from);

  inline send_mail_check_role& operator=(const send_mail_check_role& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const send_mail_check_role& default_instance();

  void Swap(send_mail_check_role* other);

  // implements Message ----------------------------------------------

  send_mail_check_role* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const send_mail_check_role& from);
  void MergeFrom(const send_mail_check_role& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.send_mail_req smr = 1;
  inline bool has_smr() const;
  inline void clear_smr();
  static const int kSmrFieldNumber = 1;
  inline const ::client::send_mail_req& smr() const;
  inline ::client::send_mail_req* mutable_smr();
  inline ::client::send_mail_req* release_smr();
  inline void set_allocated_smr(::client::send_mail_req* smr);

  // @@protoc_insertion_point(class_scope:client.send_mail_check_role)
 private:
  inline void set_has_smr();
  inline void clear_has_smr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::send_mail_req* smr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static send_mail_check_role* default_instance_;
};
// -------------------------------------------------------------------

class send_mail_check_complete : public ::google::protobuf::Message {
 public:
  send_mail_check_complete();
  virtual ~send_mail_check_complete();

  send_mail_check_complete(const send_mail_check_complete& from);

  inline send_mail_check_complete& operator=(const send_mail_check_complete& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const send_mail_check_complete& default_instance();

  void Swap(send_mail_check_complete* other);

  // implements Message ----------------------------------------------

  send_mail_check_complete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const send_mail_check_complete& from);
  void MergeFrom(const send_mail_check_complete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.send_mail_req smr = 1;
  inline bool has_smr() const;
  inline void clear_smr();
  static const int kSmrFieldNumber = 1;
  inline const ::client::send_mail_req& smr() const;
  inline ::client::send_mail_req* mutable_smr();
  inline ::client::send_mail_req* release_smr();
  inline void set_allocated_smr(::client::send_mail_req* smr);

  // required bool pass = 2;
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 2;
  inline bool pass() const;
  inline void set_pass(bool value);

  // @@protoc_insertion_point(class_scope:client.send_mail_check_complete)
 private:
  inline void set_has_smr();
  inline void clear_has_smr();
  inline void set_has_pass();
  inline void clear_has_pass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::send_mail_req* smr_;
  bool pass_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static send_mail_check_complete* default_instance_;
};
// -------------------------------------------------------------------

class broadcast_area_rsp : public ::google::protobuf::Message {
 public:
  broadcast_area_rsp();
  virtual ~broadcast_area_rsp();

  broadcast_area_rsp(const broadcast_area_rsp& from);

  inline broadcast_area_rsp& operator=(const broadcast_area_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const broadcast_area_rsp& default_instance();

  void Swap(broadcast_area_rsp* other);

  // implements Message ----------------------------------------------

  broadcast_area_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const broadcast_area_rsp& from);
  void MergeFrom(const broadcast_area_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 area_id = 1;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional .client.mail_body area_msg = 2;
  inline bool has_area_msg() const;
  inline void clear_area_msg();
  static const int kAreaMsgFieldNumber = 2;
  inline const ::client::mail_body& area_msg() const;
  inline ::client::mail_body* mutable_area_msg();
  inline ::client::mail_body* release_area_msg();
  inline void set_allocated_area_msg(::client::mail_body* area_msg);

  // optional uint32 broadcast_count = 3 [default = 1];
  inline bool has_broadcast_count() const;
  inline void clear_broadcast_count();
  static const int kBroadcastCountFieldNumber = 3;
  inline ::google::protobuf::uint32 broadcast_count() const;
  inline void set_broadcast_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.broadcast_area_rsp)
 private:
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_area_msg();
  inline void clear_has_area_msg();
  inline void set_has_broadcast_count();
  inline void clear_has_broadcast_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::mail_body* area_msg_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint32 broadcast_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static broadcast_area_rsp* default_instance_;
};
// -------------------------------------------------------------------

class broadcast_area_to_center : public ::google::protobuf::Message {
 public:
  broadcast_area_to_center();
  virtual ~broadcast_area_to_center();

  broadcast_area_to_center(const broadcast_area_to_center& from);

  inline broadcast_area_to_center& operator=(const broadcast_area_to_center& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const broadcast_area_to_center& default_instance();

  void Swap(broadcast_area_to_center* other);

  // implements Message ----------------------------------------------

  broadcast_area_to_center* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const broadcast_area_to_center& from);
  void MergeFrom(const broadcast_area_to_center& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional .client.broadcast_area_rsp broadcast_info = 2;
  inline bool has_broadcast_info() const;
  inline void clear_broadcast_info();
  static const int kBroadcastInfoFieldNumber = 2;
  inline const ::client::broadcast_area_rsp& broadcast_info() const;
  inline ::client::broadcast_area_rsp* mutable_broadcast_info();
  inline ::client::broadcast_area_rsp* release_broadcast_info();
  inline void set_allocated_broadcast_info(::client::broadcast_area_rsp* broadcast_info);

  // @@protoc_insertion_point(class_scope:client.broadcast_area_to_center)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_broadcast_info();
  inline void clear_has_broadcast_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::broadcast_area_rsp* broadcast_info_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static broadcast_area_to_center* default_instance_;
};
// -------------------------------------------------------------------

class broadcast_msg_req : public ::google::protobuf::Message {
 public:
  broadcast_msg_req();
  virtual ~broadcast_msg_req();

  broadcast_msg_req(const broadcast_msg_req& from);

  inline broadcast_msg_req& operator=(const broadcast_msg_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const broadcast_msg_req& default_instance();

  void Swap(broadcast_msg_req* other);

  // implements Message ----------------------------------------------

  broadcast_msg_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const broadcast_msg_req& from);
  void MergeFrom(const broadcast_msg_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 area_id = 1;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // repeated .client.content_data data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::client::content_data& data(int index) const;
  inline ::client::content_data* mutable_data(int index);
  inline ::client::content_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::client::content_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::content_data >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:client.broadcast_msg_req)
 private:
  inline void set_has_area_id();
  inline void clear_has_area_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::content_data > data_;
  ::google::protobuf::uint32 area_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static broadcast_msg_req* default_instance_;
};
// -------------------------------------------------------------------

class broadcast_backdoor_area_req : public ::google::protobuf::Message {
 public:
  broadcast_backdoor_area_req();
  virtual ~broadcast_backdoor_area_req();

  broadcast_backdoor_area_req(const broadcast_backdoor_area_req& from);

  inline broadcast_backdoor_area_req& operator=(const broadcast_backdoor_area_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const broadcast_backdoor_area_req& default_instance();

  void Swap(broadcast_backdoor_area_req* other);

  // implements Message ----------------------------------------------

  broadcast_backdoor_area_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const broadcast_backdoor_area_req& from);
  void MergeFrom(const broadcast_backdoor_area_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 area_id = 1;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  inline ::google::protobuf::uint32 area_id() const;
  inline void set_area_id(::google::protobuf::uint32 value);

  // optional .client.mail_body area_msg = 2;
  inline bool has_area_msg() const;
  inline void clear_area_msg();
  static const int kAreaMsgFieldNumber = 2;
  inline const ::client::mail_body& area_msg() const;
  inline ::client::mail_body* mutable_area_msg();
  inline ::client::mail_body* release_area_msg();
  inline void set_allocated_area_msg(::client::mail_body* area_msg);

  // optional uint32 broadcast_count = 3 [default = 1];
  inline bool has_broadcast_count() const;
  inline void clear_broadcast_count();
  static const int kBroadcastCountFieldNumber = 3;
  inline ::google::protobuf::uint32 broadcast_count() const;
  inline void set_broadcast_count(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.broadcast_backdoor_area_req)
 private:
  inline void set_has_area_id();
  inline void clear_has_area_id();
  inline void set_has_area_msg();
  inline void clear_has_area_msg();
  inline void set_has_broadcast_count();
  inline void clear_has_broadcast_count();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::mail_body* area_msg_;
  ::google::protobuf::uint32 area_id_;
  ::google::protobuf::uint32 broadcast_count_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_AssignDesc_client_2eoperate_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client_2eoperate_5fmail_2eproto();

  void InitAsDefaultInstance();
  static broadcast_backdoor_area_req* default_instance_;
};
// ===================================================================


// ===================================================================

// mail_head

// required uint32 mail_id = 1 [default = 0];
inline bool mail_head::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_head::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_head::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_head::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 mail_head::mail_id() const {
  return mail_id_;
}
inline void mail_head::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// required uint32 mail_type = 2 [default = 0];
inline bool mail_head::has_mail_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_head::set_has_mail_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_head::clear_has_mail_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_head::clear_mail_type() {
  mail_type_ = 0u;
  clear_has_mail_type();
}
inline ::google::protobuf::uint32 mail_head::mail_type() const {
  return mail_type_;
}
inline void mail_head::set_mail_type(::google::protobuf::uint32 value) {
  set_has_mail_type();
  mail_type_ = value;
}

// required uint32 recv_role_id = 3 [default = 0];
inline bool mail_head::has_recv_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_head::set_has_recv_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_head::clear_has_recv_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_head::clear_recv_role_id() {
  recv_role_id_ = 0u;
  clear_has_recv_role_id();
}
inline ::google::protobuf::uint32 mail_head::recv_role_id() const {
  return recv_role_id_;
}
inline void mail_head::set_recv_role_id(::google::protobuf::uint32 value) {
  set_has_recv_role_id();
  recv_role_id_ = value;
}

// required uint32 send_role_id = 4 [default = 0];
inline bool mail_head::has_send_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail_head::set_has_send_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail_head::clear_has_send_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail_head::clear_send_role_id() {
  send_role_id_ = 0u;
  clear_has_send_role_id();
}
inline ::google::protobuf::uint32 mail_head::send_role_id() const {
  return send_role_id_;
}
inline void mail_head::set_send_role_id(::google::protobuf::uint32 value) {
  set_has_send_role_id();
  send_role_id_ = value;
}

// required string title = 5;
inline bool mail_head::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mail_head::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mail_head::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mail_head::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& mail_head::title() const {
  return *title_;
}
inline void mail_head::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail_head::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mail_head::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_head::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* mail_head::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_head::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string send_role_name = 6;
inline bool mail_head::has_send_role_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mail_head::set_has_send_role_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mail_head::clear_has_send_role_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mail_head::clear_send_role_name() {
  if (send_role_name_ != &::google::protobuf::internal::kEmptyString) {
    send_role_name_->clear();
  }
  clear_has_send_role_name();
}
inline const ::std::string& mail_head::send_role_name() const {
  return *send_role_name_;
}
inline void mail_head::set_send_role_name(const ::std::string& value) {
  set_has_send_role_name();
  if (send_role_name_ == &::google::protobuf::internal::kEmptyString) {
    send_role_name_ = new ::std::string;
  }
  send_role_name_->assign(value);
}
inline void mail_head::set_send_role_name(const char* value) {
  set_has_send_role_name();
  if (send_role_name_ == &::google::protobuf::internal::kEmptyString) {
    send_role_name_ = new ::std::string;
  }
  send_role_name_->assign(value);
}
inline void mail_head::set_send_role_name(const char* value, size_t size) {
  set_has_send_role_name();
  if (send_role_name_ == &::google::protobuf::internal::kEmptyString) {
    send_role_name_ = new ::std::string;
  }
  send_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_head::mutable_send_role_name() {
  set_has_send_role_name();
  if (send_role_name_ == &::google::protobuf::internal::kEmptyString) {
    send_role_name_ = new ::std::string;
  }
  return send_role_name_;
}
inline ::std::string* mail_head::release_send_role_name() {
  clear_has_send_role_name();
  if (send_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = send_role_name_;
    send_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_head::set_allocated_send_role_name(::std::string* send_role_name) {
  if (send_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_role_name_;
  }
  if (send_role_name) {
    set_has_send_role_name();
    send_role_name_ = send_role_name;
  } else {
    clear_has_send_role_name();
    send_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 send_time = 7;
inline bool mail_head::has_send_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mail_head::set_has_send_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mail_head::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mail_head::clear_send_time() {
  send_time_ = 0u;
  clear_has_send_time();
}
inline ::google::protobuf::uint32 mail_head::send_time() const {
  return send_time_;
}
inline void mail_head::set_send_time(::google::protobuf::uint32 value) {
  set_has_send_time();
  send_time_ = value;
}

// optional uint32 past_time = 8;
inline bool mail_head::has_past_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mail_head::set_has_past_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mail_head::clear_has_past_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mail_head::clear_past_time() {
  past_time_ = 0u;
  clear_has_past_time();
}
inline ::google::protobuf::uint32 mail_head::past_time() const {
  return past_time_;
}
inline void mail_head::set_past_time(::google::protobuf::uint32 value) {
  set_has_past_time();
  past_time_ = value;
}

// optional uint32 attachment_num = 9;
inline bool mail_head::has_attachment_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mail_head::set_has_attachment_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mail_head::clear_has_attachment_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mail_head::clear_attachment_num() {
  attachment_num_ = 0u;
  clear_has_attachment_num();
}
inline ::google::protobuf::uint32 mail_head::attachment_num() const {
  return attachment_num_;
}
inline void mail_head::set_attachment_num(::google::protobuf::uint32 value) {
  set_has_attachment_num();
  attachment_num_ = value;
}

// optional bool opened = 10;
inline bool mail_head::has_opened() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mail_head::set_has_opened() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mail_head::clear_has_opened() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mail_head::clear_opened() {
  opened_ = false;
  clear_has_opened();
}
inline bool mail_head::opened() const {
  return opened_;
}
inline void mail_head::set_opened(bool value) {
  set_has_opened();
  opened_ = value;
}

// optional bool is_take = 11;
inline bool mail_head::has_is_take() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mail_head::set_has_is_take() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mail_head::clear_has_is_take() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mail_head::clear_is_take() {
  is_take_ = false;
  clear_has_is_take();
}
inline bool mail_head::is_take() const {
  return is_take_;
}
inline void mail_head::set_is_take(bool value) {
  set_has_is_take();
  is_take_ = value;
}

// -------------------------------------------------------------------

// content_data

// optional uint32 n = 1;
inline bool content_data::has_n() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void content_data::set_has_n() {
  _has_bits_[0] |= 0x00000001u;
}
inline void content_data::clear_has_n() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void content_data::clear_n() {
  n_ = 0u;
  clear_has_n();
}
inline ::google::protobuf::uint32 content_data::n() const {
  return n_;
}
inline void content_data::set_n(::google::protobuf::uint32 value) {
  set_has_n();
  n_ = value;
}

// optional string s = 2;
inline bool content_data::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void content_data::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void content_data::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void content_data::clear_s() {
  if (s_ != &::google::protobuf::internal::kEmptyString) {
    s_->clear();
  }
  clear_has_s();
}
inline const ::std::string& content_data::s() const {
  return *s_;
}
inline void content_data::set_s(const ::std::string& value) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::kEmptyString) {
    s_ = new ::std::string;
  }
  s_->assign(value);
}
inline void content_data::set_s(const char* value) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::kEmptyString) {
    s_ = new ::std::string;
  }
  s_->assign(value);
}
inline void content_data::set_s(const char* value, size_t size) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::kEmptyString) {
    s_ = new ::std::string;
  }
  s_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* content_data::mutable_s() {
  set_has_s();
  if (s_ == &::google::protobuf::internal::kEmptyString) {
    s_ = new ::std::string;
  }
  return s_;
}
inline ::std::string* content_data::release_s() {
  clear_has_s();
  if (s_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = s_;
    s_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void content_data::set_allocated_s(::std::string* s) {
  if (s_ != &::google::protobuf::internal::kEmptyString) {
    delete s_;
  }
  if (s) {
    set_has_s();
    s_ = s;
  } else {
    clear_has_s();
    s_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float f = 3;
inline bool content_data::has_f() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void content_data::set_has_f() {
  _has_bits_[0] |= 0x00000004u;
}
inline void content_data::clear_has_f() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void content_data::clear_f() {
  f_ = 0;
  clear_has_f();
}
inline float content_data::f() const {
  return f_;
}
inline void content_data::set_f(float value) {
  set_has_f();
  f_ = value;
}

// -------------------------------------------------------------------

// mail_body

// optional string content = 1;
inline bool mail_body::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_body::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_body::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_body::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& mail_body::content() const {
  return *content_;
}
inline void mail_body::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail_body::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void mail_body::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mail_body::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* mail_body::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mail_body::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .client.content_data data = 2;
inline int mail_body::data_size() const {
  return data_.size();
}
inline void mail_body::clear_data() {
  data_.Clear();
}
inline const ::client::content_data& mail_body::data(int index) const {
  return data_.Get(index);
}
inline ::client::content_data* mail_body::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::client::content_data* mail_body::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::content_data >&
mail_body::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::content_data >*
mail_body::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// mail_attr

// optional uint32 attr_type = 1;
inline bool mail_attr::has_attr_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_attr::set_has_attr_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_attr::clear_has_attr_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_attr::clear_attr_type() {
  attr_type_ = 0u;
  clear_has_attr_type();
}
inline ::google::protobuf::uint32 mail_attr::attr_type() const {
  return attr_type_;
}
inline void mail_attr::set_attr_type(::google::protobuf::uint32 value) {
  set_has_attr_type();
  attr_type_ = value;
}

// optional uint32 attr_value = 2;
inline bool mail_attr::has_attr_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_attr::set_has_attr_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_attr::clear_has_attr_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_attr::clear_attr_value() {
  attr_value_ = 0u;
  clear_has_attr_value();
}
inline ::google::protobuf::uint32 mail_attr::attr_value() const {
  return attr_value_;
}
inline void mail_attr::set_attr_value(::google::protobuf::uint32 value) {
  set_has_attr_value();
  attr_value_ = value;
}

// -------------------------------------------------------------------

// mail_info

// required .client.mail_head mh = 1;
inline bool mail_info::has_mh() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_info::set_has_mh() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_info::clear_has_mh() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_info::clear_mh() {
  if (mh_ != NULL) mh_->::client::mail_head::Clear();
  clear_has_mh();
}
inline const ::client::mail_head& mail_info::mh() const {
  return mh_ != NULL ? *mh_ : *default_instance_->mh_;
}
inline ::client::mail_head* mail_info::mutable_mh() {
  set_has_mh();
  if (mh_ == NULL) mh_ = new ::client::mail_head;
  return mh_;
}
inline ::client::mail_head* mail_info::release_mh() {
  clear_has_mh();
  ::client::mail_head* temp = mh_;
  mh_ = NULL;
  return temp;
}
inline void mail_info::set_allocated_mh(::client::mail_head* mh) {
  delete mh_;
  mh_ = mh;
  if (mh) {
    set_has_mh();
  } else {
    clear_has_mh();
  }
}

// optional .client.mail_body mb = 2;
inline bool mail_info::has_mb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_info::set_has_mb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_info::clear_has_mb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_info::clear_mb() {
  if (mb_ != NULL) mb_->::client::mail_body::Clear();
  clear_has_mb();
}
inline const ::client::mail_body& mail_info::mb() const {
  return mb_ != NULL ? *mb_ : *default_instance_->mb_;
}
inline ::client::mail_body* mail_info::mutable_mb() {
  set_has_mb();
  if (mb_ == NULL) mb_ = new ::client::mail_body;
  return mb_;
}
inline ::client::mail_body* mail_info::release_mb() {
  clear_has_mb();
  ::client::mail_body* temp = mb_;
  mb_ = NULL;
  return temp;
}
inline void mail_info::set_allocated_mb(::client::mail_body* mb) {
  delete mb_;
  mb_ = mb;
  if (mb) {
    set_has_mb();
  } else {
    clear_has_mb();
  }
}

// repeated .client.mail_attr attr = 3;
inline int mail_info::attr_size() const {
  return attr_.size();
}
inline void mail_info::clear_attr() {
  attr_.Clear();
}
inline const ::client::mail_attr& mail_info::attr(int index) const {
  return attr_.Get(index);
}
inline ::client::mail_attr* mail_info::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::client::mail_attr* mail_info::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::mail_attr >&
mail_info::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::mail_attr >*
mail_info::mutable_attr() {
  return &attr_;
}

// repeated .client.props_info ma = 4;
inline int mail_info::ma_size() const {
  return ma_.size();
}
inline void mail_info::clear_ma() {
  ma_.Clear();
}
inline const ::client::props_info& mail_info::ma(int index) const {
  return ma_.Get(index);
}
inline ::client::props_info* mail_info::mutable_ma(int index) {
  return ma_.Mutable(index);
}
inline ::client::props_info* mail_info::add_ma() {
  return ma_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::props_info >&
mail_info::ma() const {
  return ma_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::props_info >*
mail_info::mutable_ma() {
  return &ma_;
}

// -------------------------------------------------------------------

// delivery_mail_info

// required .client.mail_info mi = 1;
inline bool delivery_mail_info::has_mi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void delivery_mail_info::set_has_mi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void delivery_mail_info::clear_has_mi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void delivery_mail_info::clear_mi() {
  if (mi_ != NULL) mi_->::client::mail_info::Clear();
  clear_has_mi();
}
inline const ::client::mail_info& delivery_mail_info::mi() const {
  return mi_ != NULL ? *mi_ : *default_instance_->mi_;
}
inline ::client::mail_info* delivery_mail_info::mutable_mi() {
  set_has_mi();
  if (mi_ == NULL) mi_ = new ::client::mail_info;
  return mi_;
}
inline ::client::mail_info* delivery_mail_info::release_mi() {
  clear_has_mi();
  ::client::mail_info* temp = mi_;
  mi_ = NULL;
  return temp;
}
inline void delivery_mail_info::set_allocated_mi(::client::mail_info* mi) {
  delete mi_;
  mi_ = mi;
  if (mi) {
    set_has_mi();
  } else {
    clear_has_mi();
  }
}

// required string recv_name = 2;
inline bool delivery_mail_info::has_recv_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void delivery_mail_info::set_has_recv_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void delivery_mail_info::clear_has_recv_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void delivery_mail_info::clear_recv_name() {
  if (recv_name_ != &::google::protobuf::internal::kEmptyString) {
    recv_name_->clear();
  }
  clear_has_recv_name();
}
inline const ::std::string& delivery_mail_info::recv_name() const {
  return *recv_name_;
}
inline void delivery_mail_info::set_recv_name(const ::std::string& value) {
  set_has_recv_name();
  if (recv_name_ == &::google::protobuf::internal::kEmptyString) {
    recv_name_ = new ::std::string;
  }
  recv_name_->assign(value);
}
inline void delivery_mail_info::set_recv_name(const char* value) {
  set_has_recv_name();
  if (recv_name_ == &::google::protobuf::internal::kEmptyString) {
    recv_name_ = new ::std::string;
  }
  recv_name_->assign(value);
}
inline void delivery_mail_info::set_recv_name(const char* value, size_t size) {
  set_has_recv_name();
  if (recv_name_ == &::google::protobuf::internal::kEmptyString) {
    recv_name_ = new ::std::string;
  }
  recv_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* delivery_mail_info::mutable_recv_name() {
  set_has_recv_name();
  if (recv_name_ == &::google::protobuf::internal::kEmptyString) {
    recv_name_ = new ::std::string;
  }
  return recv_name_;
}
inline ::std::string* delivery_mail_info::release_recv_name() {
  clear_has_recv_name();
  if (recv_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recv_name_;
    recv_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void delivery_mail_info::set_allocated_recv_name(::std::string* recv_name) {
  if (recv_name_ != &::google::protobuf::internal::kEmptyString) {
    delete recv_name_;
  }
  if (recv_name) {
    set_has_recv_name();
    recv_name_ = recv_name;
  } else {
    clear_has_recv_name();
    recv_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// new_mail_recv

// repeated .client.mail_head mh = 1;
inline int new_mail_recv::mh_size() const {
  return mh_.size();
}
inline void new_mail_recv::clear_mh() {
  mh_.Clear();
}
inline const ::client::mail_head& new_mail_recv::mh(int index) const {
  return mh_.Get(index);
}
inline ::client::mail_head* new_mail_recv::mutable_mh(int index) {
  return mh_.Mutable(index);
}
inline ::client::mail_head* new_mail_recv::add_mh() {
  return mh_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::mail_head >&
new_mail_recv::mh() const {
  return mh_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::mail_head >*
new_mail_recv::mutable_mh() {
  return &mh_;
}

// -------------------------------------------------------------------

// mail_list_req

// required uint32 svr_time = 1;
inline bool mail_list_req::has_svr_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_list_req::set_has_svr_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_list_req::clear_has_svr_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_list_req::clear_svr_time() {
  svr_time_ = 0u;
  clear_has_svr_time();
}
inline ::google::protobuf::uint32 mail_list_req::svr_time() const {
  return svr_time_;
}
inline void mail_list_req::set_svr_time(::google::protobuf::uint32 value) {
  set_has_svr_time();
  svr_time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool mail_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& mail_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* mail_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* mail_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void mail_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// mail_list_rsp

// repeated .client.mail_head mh = 1;
inline int mail_list_rsp::mh_size() const {
  return mh_.size();
}
inline void mail_list_rsp::clear_mh() {
  mh_.Clear();
}
inline const ::client::mail_head& mail_list_rsp::mh(int index) const {
  return mh_.Get(index);
}
inline ::client::mail_head* mail_list_rsp::mutable_mh(int index) {
  return mh_.Mutable(index);
}
inline ::client::mail_head* mail_list_rsp::add_mh() {
  return mh_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::mail_head >&
mail_list_rsp::mh() const {
  return mh_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::mail_head >*
mail_list_rsp::mutable_mh() {
  return &mh_;
}

// optional .client.MAIL_LIST_UPDATE_TYPE update_type = 2;
inline bool mail_list_rsp::has_update_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_list_rsp::set_has_update_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_list_rsp::clear_has_update_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_list_rsp::clear_update_type() {
  update_type_ = 1;
  clear_has_update_type();
}
inline ::client::MAIL_LIST_UPDATE_TYPE mail_list_rsp::update_type() const {
  return static_cast< ::client::MAIL_LIST_UPDATE_TYPE >(update_type_);
}
inline void mail_list_rsp::set_update_type(::client::MAIL_LIST_UPDATE_TYPE value) {
  assert(::client::MAIL_LIST_UPDATE_TYPE_IsValid(value));
  set_has_update_type();
  update_type_ = value;
}

// -------------------------------------------------------------------

// mail_open_req

// required uint32 mail_id = 1;
inline bool mail_open_req::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_open_req::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_open_req::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_open_req::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 mail_open_req::mail_id() const {
  return mail_id_;
}
inline void mail_open_req::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool mail_open_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_open_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_open_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_open_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& mail_open_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* mail_open_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* mail_open_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void mail_open_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// mail_open_rsp

// required uint32 mail_id = 1;
inline bool mail_open_rsp::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_open_rsp::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_open_rsp::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_open_rsp::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 mail_open_rsp::mail_id() const {
  return mail_id_;
}
inline void mail_open_rsp::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional .client.mail_body mb = 2;
inline bool mail_open_rsp::has_mb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_open_rsp::set_has_mb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_open_rsp::clear_has_mb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_open_rsp::clear_mb() {
  if (mb_ != NULL) mb_->::client::mail_body::Clear();
  clear_has_mb();
}
inline const ::client::mail_body& mail_open_rsp::mb() const {
  return mb_ != NULL ? *mb_ : *default_instance_->mb_;
}
inline ::client::mail_body* mail_open_rsp::mutable_mb() {
  set_has_mb();
  if (mb_ == NULL) mb_ = new ::client::mail_body;
  return mb_;
}
inline ::client::mail_body* mail_open_rsp::release_mb() {
  clear_has_mb();
  ::client::mail_body* temp = mb_;
  mb_ = NULL;
  return temp;
}
inline void mail_open_rsp::set_allocated_mb(::client::mail_body* mb) {
  delete mb_;
  mb_ = mb;
  if (mb) {
    set_has_mb();
  } else {
    clear_has_mb();
  }
}

// repeated .client.mail_attr attr = 3;
inline int mail_open_rsp::attr_size() const {
  return attr_.size();
}
inline void mail_open_rsp::clear_attr() {
  attr_.Clear();
}
inline const ::client::mail_attr& mail_open_rsp::attr(int index) const {
  return attr_.Get(index);
}
inline ::client::mail_attr* mail_open_rsp::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::client::mail_attr* mail_open_rsp::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::mail_attr >&
mail_open_rsp::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::mail_attr >*
mail_open_rsp::mutable_attr() {
  return &attr_;
}

// repeated .client.props_info ma = 4;
inline int mail_open_rsp::ma_size() const {
  return ma_.size();
}
inline void mail_open_rsp::clear_ma() {
  ma_.Clear();
}
inline const ::client::props_info& mail_open_rsp::ma(int index) const {
  return ma_.Get(index);
}
inline ::client::props_info* mail_open_rsp::mutable_ma(int index) {
  return ma_.Mutable(index);
}
inline ::client::props_info* mail_open_rsp::add_ma() {
  return ma_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::props_info >&
mail_open_rsp::ma() const {
  return ma_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::props_info >*
mail_open_rsp::mutable_ma() {
  return &ma_;
}

// -------------------------------------------------------------------

// send_mail_attachment

// required uint32 grid_index = 1;
inline bool send_mail_attachment::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void send_mail_attachment::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void send_mail_attachment::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void send_mail_attachment::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 send_mail_attachment::grid_index() const {
  return grid_index_;
}
inline void send_mail_attachment::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// required uint32 num = 2;
inline bool send_mail_attachment::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void send_mail_attachment::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void send_mail_attachment::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void send_mail_attachment::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 send_mail_attachment::num() const {
  return num_;
}
inline void send_mail_attachment::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// send_mail_req

// required .client.mail_info info = 1;
inline bool send_mail_req::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void send_mail_req::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void send_mail_req::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void send_mail_req::clear_info() {
  if (info_ != NULL) info_->::client::mail_info::Clear();
  clear_has_info();
}
inline const ::client::mail_info& send_mail_req::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::client::mail_info* send_mail_req::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::client::mail_info;
  return info_;
}
inline ::client::mail_info* send_mail_req::release_info() {
  clear_has_info();
  ::client::mail_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void send_mail_req::set_allocated_info(::client::mail_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// required string recv_name = 2;
inline bool send_mail_req::has_recv_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void send_mail_req::set_has_recv_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void send_mail_req::clear_has_recv_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void send_mail_req::clear_recv_name() {
  if (recv_name_ != &::google::protobuf::internal::kEmptyString) {
    recv_name_->clear();
  }
  clear_has_recv_name();
}
inline const ::std::string& send_mail_req::recv_name() const {
  return *recv_name_;
}
inline void send_mail_req::set_recv_name(const ::std::string& value) {
  set_has_recv_name();
  if (recv_name_ == &::google::protobuf::internal::kEmptyString) {
    recv_name_ = new ::std::string;
  }
  recv_name_->assign(value);
}
inline void send_mail_req::set_recv_name(const char* value) {
  set_has_recv_name();
  if (recv_name_ == &::google::protobuf::internal::kEmptyString) {
    recv_name_ = new ::std::string;
  }
  recv_name_->assign(value);
}
inline void send_mail_req::set_recv_name(const char* value, size_t size) {
  set_has_recv_name();
  if (recv_name_ == &::google::protobuf::internal::kEmptyString) {
    recv_name_ = new ::std::string;
  }
  recv_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* send_mail_req::mutable_recv_name() {
  set_has_recv_name();
  if (recv_name_ == &::google::protobuf::internal::kEmptyString) {
    recv_name_ = new ::std::string;
  }
  return recv_name_;
}
inline ::std::string* send_mail_req::release_recv_name() {
  clear_has_recv_name();
  if (recv_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recv_name_;
    recv_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void send_mail_req::set_allocated_recv_name(::std::string* recv_name) {
  if (recv_name_ != &::google::protobuf::internal::kEmptyString) {
    delete recv_name_;
  }
  if (recv_name) {
    set_has_recv_name();
    recv_name_ = recv_name;
  } else {
    clear_has_recv_name();
    recv_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .client.server_head svr_head = 1000;
inline bool send_mail_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void send_mail_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void send_mail_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void send_mail_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& send_mail_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* send_mail_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* send_mail_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void send_mail_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// send_mail_rsp

// required .client.send_mail_rsp.SEND_RET ret = 1;
inline bool send_mail_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void send_mail_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void send_mail_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void send_mail_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::send_mail_rsp_SEND_RET send_mail_rsp::ret() const {
  return static_cast< ::client::send_mail_rsp_SEND_RET >(ret_);
}
inline void send_mail_rsp::set_ret(::client::send_mail_rsp_SEND_RET value) {
  assert(::client::send_mail_rsp_SEND_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 err_code = 2;
inline bool send_mail_rsp::has_err_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void send_mail_rsp::set_has_err_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void send_mail_rsp::clear_has_err_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void send_mail_rsp::clear_err_code() {
  err_code_ = 0u;
  clear_has_err_code();
}
inline ::google::protobuf::uint32 send_mail_rsp::err_code() const {
  return err_code_;
}
inline void send_mail_rsp::set_err_code(::google::protobuf::uint32 value) {
  set_has_err_code();
  err_code_ = value;
}

// -------------------------------------------------------------------

// extract_attachment_req

// required uint32 mail_id = 1;
inline bool extract_attachment_req::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void extract_attachment_req::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void extract_attachment_req::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void extract_attachment_req::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 extract_attachment_req::mail_id() const {
  return mail_id_;
}
inline void extract_attachment_req::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool extract_attachment_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void extract_attachment_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void extract_attachment_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void extract_attachment_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& extract_attachment_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* extract_attachment_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* extract_attachment_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void extract_attachment_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// extract_attachment_rsp

// required uint32 mail_id = 1;
inline bool extract_attachment_rsp::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void extract_attachment_rsp::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void extract_attachment_rsp::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void extract_attachment_rsp::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 extract_attachment_rsp::mail_id() const {
  return mail_id_;
}
inline void extract_attachment_rsp::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// required .client.extract_attachment_rsp.EXTRACT_RET ret = 2;
inline bool extract_attachment_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void extract_attachment_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void extract_attachment_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void extract_attachment_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::extract_attachment_rsp_EXTRACT_RET extract_attachment_rsp::ret() const {
  return static_cast< ::client::extract_attachment_rsp_EXTRACT_RET >(ret_);
}
inline void extract_attachment_rsp::set_ret(::client::extract_attachment_rsp_EXTRACT_RET value) {
  assert(::client::extract_attachment_rsp_EXTRACT_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// remove_mail_req

// repeated uint32 mail_id = 1;
inline int remove_mail_req::mail_id_size() const {
  return mail_id_.size();
}
inline void remove_mail_req::clear_mail_id() {
  mail_id_.Clear();
}
inline ::google::protobuf::uint32 remove_mail_req::mail_id(int index) const {
  return mail_id_.Get(index);
}
inline void remove_mail_req::set_mail_id(int index, ::google::protobuf::uint32 value) {
  mail_id_.Set(index, value);
}
inline void remove_mail_req::add_mail_id(::google::protobuf::uint32 value) {
  mail_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
remove_mail_req::mail_id() const {
  return mail_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
remove_mail_req::mutable_mail_id() {
  return &mail_id_;
}

// optional .client.server_head svr_head = 1000;
inline bool remove_mail_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void remove_mail_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void remove_mail_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void remove_mail_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& remove_mail_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* remove_mail_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* remove_mail_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void remove_mail_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// remove_mail_rsp

// required .client.remove_mail_rsp.REMOVE_RET ret = 1;
inline bool remove_mail_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void remove_mail_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void remove_mail_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void remove_mail_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::remove_mail_rsp_REMOVE_RET remove_mail_rsp::ret() const {
  return static_cast< ::client::remove_mail_rsp_REMOVE_RET >(ret_);
}
inline void remove_mail_rsp::set_ret(::client::remove_mail_rsp_REMOVE_RET value) {
  assert(::client::remove_mail_rsp_REMOVE_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// send_mail_check_role

// required .client.send_mail_req smr = 1;
inline bool send_mail_check_role::has_smr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void send_mail_check_role::set_has_smr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void send_mail_check_role::clear_has_smr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void send_mail_check_role::clear_smr() {
  if (smr_ != NULL) smr_->::client::send_mail_req::Clear();
  clear_has_smr();
}
inline const ::client::send_mail_req& send_mail_check_role::smr() const {
  return smr_ != NULL ? *smr_ : *default_instance_->smr_;
}
inline ::client::send_mail_req* send_mail_check_role::mutable_smr() {
  set_has_smr();
  if (smr_ == NULL) smr_ = new ::client::send_mail_req;
  return smr_;
}
inline ::client::send_mail_req* send_mail_check_role::release_smr() {
  clear_has_smr();
  ::client::send_mail_req* temp = smr_;
  smr_ = NULL;
  return temp;
}
inline void send_mail_check_role::set_allocated_smr(::client::send_mail_req* smr) {
  delete smr_;
  smr_ = smr;
  if (smr) {
    set_has_smr();
  } else {
    clear_has_smr();
  }
}

// -------------------------------------------------------------------

// send_mail_check_complete

// required .client.send_mail_req smr = 1;
inline bool send_mail_check_complete::has_smr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void send_mail_check_complete::set_has_smr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void send_mail_check_complete::clear_has_smr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void send_mail_check_complete::clear_smr() {
  if (smr_ != NULL) smr_->::client::send_mail_req::Clear();
  clear_has_smr();
}
inline const ::client::send_mail_req& send_mail_check_complete::smr() const {
  return smr_ != NULL ? *smr_ : *default_instance_->smr_;
}
inline ::client::send_mail_req* send_mail_check_complete::mutable_smr() {
  set_has_smr();
  if (smr_ == NULL) smr_ = new ::client::send_mail_req;
  return smr_;
}
inline ::client::send_mail_req* send_mail_check_complete::release_smr() {
  clear_has_smr();
  ::client::send_mail_req* temp = smr_;
  smr_ = NULL;
  return temp;
}
inline void send_mail_check_complete::set_allocated_smr(::client::send_mail_req* smr) {
  delete smr_;
  smr_ = smr;
  if (smr) {
    set_has_smr();
  } else {
    clear_has_smr();
  }
}

// required bool pass = 2;
inline bool send_mail_check_complete::has_pass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void send_mail_check_complete::set_has_pass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void send_mail_check_complete::clear_has_pass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void send_mail_check_complete::clear_pass() {
  pass_ = false;
  clear_has_pass();
}
inline bool send_mail_check_complete::pass() const {
  return pass_;
}
inline void send_mail_check_complete::set_pass(bool value) {
  set_has_pass();
  pass_ = value;
}

// -------------------------------------------------------------------

// broadcast_area_rsp

// required uint32 area_id = 1;
inline bool broadcast_area_rsp::has_area_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void broadcast_area_rsp::set_has_area_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void broadcast_area_rsp::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void broadcast_area_rsp::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 broadcast_area_rsp::area_id() const {
  return area_id_;
}
inline void broadcast_area_rsp::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional .client.mail_body area_msg = 2;
inline bool broadcast_area_rsp::has_area_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void broadcast_area_rsp::set_has_area_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void broadcast_area_rsp::clear_has_area_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void broadcast_area_rsp::clear_area_msg() {
  if (area_msg_ != NULL) area_msg_->::client::mail_body::Clear();
  clear_has_area_msg();
}
inline const ::client::mail_body& broadcast_area_rsp::area_msg() const {
  return area_msg_ != NULL ? *area_msg_ : *default_instance_->area_msg_;
}
inline ::client::mail_body* broadcast_area_rsp::mutable_area_msg() {
  set_has_area_msg();
  if (area_msg_ == NULL) area_msg_ = new ::client::mail_body;
  return area_msg_;
}
inline ::client::mail_body* broadcast_area_rsp::release_area_msg() {
  clear_has_area_msg();
  ::client::mail_body* temp = area_msg_;
  area_msg_ = NULL;
  return temp;
}
inline void broadcast_area_rsp::set_allocated_area_msg(::client::mail_body* area_msg) {
  delete area_msg_;
  area_msg_ = area_msg;
  if (area_msg) {
    set_has_area_msg();
  } else {
    clear_has_area_msg();
  }
}

// optional uint32 broadcast_count = 3 [default = 1];
inline bool broadcast_area_rsp::has_broadcast_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void broadcast_area_rsp::set_has_broadcast_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void broadcast_area_rsp::clear_has_broadcast_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void broadcast_area_rsp::clear_broadcast_count() {
  broadcast_count_ = 1u;
  clear_has_broadcast_count();
}
inline ::google::protobuf::uint32 broadcast_area_rsp::broadcast_count() const {
  return broadcast_count_;
}
inline void broadcast_area_rsp::set_broadcast_count(::google::protobuf::uint32 value) {
  set_has_broadcast_count();
  broadcast_count_ = value;
}

// -------------------------------------------------------------------

// broadcast_area_to_center

// required uint32 role_id = 1;
inline bool broadcast_area_to_center::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void broadcast_area_to_center::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void broadcast_area_to_center::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void broadcast_area_to_center::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 broadcast_area_to_center::role_id() const {
  return role_id_;
}
inline void broadcast_area_to_center::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional .client.broadcast_area_rsp broadcast_info = 2;
inline bool broadcast_area_to_center::has_broadcast_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void broadcast_area_to_center::set_has_broadcast_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void broadcast_area_to_center::clear_has_broadcast_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void broadcast_area_to_center::clear_broadcast_info() {
  if (broadcast_info_ != NULL) broadcast_info_->::client::broadcast_area_rsp::Clear();
  clear_has_broadcast_info();
}
inline const ::client::broadcast_area_rsp& broadcast_area_to_center::broadcast_info() const {
  return broadcast_info_ != NULL ? *broadcast_info_ : *default_instance_->broadcast_info_;
}
inline ::client::broadcast_area_rsp* broadcast_area_to_center::mutable_broadcast_info() {
  set_has_broadcast_info();
  if (broadcast_info_ == NULL) broadcast_info_ = new ::client::broadcast_area_rsp;
  return broadcast_info_;
}
inline ::client::broadcast_area_rsp* broadcast_area_to_center::release_broadcast_info() {
  clear_has_broadcast_info();
  ::client::broadcast_area_rsp* temp = broadcast_info_;
  broadcast_info_ = NULL;
  return temp;
}
inline void broadcast_area_to_center::set_allocated_broadcast_info(::client::broadcast_area_rsp* broadcast_info) {
  delete broadcast_info_;
  broadcast_info_ = broadcast_info;
  if (broadcast_info) {
    set_has_broadcast_info();
  } else {
    clear_has_broadcast_info();
  }
}

// -------------------------------------------------------------------

// broadcast_msg_req

// required uint32 area_id = 1;
inline bool broadcast_msg_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void broadcast_msg_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void broadcast_msg_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void broadcast_msg_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 broadcast_msg_req::area_id() const {
  return area_id_;
}
inline void broadcast_msg_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// repeated .client.content_data data = 2;
inline int broadcast_msg_req::data_size() const {
  return data_.size();
}
inline void broadcast_msg_req::clear_data() {
  data_.Clear();
}
inline const ::client::content_data& broadcast_msg_req::data(int index) const {
  return data_.Get(index);
}
inline ::client::content_data* broadcast_msg_req::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::client::content_data* broadcast_msg_req::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::content_data >&
broadcast_msg_req::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::content_data >*
broadcast_msg_req::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// broadcast_backdoor_area_req

// required uint32 area_id = 1;
inline bool broadcast_backdoor_area_req::has_area_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void broadcast_backdoor_area_req::set_has_area_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void broadcast_backdoor_area_req::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void broadcast_backdoor_area_req::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
inline ::google::protobuf::uint32 broadcast_backdoor_area_req::area_id() const {
  return area_id_;
}
inline void broadcast_backdoor_area_req::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
}

// optional .client.mail_body area_msg = 2;
inline bool broadcast_backdoor_area_req::has_area_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void broadcast_backdoor_area_req::set_has_area_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void broadcast_backdoor_area_req::clear_has_area_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void broadcast_backdoor_area_req::clear_area_msg() {
  if (area_msg_ != NULL) area_msg_->::client::mail_body::Clear();
  clear_has_area_msg();
}
inline const ::client::mail_body& broadcast_backdoor_area_req::area_msg() const {
  return area_msg_ != NULL ? *area_msg_ : *default_instance_->area_msg_;
}
inline ::client::mail_body* broadcast_backdoor_area_req::mutable_area_msg() {
  set_has_area_msg();
  if (area_msg_ == NULL) area_msg_ = new ::client::mail_body;
  return area_msg_;
}
inline ::client::mail_body* broadcast_backdoor_area_req::release_area_msg() {
  clear_has_area_msg();
  ::client::mail_body* temp = area_msg_;
  area_msg_ = NULL;
  return temp;
}
inline void broadcast_backdoor_area_req::set_allocated_area_msg(::client::mail_body* area_msg) {
  delete area_msg_;
  area_msg_ = area_msg;
  if (area_msg) {
    set_has_area_msg();
  } else {
    clear_has_area_msg();
  }
}

// optional uint32 broadcast_count = 3 [default = 1];
inline bool broadcast_backdoor_area_req::has_broadcast_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void broadcast_backdoor_area_req::set_has_broadcast_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void broadcast_backdoor_area_req::clear_has_broadcast_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void broadcast_backdoor_area_req::clear_broadcast_count() {
  broadcast_count_ = 1u;
  clear_has_broadcast_count();
}
inline ::google::protobuf::uint32 broadcast_backdoor_area_req::broadcast_count() const {
  return broadcast_count_;
}
inline void broadcast_backdoor_area_req::set_broadcast_count(::google::protobuf::uint32 value) {
  set_has_broadcast_count();
  broadcast_count_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool broadcast_backdoor_area_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void broadcast_backdoor_area_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void broadcast_backdoor_area_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void broadcast_backdoor_area_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& broadcast_backdoor_area_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* broadcast_backdoor_area_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* broadcast_backdoor_area_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void broadcast_backdoor_area_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::send_mail_rsp_SEND_RET>() {
  return ::client::send_mail_rsp_SEND_RET_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::extract_attachment_rsp_EXTRACT_RET>() {
  return ::client::extract_attachment_rsp_EXTRACT_RET_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::remove_mail_rsp_REMOVE_RET>() {
  return ::client::remove_mail_rsp_REMOVE_RET_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::MAIL_TYPE_E>() {
  return ::client::MAIL_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::MAIL_LIST_UPDATE_TYPE>() {
  return ::client::MAIL_LIST_UPDATE_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eoperate_5fmail_2eproto__INCLUDED
