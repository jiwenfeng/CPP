// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.create_role.proto

#ifndef PROTOBUF_client_2ecreate_5frole_2eproto__INCLUDED
#define PROTOBUF_client_2ecreate_5frole_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2ecreate_5frole_2eproto();
void protobuf_AssignDesc_client_2ecreate_5frole_2eproto();
void protobuf_ShutdownFile_client_2ecreate_5frole_2eproto();

class create_role_req;
class role_info_rsp;
class create_role_check_msg;

enum CREATE_ROLE_RET_E {
  CRRE_SUCCESS = 0,
  CREE_NICK_NAME_ERR = 1
};
bool CREATE_ROLE_RET_E_IsValid(int value);
const CREATE_ROLE_RET_E CREATE_ROLE_RET_E_MIN = CRRE_SUCCESS;
const CREATE_ROLE_RET_E CREATE_ROLE_RET_E_MAX = CREE_NICK_NAME_ERR;
const int CREATE_ROLE_RET_E_ARRAYSIZE = CREATE_ROLE_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* CREATE_ROLE_RET_E_descriptor();
inline const ::std::string& CREATE_ROLE_RET_E_Name(CREATE_ROLE_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    CREATE_ROLE_RET_E_descriptor(), value);
}
inline bool CREATE_ROLE_RET_E_Parse(
    const ::std::string& name, CREATE_ROLE_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CREATE_ROLE_RET_E>(
    CREATE_ROLE_RET_E_descriptor(), name, value);
}
// ===================================================================

class create_role_req : public ::google::protobuf::Message {
 public:
  create_role_req();
  virtual ~create_role_req();

  create_role_req(const create_role_req& from);

  inline create_role_req& operator=(const create_role_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_role_req& default_instance();

  void Swap(create_role_req* other);

  // implements Message ----------------------------------------------

  create_role_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const create_role_req& from);
  void MergeFrom(const create_role_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sex = 1;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 1;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // required uint32 prof = 2;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 2;
  inline ::google::protobuf::uint32 prof() const;
  inline void set_prof(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.create_role_req)
 private:
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 prof_;
  ::std::string* name_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecreate_5frole_2eproto();
  friend void protobuf_AssignDesc_client_2ecreate_5frole_2eproto();
  friend void protobuf_ShutdownFile_client_2ecreate_5frole_2eproto();

  void InitAsDefaultInstance();
  static create_role_req* default_instance_;
};
// -------------------------------------------------------------------

class role_info_rsp : public ::google::protobuf::Message {
 public:
  role_info_rsp();
  virtual ~role_info_rsp();

  role_info_rsp(const role_info_rsp& from);

  inline role_info_rsp& operator=(const role_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_info_rsp& default_instance();

  void Swap(role_info_rsp* other);

  // implements Message ----------------------------------------------

  role_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_info_rsp& from);
  void MergeFrom(const role_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // required uint32 prof = 3;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 3;
  inline ::google::protobuf::uint32 prof() const;
  inline void set_prof(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .client.CREATE_ROLE_RET_E ret = 5 [default = CRRE_SUCCESS];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::client::CREATE_ROLE_RET_E ret() const;
  inline void set_ret(::client::CREATE_ROLE_RET_E value);

  // required uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 fighting_power = 7;
  inline bool has_fighting_power() const;
  inline void clear_fighting_power();
  static const int kFightingPowerFieldNumber = 7;
  inline ::google::protobuf::uint32 fighting_power() const;
  inline void set_fighting_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.role_info_rsp)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fighting_power();
  inline void clear_has_fighting_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 sex_;
  ::std::string* name_;
  ::google::protobuf::uint32 prof_;
  int ret_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 fighting_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecreate_5frole_2eproto();
  friend void protobuf_AssignDesc_client_2ecreate_5frole_2eproto();
  friend void protobuf_ShutdownFile_client_2ecreate_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class create_role_check_msg : public ::google::protobuf::Message {
 public:
  create_role_check_msg();
  virtual ~create_role_check_msg();

  create_role_check_msg(const create_role_check_msg& from);

  inline create_role_check_msg& operator=(const create_role_check_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_role_check_msg& default_instance();

  void Swap(create_role_check_msg* other);

  // implements Message ----------------------------------------------

  create_role_check_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const create_role_check_msg& from);
  void MergeFrom(const create_role_check_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.create_role_req crr = 1;
  inline bool has_crr() const;
  inline void clear_crr();
  static const int kCrrFieldNumber = 1;
  inline const ::client::create_role_req& crr() const;
  inline ::client::create_role_req* mutable_crr();
  inline ::client::create_role_req* release_crr();
  inline void set_allocated_crr(::client::create_role_req* crr);

  // optional bool pass = 2 [default = false];
  inline bool has_pass() const;
  inline void clear_pass();
  static const int kPassFieldNumber = 2;
  inline bool pass() const;
  inline void set_pass(bool value);

  // @@protoc_insertion_point(class_scope:client.create_role_check_msg)
 private:
  inline void set_has_crr();
  inline void clear_has_crr();
  inline void set_has_pass();
  inline void clear_has_pass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::create_role_req* crr_;
  bool pass_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2ecreate_5frole_2eproto();
  friend void protobuf_AssignDesc_client_2ecreate_5frole_2eproto();
  friend void protobuf_ShutdownFile_client_2ecreate_5frole_2eproto();

  void InitAsDefaultInstance();
  static create_role_check_msg* default_instance_;
};
// ===================================================================


// ===================================================================

// create_role_req

// required uint32 sex = 1;
inline bool create_role_req::has_sex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_role_req::set_has_sex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_role_req::clear_has_sex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_role_req::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 create_role_req::sex() const {
  return sex_;
}
inline void create_role_req::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// required uint32 prof = 2;
inline bool create_role_req::has_prof() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void create_role_req::set_has_prof() {
  _has_bits_[0] |= 0x00000002u;
}
inline void create_role_req::clear_has_prof() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void create_role_req::clear_prof() {
  prof_ = 0u;
  clear_has_prof();
}
inline ::google::protobuf::uint32 create_role_req::prof() const {
  return prof_;
}
inline void create_role_req::set_prof(::google::protobuf::uint32 value) {
  set_has_prof();
  prof_ = value;
}

// required string name = 3;
inline bool create_role_req::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void create_role_req::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void create_role_req::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void create_role_req::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& create_role_req::name() const {
  return *name_;
}
inline void create_role_req::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void create_role_req::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void create_role_req::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* create_role_req::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* create_role_req::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void create_role_req::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .client.server_head svr_head = 1000;
inline bool create_role_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void create_role_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void create_role_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void create_role_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& create_role_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* create_role_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* create_role_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void create_role_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// role_info_rsp

// required uint32 role_id = 1;
inline bool role_info_rsp::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_info_rsp::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_info_rsp::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_info_rsp::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 role_info_rsp::role_id() const {
  return role_id_;
}
inline void role_info_rsp::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 sex = 2;
inline bool role_info_rsp::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_info_rsp::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_info_rsp::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_info_rsp::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 role_info_rsp::sex() const {
  return sex_;
}
inline void role_info_rsp::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// required uint32 prof = 3;
inline bool role_info_rsp::has_prof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_info_rsp::set_has_prof() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_info_rsp::clear_has_prof() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_info_rsp::clear_prof() {
  prof_ = 0u;
  clear_has_prof();
}
inline ::google::protobuf::uint32 role_info_rsp::prof() const {
  return prof_;
}
inline void role_info_rsp::set_prof(::google::protobuf::uint32 value) {
  set_has_prof();
  prof_ = value;
}

// required string name = 4;
inline bool role_info_rsp::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_info_rsp::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_info_rsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_info_rsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& role_info_rsp::name() const {
  return *name_;
}
inline void role_info_rsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void role_info_rsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void role_info_rsp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_rsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* role_info_rsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_rsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .client.CREATE_ROLE_RET_E ret = 5 [default = CRRE_SUCCESS];
inline bool role_info_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_info_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_info_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_info_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::CREATE_ROLE_RET_E role_info_rsp::ret() const {
  return static_cast< ::client::CREATE_ROLE_RET_E >(ret_);
}
inline void role_info_rsp::set_ret(::client::CREATE_ROLE_RET_E value) {
  assert(::client::CREATE_ROLE_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// required uint32 level = 6;
inline bool role_info_rsp::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_info_rsp::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_info_rsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_info_rsp::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 role_info_rsp::level() const {
  return level_;
}
inline void role_info_rsp::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 fighting_power = 7;
inline bool role_info_rsp::has_fighting_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_info_rsp::set_has_fighting_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_info_rsp::clear_has_fighting_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_info_rsp::clear_fighting_power() {
  fighting_power_ = 0u;
  clear_has_fighting_power();
}
inline ::google::protobuf::uint32 role_info_rsp::fighting_power() const {
  return fighting_power_;
}
inline void role_info_rsp::set_fighting_power(::google::protobuf::uint32 value) {
  set_has_fighting_power();
  fighting_power_ = value;
}

// -------------------------------------------------------------------

// create_role_check_msg

// required .client.create_role_req crr = 1;
inline bool create_role_check_msg::has_crr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_role_check_msg::set_has_crr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_role_check_msg::clear_has_crr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_role_check_msg::clear_crr() {
  if (crr_ != NULL) crr_->::client::create_role_req::Clear();
  clear_has_crr();
}
inline const ::client::create_role_req& create_role_check_msg::crr() const {
  return crr_ != NULL ? *crr_ : *default_instance_->crr_;
}
inline ::client::create_role_req* create_role_check_msg::mutable_crr() {
  set_has_crr();
  if (crr_ == NULL) crr_ = new ::client::create_role_req;
  return crr_;
}
inline ::client::create_role_req* create_role_check_msg::release_crr() {
  clear_has_crr();
  ::client::create_role_req* temp = crr_;
  crr_ = NULL;
  return temp;
}
inline void create_role_check_msg::set_allocated_crr(::client::create_role_req* crr) {
  delete crr_;
  crr_ = crr;
  if (crr) {
    set_has_crr();
  } else {
    clear_has_crr();
  }
}

// optional bool pass = 2 [default = false];
inline bool create_role_check_msg::has_pass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void create_role_check_msg::set_has_pass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void create_role_check_msg::clear_has_pass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void create_role_check_msg::clear_pass() {
  pass_ = false;
  clear_has_pass();
}
inline bool create_role_check_msg::pass() const {
  return pass_;
}
inline void create_role_check_msg::set_pass(bool value) {
  set_has_pass();
  pass_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::CREATE_ROLE_RET_E>() {
  return ::client::CREATE_ROLE_RET_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2ecreate_5frole_2eproto__INCLUDED
