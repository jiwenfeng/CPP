// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.world_boss.proto

#ifndef PROTOBUF_client_2eworld_5fboss_2eproto__INCLUDED
#define PROTOBUF_client_2eworld_5fboss_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eworld_5fboss_2eproto();
void protobuf_AssignDesc_client_2eworld_5fboss_2eproto();
void protobuf_ShutdownFile_client_2eworld_5fboss_2eproto();

class boss_refresh_req;
class boss_info_req;
class boss_info_rsp;
class boss_refresh_msg_rsp;
class boss_status;

// ===================================================================

class boss_refresh_req : public ::google::protobuf::Message {
 public:
  boss_refresh_req();
  virtual ~boss_refresh_req();

  boss_refresh_req(const boss_refresh_req& from);

  inline boss_refresh_req& operator=(const boss_refresh_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const boss_refresh_req& default_instance();

  void Swap(boss_refresh_req* other);

  // implements Message ----------------------------------------------

  boss_refresh_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const boss_refresh_req& from);
  void MergeFrom(const boss_refresh_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.boss_refresh_req)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eworld_5fboss_2eproto();
  friend void protobuf_AssignDesc_client_2eworld_5fboss_2eproto();
  friend void protobuf_ShutdownFile_client_2eworld_5fboss_2eproto();

  void InitAsDefaultInstance();
  static boss_refresh_req* default_instance_;
};
// -------------------------------------------------------------------

class boss_info_req : public ::google::protobuf::Message {
 public:
  boss_info_req();
  virtual ~boss_info_req();

  boss_info_req(const boss_info_req& from);

  inline boss_info_req& operator=(const boss_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const boss_info_req& default_instance();

  void Swap(boss_info_req* other);

  // implements Message ----------------------------------------------

  boss_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const boss_info_req& from);
  void MergeFrom(const boss_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // repeated .client.boss_status bs = 2;
  inline int bs_size() const;
  inline void clear_bs();
  static const int kBsFieldNumber = 2;
  inline const ::client::boss_status& bs(int index) const;
  inline ::client::boss_status* mutable_bs(int index);
  inline ::client::boss_status* add_bs();
  inline const ::google::protobuf::RepeatedPtrField< ::client::boss_status >&
      bs() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::boss_status >*
      mutable_bs();

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.boss_info_req)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::boss_status > bs_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eworld_5fboss_2eproto();
  friend void protobuf_AssignDesc_client_2eworld_5fboss_2eproto();
  friend void protobuf_ShutdownFile_client_2eworld_5fboss_2eproto();

  void InitAsDefaultInstance();
  static boss_info_req* default_instance_;
};
// -------------------------------------------------------------------

class boss_info_rsp : public ::google::protobuf::Message {
 public:
  boss_info_rsp();
  virtual ~boss_info_rsp();

  boss_info_rsp(const boss_info_rsp& from);

  inline boss_info_rsp& operator=(const boss_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const boss_info_rsp& default_instance();

  void Swap(boss_info_rsp* other);

  // implements Message ----------------------------------------------

  boss_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const boss_info_rsp& from);
  void MergeFrom(const boss_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 timelong = 1;
  inline bool has_timelong() const;
  inline void clear_timelong();
  static const int kTimelongFieldNumber = 1;
  inline ::google::protobuf::uint32 timelong() const;
  inline void set_timelong(::google::protobuf::uint32 value);

  // repeated .client.boss_status bs = 2;
  inline int bs_size() const;
  inline void clear_bs();
  static const int kBsFieldNumber = 2;
  inline const ::client::boss_status& bs(int index) const;
  inline ::client::boss_status* mutable_bs(int index);
  inline ::client::boss_status* add_bs();
  inline const ::google::protobuf::RepeatedPtrField< ::client::boss_status >&
      bs() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::boss_status >*
      mutable_bs();

  // @@protoc_insertion_point(class_scope:client.boss_info_rsp)
 private:
  inline void set_has_timelong();
  inline void clear_has_timelong();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::boss_status > bs_;
  ::google::protobuf::uint32 timelong_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eworld_5fboss_2eproto();
  friend void protobuf_AssignDesc_client_2eworld_5fboss_2eproto();
  friend void protobuf_ShutdownFile_client_2eworld_5fboss_2eproto();

  void InitAsDefaultInstance();
  static boss_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class boss_refresh_msg_rsp : public ::google::protobuf::Message {
 public:
  boss_refresh_msg_rsp();
  virtual ~boss_refresh_msg_rsp();

  boss_refresh_msg_rsp(const boss_refresh_msg_rsp& from);

  inline boss_refresh_msg_rsp& operator=(const boss_refresh_msg_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const boss_refresh_msg_rsp& default_instance();

  void Swap(boss_refresh_msg_rsp* other);

  // implements Message ----------------------------------------------

  boss_refresh_msg_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const boss_refresh_msg_rsp& from);
  void MergeFrom(const boss_refresh_msg_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.boss_refresh_msg_rsp)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eworld_5fboss_2eproto();
  friend void protobuf_AssignDesc_client_2eworld_5fboss_2eproto();
  friend void protobuf_ShutdownFile_client_2eworld_5fboss_2eproto();

  void InitAsDefaultInstance();
  static boss_refresh_msg_rsp* default_instance_;
};
// -------------------------------------------------------------------

class boss_status : public ::google::protobuf::Message {
 public:
  boss_status();
  virtual ~boss_status();

  boss_status(const boss_status& from);

  inline boss_status& operator=(const boss_status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const boss_status& default_instance();

  void Swap(boss_status* other);

  // implements Message ----------------------------------------------

  boss_status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const boss_status& from);
  void MergeFrom(const boss_status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 raid_id = 1;
  inline bool has_raid_id() const;
  inline void clear_raid_id();
  static const int kRaidIdFieldNumber = 1;
  inline ::google::protobuf::uint32 raid_id() const;
  inline void set_raid_id(::google::protobuf::uint32 value);

  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.boss_status)
 private:
  inline void set_has_raid_id();
  inline void clear_has_raid_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 raid_id_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eworld_5fboss_2eproto();
  friend void protobuf_AssignDesc_client_2eworld_5fboss_2eproto();
  friend void protobuf_ShutdownFile_client_2eworld_5fboss_2eproto();

  void InitAsDefaultInstance();
  static boss_status* default_instance_;
};
// ===================================================================


// ===================================================================

// boss_refresh_req

// required uint32 time = 1;
inline bool boss_refresh_req::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void boss_refresh_req::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void boss_refresh_req::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void boss_refresh_req::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 boss_refresh_req::time() const {
  return time_;
}
inline void boss_refresh_req::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// boss_info_req

// required uint32 time = 1;
inline bool boss_info_req::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void boss_info_req::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void boss_info_req::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void boss_info_req::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 boss_info_req::time() const {
  return time_;
}
inline void boss_info_req::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// repeated .client.boss_status bs = 2;
inline int boss_info_req::bs_size() const {
  return bs_.size();
}
inline void boss_info_req::clear_bs() {
  bs_.Clear();
}
inline const ::client::boss_status& boss_info_req::bs(int index) const {
  return bs_.Get(index);
}
inline ::client::boss_status* boss_info_req::mutable_bs(int index) {
  return bs_.Mutable(index);
}
inline ::client::boss_status* boss_info_req::add_bs() {
  return bs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::boss_status >&
boss_info_req::bs() const {
  return bs_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::boss_status >*
boss_info_req::mutable_bs() {
  return &bs_;
}

// optional .client.server_head svr_head = 1000;
inline bool boss_info_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void boss_info_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void boss_info_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void boss_info_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& boss_info_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* boss_info_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* boss_info_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void boss_info_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// boss_info_rsp

// required uint32 timelong = 1;
inline bool boss_info_rsp::has_timelong() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void boss_info_rsp::set_has_timelong() {
  _has_bits_[0] |= 0x00000001u;
}
inline void boss_info_rsp::clear_has_timelong() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void boss_info_rsp::clear_timelong() {
  timelong_ = 0u;
  clear_has_timelong();
}
inline ::google::protobuf::uint32 boss_info_rsp::timelong() const {
  return timelong_;
}
inline void boss_info_rsp::set_timelong(::google::protobuf::uint32 value) {
  set_has_timelong();
  timelong_ = value;
}

// repeated .client.boss_status bs = 2;
inline int boss_info_rsp::bs_size() const {
  return bs_.size();
}
inline void boss_info_rsp::clear_bs() {
  bs_.Clear();
}
inline const ::client::boss_status& boss_info_rsp::bs(int index) const {
  return bs_.Get(index);
}
inline ::client::boss_status* boss_info_rsp::mutable_bs(int index) {
  return bs_.Mutable(index);
}
inline ::client::boss_status* boss_info_rsp::add_bs() {
  return bs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::boss_status >&
boss_info_rsp::bs() const {
  return bs_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::boss_status >*
boss_info_rsp::mutable_bs() {
  return &bs_;
}

// -------------------------------------------------------------------

// boss_refresh_msg_rsp

// required uint32 time = 1;
inline bool boss_refresh_msg_rsp::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void boss_refresh_msg_rsp::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void boss_refresh_msg_rsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void boss_refresh_msg_rsp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 boss_refresh_msg_rsp::time() const {
  return time_;
}
inline void boss_refresh_msg_rsp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// boss_status

// required uint32 raid_id = 1;
inline bool boss_status::has_raid_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void boss_status::set_has_raid_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void boss_status::clear_has_raid_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void boss_status::clear_raid_id() {
  raid_id_ = 0u;
  clear_has_raid_id();
}
inline ::google::protobuf::uint32 boss_status::raid_id() const {
  return raid_id_;
}
inline void boss_status::set_raid_id(::google::protobuf::uint32 value) {
  set_has_raid_id();
  raid_id_ = value;
}

// optional uint32 status = 2;
inline bool boss_status::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void boss_status::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void boss_status::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void boss_status::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 boss_status::status() const {
  return status_;
}
inline void boss_status::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eworld_5fboss_2eproto__INCLUDED
