import "client.comm.proto";
package client;

// 双修小伙伴操作结果
enum MATE_OPERATE_RET_E
{
    MORE_SUCCESS = 0; // 双修操作成功
	MORE_MATE_OFFLINE = 1; // 对方已经下线，无法进行操作
	MORE_MATE_LIMIT   = 2; // 对方无法进行双修
	MORE_MATERIAL_LIMIT = 3; // 材料不足
	MORE_MATE_DENEY     = 4; // 对方拒绝
	MORE_INTIMACY_LIMIT = 5; // 双方亲密度不够
	MORE_NO_INGOT       = 6; // 元宝不足
	MORE_TIMES_LIMIT    = 7; // 自己或者小伙伴没有深度双修次数了
	MORE_NO_MATE        = 8; // 没有双修小伙伴
	MORE_IN_DEPTH       = 9; // 已经在深度双修中
	MORE_HAD_MATE       = 10;// 自己已经有了双修小伙伴
	MORE_DST_HAD_MATE   = 11;// 对方已经有了双修小伙伴
	MORE_CANT_SELF_MATE = 12; // 不能与自己结成小伙伴 
	MORE_OTHER_NOT_MATE = 13; // 对方不是自己的小伙伴 
	MORE_OPERATE_DENY   = 14; // 拒绝小伙伴的相关操作
	MORE_DEPTH_TIME_LIMIT = 15; // 深度双休时间还未到
	MORE_NOT_IN_DEPTH = 16;     // 没有在深度双修中
	MORE_NEED_ADVANCE = 17;     // 自己或者小伙伴必须深度仙修
	MORE_NO_TAEL     = 18;     // 铜钱不足
}

// 游戏内双修伴侣信息查询
message mate_info_req {
    required uint32      svr_time = 1;
    optional server_head svr_head = 1000;
}

// 游戏内双修伴侣信息返回
message mate_info_rsp {
    required uint32 mate_role_id = 1; // 伴侣的role_id，如果没有即为0,后面则都没有
	optional uint32 today_times  = 2; // 今天可深度双修次数
	optional uint32 last_time    = 3; // 最后一次深度双修的时间
	optional uint32 miss_times    = 4; // 之前错过的可以购买的深度双修次数
	optional uint32 total_times  = 5; // 总共深度双修的次数
	optional uint32 depth_time   = 6; // 深度双修剩余时间, 已经开始仙修的时间，如果为大于0则表明玩家在仙修中，如果为0说明没在仙修中
	optional uint32 advance_depth = 7; // 是否深度仙修中
}

// 请求和别人双修,A请求和B结成小伙伴，A发送此消息给服务器，服务器将此消息发送给B，B是否同意发送mate_invite_rsp给服务器，服务端再发送mate_invite_rsp给A
message mate_invite_req {
    required uint32 mate_role_id = 1; // 请求双修伴侣的角色ID

	optional server_head svr_head = 1000;
}

// 请求和别人双修操作结果
message mate_invite_rsp {
    required MATE_OPERATE_RET_E ret = 1; // 操作结果
	optional uint32 mate_role_id = 2;    // 双修的小伙伴

	optional server_head svr_head = 1000;
}

message mate_create_msg {
    required uint32 role_id = 1; // 主动方
	required uint32 mate_role_id = 2; // 被动方
	required MATE_OPERATE_RET_E ret = 3; // 操作结果
}

// 请求进入深度双修,A主动请求和B深度双修，A发此消息，同时B会收到这条协议，B此时要弹出是否同意深度双修
message depth_mate_req {
    required uint32      svr_time = 1;
	optional bool        advanced = 2[default=true]; // 是否深度仙修
    optional server_head svr_head = 1000; 
}

message depth_mate_msg {
    required uint32 role_id = 1;      // 主动方
	required uint32 mate_role_id = 2; // 被动方
	required bool   need_ingot = 3;   // 需要元宝
	required MATE_OPERATE_RET_E ret = 4; // 操作结果
}

// 请求进入深度双修结果，B收到A的深度双修后向服务器发送自己的双修意愿是否同意，同时向A返回此条信息，如果B同意，则服务器会向A和B同时发出此消息，A和B进入深度双修 
message depth_mate_rsp {
    required MATE_OPERATE_RET_E ret = 1; // 操作结果,如果客户端收到成功的消息，即刻进入深度双修 
	optional bool    advanced = 2[default=true]; // 是否深度仙修
	optional server_head svr_head = 1000;
}

// 客户端倒计深度双修时间结束
message depth_mate_end_req {
    required uint32      svr_time = 1;
    optional server_head svr_head = 1000;
}

// 通知深度双修结束消息
message depth_mate_end_msg {
    required  MATE_OPERATE_RET_E ret = 1; //如果收到成功，则本次深度双修顺利结束，其它结果码的返回都为失败，比如小伙伴下线就要中止
	optional uint32 role_id = 2;
	optional uint32 mate_role_id = 3;
	optional bool advanced = 4; 
}

// 解除双修小伙伴关系请求
message mate_remove_req {
    required uint32      svr_time = 1;
    optional server_head svr_head = 1000; 
}

// 解除双修小伙伴关系消息，此消息用来通知客户端解除小伙伴关系,如果A主动和B解除，那么A和B都会收到此消息
message mate_remove_msg {
    required MATE_OPERATE_RET_E ret = 1;
	optional uint32 role_id = 2[default=0]; // 申请解除小伙伴关系的角色ID
}

// 领取仙修奖励
message mate_award_req {
    required uint32      type     = 1;
    optional server_head svr_head = 1000;
}

message mate_award_rsp {
    required uint32 ret = 1; // 0成功 1仙修次数不足 2已领取过 
}

message mate_award_via {
    required bool   check    = 1;
    required uint32 award_id = 2;
    required uint32 role_id  = 3;
}
