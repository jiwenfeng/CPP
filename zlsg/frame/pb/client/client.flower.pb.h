// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.flower.proto

#ifndef PROTOBUF_client_2eflower_2eproto__INCLUDED
#define PROTOBUF_client_2eflower_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eflower_2eproto();
void protobuf_AssignDesc_client_2eflower_2eproto();
void protobuf_ShutdownFile_client_2eflower_2eproto();

class send_flower;
class send_flower_rsp;
class recive_flower;

enum FLOWER_NUMBER_TYPE_E {
  FNTE_ONE = 0,
  FNTE_N = 1,
  FNTE_NN = 2,
  FNTE_NNN = 3,
  FNTE_MAX = 4
};
bool FLOWER_NUMBER_TYPE_E_IsValid(int value);
const FLOWER_NUMBER_TYPE_E FLOWER_NUMBER_TYPE_E_MIN = FNTE_ONE;
const FLOWER_NUMBER_TYPE_E FLOWER_NUMBER_TYPE_E_MAX = FNTE_MAX;
const int FLOWER_NUMBER_TYPE_E_ARRAYSIZE = FLOWER_NUMBER_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* FLOWER_NUMBER_TYPE_E_descriptor();
inline const ::std::string& FLOWER_NUMBER_TYPE_E_Name(FLOWER_NUMBER_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    FLOWER_NUMBER_TYPE_E_descriptor(), value);
}
inline bool FLOWER_NUMBER_TYPE_E_Parse(
    const ::std::string& name, FLOWER_NUMBER_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FLOWER_NUMBER_TYPE_E>(
    FLOWER_NUMBER_TYPE_E_descriptor(), name, value);
}
enum SEND_FLOWER_TYPE_E {
  SFTE_NAME = 0,
  SFTE_AMS = 1
};
bool SEND_FLOWER_TYPE_E_IsValid(int value);
const SEND_FLOWER_TYPE_E SEND_FLOWER_TYPE_E_MIN = SFTE_NAME;
const SEND_FLOWER_TYPE_E SEND_FLOWER_TYPE_E_MAX = SFTE_AMS;
const int SEND_FLOWER_TYPE_E_ARRAYSIZE = SEND_FLOWER_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* SEND_FLOWER_TYPE_E_descriptor();
inline const ::std::string& SEND_FLOWER_TYPE_E_Name(SEND_FLOWER_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    SEND_FLOWER_TYPE_E_descriptor(), value);
}
inline bool SEND_FLOWER_TYPE_E_Parse(
    const ::std::string& name, SEND_FLOWER_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SEND_FLOWER_TYPE_E>(
    SEND_FLOWER_TYPE_E_descriptor(), name, value);
}
enum SEND_FLOWER_RET_E {
  SFRE_SUCCESS = 0,
  SFRE_OFFLINE = 1,
  SFRE_NONAME = 2,
  SFRE_NOFLOWER = 3,
  SFRE_NOMONEY = 4
};
bool SEND_FLOWER_RET_E_IsValid(int value);
const SEND_FLOWER_RET_E SEND_FLOWER_RET_E_MIN = SFRE_SUCCESS;
const SEND_FLOWER_RET_E SEND_FLOWER_RET_E_MAX = SFRE_NOMONEY;
const int SEND_FLOWER_RET_E_ARRAYSIZE = SEND_FLOWER_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* SEND_FLOWER_RET_E_descriptor();
inline const ::std::string& SEND_FLOWER_RET_E_Name(SEND_FLOWER_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    SEND_FLOWER_RET_E_descriptor(), value);
}
inline bool SEND_FLOWER_RET_E_Parse(
    const ::std::string& name, SEND_FLOWER_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SEND_FLOWER_RET_E>(
    SEND_FLOWER_RET_E_descriptor(), name, value);
}
// ===================================================================

class send_flower : public ::google::protobuf::Message {
 public:
  send_flower();
  virtual ~send_flower();

  send_flower(const send_flower& from);

  inline send_flower& operator=(const send_flower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const send_flower& default_instance();

  void Swap(send_flower* other);

  // implements Message ----------------------------------------------

  send_flower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const send_flower& from);
  void MergeFrom(const send_flower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .client.SEND_FLOWER_TYPE_E type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::client::SEND_FLOWER_TYPE_E type() const;
  inline void set_type(::client::SEND_FLOWER_TYPE_E value);

  // optional uint32 grid_index = 3;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // optional uint32 dst_role_id = 4;
  inline bool has_dst_role_id() const;
  inline void clear_dst_role_id();
  static const int kDstRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint32 dst_role_id() const;
  inline void set_dst_role_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.send_flower)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_dst_role_id();
  inline void clear_has_dst_role_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;
  ::google::protobuf::uint32 grid_index_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 dst_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eflower_2eproto();
  friend void protobuf_AssignDesc_client_2eflower_2eproto();
  friend void protobuf_ShutdownFile_client_2eflower_2eproto();

  void InitAsDefaultInstance();
  static send_flower* default_instance_;
};
// -------------------------------------------------------------------

class send_flower_rsp : public ::google::protobuf::Message {
 public:
  send_flower_rsp();
  virtual ~send_flower_rsp();

  send_flower_rsp(const send_flower_rsp& from);

  inline send_flower_rsp& operator=(const send_flower_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const send_flower_rsp& default_instance();

  void Swap(send_flower_rsp* other);

  // implements Message ----------------------------------------------

  send_flower_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const send_flower_rsp& from);
  void MergeFrom(const send_flower_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.SEND_FLOWER_RET_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::SEND_FLOWER_RET_E ret() const;
  inline void set_ret(::client::SEND_FLOWER_RET_E value);

  // @@protoc_insertion_point(class_scope:client.send_flower_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eflower_2eproto();
  friend void protobuf_AssignDesc_client_2eflower_2eproto();
  friend void protobuf_ShutdownFile_client_2eflower_2eproto();

  void InitAsDefaultInstance();
  static send_flower_rsp* default_instance_;
};
// -------------------------------------------------------------------

class recive_flower : public ::google::protobuf::Message {
 public:
  recive_flower();
  virtual ~recive_flower();

  recive_flower(const recive_flower& from);

  inline recive_flower& operator=(const recive_flower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const recive_flower& default_instance();

  void Swap(recive_flower* other);

  // implements Message ----------------------------------------------

  recive_flower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const recive_flower& from);
  void MergeFrom(const recive_flower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // required uint32 sender_role_id = 2;
  inline bool has_sender_role_id() const;
  inline void clear_sender_role_id();
  static const int kSenderRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 sender_role_id() const;
  inline void set_sender_role_id(::google::protobuf::uint32 value);

  // required string reciver = 3;
  inline bool has_reciver() const;
  inline void clear_reciver();
  static const int kReciverFieldNumber = 3;
  inline const ::std::string& reciver() const;
  inline void set_reciver(const ::std::string& value);
  inline void set_reciver(const char* value);
  inline void set_reciver(const char* value, size_t size);
  inline ::std::string* mutable_reciver();
  inline ::std::string* release_reciver();
  inline void set_allocated_reciver(::std::string* reciver);

  // required uint32 reciver_role_id = 4;
  inline bool has_reciver_role_id() const;
  inline void clear_reciver_role_id();
  static const int kReciverRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint32 reciver_role_id() const;
  inline void set_reciver_role_id(::google::protobuf::uint32 value);

  // required .client.FLOWER_NUMBER_TYPE_E number = 5;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 5;
  inline ::client::FLOWER_NUMBER_TYPE_E number() const;
  inline void set_number(::client::FLOWER_NUMBER_TYPE_E value);

  // @@protoc_insertion_point(class_scope:client.recive_flower)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_sender_role_id();
  inline void clear_has_sender_role_id();
  inline void set_has_reciver();
  inline void clear_has_reciver();
  inline void set_has_reciver_role_id();
  inline void clear_has_reciver_role_id();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sender_;
  ::std::string* reciver_;
  ::google::protobuf::uint32 sender_role_id_;
  ::google::protobuf::uint32 reciver_role_id_;
  int number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eflower_2eproto();
  friend void protobuf_AssignDesc_client_2eflower_2eproto();
  friend void protobuf_ShutdownFile_client_2eflower_2eproto();

  void InitAsDefaultInstance();
  static recive_flower* default_instance_;
};
// ===================================================================


// ===================================================================

// send_flower

// required string name = 1;
inline bool send_flower::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void send_flower::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void send_flower::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void send_flower::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& send_flower::name() const {
  return *name_;
}
inline void send_flower::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void send_flower::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void send_flower::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* send_flower::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* send_flower::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void send_flower::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .client.SEND_FLOWER_TYPE_E type = 2;
inline bool send_flower::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void send_flower::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void send_flower::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void send_flower::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::client::SEND_FLOWER_TYPE_E send_flower::type() const {
  return static_cast< ::client::SEND_FLOWER_TYPE_E >(type_);
}
inline void send_flower::set_type(::client::SEND_FLOWER_TYPE_E value) {
  assert(::client::SEND_FLOWER_TYPE_E_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 grid_index = 3;
inline bool send_flower::has_grid_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void send_flower::set_has_grid_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void send_flower::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void send_flower::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 send_flower::grid_index() const {
  return grid_index_;
}
inline void send_flower::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// optional uint32 dst_role_id = 4;
inline bool send_flower::has_dst_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void send_flower::set_has_dst_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void send_flower::clear_has_dst_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void send_flower::clear_dst_role_id() {
  dst_role_id_ = 0u;
  clear_has_dst_role_id();
}
inline ::google::protobuf::uint32 send_flower::dst_role_id() const {
  return dst_role_id_;
}
inline void send_flower::set_dst_role_id(::google::protobuf::uint32 value) {
  set_has_dst_role_id();
  dst_role_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool send_flower::has_svr_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void send_flower::set_has_svr_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void send_flower::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void send_flower::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& send_flower::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* send_flower::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* send_flower::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void send_flower::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// send_flower_rsp

// required .client.SEND_FLOWER_RET_E ret = 1;
inline bool send_flower_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void send_flower_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void send_flower_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void send_flower_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::SEND_FLOWER_RET_E send_flower_rsp::ret() const {
  return static_cast< ::client::SEND_FLOWER_RET_E >(ret_);
}
inline void send_flower_rsp::set_ret(::client::SEND_FLOWER_RET_E value) {
  assert(::client::SEND_FLOWER_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// recive_flower

// optional string sender = 1;
inline bool recive_flower::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void recive_flower::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void recive_flower::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void recive_flower::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& recive_flower::sender() const {
  return *sender_;
}
inline void recive_flower::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void recive_flower::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void recive_flower::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* recive_flower::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* recive_flower::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void recive_flower::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 sender_role_id = 2;
inline bool recive_flower::has_sender_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void recive_flower::set_has_sender_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void recive_flower::clear_has_sender_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void recive_flower::clear_sender_role_id() {
  sender_role_id_ = 0u;
  clear_has_sender_role_id();
}
inline ::google::protobuf::uint32 recive_flower::sender_role_id() const {
  return sender_role_id_;
}
inline void recive_flower::set_sender_role_id(::google::protobuf::uint32 value) {
  set_has_sender_role_id();
  sender_role_id_ = value;
}

// required string reciver = 3;
inline bool recive_flower::has_reciver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void recive_flower::set_has_reciver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void recive_flower::clear_has_reciver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void recive_flower::clear_reciver() {
  if (reciver_ != &::google::protobuf::internal::kEmptyString) {
    reciver_->clear();
  }
  clear_has_reciver();
}
inline const ::std::string& recive_flower::reciver() const {
  return *reciver_;
}
inline void recive_flower::set_reciver(const ::std::string& value) {
  set_has_reciver();
  if (reciver_ == &::google::protobuf::internal::kEmptyString) {
    reciver_ = new ::std::string;
  }
  reciver_->assign(value);
}
inline void recive_flower::set_reciver(const char* value) {
  set_has_reciver();
  if (reciver_ == &::google::protobuf::internal::kEmptyString) {
    reciver_ = new ::std::string;
  }
  reciver_->assign(value);
}
inline void recive_flower::set_reciver(const char* value, size_t size) {
  set_has_reciver();
  if (reciver_ == &::google::protobuf::internal::kEmptyString) {
    reciver_ = new ::std::string;
  }
  reciver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* recive_flower::mutable_reciver() {
  set_has_reciver();
  if (reciver_ == &::google::protobuf::internal::kEmptyString) {
    reciver_ = new ::std::string;
  }
  return reciver_;
}
inline ::std::string* recive_flower::release_reciver() {
  clear_has_reciver();
  if (reciver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reciver_;
    reciver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void recive_flower::set_allocated_reciver(::std::string* reciver) {
  if (reciver_ != &::google::protobuf::internal::kEmptyString) {
    delete reciver_;
  }
  if (reciver) {
    set_has_reciver();
    reciver_ = reciver;
  } else {
    clear_has_reciver();
    reciver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 reciver_role_id = 4;
inline bool recive_flower::has_reciver_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void recive_flower::set_has_reciver_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void recive_flower::clear_has_reciver_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void recive_flower::clear_reciver_role_id() {
  reciver_role_id_ = 0u;
  clear_has_reciver_role_id();
}
inline ::google::protobuf::uint32 recive_flower::reciver_role_id() const {
  return reciver_role_id_;
}
inline void recive_flower::set_reciver_role_id(::google::protobuf::uint32 value) {
  set_has_reciver_role_id();
  reciver_role_id_ = value;
}

// required .client.FLOWER_NUMBER_TYPE_E number = 5;
inline bool recive_flower::has_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void recive_flower::set_has_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void recive_flower::clear_has_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void recive_flower::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::client::FLOWER_NUMBER_TYPE_E recive_flower::number() const {
  return static_cast< ::client::FLOWER_NUMBER_TYPE_E >(number_);
}
inline void recive_flower::set_number(::client::FLOWER_NUMBER_TYPE_E value) {
  assert(::client::FLOWER_NUMBER_TYPE_E_IsValid(value));
  set_has_number();
  number_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::FLOWER_NUMBER_TYPE_E>() {
  return ::client::FLOWER_NUMBER_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::SEND_FLOWER_TYPE_E>() {
  return ::client::SEND_FLOWER_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::SEND_FLOWER_RET_E>() {
  return ::client::SEND_FLOWER_RET_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eflower_2eproto__INCLUDED
