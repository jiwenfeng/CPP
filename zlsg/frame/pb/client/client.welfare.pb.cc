// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.welfare.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.welfare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* welfare_online_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  welfare_online_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* welfare_online_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  welfare_online_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* welfare_gifts_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  welfare_gifts_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* welfare_gifts_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  welfare_gifts_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* welfare_yellow_vip_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  welfare_yellow_vip_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* welfare_yellow_vip_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  welfare_yellow_vip_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* online_gifts_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  online_gifts_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* online_gifts_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  online_gifts_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_gifts_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_gifts_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_gifts_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_gifts_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2ewelfare_2eproto() {
  protobuf_AddDesc_client_2ewelfare_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.welfare.proto");
  GOOGLE_CHECK(file != NULL);
  welfare_online_req_descriptor_ = file->message_type(0);
  static const int welfare_online_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_online_req, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_online_req, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_online_req, sod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_online_req, svr_head_),
  };
  welfare_online_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      welfare_online_req_descriptor_,
      welfare_online_req::default_instance_,
      welfare_online_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_online_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_online_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(welfare_online_req));
  welfare_online_rsp_descriptor_ = file->message_type(1);
  static const int welfare_online_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_online_rsp, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_online_rsp, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_online_rsp, sod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_online_rsp, ret_),
  };
  welfare_online_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      welfare_online_rsp_descriptor_,
      welfare_online_rsp::default_instance_,
      welfare_online_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_online_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_online_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(welfare_online_rsp));
  welfare_gifts_req_descriptor_ = file->message_type(2);
  static const int welfare_gifts_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_req, first_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_req, novice_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_req, spread_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_req, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_req, svr_head_),
  };
  welfare_gifts_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      welfare_gifts_req_descriptor_,
      welfare_gifts_req::default_instance_,
      welfare_gifts_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(welfare_gifts_req));
  welfare_gifts_rsp_descriptor_ = file->message_type(3);
  static const int welfare_gifts_rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_rsp, first_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_rsp, novice_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_rsp, spread_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_rsp, pack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_rsp, ret_),
  };
  welfare_gifts_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      welfare_gifts_rsp_descriptor_,
      welfare_gifts_rsp::default_instance_,
      welfare_gifts_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_gifts_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(welfare_gifts_rsp));
  welfare_yellow_vip_req_descriptor_ = file->message_type(4);
  static const int welfare_yellow_vip_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_req, every_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_req, grow_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_req, ever_day_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_req, novice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_req, svr_head_),
  };
  welfare_yellow_vip_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      welfare_yellow_vip_req_descriptor_,
      welfare_yellow_vip_req::default_instance_,
      welfare_yellow_vip_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(welfare_yellow_vip_req));
  welfare_yellow_vip_rsp_descriptor_ = file->message_type(5);
  static const int welfare_yellow_vip_rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_rsp, every_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_rsp, grow_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_rsp, ever_day_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_rsp, novice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_rsp, ret_),
  };
  welfare_yellow_vip_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      welfare_yellow_vip_rsp_descriptor_,
      welfare_yellow_vip_rsp::default_instance_,
      welfare_yellow_vip_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(welfare_yellow_vip_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(welfare_yellow_vip_rsp));
  online_gifts_req_descriptor_ = file->message_type(6);
  static const int online_gifts_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_gifts_req, online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_gifts_req, svr_head_),
  };
  online_gifts_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      online_gifts_req_descriptor_,
      online_gifts_req::default_instance_,
      online_gifts_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_gifts_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_gifts_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(online_gifts_req));
  online_gifts_rsp_descriptor_ = file->message_type(7);
  static const int online_gifts_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_gifts_rsp, online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_gifts_rsp, ret_),
  };
  online_gifts_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      online_gifts_rsp_descriptor_,
      online_gifts_rsp::default_instance_,
      online_gifts_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_gifts_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(online_gifts_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(online_gifts_rsp));
  get_gifts_req_descriptor_ = file->message_type(8);
  static const int get_gifts_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_gifts_req, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_gifts_req, svr_head_),
  };
  get_gifts_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_gifts_req_descriptor_,
      get_gifts_req::default_instance_,
      get_gifts_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_gifts_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_gifts_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_gifts_req));
  get_gifts_rsp_descriptor_ = file->message_type(9);
  static const int get_gifts_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_gifts_rsp, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_gifts_rsp, ret_),
  };
  get_gifts_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_gifts_rsp_descriptor_,
      get_gifts_rsp::default_instance_,
      get_gifts_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_gifts_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_gifts_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_gifts_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2ewelfare_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    welfare_online_req_descriptor_, &welfare_online_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    welfare_online_rsp_descriptor_, &welfare_online_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    welfare_gifts_req_descriptor_, &welfare_gifts_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    welfare_gifts_rsp_descriptor_, &welfare_gifts_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    welfare_yellow_vip_req_descriptor_, &welfare_yellow_vip_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    welfare_yellow_vip_rsp_descriptor_, &welfare_yellow_vip_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    online_gifts_req_descriptor_, &online_gifts_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    online_gifts_rsp_descriptor_, &online_gifts_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_gifts_req_descriptor_, &get_gifts_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_gifts_rsp_descriptor_, &get_gifts_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2ewelfare_2eproto() {
  delete welfare_online_req::default_instance_;
  delete welfare_online_req_reflection_;
  delete welfare_online_rsp::default_instance_;
  delete welfare_online_rsp_reflection_;
  delete welfare_gifts_req::default_instance_;
  delete welfare_gifts_req_reflection_;
  delete welfare_gifts_rsp::default_instance_;
  delete welfare_gifts_rsp_reflection_;
  delete welfare_yellow_vip_req::default_instance_;
  delete welfare_yellow_vip_req_reflection_;
  delete welfare_yellow_vip_rsp::default_instance_;
  delete welfare_yellow_vip_rsp_reflection_;
  delete online_gifts_req::default_instance_;
  delete online_gifts_req_reflection_;
  delete online_gifts_rsp::default_instance_;
  delete online_gifts_rsp_reflection_;
  delete get_gifts_req::default_instance_;
  delete get_gifts_req_reflection_;
  delete get_gifts_rsp::default_instance_;
  delete get_gifts_rsp_reflection_;
}

void protobuf_AddDesc_client_2ewelfare_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024client.welfare.proto\022\006client\032\021client.c"
    "omm.proto\"d\n\022welfare_online_req\022\013\n\003day\030\001"
    " \001(\r\022\014\n\004week\030\002 \001(\010\022\013\n\003sod\030\003 \001(\010\022&\n\010svr_h"
    "ead\030\350\007 \001(\0132\023.client.server_head\"I\n\022welfa"
    "re_online_rsp\022\013\n\003day\030\001 \001(\r\022\014\n\004week\030\002 \001(\010"
    "\022\013\n\003sod\030\003 \001(\010\022\013\n\003ret\030\004 \002(\r\"\211\001\n\021welfare_g"
    "ifts_req\022\017\n\007first_0\030\001 \001(\010\022\023\n\013novice_code"
    "\030\002 \001(\t\022\023\n\013spread_code\030\003 \001(\t\022\021\n\tpack_type"
    "\030\004 \001(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.serve"
    "r_head\"n\n\021welfare_gifts_rsp\022\017\n\007first_0\030\001"
    " \001(\010\022\023\n\013novice_code\030\002 \001(\t\022\023\n\013spread_code"
    "\030\003 \001(\t\022\021\n\tpack_type\030\004 \001(\r\022\013\n\003ret\030\005 \002(\r\"\213"
    "\001\n\026welfare_yellow_vip_req\022\021\n\tevery_day\030\001"
    " \001(\r\022\017\n\007grow_up\030\002 \001(\r\022\025\n\rever_day_year\030\003"
    " \001(\010\022\016\n\006novice\030\004 \001(\010\022&\n\010svr_head\030\350\007 \001(\0132"
    "\023.client.server_head\"p\n\026welfare_yellow_v"
    "ip_rsp\022\021\n\tevery_day\030\001 \001(\r\022\017\n\007grow_up\030\002 \001"
    "(\r\022\025\n\rever_day_year\030\003 \001(\010\022\016\n\006novice\030\004 \001("
    "\010\022\013\n\003ret\030\005 \002(\r\"O\n\020online_gifts_req\022\023\n\013on"
    "line_time\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.cli"
    "ent.server_head\"4\n\020online_gifts_rsp\022\023\n\013o"
    "nline_time\030\001 \002(\r\022\013\n\003ret\030\002 \002(\r\"J\n\rget_gif"
    "ts_req\022\021\n\treward_id\030\001 \002(\r\022&\n\010svr_head\030\350\007"
    " \001(\0132\023.client.server_head\"/\n\rget_gifts_r"
    "sp\022\021\n\treward_id\030\001 \002(\r\022\013\n\003ret\030\002 \002(\r", 994);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.welfare.proto", &protobuf_RegisterTypes);
  welfare_online_req::default_instance_ = new welfare_online_req();
  welfare_online_rsp::default_instance_ = new welfare_online_rsp();
  welfare_gifts_req::default_instance_ = new welfare_gifts_req();
  welfare_gifts_rsp::default_instance_ = new welfare_gifts_rsp();
  welfare_yellow_vip_req::default_instance_ = new welfare_yellow_vip_req();
  welfare_yellow_vip_rsp::default_instance_ = new welfare_yellow_vip_rsp();
  online_gifts_req::default_instance_ = new online_gifts_req();
  online_gifts_rsp::default_instance_ = new online_gifts_rsp();
  get_gifts_req::default_instance_ = new get_gifts_req();
  get_gifts_rsp::default_instance_ = new get_gifts_rsp();
  welfare_online_req::default_instance_->InitAsDefaultInstance();
  welfare_online_rsp::default_instance_->InitAsDefaultInstance();
  welfare_gifts_req::default_instance_->InitAsDefaultInstance();
  welfare_gifts_rsp::default_instance_->InitAsDefaultInstance();
  welfare_yellow_vip_req::default_instance_->InitAsDefaultInstance();
  welfare_yellow_vip_rsp::default_instance_->InitAsDefaultInstance();
  online_gifts_req::default_instance_->InitAsDefaultInstance();
  online_gifts_rsp::default_instance_->InitAsDefaultInstance();
  get_gifts_req::default_instance_->InitAsDefaultInstance();
  get_gifts_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2ewelfare_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2ewelfare_2eproto {
  StaticDescriptorInitializer_client_2ewelfare_2eproto() {
    protobuf_AddDesc_client_2ewelfare_2eproto();
  }
} static_descriptor_initializer_client_2ewelfare_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int welfare_online_req::kDayFieldNumber;
const int welfare_online_req::kWeekFieldNumber;
const int welfare_online_req::kSodFieldNumber;
const int welfare_online_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

welfare_online_req::welfare_online_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void welfare_online_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

welfare_online_req::welfare_online_req(const welfare_online_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void welfare_online_req::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  week_ = false;
  sod_ = false;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

welfare_online_req::~welfare_online_req() {
  SharedDtor();
}

void welfare_online_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void welfare_online_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* welfare_online_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return welfare_online_req_descriptor_;
}

const welfare_online_req& welfare_online_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ewelfare_2eproto();
  return *default_instance_;
}

welfare_online_req* welfare_online_req::default_instance_ = NULL;

welfare_online_req* welfare_online_req::New() const {
  return new welfare_online_req;
}

void welfare_online_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
    week_ = false;
    sod_ = false;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool welfare_online_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_week;
        break;
      }

      // optional bool week = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sod;
        break;
      }

      // optional bool sod = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sod_)));
          set_has_sod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void welfare_online_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // optional bool week = 2;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->week(), output);
  }

  // optional bool sod = 3;
  if (has_sod()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sod(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* welfare_online_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // optional bool week = 2;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->week(), target);
  }

  // optional bool sod = 3;
  if (has_sod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sod(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int welfare_online_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional bool week = 2;
    if (has_week()) {
      total_size += 1 + 1;
    }

    // optional bool sod = 3;
    if (has_sod()) {
      total_size += 1 + 1;
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void welfare_online_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const welfare_online_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const welfare_online_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void welfare_online_req::MergeFrom(const welfare_online_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_sod()) {
      set_sod(from.sod());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void welfare_online_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void welfare_online_req::CopyFrom(const welfare_online_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool welfare_online_req::IsInitialized() const {

  return true;
}

void welfare_online_req::Swap(welfare_online_req* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(week_, other->week_);
    std::swap(sod_, other->sod_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata welfare_online_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = welfare_online_req_descriptor_;
  metadata.reflection = welfare_online_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int welfare_online_rsp::kDayFieldNumber;
const int welfare_online_rsp::kWeekFieldNumber;
const int welfare_online_rsp::kSodFieldNumber;
const int welfare_online_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

welfare_online_rsp::welfare_online_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void welfare_online_rsp::InitAsDefaultInstance() {
}

welfare_online_rsp::welfare_online_rsp(const welfare_online_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void welfare_online_rsp::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  week_ = false;
  sod_ = false;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

welfare_online_rsp::~welfare_online_rsp() {
  SharedDtor();
}

void welfare_online_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void welfare_online_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* welfare_online_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return welfare_online_rsp_descriptor_;
}

const welfare_online_rsp& welfare_online_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ewelfare_2eproto();
  return *default_instance_;
}

welfare_online_rsp* welfare_online_rsp::default_instance_ = NULL;

welfare_online_rsp* welfare_online_rsp::New() const {
  return new welfare_online_rsp;
}

void welfare_online_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
    week_ = false;
    sod_ = false;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool welfare_online_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_week;
        break;
      }

      // optional bool week = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sod;
        break;
      }

      // optional bool sod = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sod_)));
          set_has_sod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // required uint32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void welfare_online_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // optional bool week = 2;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->week(), output);
  }

  // optional bool sod = 3;
  if (has_sod()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sod(), output);
  }

  // required uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* welfare_online_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // optional bool week = 2;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->week(), target);
  }

  // optional bool sod = 3;
  if (has_sod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sod(), target);
  }

  // required uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int welfare_online_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional bool week = 2;
    if (has_week()) {
      total_size += 1 + 1;
    }

    // optional bool sod = 3;
    if (has_sod()) {
      total_size += 1 + 1;
    }

    // required uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void welfare_online_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const welfare_online_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const welfare_online_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void welfare_online_rsp::MergeFrom(const welfare_online_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_sod()) {
      set_sod(from.sod());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void welfare_online_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void welfare_online_rsp::CopyFrom(const welfare_online_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool welfare_online_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void welfare_online_rsp::Swap(welfare_online_rsp* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(week_, other->week_);
    std::swap(sod_, other->sod_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata welfare_online_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = welfare_online_rsp_descriptor_;
  metadata.reflection = welfare_online_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int welfare_gifts_req::kFirst0FieldNumber;
const int welfare_gifts_req::kNoviceCodeFieldNumber;
const int welfare_gifts_req::kSpreadCodeFieldNumber;
const int welfare_gifts_req::kPackTypeFieldNumber;
const int welfare_gifts_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

welfare_gifts_req::welfare_gifts_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void welfare_gifts_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

welfare_gifts_req::welfare_gifts_req(const welfare_gifts_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void welfare_gifts_req::SharedCtor() {
  _cached_size_ = 0;
  first_0_ = false;
  novice_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spread_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pack_type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

welfare_gifts_req::~welfare_gifts_req() {
  SharedDtor();
}

void welfare_gifts_req::SharedDtor() {
  if (novice_code_ != &::google::protobuf::internal::kEmptyString) {
    delete novice_code_;
  }
  if (spread_code_ != &::google::protobuf::internal::kEmptyString) {
    delete spread_code_;
  }
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void welfare_gifts_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* welfare_gifts_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return welfare_gifts_req_descriptor_;
}

const welfare_gifts_req& welfare_gifts_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ewelfare_2eproto();
  return *default_instance_;
}

welfare_gifts_req* welfare_gifts_req::default_instance_ = NULL;

welfare_gifts_req* welfare_gifts_req::New() const {
  return new welfare_gifts_req;
}

void welfare_gifts_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_0_ = false;
    if (has_novice_code()) {
      if (novice_code_ != &::google::protobuf::internal::kEmptyString) {
        novice_code_->clear();
      }
    }
    if (has_spread_code()) {
      if (spread_code_ != &::google::protobuf::internal::kEmptyString) {
        spread_code_->clear();
      }
    }
    pack_type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool welfare_gifts_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool first_0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_0_)));
          set_has_first_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_novice_code;
        break;
      }

      // optional string novice_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_novice_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_novice_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->novice_code().data(), this->novice_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spread_code;
        break;
      }

      // optional string spread_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spread_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spread_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spread_code().data(), this->spread_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pack_type;
        break;
      }

      // optional uint32 pack_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void welfare_gifts_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool first_0 = 1;
  if (has_first_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->first_0(), output);
  }

  // optional string novice_code = 2;
  if (has_novice_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->novice_code().data(), this->novice_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->novice_code(), output);
  }

  // optional string spread_code = 3;
  if (has_spread_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spread_code().data(), this->spread_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->spread_code(), output);
  }

  // optional uint32 pack_type = 4;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pack_type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* welfare_gifts_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool first_0 = 1;
  if (has_first_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->first_0(), target);
  }

  // optional string novice_code = 2;
  if (has_novice_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->novice_code().data(), this->novice_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->novice_code(), target);
  }

  // optional string spread_code = 3;
  if (has_spread_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spread_code().data(), this->spread_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->spread_code(), target);
  }

  // optional uint32 pack_type = 4;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pack_type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int welfare_gifts_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool first_0 = 1;
    if (has_first_0()) {
      total_size += 1 + 1;
    }

    // optional string novice_code = 2;
    if (has_novice_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->novice_code());
    }

    // optional string spread_code = 3;
    if (has_spread_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spread_code());
    }

    // optional uint32 pack_type = 4;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pack_type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void welfare_gifts_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const welfare_gifts_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const welfare_gifts_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void welfare_gifts_req::MergeFrom(const welfare_gifts_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_0()) {
      set_first_0(from.first_0());
    }
    if (from.has_novice_code()) {
      set_novice_code(from.novice_code());
    }
    if (from.has_spread_code()) {
      set_spread_code(from.spread_code());
    }
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void welfare_gifts_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void welfare_gifts_req::CopyFrom(const welfare_gifts_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool welfare_gifts_req::IsInitialized() const {

  return true;
}

void welfare_gifts_req::Swap(welfare_gifts_req* other) {
  if (other != this) {
    std::swap(first_0_, other->first_0_);
    std::swap(novice_code_, other->novice_code_);
    std::swap(spread_code_, other->spread_code_);
    std::swap(pack_type_, other->pack_type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata welfare_gifts_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = welfare_gifts_req_descriptor_;
  metadata.reflection = welfare_gifts_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int welfare_gifts_rsp::kFirst0FieldNumber;
const int welfare_gifts_rsp::kNoviceCodeFieldNumber;
const int welfare_gifts_rsp::kSpreadCodeFieldNumber;
const int welfare_gifts_rsp::kPackTypeFieldNumber;
const int welfare_gifts_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

welfare_gifts_rsp::welfare_gifts_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void welfare_gifts_rsp::InitAsDefaultInstance() {
}

welfare_gifts_rsp::welfare_gifts_rsp(const welfare_gifts_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void welfare_gifts_rsp::SharedCtor() {
  _cached_size_ = 0;
  first_0_ = false;
  novice_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spread_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pack_type_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

welfare_gifts_rsp::~welfare_gifts_rsp() {
  SharedDtor();
}

void welfare_gifts_rsp::SharedDtor() {
  if (novice_code_ != &::google::protobuf::internal::kEmptyString) {
    delete novice_code_;
  }
  if (spread_code_ != &::google::protobuf::internal::kEmptyString) {
    delete spread_code_;
  }
  if (this != default_instance_) {
  }
}

void welfare_gifts_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* welfare_gifts_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return welfare_gifts_rsp_descriptor_;
}

const welfare_gifts_rsp& welfare_gifts_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ewelfare_2eproto();
  return *default_instance_;
}

welfare_gifts_rsp* welfare_gifts_rsp::default_instance_ = NULL;

welfare_gifts_rsp* welfare_gifts_rsp::New() const {
  return new welfare_gifts_rsp;
}

void welfare_gifts_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_0_ = false;
    if (has_novice_code()) {
      if (novice_code_ != &::google::protobuf::internal::kEmptyString) {
        novice_code_->clear();
      }
    }
    if (has_spread_code()) {
      if (spread_code_ != &::google::protobuf::internal::kEmptyString) {
        spread_code_->clear();
      }
    }
    pack_type_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool welfare_gifts_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool first_0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_0_)));
          set_has_first_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_novice_code;
        break;
      }

      // optional string novice_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_novice_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_novice_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->novice_code().data(), this->novice_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spread_code;
        break;
      }

      // optional string spread_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spread_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spread_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spread_code().data(), this->spread_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pack_type;
        break;
      }

      // optional uint32 pack_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pack_type_)));
          set_has_pack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // required uint32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void welfare_gifts_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool first_0 = 1;
  if (has_first_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->first_0(), output);
  }

  // optional string novice_code = 2;
  if (has_novice_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->novice_code().data(), this->novice_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->novice_code(), output);
  }

  // optional string spread_code = 3;
  if (has_spread_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spread_code().data(), this->spread_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->spread_code(), output);
  }

  // optional uint32 pack_type = 4;
  if (has_pack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pack_type(), output);
  }

  // required uint32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* welfare_gifts_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool first_0 = 1;
  if (has_first_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->first_0(), target);
  }

  // optional string novice_code = 2;
  if (has_novice_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->novice_code().data(), this->novice_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->novice_code(), target);
  }

  // optional string spread_code = 3;
  if (has_spread_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spread_code().data(), this->spread_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->spread_code(), target);
  }

  // optional uint32 pack_type = 4;
  if (has_pack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pack_type(), target);
  }

  // required uint32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int welfare_gifts_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool first_0 = 1;
    if (has_first_0()) {
      total_size += 1 + 1;
    }

    // optional string novice_code = 2;
    if (has_novice_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->novice_code());
    }

    // optional string spread_code = 3;
    if (has_spread_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spread_code());
    }

    // optional uint32 pack_type = 4;
    if (has_pack_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pack_type());
    }

    // required uint32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void welfare_gifts_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const welfare_gifts_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const welfare_gifts_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void welfare_gifts_rsp::MergeFrom(const welfare_gifts_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_0()) {
      set_first_0(from.first_0());
    }
    if (from.has_novice_code()) {
      set_novice_code(from.novice_code());
    }
    if (from.has_spread_code()) {
      set_spread_code(from.spread_code());
    }
    if (from.has_pack_type()) {
      set_pack_type(from.pack_type());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void welfare_gifts_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void welfare_gifts_rsp::CopyFrom(const welfare_gifts_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool welfare_gifts_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void welfare_gifts_rsp::Swap(welfare_gifts_rsp* other) {
  if (other != this) {
    std::swap(first_0_, other->first_0_);
    std::swap(novice_code_, other->novice_code_);
    std::swap(spread_code_, other->spread_code_);
    std::swap(pack_type_, other->pack_type_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata welfare_gifts_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = welfare_gifts_rsp_descriptor_;
  metadata.reflection = welfare_gifts_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int welfare_yellow_vip_req::kEveryDayFieldNumber;
const int welfare_yellow_vip_req::kGrowUpFieldNumber;
const int welfare_yellow_vip_req::kEverDayYearFieldNumber;
const int welfare_yellow_vip_req::kNoviceFieldNumber;
const int welfare_yellow_vip_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

welfare_yellow_vip_req::welfare_yellow_vip_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void welfare_yellow_vip_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

welfare_yellow_vip_req::welfare_yellow_vip_req(const welfare_yellow_vip_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void welfare_yellow_vip_req::SharedCtor() {
  _cached_size_ = 0;
  every_day_ = 0u;
  grow_up_ = 0u;
  ever_day_year_ = false;
  novice_ = false;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

welfare_yellow_vip_req::~welfare_yellow_vip_req() {
  SharedDtor();
}

void welfare_yellow_vip_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void welfare_yellow_vip_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* welfare_yellow_vip_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return welfare_yellow_vip_req_descriptor_;
}

const welfare_yellow_vip_req& welfare_yellow_vip_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ewelfare_2eproto();
  return *default_instance_;
}

welfare_yellow_vip_req* welfare_yellow_vip_req::default_instance_ = NULL;

welfare_yellow_vip_req* welfare_yellow_vip_req::New() const {
  return new welfare_yellow_vip_req;
}

void welfare_yellow_vip_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    every_day_ = 0u;
    grow_up_ = 0u;
    ever_day_year_ = false;
    novice_ = false;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool welfare_yellow_vip_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 every_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &every_day_)));
          set_has_every_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grow_up;
        break;
      }

      // optional uint32 grow_up = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grow_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grow_up_)));
          set_has_grow_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ever_day_year;
        break;
      }

      // optional bool ever_day_year = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ever_day_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ever_day_year_)));
          set_has_ever_day_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_novice;
        break;
      }

      // optional bool novice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_novice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &novice_)));
          set_has_novice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void welfare_yellow_vip_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 every_day = 1;
  if (has_every_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->every_day(), output);
  }

  // optional uint32 grow_up = 2;
  if (has_grow_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grow_up(), output);
  }

  // optional bool ever_day_year = 3;
  if (has_ever_day_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ever_day_year(), output);
  }

  // optional bool novice = 4;
  if (has_novice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->novice(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* welfare_yellow_vip_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 every_day = 1;
  if (has_every_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->every_day(), target);
  }

  // optional uint32 grow_up = 2;
  if (has_grow_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grow_up(), target);
  }

  // optional bool ever_day_year = 3;
  if (has_ever_day_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ever_day_year(), target);
  }

  // optional bool novice = 4;
  if (has_novice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->novice(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int welfare_yellow_vip_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 every_day = 1;
    if (has_every_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->every_day());
    }

    // optional uint32 grow_up = 2;
    if (has_grow_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grow_up());
    }

    // optional bool ever_day_year = 3;
    if (has_ever_day_year()) {
      total_size += 1 + 1;
    }

    // optional bool novice = 4;
    if (has_novice()) {
      total_size += 1 + 1;
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void welfare_yellow_vip_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const welfare_yellow_vip_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const welfare_yellow_vip_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void welfare_yellow_vip_req::MergeFrom(const welfare_yellow_vip_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_every_day()) {
      set_every_day(from.every_day());
    }
    if (from.has_grow_up()) {
      set_grow_up(from.grow_up());
    }
    if (from.has_ever_day_year()) {
      set_ever_day_year(from.ever_day_year());
    }
    if (from.has_novice()) {
      set_novice(from.novice());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void welfare_yellow_vip_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void welfare_yellow_vip_req::CopyFrom(const welfare_yellow_vip_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool welfare_yellow_vip_req::IsInitialized() const {

  return true;
}

void welfare_yellow_vip_req::Swap(welfare_yellow_vip_req* other) {
  if (other != this) {
    std::swap(every_day_, other->every_day_);
    std::swap(grow_up_, other->grow_up_);
    std::swap(ever_day_year_, other->ever_day_year_);
    std::swap(novice_, other->novice_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata welfare_yellow_vip_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = welfare_yellow_vip_req_descriptor_;
  metadata.reflection = welfare_yellow_vip_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int welfare_yellow_vip_rsp::kEveryDayFieldNumber;
const int welfare_yellow_vip_rsp::kGrowUpFieldNumber;
const int welfare_yellow_vip_rsp::kEverDayYearFieldNumber;
const int welfare_yellow_vip_rsp::kNoviceFieldNumber;
const int welfare_yellow_vip_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

welfare_yellow_vip_rsp::welfare_yellow_vip_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void welfare_yellow_vip_rsp::InitAsDefaultInstance() {
}

welfare_yellow_vip_rsp::welfare_yellow_vip_rsp(const welfare_yellow_vip_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void welfare_yellow_vip_rsp::SharedCtor() {
  _cached_size_ = 0;
  every_day_ = 0u;
  grow_up_ = 0u;
  ever_day_year_ = false;
  novice_ = false;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

welfare_yellow_vip_rsp::~welfare_yellow_vip_rsp() {
  SharedDtor();
}

void welfare_yellow_vip_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void welfare_yellow_vip_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* welfare_yellow_vip_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return welfare_yellow_vip_rsp_descriptor_;
}

const welfare_yellow_vip_rsp& welfare_yellow_vip_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ewelfare_2eproto();
  return *default_instance_;
}

welfare_yellow_vip_rsp* welfare_yellow_vip_rsp::default_instance_ = NULL;

welfare_yellow_vip_rsp* welfare_yellow_vip_rsp::New() const {
  return new welfare_yellow_vip_rsp;
}

void welfare_yellow_vip_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    every_day_ = 0u;
    grow_up_ = 0u;
    ever_day_year_ = false;
    novice_ = false;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool welfare_yellow_vip_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 every_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &every_day_)));
          set_has_every_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grow_up;
        break;
      }

      // optional uint32 grow_up = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grow_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grow_up_)));
          set_has_grow_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ever_day_year;
        break;
      }

      // optional bool ever_day_year = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ever_day_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ever_day_year_)));
          set_has_ever_day_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_novice;
        break;
      }

      // optional bool novice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_novice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &novice_)));
          set_has_novice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // required uint32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void welfare_yellow_vip_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 every_day = 1;
  if (has_every_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->every_day(), output);
  }

  // optional uint32 grow_up = 2;
  if (has_grow_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grow_up(), output);
  }

  // optional bool ever_day_year = 3;
  if (has_ever_day_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ever_day_year(), output);
  }

  // optional bool novice = 4;
  if (has_novice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->novice(), output);
  }

  // required uint32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* welfare_yellow_vip_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 every_day = 1;
  if (has_every_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->every_day(), target);
  }

  // optional uint32 grow_up = 2;
  if (has_grow_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grow_up(), target);
  }

  // optional bool ever_day_year = 3;
  if (has_ever_day_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ever_day_year(), target);
  }

  // optional bool novice = 4;
  if (has_novice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->novice(), target);
  }

  // required uint32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int welfare_yellow_vip_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 every_day = 1;
    if (has_every_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->every_day());
    }

    // optional uint32 grow_up = 2;
    if (has_grow_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grow_up());
    }

    // optional bool ever_day_year = 3;
    if (has_ever_day_year()) {
      total_size += 1 + 1;
    }

    // optional bool novice = 4;
    if (has_novice()) {
      total_size += 1 + 1;
    }

    // required uint32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void welfare_yellow_vip_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const welfare_yellow_vip_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const welfare_yellow_vip_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void welfare_yellow_vip_rsp::MergeFrom(const welfare_yellow_vip_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_every_day()) {
      set_every_day(from.every_day());
    }
    if (from.has_grow_up()) {
      set_grow_up(from.grow_up());
    }
    if (from.has_ever_day_year()) {
      set_ever_day_year(from.ever_day_year());
    }
    if (from.has_novice()) {
      set_novice(from.novice());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void welfare_yellow_vip_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void welfare_yellow_vip_rsp::CopyFrom(const welfare_yellow_vip_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool welfare_yellow_vip_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void welfare_yellow_vip_rsp::Swap(welfare_yellow_vip_rsp* other) {
  if (other != this) {
    std::swap(every_day_, other->every_day_);
    std::swap(grow_up_, other->grow_up_);
    std::swap(ever_day_year_, other->ever_day_year_);
    std::swap(novice_, other->novice_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata welfare_yellow_vip_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = welfare_yellow_vip_rsp_descriptor_;
  metadata.reflection = welfare_yellow_vip_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int online_gifts_req::kOnlineTimeFieldNumber;
const int online_gifts_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

online_gifts_req::online_gifts_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void online_gifts_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

online_gifts_req::online_gifts_req(const online_gifts_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void online_gifts_req::SharedCtor() {
  _cached_size_ = 0;
  online_time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

online_gifts_req::~online_gifts_req() {
  SharedDtor();
}

void online_gifts_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void online_gifts_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* online_gifts_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return online_gifts_req_descriptor_;
}

const online_gifts_req& online_gifts_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ewelfare_2eproto();
  return *default_instance_;
}

online_gifts_req* online_gifts_req::default_instance_ = NULL;

online_gifts_req* online_gifts_req::New() const {
  return new online_gifts_req;
}

void online_gifts_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    online_time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool online_gifts_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_time_)));
          set_has_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void online_gifts_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 online_time = 1;
  if (has_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* online_gifts_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 online_time = 1;
  if (has_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->online_time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int online_gifts_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_time = 1;
    if (has_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void online_gifts_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const online_gifts_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const online_gifts_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void online_gifts_req::MergeFrom(const online_gifts_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_time()) {
      set_online_time(from.online_time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void online_gifts_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void online_gifts_req::CopyFrom(const online_gifts_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool online_gifts_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void online_gifts_req::Swap(online_gifts_req* other) {
  if (other != this) {
    std::swap(online_time_, other->online_time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata online_gifts_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = online_gifts_req_descriptor_;
  metadata.reflection = online_gifts_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int online_gifts_rsp::kOnlineTimeFieldNumber;
const int online_gifts_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

online_gifts_rsp::online_gifts_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void online_gifts_rsp::InitAsDefaultInstance() {
}

online_gifts_rsp::online_gifts_rsp(const online_gifts_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void online_gifts_rsp::SharedCtor() {
  _cached_size_ = 0;
  online_time_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

online_gifts_rsp::~online_gifts_rsp() {
  SharedDtor();
}

void online_gifts_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void online_gifts_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* online_gifts_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return online_gifts_rsp_descriptor_;
}

const online_gifts_rsp& online_gifts_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ewelfare_2eproto();
  return *default_instance_;
}

online_gifts_rsp* online_gifts_rsp::default_instance_ = NULL;

online_gifts_rsp* online_gifts_rsp::New() const {
  return new online_gifts_rsp;
}

void online_gifts_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    online_time_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool online_gifts_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 online_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_time_)));
          set_has_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void online_gifts_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 online_time = 1;
  if (has_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_time(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* online_gifts_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 online_time = 1;
  if (has_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->online_time(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int online_gifts_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 online_time = 1;
    if (has_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_time());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void online_gifts_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const online_gifts_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const online_gifts_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void online_gifts_rsp::MergeFrom(const online_gifts_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_time()) {
      set_online_time(from.online_time());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void online_gifts_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void online_gifts_rsp::CopyFrom(const online_gifts_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool online_gifts_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void online_gifts_rsp::Swap(online_gifts_rsp* other) {
  if (other != this) {
    std::swap(online_time_, other->online_time_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata online_gifts_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = online_gifts_rsp_descriptor_;
  metadata.reflection = online_gifts_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_gifts_req::kRewardIdFieldNumber;
const int get_gifts_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

get_gifts_req::get_gifts_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_gifts_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

get_gifts_req::get_gifts_req(const get_gifts_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_gifts_req::SharedCtor() {
  _cached_size_ = 0;
  reward_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_gifts_req::~get_gifts_req() {
  SharedDtor();
}

void get_gifts_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void get_gifts_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_gifts_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_gifts_req_descriptor_;
}

const get_gifts_req& get_gifts_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ewelfare_2eproto();
  return *default_instance_;
}

get_gifts_req* get_gifts_req::default_instance_ = NULL;

get_gifts_req* get_gifts_req::New() const {
  return new get_gifts_req;
}

void get_gifts_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_gifts_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reward_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_gifts_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reward_id = 1;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reward_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_gifts_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reward_id = 1;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reward_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_gifts_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reward_id = 1;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_gifts_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_gifts_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_gifts_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_gifts_req::MergeFrom(const get_gifts_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_gifts_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_gifts_req::CopyFrom(const get_gifts_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_gifts_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void get_gifts_req::Swap(get_gifts_req* other) {
  if (other != this) {
    std::swap(reward_id_, other->reward_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_gifts_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_gifts_req_descriptor_;
  metadata.reflection = get_gifts_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_gifts_rsp::kRewardIdFieldNumber;
const int get_gifts_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

get_gifts_rsp::get_gifts_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_gifts_rsp::InitAsDefaultInstance() {
}

get_gifts_rsp::get_gifts_rsp(const get_gifts_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_gifts_rsp::SharedCtor() {
  _cached_size_ = 0;
  reward_id_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_gifts_rsp::~get_gifts_rsp() {
  SharedDtor();
}

void get_gifts_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_gifts_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_gifts_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_gifts_rsp_descriptor_;
}

const get_gifts_rsp& get_gifts_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ewelfare_2eproto();
  return *default_instance_;
}

get_gifts_rsp* get_gifts_rsp::default_instance_ = NULL;

get_gifts_rsp* get_gifts_rsp::New() const {
  return new get_gifts_rsp;
}

void get_gifts_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_id_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_gifts_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reward_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_gifts_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reward_id = 1;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reward_id(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_gifts_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reward_id = 1;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reward_id(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_gifts_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reward_id = 1;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_id());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_gifts_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_gifts_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_gifts_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_gifts_rsp::MergeFrom(const get_gifts_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_gifts_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_gifts_rsp::CopyFrom(const get_gifts_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_gifts_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void get_gifts_rsp::Swap(get_gifts_rsp* other) {
  if (other != this) {
    std::swap(reward_id_, other->reward_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_gifts_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_gifts_rsp_descriptor_;
  metadata.reflection = get_gifts_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
