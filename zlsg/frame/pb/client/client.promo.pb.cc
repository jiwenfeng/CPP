// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.promo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.promo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* promo_list_of_names_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  promo_list_of_names_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* promo_list_of_names_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  promo_list_of_names_reflection_ = NULL;
const ::google::protobuf::Descriptor* promo_list_of_names_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  promo_list_of_names_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* open_server_time_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  open_server_time_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* open_server_time_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  open_server_time_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* check_list_of_names_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  check_list_of_names_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* check_list_of_names_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  check_list_of_names_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2epromo_2eproto() {
  protobuf_AddDesc_client_2epromo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.promo.proto");
  GOOGLE_CHECK(file != NULL);
  promo_list_of_names_req_descriptor_ = file->message_type(0);
  static const int promo_list_of_names_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promo_list_of_names_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promo_list_of_names_req, svr_head_),
  };
  promo_list_of_names_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      promo_list_of_names_req_descriptor_,
      promo_list_of_names_req::default_instance_,
      promo_list_of_names_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promo_list_of_names_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promo_list_of_names_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(promo_list_of_names_req));
  promo_list_of_names_descriptor_ = file->message_type(1);
  static const int promo_list_of_names_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promo_list_of_names, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promo_list_of_names, reward_),
  };
  promo_list_of_names_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      promo_list_of_names_descriptor_,
      promo_list_of_names::default_instance_,
      promo_list_of_names_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promo_list_of_names, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promo_list_of_names, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(promo_list_of_names));
  promo_list_of_names_rsp_descriptor_ = file->message_type(2);
  static const int promo_list_of_names_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promo_list_of_names_rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promo_list_of_names_rsp, roles_),
  };
  promo_list_of_names_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      promo_list_of_names_rsp_descriptor_,
      promo_list_of_names_rsp::default_instance_,
      promo_list_of_names_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promo_list_of_names_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(promo_list_of_names_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(promo_list_of_names_rsp));
  open_server_time_req_descriptor_ = file->message_type(3);
  static const int open_server_time_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_server_time_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_server_time_req, svr_head_),
  };
  open_server_time_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      open_server_time_req_descriptor_,
      open_server_time_req::default_instance_,
      open_server_time_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_server_time_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_server_time_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(open_server_time_req));
  open_server_time_rsp_descriptor_ = file->message_type(4);
  static const int open_server_time_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_server_time_rsp, unixtime_),
  };
  open_server_time_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      open_server_time_rsp_descriptor_,
      open_server_time_rsp::default_instance_,
      open_server_time_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_server_time_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_server_time_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(open_server_time_rsp));
  check_list_of_names_req_descriptor_ = file->message_type(5);
  static const int check_list_of_names_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_req, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_req, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_req, family_id_),
  };
  check_list_of_names_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      check_list_of_names_req_descriptor_,
      check_list_of_names_req::default_instance_,
      check_list_of_names_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(check_list_of_names_req));
  check_list_of_names_rsp_descriptor_ = file->message_type(6);
  static const int check_list_of_names_rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_rsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_rsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_rsp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_rsp, check_),
  };
  check_list_of_names_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      check_list_of_names_rsp_descriptor_,
      check_list_of_names_rsp::default_instance_,
      check_list_of_names_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_list_of_names_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(check_list_of_names_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2epromo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    promo_list_of_names_req_descriptor_, &promo_list_of_names_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    promo_list_of_names_descriptor_, &promo_list_of_names::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    promo_list_of_names_rsp_descriptor_, &promo_list_of_names_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    open_server_time_req_descriptor_, &open_server_time_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    open_server_time_rsp_descriptor_, &open_server_time_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    check_list_of_names_req_descriptor_, &check_list_of_names_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    check_list_of_names_rsp_descriptor_, &check_list_of_names_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2epromo_2eproto() {
  delete promo_list_of_names_req::default_instance_;
  delete promo_list_of_names_req_reflection_;
  delete promo_list_of_names::default_instance_;
  delete promo_list_of_names_reflection_;
  delete promo_list_of_names_rsp::default_instance_;
  delete promo_list_of_names_rsp_reflection_;
  delete open_server_time_req::default_instance_;
  delete open_server_time_req_reflection_;
  delete open_server_time_rsp::default_instance_;
  delete open_server_time_rsp_reflection_;
  delete check_list_of_names_req::default_instance_;
  delete check_list_of_names_req_reflection_;
  delete check_list_of_names_rsp::default_instance_;
  delete check_list_of_names_rsp_reflection_;
}

void protobuf_AddDesc_client_2epromo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022client.promo.proto\022\006client\032\021client.com"
    "m.proto\"O\n\027promo_list_of_names_req\022\014\n\004ty"
    "pe\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.ser"
    "ver_head\"6\n\023promo_list_of_names\022\017\n\007role_"
    "id\030\001 \002(\r\022\016\n\006reward\030\002 \002(\r\"S\n\027promo_list_o"
    "f_names_rsp\022\014\n\004type\030\001 \002(\r\022*\n\005roles\030\002 \003(\013"
    "2\033.client.promo_list_of_names\"P\n\024open_se"
    "rver_time_req\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_h"
    "ead\030\350\007 \001(\0132\023.client.server_head\"(\n\024open_"
    "server_time_rsp\022\020\n\010unixtime\030\001 \002(\r\"i\n\027che"
    "ck_list_of_names_req\022\014\n\004type\030\001 \002(\r\022\017\n\007ro"
    "le_id\030\002 \002(\r\022\014\n\004rank\030\003 \002(\r\022\016\n\006reward\030\004 \002("
    "\r\022\021\n\tfamily_id\030\005 \001(\r\"e\n\027check_list_of_na"
    "mes_rsp\022\014\n\004type\030\001 \002(\r\022\017\n\007role_id\030\002 \002(\r\022\014"
    "\n\004rank\030\003 \002(\r\022\016\n\006reward\030\004 \002(\r\022\r\n\005check\030\005 "
    "\002(\010", 603);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.promo.proto", &protobuf_RegisterTypes);
  promo_list_of_names_req::default_instance_ = new promo_list_of_names_req();
  promo_list_of_names::default_instance_ = new promo_list_of_names();
  promo_list_of_names_rsp::default_instance_ = new promo_list_of_names_rsp();
  open_server_time_req::default_instance_ = new open_server_time_req();
  open_server_time_rsp::default_instance_ = new open_server_time_rsp();
  check_list_of_names_req::default_instance_ = new check_list_of_names_req();
  check_list_of_names_rsp::default_instance_ = new check_list_of_names_rsp();
  promo_list_of_names_req::default_instance_->InitAsDefaultInstance();
  promo_list_of_names::default_instance_->InitAsDefaultInstance();
  promo_list_of_names_rsp::default_instance_->InitAsDefaultInstance();
  open_server_time_req::default_instance_->InitAsDefaultInstance();
  open_server_time_rsp::default_instance_->InitAsDefaultInstance();
  check_list_of_names_req::default_instance_->InitAsDefaultInstance();
  check_list_of_names_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2epromo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2epromo_2eproto {
  StaticDescriptorInitializer_client_2epromo_2eproto() {
    protobuf_AddDesc_client_2epromo_2eproto();
  }
} static_descriptor_initializer_client_2epromo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int promo_list_of_names_req::kTypeFieldNumber;
const int promo_list_of_names_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

promo_list_of_names_req::promo_list_of_names_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void promo_list_of_names_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

promo_list_of_names_req::promo_list_of_names_req(const promo_list_of_names_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void promo_list_of_names_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

promo_list_of_names_req::~promo_list_of_names_req() {
  SharedDtor();
}

void promo_list_of_names_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void promo_list_of_names_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* promo_list_of_names_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return promo_list_of_names_req_descriptor_;
}

const promo_list_of_names_req& promo_list_of_names_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epromo_2eproto();
  return *default_instance_;
}

promo_list_of_names_req* promo_list_of_names_req::default_instance_ = NULL;

promo_list_of_names_req* promo_list_of_names_req::New() const {
  return new promo_list_of_names_req;
}

void promo_list_of_names_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool promo_list_of_names_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void promo_list_of_names_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* promo_list_of_names_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int promo_list_of_names_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void promo_list_of_names_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const promo_list_of_names_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const promo_list_of_names_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void promo_list_of_names_req::MergeFrom(const promo_list_of_names_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void promo_list_of_names_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void promo_list_of_names_req::CopyFrom(const promo_list_of_names_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool promo_list_of_names_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void promo_list_of_names_req::Swap(promo_list_of_names_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata promo_list_of_names_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = promo_list_of_names_req_descriptor_;
  metadata.reflection = promo_list_of_names_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int promo_list_of_names::kRoleIdFieldNumber;
const int promo_list_of_names::kRewardFieldNumber;
#endif  // !_MSC_VER

promo_list_of_names::promo_list_of_names()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void promo_list_of_names::InitAsDefaultInstance() {
}

promo_list_of_names::promo_list_of_names(const promo_list_of_names& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void promo_list_of_names::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

promo_list_of_names::~promo_list_of_names() {
  SharedDtor();
}

void promo_list_of_names::SharedDtor() {
  if (this != default_instance_) {
  }
}

void promo_list_of_names::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* promo_list_of_names::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return promo_list_of_names_descriptor_;
}

const promo_list_of_names& promo_list_of_names::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epromo_2eproto();
  return *default_instance_;
}

promo_list_of_names* promo_list_of_names::default_instance_ = NULL;

promo_list_of_names* promo_list_of_names::New() const {
  return new promo_list_of_names;
}

void promo_list_of_names::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool promo_list_of_names::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward;
        break;
      }

      // required uint32 reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void promo_list_of_names::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* promo_list_of_names::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int promo_list_of_names::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void promo_list_of_names::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const promo_list_of_names* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const promo_list_of_names*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void promo_list_of_names::MergeFrom(const promo_list_of_names& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void promo_list_of_names::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void promo_list_of_names::CopyFrom(const promo_list_of_names& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool promo_list_of_names::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void promo_list_of_names::Swap(promo_list_of_names* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata promo_list_of_names::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = promo_list_of_names_descriptor_;
  metadata.reflection = promo_list_of_names_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int promo_list_of_names_rsp::kTypeFieldNumber;
const int promo_list_of_names_rsp::kRolesFieldNumber;
#endif  // !_MSC_VER

promo_list_of_names_rsp::promo_list_of_names_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void promo_list_of_names_rsp::InitAsDefaultInstance() {
}

promo_list_of_names_rsp::promo_list_of_names_rsp(const promo_list_of_names_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void promo_list_of_names_rsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

promo_list_of_names_rsp::~promo_list_of_names_rsp() {
  SharedDtor();
}

void promo_list_of_names_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void promo_list_of_names_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* promo_list_of_names_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return promo_list_of_names_rsp_descriptor_;
}

const promo_list_of_names_rsp& promo_list_of_names_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epromo_2eproto();
  return *default_instance_;
}

promo_list_of_names_rsp* promo_list_of_names_rsp::default_instance_ = NULL;

promo_list_of_names_rsp* promo_list_of_names_rsp::New() const {
  return new promo_list_of_names_rsp;
}

void promo_list_of_names_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool promo_list_of_names_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        break;
      }

      // repeated .client.promo_list_of_names roles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void promo_list_of_names_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .client.promo_list_of_names roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* promo_list_of_names_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .client.promo_list_of_names roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int promo_list_of_names_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .client.promo_list_of_names roles = 2;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void promo_list_of_names_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const promo_list_of_names_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const promo_list_of_names_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void promo_list_of_names_rsp::MergeFrom(const promo_list_of_names_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void promo_list_of_names_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void promo_list_of_names_rsp::CopyFrom(const promo_list_of_names_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool promo_list_of_names_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void promo_list_of_names_rsp::Swap(promo_list_of_names_rsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata promo_list_of_names_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = promo_list_of_names_rsp_descriptor_;
  metadata.reflection = promo_list_of_names_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int open_server_time_req::kUnixtimeFieldNumber;
const int open_server_time_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

open_server_time_req::open_server_time_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void open_server_time_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

open_server_time_req::open_server_time_req(const open_server_time_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void open_server_time_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

open_server_time_req::~open_server_time_req() {
  SharedDtor();
}

void open_server_time_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void open_server_time_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_server_time_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return open_server_time_req_descriptor_;
}

const open_server_time_req& open_server_time_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epromo_2eproto();
  return *default_instance_;
}

open_server_time_req* open_server_time_req::default_instance_ = NULL;

open_server_time_req* open_server_time_req::New() const {
  return new open_server_time_req;
}

void open_server_time_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool open_server_time_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void open_server_time_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* open_server_time_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int open_server_time_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_server_time_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const open_server_time_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const open_server_time_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void open_server_time_req::MergeFrom(const open_server_time_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void open_server_time_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_server_time_req::CopyFrom(const open_server_time_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_server_time_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void open_server_time_req::Swap(open_server_time_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata open_server_time_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = open_server_time_req_descriptor_;
  metadata.reflection = open_server_time_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int open_server_time_rsp::kUnixtimeFieldNumber;
#endif  // !_MSC_VER

open_server_time_rsp::open_server_time_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void open_server_time_rsp::InitAsDefaultInstance() {
}

open_server_time_rsp::open_server_time_rsp(const open_server_time_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void open_server_time_rsp::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

open_server_time_rsp::~open_server_time_rsp() {
  SharedDtor();
}

void open_server_time_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void open_server_time_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_server_time_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return open_server_time_rsp_descriptor_;
}

const open_server_time_rsp& open_server_time_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epromo_2eproto();
  return *default_instance_;
}

open_server_time_rsp* open_server_time_rsp::default_instance_ = NULL;

open_server_time_rsp* open_server_time_rsp::New() const {
  return new open_server_time_rsp;
}

void open_server_time_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool open_server_time_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void open_server_time_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* open_server_time_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int open_server_time_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_server_time_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const open_server_time_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const open_server_time_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void open_server_time_rsp::MergeFrom(const open_server_time_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void open_server_time_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_server_time_rsp::CopyFrom(const open_server_time_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_server_time_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void open_server_time_rsp::Swap(open_server_time_rsp* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata open_server_time_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = open_server_time_rsp_descriptor_;
  metadata.reflection = open_server_time_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int check_list_of_names_req::kTypeFieldNumber;
const int check_list_of_names_req::kRoleIdFieldNumber;
const int check_list_of_names_req::kRankFieldNumber;
const int check_list_of_names_req::kRewardFieldNumber;
const int check_list_of_names_req::kFamilyIdFieldNumber;
#endif  // !_MSC_VER

check_list_of_names_req::check_list_of_names_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void check_list_of_names_req::InitAsDefaultInstance() {
}

check_list_of_names_req::check_list_of_names_req(const check_list_of_names_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void check_list_of_names_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  role_id_ = 0u;
  rank_ = 0u;
  reward_ = 0u;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

check_list_of_names_req::~check_list_of_names_req() {
  SharedDtor();
}

void check_list_of_names_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void check_list_of_names_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* check_list_of_names_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return check_list_of_names_req_descriptor_;
}

const check_list_of_names_req& check_list_of_names_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epromo_2eproto();
  return *default_instance_;
}

check_list_of_names_req* check_list_of_names_req::default_instance_ = NULL;

check_list_of_names_req* check_list_of_names_req::New() const {
  return new check_list_of_names_req;
}

void check_list_of_names_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    role_id_ = 0u;
    rank_ = 0u;
    reward_ = 0u;
    family_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool check_list_of_names_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // required uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward;
        break;
      }

      // required uint32 reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_family_id;
        break;
      }

      // optional uint32 family_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void check_list_of_names_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // required uint32 reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reward(), output);
  }

  // optional uint32 family_id = 5;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->family_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* check_list_of_names_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // required uint32 reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reward(), target);
  }

  // optional uint32 family_id = 5;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->family_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int check_list_of_names_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // optional uint32 family_id = 5;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void check_list_of_names_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const check_list_of_names_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const check_list_of_names_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void check_list_of_names_req::MergeFrom(const check_list_of_names_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void check_list_of_names_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void check_list_of_names_req::CopyFrom(const check_list_of_names_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_list_of_names_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void check_list_of_names_req::Swap(check_list_of_names_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    std::swap(rank_, other->rank_);
    std::swap(reward_, other->reward_);
    std::swap(family_id_, other->family_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata check_list_of_names_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = check_list_of_names_req_descriptor_;
  metadata.reflection = check_list_of_names_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int check_list_of_names_rsp::kTypeFieldNumber;
const int check_list_of_names_rsp::kRoleIdFieldNumber;
const int check_list_of_names_rsp::kRankFieldNumber;
const int check_list_of_names_rsp::kRewardFieldNumber;
const int check_list_of_names_rsp::kCheckFieldNumber;
#endif  // !_MSC_VER

check_list_of_names_rsp::check_list_of_names_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void check_list_of_names_rsp::InitAsDefaultInstance() {
}

check_list_of_names_rsp::check_list_of_names_rsp(const check_list_of_names_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void check_list_of_names_rsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  role_id_ = 0u;
  rank_ = 0u;
  reward_ = 0u;
  check_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

check_list_of_names_rsp::~check_list_of_names_rsp() {
  SharedDtor();
}

void check_list_of_names_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void check_list_of_names_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* check_list_of_names_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return check_list_of_names_rsp_descriptor_;
}

const check_list_of_names_rsp& check_list_of_names_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epromo_2eproto();
  return *default_instance_;
}

check_list_of_names_rsp* check_list_of_names_rsp::default_instance_ = NULL;

check_list_of_names_rsp* check_list_of_names_rsp::New() const {
  return new check_list_of_names_rsp;
}

void check_list_of_names_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    role_id_ = 0u;
    rank_ = 0u;
    reward_ = 0u;
    check_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool check_list_of_names_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // required uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward;
        break;
      }

      // required uint32 reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_check;
        break;
      }

      // required bool check = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void check_list_of_names_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // required uint32 reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reward(), output);
  }

  // required bool check = 5;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->check(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* check_list_of_names_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // required uint32 reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reward(), target);
  }

  // required bool check = 5;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->check(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int check_list_of_names_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // required bool check = 5;
    if (has_check()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void check_list_of_names_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const check_list_of_names_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const check_list_of_names_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void check_list_of_names_rsp::MergeFrom(const check_list_of_names_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_check()) {
      set_check(from.check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void check_list_of_names_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void check_list_of_names_rsp::CopyFrom(const check_list_of_names_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_list_of_names_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void check_list_of_names_rsp::Swap(check_list_of_names_rsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    std::swap(rank_, other->rank_);
    std::swap(reward_, other->reward_);
    std::swap(check_, other->check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata check_list_of_names_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = check_list_of_names_rsp_descriptor_;
  metadata.reflection = check_list_of_names_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
