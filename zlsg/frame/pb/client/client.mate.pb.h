// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.mate.proto

#ifndef PROTOBUF_client_2emate_2eproto__INCLUDED
#define PROTOBUF_client_2emate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2emate_2eproto();
void protobuf_AssignDesc_client_2emate_2eproto();
void protobuf_ShutdownFile_client_2emate_2eproto();

class mate_info_req;
class mate_info_rsp;
class mate_invite_req;
class mate_invite_rsp;
class mate_create_msg;
class depth_mate_req;
class depth_mate_msg;
class depth_mate_rsp;
class depth_mate_end_req;
class depth_mate_end_msg;
class mate_remove_req;
class mate_remove_msg;
class mate_award_req;
class mate_award_rsp;
class mate_award_via;

enum MATE_OPERATE_RET_E {
  MORE_SUCCESS = 0,
  MORE_MATE_OFFLINE = 1,
  MORE_MATE_LIMIT = 2,
  MORE_MATERIAL_LIMIT = 3,
  MORE_MATE_DENEY = 4,
  MORE_INTIMACY_LIMIT = 5,
  MORE_NO_INGOT = 6,
  MORE_TIMES_LIMIT = 7,
  MORE_NO_MATE = 8,
  MORE_IN_DEPTH = 9,
  MORE_HAD_MATE = 10,
  MORE_DST_HAD_MATE = 11,
  MORE_CANT_SELF_MATE = 12,
  MORE_OTHER_NOT_MATE = 13,
  MORE_OPERATE_DENY = 14,
  MORE_DEPTH_TIME_LIMIT = 15,
  MORE_NOT_IN_DEPTH = 16,
  MORE_NEED_ADVANCE = 17,
  MORE_NO_TAEL = 18
};
bool MATE_OPERATE_RET_E_IsValid(int value);
const MATE_OPERATE_RET_E MATE_OPERATE_RET_E_MIN = MORE_SUCCESS;
const MATE_OPERATE_RET_E MATE_OPERATE_RET_E_MAX = MORE_NO_TAEL;
const int MATE_OPERATE_RET_E_ARRAYSIZE = MATE_OPERATE_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* MATE_OPERATE_RET_E_descriptor();
inline const ::std::string& MATE_OPERATE_RET_E_Name(MATE_OPERATE_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    MATE_OPERATE_RET_E_descriptor(), value);
}
inline bool MATE_OPERATE_RET_E_Parse(
    const ::std::string& name, MATE_OPERATE_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MATE_OPERATE_RET_E>(
    MATE_OPERATE_RET_E_descriptor(), name, value);
}
// ===================================================================

class mate_info_req : public ::google::protobuf::Message {
 public:
  mate_info_req();
  virtual ~mate_info_req();

  mate_info_req(const mate_info_req& from);

  inline mate_info_req& operator=(const mate_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mate_info_req& default_instance();

  void Swap(mate_info_req* other);

  // implements Message ----------------------------------------------

  mate_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mate_info_req& from);
  void MergeFrom(const mate_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 svr_time = 1;
  inline bool has_svr_time() const;
  inline void clear_svr_time();
  static const int kSvrTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_time() const;
  inline void set_svr_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.mate_info_req)
 private:
  inline void set_has_svr_time();
  inline void clear_has_svr_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 svr_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static mate_info_req* default_instance_;
};
// -------------------------------------------------------------------

class mate_info_rsp : public ::google::protobuf::Message {
 public:
  mate_info_rsp();
  virtual ~mate_info_rsp();

  mate_info_rsp(const mate_info_rsp& from);

  inline mate_info_rsp& operator=(const mate_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mate_info_rsp& default_instance();

  void Swap(mate_info_rsp* other);

  // implements Message ----------------------------------------------

  mate_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mate_info_rsp& from);
  void MergeFrom(const mate_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mate_role_id = 1;
  inline bool has_mate_role_id() const;
  inline void clear_mate_role_id();
  static const int kMateRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mate_role_id() const;
  inline void set_mate_role_id(::google::protobuf::uint32 value);

  // optional uint32 today_times = 2;
  inline bool has_today_times() const;
  inline void clear_today_times();
  static const int kTodayTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 today_times() const;
  inline void set_today_times(::google::protobuf::uint32 value);

  // optional uint32 last_time = 3;
  inline bool has_last_time() const;
  inline void clear_last_time();
  static const int kLastTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 last_time() const;
  inline void set_last_time(::google::protobuf::uint32 value);

  // optional uint32 miss_times = 4;
  inline bool has_miss_times() const;
  inline void clear_miss_times();
  static const int kMissTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 miss_times() const;
  inline void set_miss_times(::google::protobuf::uint32 value);

  // optional uint32 total_times = 5;
  inline bool has_total_times() const;
  inline void clear_total_times();
  static const int kTotalTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 total_times() const;
  inline void set_total_times(::google::protobuf::uint32 value);

  // optional uint32 depth_time = 6;
  inline bool has_depth_time() const;
  inline void clear_depth_time();
  static const int kDepthTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 depth_time() const;
  inline void set_depth_time(::google::protobuf::uint32 value);

  // optional uint32 advance_depth = 7;
  inline bool has_advance_depth() const;
  inline void clear_advance_depth();
  static const int kAdvanceDepthFieldNumber = 7;
  inline ::google::protobuf::uint32 advance_depth() const;
  inline void set_advance_depth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.mate_info_rsp)
 private:
  inline void set_has_mate_role_id();
  inline void clear_has_mate_role_id();
  inline void set_has_today_times();
  inline void clear_has_today_times();
  inline void set_has_last_time();
  inline void clear_has_last_time();
  inline void set_has_miss_times();
  inline void clear_has_miss_times();
  inline void set_has_total_times();
  inline void clear_has_total_times();
  inline void set_has_depth_time();
  inline void clear_has_depth_time();
  inline void set_has_advance_depth();
  inline void clear_has_advance_depth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mate_role_id_;
  ::google::protobuf::uint32 today_times_;
  ::google::protobuf::uint32 last_time_;
  ::google::protobuf::uint32 miss_times_;
  ::google::protobuf::uint32 total_times_;
  ::google::protobuf::uint32 depth_time_;
  ::google::protobuf::uint32 advance_depth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static mate_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class mate_invite_req : public ::google::protobuf::Message {
 public:
  mate_invite_req();
  virtual ~mate_invite_req();

  mate_invite_req(const mate_invite_req& from);

  inline mate_invite_req& operator=(const mate_invite_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mate_invite_req& default_instance();

  void Swap(mate_invite_req* other);

  // implements Message ----------------------------------------------

  mate_invite_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mate_invite_req& from);
  void MergeFrom(const mate_invite_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mate_role_id = 1;
  inline bool has_mate_role_id() const;
  inline void clear_mate_role_id();
  static const int kMateRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mate_role_id() const;
  inline void set_mate_role_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.mate_invite_req)
 private:
  inline void set_has_mate_role_id();
  inline void clear_has_mate_role_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 mate_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static mate_invite_req* default_instance_;
};
// -------------------------------------------------------------------

class mate_invite_rsp : public ::google::protobuf::Message {
 public:
  mate_invite_rsp();
  virtual ~mate_invite_rsp();

  mate_invite_rsp(const mate_invite_rsp& from);

  inline mate_invite_rsp& operator=(const mate_invite_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mate_invite_rsp& default_instance();

  void Swap(mate_invite_rsp* other);

  // implements Message ----------------------------------------------

  mate_invite_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mate_invite_rsp& from);
  void MergeFrom(const mate_invite_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.MATE_OPERATE_RET_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::MATE_OPERATE_RET_E ret() const;
  inline void set_ret(::client::MATE_OPERATE_RET_E value);

  // optional uint32 mate_role_id = 2;
  inline bool has_mate_role_id() const;
  inline void clear_mate_role_id();
  static const int kMateRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mate_role_id() const;
  inline void set_mate_role_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.mate_invite_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_mate_role_id();
  inline void clear_has_mate_role_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 mate_role_id_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static mate_invite_rsp* default_instance_;
};
// -------------------------------------------------------------------

class mate_create_msg : public ::google::protobuf::Message {
 public:
  mate_create_msg();
  virtual ~mate_create_msg();

  mate_create_msg(const mate_create_msg& from);

  inline mate_create_msg& operator=(const mate_create_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mate_create_msg& default_instance();

  void Swap(mate_create_msg* other);

  // implements Message ----------------------------------------------

  mate_create_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mate_create_msg& from);
  void MergeFrom(const mate_create_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 mate_role_id = 2;
  inline bool has_mate_role_id() const;
  inline void clear_mate_role_id();
  static const int kMateRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mate_role_id() const;
  inline void set_mate_role_id(::google::protobuf::uint32 value);

  // required .client.MATE_OPERATE_RET_E ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::client::MATE_OPERATE_RET_E ret() const;
  inline void set_ret(::client::MATE_OPERATE_RET_E value);

  // @@protoc_insertion_point(class_scope:client.mate_create_msg)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_mate_role_id();
  inline void clear_has_mate_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 mate_role_id_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static mate_create_msg* default_instance_;
};
// -------------------------------------------------------------------

class depth_mate_req : public ::google::protobuf::Message {
 public:
  depth_mate_req();
  virtual ~depth_mate_req();

  depth_mate_req(const depth_mate_req& from);

  inline depth_mate_req& operator=(const depth_mate_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const depth_mate_req& default_instance();

  void Swap(depth_mate_req* other);

  // implements Message ----------------------------------------------

  depth_mate_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const depth_mate_req& from);
  void MergeFrom(const depth_mate_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 svr_time = 1;
  inline bool has_svr_time() const;
  inline void clear_svr_time();
  static const int kSvrTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_time() const;
  inline void set_svr_time(::google::protobuf::uint32 value);

  // optional bool advanced = 2 [default = true];
  inline bool has_advanced() const;
  inline void clear_advanced();
  static const int kAdvancedFieldNumber = 2;
  inline bool advanced() const;
  inline void set_advanced(bool value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.depth_mate_req)
 private:
  inline void set_has_svr_time();
  inline void clear_has_svr_time();
  inline void set_has_advanced();
  inline void clear_has_advanced();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svr_time_;
  bool advanced_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static depth_mate_req* default_instance_;
};
// -------------------------------------------------------------------

class depth_mate_msg : public ::google::protobuf::Message {
 public:
  depth_mate_msg();
  virtual ~depth_mate_msg();

  depth_mate_msg(const depth_mate_msg& from);

  inline depth_mate_msg& operator=(const depth_mate_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const depth_mate_msg& default_instance();

  void Swap(depth_mate_msg* other);

  // implements Message ----------------------------------------------

  depth_mate_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const depth_mate_msg& from);
  void MergeFrom(const depth_mate_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 mate_role_id = 2;
  inline bool has_mate_role_id() const;
  inline void clear_mate_role_id();
  static const int kMateRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mate_role_id() const;
  inline void set_mate_role_id(::google::protobuf::uint32 value);

  // required bool need_ingot = 3;
  inline bool has_need_ingot() const;
  inline void clear_need_ingot();
  static const int kNeedIngotFieldNumber = 3;
  inline bool need_ingot() const;
  inline void set_need_ingot(bool value);

  // required .client.MATE_OPERATE_RET_E ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::client::MATE_OPERATE_RET_E ret() const;
  inline void set_ret(::client::MATE_OPERATE_RET_E value);

  // @@protoc_insertion_point(class_scope:client.depth_mate_msg)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_mate_role_id();
  inline void clear_has_mate_role_id();
  inline void set_has_need_ingot();
  inline void clear_has_need_ingot();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 mate_role_id_;
  bool need_ingot_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static depth_mate_msg* default_instance_;
};
// -------------------------------------------------------------------

class depth_mate_rsp : public ::google::protobuf::Message {
 public:
  depth_mate_rsp();
  virtual ~depth_mate_rsp();

  depth_mate_rsp(const depth_mate_rsp& from);

  inline depth_mate_rsp& operator=(const depth_mate_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const depth_mate_rsp& default_instance();

  void Swap(depth_mate_rsp* other);

  // implements Message ----------------------------------------------

  depth_mate_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const depth_mate_rsp& from);
  void MergeFrom(const depth_mate_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.MATE_OPERATE_RET_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::MATE_OPERATE_RET_E ret() const;
  inline void set_ret(::client::MATE_OPERATE_RET_E value);

  // optional bool advanced = 2 [default = true];
  inline bool has_advanced() const;
  inline void clear_advanced();
  static const int kAdvancedFieldNumber = 2;
  inline bool advanced() const;
  inline void set_advanced(bool value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.depth_mate_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_advanced();
  inline void clear_has_advanced();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  bool advanced_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static depth_mate_rsp* default_instance_;
};
// -------------------------------------------------------------------

class depth_mate_end_req : public ::google::protobuf::Message {
 public:
  depth_mate_end_req();
  virtual ~depth_mate_end_req();

  depth_mate_end_req(const depth_mate_end_req& from);

  inline depth_mate_end_req& operator=(const depth_mate_end_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const depth_mate_end_req& default_instance();

  void Swap(depth_mate_end_req* other);

  // implements Message ----------------------------------------------

  depth_mate_end_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const depth_mate_end_req& from);
  void MergeFrom(const depth_mate_end_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 svr_time = 1;
  inline bool has_svr_time() const;
  inline void clear_svr_time();
  static const int kSvrTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_time() const;
  inline void set_svr_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.depth_mate_end_req)
 private:
  inline void set_has_svr_time();
  inline void clear_has_svr_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 svr_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static depth_mate_end_req* default_instance_;
};
// -------------------------------------------------------------------

class depth_mate_end_msg : public ::google::protobuf::Message {
 public:
  depth_mate_end_msg();
  virtual ~depth_mate_end_msg();

  depth_mate_end_msg(const depth_mate_end_msg& from);

  inline depth_mate_end_msg& operator=(const depth_mate_end_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const depth_mate_end_msg& default_instance();

  void Swap(depth_mate_end_msg* other);

  // implements Message ----------------------------------------------

  depth_mate_end_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const depth_mate_end_msg& from);
  void MergeFrom(const depth_mate_end_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.MATE_OPERATE_RET_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::MATE_OPERATE_RET_E ret() const;
  inline void set_ret(::client::MATE_OPERATE_RET_E value);

  // optional uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 mate_role_id = 3;
  inline bool has_mate_role_id() const;
  inline void clear_mate_role_id();
  static const int kMateRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 mate_role_id() const;
  inline void set_mate_role_id(::google::protobuf::uint32 value);

  // optional bool advanced = 4;
  inline bool has_advanced() const;
  inline void clear_advanced();
  static const int kAdvancedFieldNumber = 4;
  inline bool advanced() const;
  inline void set_advanced(bool value);

  // @@protoc_insertion_point(class_scope:client.depth_mate_end_msg)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_mate_role_id();
  inline void clear_has_mate_role_id();
  inline void set_has_advanced();
  inline void clear_has_advanced();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 mate_role_id_;
  bool advanced_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static depth_mate_end_msg* default_instance_;
};
// -------------------------------------------------------------------

class mate_remove_req : public ::google::protobuf::Message {
 public:
  mate_remove_req();
  virtual ~mate_remove_req();

  mate_remove_req(const mate_remove_req& from);

  inline mate_remove_req& operator=(const mate_remove_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mate_remove_req& default_instance();

  void Swap(mate_remove_req* other);

  // implements Message ----------------------------------------------

  mate_remove_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mate_remove_req& from);
  void MergeFrom(const mate_remove_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 svr_time = 1;
  inline bool has_svr_time() const;
  inline void clear_svr_time();
  static const int kSvrTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_time() const;
  inline void set_svr_time(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.mate_remove_req)
 private:
  inline void set_has_svr_time();
  inline void clear_has_svr_time();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 svr_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static mate_remove_req* default_instance_;
};
// -------------------------------------------------------------------

class mate_remove_msg : public ::google::protobuf::Message {
 public:
  mate_remove_msg();
  virtual ~mate_remove_msg();

  mate_remove_msg(const mate_remove_msg& from);

  inline mate_remove_msg& operator=(const mate_remove_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mate_remove_msg& default_instance();

  void Swap(mate_remove_msg* other);

  // implements Message ----------------------------------------------

  mate_remove_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mate_remove_msg& from);
  void MergeFrom(const mate_remove_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.MATE_OPERATE_RET_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::MATE_OPERATE_RET_E ret() const;
  inline void set_ret(::client::MATE_OPERATE_RET_E value);

  // optional uint32 role_id = 2 [default = 0];
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.mate_remove_msg)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static mate_remove_msg* default_instance_;
};
// -------------------------------------------------------------------

class mate_award_req : public ::google::protobuf::Message {
 public:
  mate_award_req();
  virtual ~mate_award_req();

  mate_award_req(const mate_award_req& from);

  inline mate_award_req& operator=(const mate_award_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mate_award_req& default_instance();

  void Swap(mate_award_req* other);

  // implements Message ----------------------------------------------

  mate_award_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mate_award_req& from);
  void MergeFrom(const mate_award_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.mate_award_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static mate_award_req* default_instance_;
};
// -------------------------------------------------------------------

class mate_award_rsp : public ::google::protobuf::Message {
 public:
  mate_award_rsp();
  virtual ~mate_award_rsp();

  mate_award_rsp(const mate_award_rsp& from);

  inline mate_award_rsp& operator=(const mate_award_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mate_award_rsp& default_instance();

  void Swap(mate_award_rsp* other);

  // implements Message ----------------------------------------------

  mate_award_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mate_award_rsp& from);
  void MergeFrom(const mate_award_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.mate_award_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static mate_award_rsp* default_instance_;
};
// -------------------------------------------------------------------

class mate_award_via : public ::google::protobuf::Message {
 public:
  mate_award_via();
  virtual ~mate_award_via();

  mate_award_via(const mate_award_via& from);

  inline mate_award_via& operator=(const mate_award_via& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mate_award_via& default_instance();

  void Swap(mate_award_via* other);

  // implements Message ----------------------------------------------

  mate_award_via* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mate_award_via& from);
  void MergeFrom(const mate_award_via& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool check = 1;
  inline bool has_check() const;
  inline void clear_check();
  static const int kCheckFieldNumber = 1;
  inline bool check() const;
  inline void set_check(bool value);

  // required uint32 award_id = 2;
  inline bool has_award_id() const;
  inline void clear_award_id();
  static const int kAwardIdFieldNumber = 2;
  inline ::google::protobuf::uint32 award_id() const;
  inline void set_award_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.mate_award_via)
 private:
  inline void set_has_check();
  inline void clear_has_check();
  inline void set_has_award_id();
  inline void clear_has_award_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool check_;
  ::google::protobuf::uint32 award_id_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emate_2eproto();
  friend void protobuf_AssignDesc_client_2emate_2eproto();
  friend void protobuf_ShutdownFile_client_2emate_2eproto();

  void InitAsDefaultInstance();
  static mate_award_via* default_instance_;
};
// ===================================================================


// ===================================================================

// mate_info_req

// required uint32 svr_time = 1;
inline bool mate_info_req::has_svr_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mate_info_req::set_has_svr_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mate_info_req::clear_has_svr_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mate_info_req::clear_svr_time() {
  svr_time_ = 0u;
  clear_has_svr_time();
}
inline ::google::protobuf::uint32 mate_info_req::svr_time() const {
  return svr_time_;
}
inline void mate_info_req::set_svr_time(::google::protobuf::uint32 value) {
  set_has_svr_time();
  svr_time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool mate_info_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mate_info_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mate_info_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mate_info_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& mate_info_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* mate_info_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* mate_info_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void mate_info_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// mate_info_rsp

// required uint32 mate_role_id = 1;
inline bool mate_info_rsp::has_mate_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mate_info_rsp::set_has_mate_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mate_info_rsp::clear_has_mate_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mate_info_rsp::clear_mate_role_id() {
  mate_role_id_ = 0u;
  clear_has_mate_role_id();
}
inline ::google::protobuf::uint32 mate_info_rsp::mate_role_id() const {
  return mate_role_id_;
}
inline void mate_info_rsp::set_mate_role_id(::google::protobuf::uint32 value) {
  set_has_mate_role_id();
  mate_role_id_ = value;
}

// optional uint32 today_times = 2;
inline bool mate_info_rsp::has_today_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mate_info_rsp::set_has_today_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mate_info_rsp::clear_has_today_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mate_info_rsp::clear_today_times() {
  today_times_ = 0u;
  clear_has_today_times();
}
inline ::google::protobuf::uint32 mate_info_rsp::today_times() const {
  return today_times_;
}
inline void mate_info_rsp::set_today_times(::google::protobuf::uint32 value) {
  set_has_today_times();
  today_times_ = value;
}

// optional uint32 last_time = 3;
inline bool mate_info_rsp::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mate_info_rsp::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mate_info_rsp::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mate_info_rsp::clear_last_time() {
  last_time_ = 0u;
  clear_has_last_time();
}
inline ::google::protobuf::uint32 mate_info_rsp::last_time() const {
  return last_time_;
}
inline void mate_info_rsp::set_last_time(::google::protobuf::uint32 value) {
  set_has_last_time();
  last_time_ = value;
}

// optional uint32 miss_times = 4;
inline bool mate_info_rsp::has_miss_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mate_info_rsp::set_has_miss_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mate_info_rsp::clear_has_miss_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mate_info_rsp::clear_miss_times() {
  miss_times_ = 0u;
  clear_has_miss_times();
}
inline ::google::protobuf::uint32 mate_info_rsp::miss_times() const {
  return miss_times_;
}
inline void mate_info_rsp::set_miss_times(::google::protobuf::uint32 value) {
  set_has_miss_times();
  miss_times_ = value;
}

// optional uint32 total_times = 5;
inline bool mate_info_rsp::has_total_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mate_info_rsp::set_has_total_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mate_info_rsp::clear_has_total_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mate_info_rsp::clear_total_times() {
  total_times_ = 0u;
  clear_has_total_times();
}
inline ::google::protobuf::uint32 mate_info_rsp::total_times() const {
  return total_times_;
}
inline void mate_info_rsp::set_total_times(::google::protobuf::uint32 value) {
  set_has_total_times();
  total_times_ = value;
}

// optional uint32 depth_time = 6;
inline bool mate_info_rsp::has_depth_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mate_info_rsp::set_has_depth_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mate_info_rsp::clear_has_depth_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mate_info_rsp::clear_depth_time() {
  depth_time_ = 0u;
  clear_has_depth_time();
}
inline ::google::protobuf::uint32 mate_info_rsp::depth_time() const {
  return depth_time_;
}
inline void mate_info_rsp::set_depth_time(::google::protobuf::uint32 value) {
  set_has_depth_time();
  depth_time_ = value;
}

// optional uint32 advance_depth = 7;
inline bool mate_info_rsp::has_advance_depth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mate_info_rsp::set_has_advance_depth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mate_info_rsp::clear_has_advance_depth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mate_info_rsp::clear_advance_depth() {
  advance_depth_ = 0u;
  clear_has_advance_depth();
}
inline ::google::protobuf::uint32 mate_info_rsp::advance_depth() const {
  return advance_depth_;
}
inline void mate_info_rsp::set_advance_depth(::google::protobuf::uint32 value) {
  set_has_advance_depth();
  advance_depth_ = value;
}

// -------------------------------------------------------------------

// mate_invite_req

// required uint32 mate_role_id = 1;
inline bool mate_invite_req::has_mate_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mate_invite_req::set_has_mate_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mate_invite_req::clear_has_mate_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mate_invite_req::clear_mate_role_id() {
  mate_role_id_ = 0u;
  clear_has_mate_role_id();
}
inline ::google::protobuf::uint32 mate_invite_req::mate_role_id() const {
  return mate_role_id_;
}
inline void mate_invite_req::set_mate_role_id(::google::protobuf::uint32 value) {
  set_has_mate_role_id();
  mate_role_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool mate_invite_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mate_invite_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mate_invite_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mate_invite_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& mate_invite_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* mate_invite_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* mate_invite_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void mate_invite_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// mate_invite_rsp

// required .client.MATE_OPERATE_RET_E ret = 1;
inline bool mate_invite_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mate_invite_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mate_invite_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mate_invite_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::MATE_OPERATE_RET_E mate_invite_rsp::ret() const {
  return static_cast< ::client::MATE_OPERATE_RET_E >(ret_);
}
inline void mate_invite_rsp::set_ret(::client::MATE_OPERATE_RET_E value) {
  assert(::client::MATE_OPERATE_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 mate_role_id = 2;
inline bool mate_invite_rsp::has_mate_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mate_invite_rsp::set_has_mate_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mate_invite_rsp::clear_has_mate_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mate_invite_rsp::clear_mate_role_id() {
  mate_role_id_ = 0u;
  clear_has_mate_role_id();
}
inline ::google::protobuf::uint32 mate_invite_rsp::mate_role_id() const {
  return mate_role_id_;
}
inline void mate_invite_rsp::set_mate_role_id(::google::protobuf::uint32 value) {
  set_has_mate_role_id();
  mate_role_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool mate_invite_rsp::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mate_invite_rsp::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mate_invite_rsp::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mate_invite_rsp::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& mate_invite_rsp::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* mate_invite_rsp::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* mate_invite_rsp::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void mate_invite_rsp::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// mate_create_msg

// required uint32 role_id = 1;
inline bool mate_create_msg::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mate_create_msg::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mate_create_msg::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mate_create_msg::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 mate_create_msg::role_id() const {
  return role_id_;
}
inline void mate_create_msg::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 mate_role_id = 2;
inline bool mate_create_msg::has_mate_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mate_create_msg::set_has_mate_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mate_create_msg::clear_has_mate_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mate_create_msg::clear_mate_role_id() {
  mate_role_id_ = 0u;
  clear_has_mate_role_id();
}
inline ::google::protobuf::uint32 mate_create_msg::mate_role_id() const {
  return mate_role_id_;
}
inline void mate_create_msg::set_mate_role_id(::google::protobuf::uint32 value) {
  set_has_mate_role_id();
  mate_role_id_ = value;
}

// required .client.MATE_OPERATE_RET_E ret = 3;
inline bool mate_create_msg::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mate_create_msg::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mate_create_msg::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mate_create_msg::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::MATE_OPERATE_RET_E mate_create_msg::ret() const {
  return static_cast< ::client::MATE_OPERATE_RET_E >(ret_);
}
inline void mate_create_msg::set_ret(::client::MATE_OPERATE_RET_E value) {
  assert(::client::MATE_OPERATE_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// depth_mate_req

// required uint32 svr_time = 1;
inline bool depth_mate_req::has_svr_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void depth_mate_req::set_has_svr_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void depth_mate_req::clear_has_svr_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void depth_mate_req::clear_svr_time() {
  svr_time_ = 0u;
  clear_has_svr_time();
}
inline ::google::protobuf::uint32 depth_mate_req::svr_time() const {
  return svr_time_;
}
inline void depth_mate_req::set_svr_time(::google::protobuf::uint32 value) {
  set_has_svr_time();
  svr_time_ = value;
}

// optional bool advanced = 2 [default = true];
inline bool depth_mate_req::has_advanced() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void depth_mate_req::set_has_advanced() {
  _has_bits_[0] |= 0x00000002u;
}
inline void depth_mate_req::clear_has_advanced() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void depth_mate_req::clear_advanced() {
  advanced_ = true;
  clear_has_advanced();
}
inline bool depth_mate_req::advanced() const {
  return advanced_;
}
inline void depth_mate_req::set_advanced(bool value) {
  set_has_advanced();
  advanced_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool depth_mate_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void depth_mate_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void depth_mate_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void depth_mate_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& depth_mate_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* depth_mate_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* depth_mate_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void depth_mate_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// depth_mate_msg

// required uint32 role_id = 1;
inline bool depth_mate_msg::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void depth_mate_msg::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void depth_mate_msg::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void depth_mate_msg::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 depth_mate_msg::role_id() const {
  return role_id_;
}
inline void depth_mate_msg::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 mate_role_id = 2;
inline bool depth_mate_msg::has_mate_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void depth_mate_msg::set_has_mate_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void depth_mate_msg::clear_has_mate_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void depth_mate_msg::clear_mate_role_id() {
  mate_role_id_ = 0u;
  clear_has_mate_role_id();
}
inline ::google::protobuf::uint32 depth_mate_msg::mate_role_id() const {
  return mate_role_id_;
}
inline void depth_mate_msg::set_mate_role_id(::google::protobuf::uint32 value) {
  set_has_mate_role_id();
  mate_role_id_ = value;
}

// required bool need_ingot = 3;
inline bool depth_mate_msg::has_need_ingot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void depth_mate_msg::set_has_need_ingot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void depth_mate_msg::clear_has_need_ingot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void depth_mate_msg::clear_need_ingot() {
  need_ingot_ = false;
  clear_has_need_ingot();
}
inline bool depth_mate_msg::need_ingot() const {
  return need_ingot_;
}
inline void depth_mate_msg::set_need_ingot(bool value) {
  set_has_need_ingot();
  need_ingot_ = value;
}

// required .client.MATE_OPERATE_RET_E ret = 4;
inline bool depth_mate_msg::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void depth_mate_msg::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void depth_mate_msg::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void depth_mate_msg::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::MATE_OPERATE_RET_E depth_mate_msg::ret() const {
  return static_cast< ::client::MATE_OPERATE_RET_E >(ret_);
}
inline void depth_mate_msg::set_ret(::client::MATE_OPERATE_RET_E value) {
  assert(::client::MATE_OPERATE_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// depth_mate_rsp

// required .client.MATE_OPERATE_RET_E ret = 1;
inline bool depth_mate_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void depth_mate_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void depth_mate_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void depth_mate_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::MATE_OPERATE_RET_E depth_mate_rsp::ret() const {
  return static_cast< ::client::MATE_OPERATE_RET_E >(ret_);
}
inline void depth_mate_rsp::set_ret(::client::MATE_OPERATE_RET_E value) {
  assert(::client::MATE_OPERATE_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional bool advanced = 2 [default = true];
inline bool depth_mate_rsp::has_advanced() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void depth_mate_rsp::set_has_advanced() {
  _has_bits_[0] |= 0x00000002u;
}
inline void depth_mate_rsp::clear_has_advanced() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void depth_mate_rsp::clear_advanced() {
  advanced_ = true;
  clear_has_advanced();
}
inline bool depth_mate_rsp::advanced() const {
  return advanced_;
}
inline void depth_mate_rsp::set_advanced(bool value) {
  set_has_advanced();
  advanced_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool depth_mate_rsp::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void depth_mate_rsp::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void depth_mate_rsp::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void depth_mate_rsp::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& depth_mate_rsp::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* depth_mate_rsp::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* depth_mate_rsp::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void depth_mate_rsp::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// depth_mate_end_req

// required uint32 svr_time = 1;
inline bool depth_mate_end_req::has_svr_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void depth_mate_end_req::set_has_svr_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void depth_mate_end_req::clear_has_svr_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void depth_mate_end_req::clear_svr_time() {
  svr_time_ = 0u;
  clear_has_svr_time();
}
inline ::google::protobuf::uint32 depth_mate_end_req::svr_time() const {
  return svr_time_;
}
inline void depth_mate_end_req::set_svr_time(::google::protobuf::uint32 value) {
  set_has_svr_time();
  svr_time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool depth_mate_end_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void depth_mate_end_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void depth_mate_end_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void depth_mate_end_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& depth_mate_end_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* depth_mate_end_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* depth_mate_end_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void depth_mate_end_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// depth_mate_end_msg

// required .client.MATE_OPERATE_RET_E ret = 1;
inline bool depth_mate_end_msg::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void depth_mate_end_msg::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void depth_mate_end_msg::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void depth_mate_end_msg::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::MATE_OPERATE_RET_E depth_mate_end_msg::ret() const {
  return static_cast< ::client::MATE_OPERATE_RET_E >(ret_);
}
inline void depth_mate_end_msg::set_ret(::client::MATE_OPERATE_RET_E value) {
  assert(::client::MATE_OPERATE_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 role_id = 2;
inline bool depth_mate_end_msg::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void depth_mate_end_msg::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void depth_mate_end_msg::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void depth_mate_end_msg::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 depth_mate_end_msg::role_id() const {
  return role_id_;
}
inline void depth_mate_end_msg::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 mate_role_id = 3;
inline bool depth_mate_end_msg::has_mate_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void depth_mate_end_msg::set_has_mate_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void depth_mate_end_msg::clear_has_mate_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void depth_mate_end_msg::clear_mate_role_id() {
  mate_role_id_ = 0u;
  clear_has_mate_role_id();
}
inline ::google::protobuf::uint32 depth_mate_end_msg::mate_role_id() const {
  return mate_role_id_;
}
inline void depth_mate_end_msg::set_mate_role_id(::google::protobuf::uint32 value) {
  set_has_mate_role_id();
  mate_role_id_ = value;
}

// optional bool advanced = 4;
inline bool depth_mate_end_msg::has_advanced() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void depth_mate_end_msg::set_has_advanced() {
  _has_bits_[0] |= 0x00000008u;
}
inline void depth_mate_end_msg::clear_has_advanced() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void depth_mate_end_msg::clear_advanced() {
  advanced_ = false;
  clear_has_advanced();
}
inline bool depth_mate_end_msg::advanced() const {
  return advanced_;
}
inline void depth_mate_end_msg::set_advanced(bool value) {
  set_has_advanced();
  advanced_ = value;
}

// -------------------------------------------------------------------

// mate_remove_req

// required uint32 svr_time = 1;
inline bool mate_remove_req::has_svr_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mate_remove_req::set_has_svr_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mate_remove_req::clear_has_svr_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mate_remove_req::clear_svr_time() {
  svr_time_ = 0u;
  clear_has_svr_time();
}
inline ::google::protobuf::uint32 mate_remove_req::svr_time() const {
  return svr_time_;
}
inline void mate_remove_req::set_svr_time(::google::protobuf::uint32 value) {
  set_has_svr_time();
  svr_time_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool mate_remove_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mate_remove_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mate_remove_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mate_remove_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& mate_remove_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* mate_remove_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* mate_remove_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void mate_remove_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// mate_remove_msg

// required .client.MATE_OPERATE_RET_E ret = 1;
inline bool mate_remove_msg::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mate_remove_msg::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mate_remove_msg::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mate_remove_msg::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::MATE_OPERATE_RET_E mate_remove_msg::ret() const {
  return static_cast< ::client::MATE_OPERATE_RET_E >(ret_);
}
inline void mate_remove_msg::set_ret(::client::MATE_OPERATE_RET_E value) {
  assert(::client::MATE_OPERATE_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 role_id = 2 [default = 0];
inline bool mate_remove_msg::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mate_remove_msg::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mate_remove_msg::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mate_remove_msg::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 mate_remove_msg::role_id() const {
  return role_id_;
}
inline void mate_remove_msg::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// mate_award_req

// required uint32 type = 1;
inline bool mate_award_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mate_award_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mate_award_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mate_award_req::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 mate_award_req::type() const {
  return type_;
}
inline void mate_award_req::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool mate_award_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mate_award_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mate_award_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mate_award_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& mate_award_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* mate_award_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* mate_award_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void mate_award_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// mate_award_rsp

// required uint32 ret = 1;
inline bool mate_award_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mate_award_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mate_award_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mate_award_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 mate_award_rsp::ret() const {
  return ret_;
}
inline void mate_award_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// mate_award_via

// required bool check = 1;
inline bool mate_award_via::has_check() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mate_award_via::set_has_check() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mate_award_via::clear_has_check() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mate_award_via::clear_check() {
  check_ = false;
  clear_has_check();
}
inline bool mate_award_via::check() const {
  return check_;
}
inline void mate_award_via::set_check(bool value) {
  set_has_check();
  check_ = value;
}

// required uint32 award_id = 2;
inline bool mate_award_via::has_award_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mate_award_via::set_has_award_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mate_award_via::clear_has_award_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mate_award_via::clear_award_id() {
  award_id_ = 0u;
  clear_has_award_id();
}
inline ::google::protobuf::uint32 mate_award_via::award_id() const {
  return award_id_;
}
inline void mate_award_via::set_award_id(::google::protobuf::uint32 value) {
  set_has_award_id();
  award_id_ = value;
}

// required uint32 role_id = 3;
inline bool mate_award_via::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mate_award_via::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mate_award_via::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mate_award_via::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 mate_award_via::role_id() const {
  return role_id_;
}
inline void mate_award_via::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::MATE_OPERATE_RET_E>() {
  return ::client::MATE_OPERATE_RET_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2emate_2eproto__INCLUDED
