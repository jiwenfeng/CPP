// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2etest_2eproto() {
  protobuf_AddDesc_client_2etest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.test.proto");
  GOOGLE_CHECK(file != NULL);
  test_descriptor_ = file->message_type(0);
  static const int test_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, prop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, prop_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, attr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, attr_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, drop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, add_attr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, cfg_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, cfg_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, cfg_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, mount_skill_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, lua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, pet_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, land_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, raid_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, sub_attr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, clear_add_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, svr_head_),
  };
  test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_descriptor_,
      test::default_instance_,
      test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2etest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_descriptor_, &test::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2etest_2eproto() {
  delete test::default_instance_;
  delete test_reflection_;
}

void protobuf_AddDesc_client_2etest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021client.test.proto\022\006client\032\021client.comm"
    ".proto\"\364\003\n\004test\022\n\n\002hp\030\001 \001(\005\022\n\n\002mp\030\002 \001(\005\022"
    "\017\n\007prop_id\030\003 \001(\r\022\020\n\010prop_num\030\004 \001(\005\022\017\n\007at"
    "tr_id\030\005 \001(\r\022\020\n\010attr_num\030\006 \001(\005\022\017\n\007task_id"
    "\030\007 \001(\r\022\017\n\007drop_id\030\010 \001(\r\022\023\n\013add_attr_id\030\t"
    " \001(\r\022\020\n\010cfg_file\030\n \001(\t\022\021\n\tcfg_table\030\013 \001("
    "\t\022\021\n\tcfg_field\030\014 \001(\t\022\031\n\021mount_skill_coun"
    "t\030\r \001(\r\022\013\n\003lua\030\016 \001(\t\022\017\n\007area_id\030\017 \001(\r\022\016\n"
    "\006pet_id\030\020 \001(\r\022\017\n\007pet_exp\030\021 \001(\r\022\r\n\005money\030"
    "\022 \001(\r\022\016\n\006vip_lv\030\023 \001(\r\022\r\n\005month\030\024 \001(\r\022\020\n\010"
    "land_day\030\025 \001(\r\022\017\n\007raid_id\030\026 \001(\r\022\021\n\traid_"
    "type\030\027 \001(\r\022\014\n\004once\030\030 \001(\r\022\023\n\013sub_attr_id\030"
    "\031 \001(\r\022\026\n\016clear_add_attr\030\032 \001(\010\022&\n\010svr_hea"
    "d\030\350\007 \001(\0132\023.client.server_head", 549);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.test.proto", &protobuf_RegisterTypes);
  test::default_instance_ = new test();
  test::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2etest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2etest_2eproto {
  StaticDescriptorInitializer_client_2etest_2eproto() {
    protobuf_AddDesc_client_2etest_2eproto();
  }
} static_descriptor_initializer_client_2etest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int test::kHpFieldNumber;
const int test::kMpFieldNumber;
const int test::kPropIdFieldNumber;
const int test::kPropNumFieldNumber;
const int test::kAttrIdFieldNumber;
const int test::kAttrNumFieldNumber;
const int test::kTaskIdFieldNumber;
const int test::kDropIdFieldNumber;
const int test::kAddAttrIdFieldNumber;
const int test::kCfgFileFieldNumber;
const int test::kCfgTableFieldNumber;
const int test::kCfgFieldFieldNumber;
const int test::kMountSkillCountFieldNumber;
const int test::kLuaFieldNumber;
const int test::kAreaIdFieldNumber;
const int test::kPetIdFieldNumber;
const int test::kPetExpFieldNumber;
const int test::kMoneyFieldNumber;
const int test::kVipLvFieldNumber;
const int test::kMonthFieldNumber;
const int test::kLandDayFieldNumber;
const int test::kRaidIdFieldNumber;
const int test::kRaidTypeFieldNumber;
const int test::kOnceFieldNumber;
const int test::kSubAttrIdFieldNumber;
const int test::kClearAddAttrFieldNumber;
const int test::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

test::test()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

test::test(const test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0;
  mp_ = 0;
  prop_id_ = 0u;
  prop_num_ = 0;
  attr_id_ = 0u;
  attr_num_ = 0;
  task_id_ = 0u;
  drop_id_ = 0u;
  add_attr_id_ = 0u;
  cfg_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cfg_table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cfg_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mount_skill_count_ = 0u;
  lua_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_id_ = 0u;
  pet_id_ = 0u;
  pet_exp_ = 0u;
  money_ = 0u;
  vip_lv_ = 0u;
  month_ = 0u;
  land_day_ = 0u;
  raid_id_ = 0u;
  raid_type_ = 0u;
  once_ = 0u;
  sub_attr_id_ = 0u;
  clear_add_attr_ = false;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test::~test() {
  SharedDtor();
}

void test::SharedDtor() {
  if (cfg_file_ != &::google::protobuf::internal::kEmptyString) {
    delete cfg_file_;
  }
  if (cfg_table_ != &::google::protobuf::internal::kEmptyString) {
    delete cfg_table_;
  }
  if (cfg_field_ != &::google::protobuf::internal::kEmptyString) {
    delete cfg_field_;
  }
  if (lua_ != &::google::protobuf::internal::kEmptyString) {
    delete lua_;
  }
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_descriptor_;
}

const test& test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etest_2eproto();
  return *default_instance_;
}

test* test::default_instance_ = NULL;

test* test::New() const {
  return new test;
}

void test::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0;
    mp_ = 0;
    prop_id_ = 0u;
    prop_num_ = 0;
    attr_id_ = 0u;
    attr_num_ = 0;
    task_id_ = 0u;
    drop_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    add_attr_id_ = 0u;
    if (has_cfg_file()) {
      if (cfg_file_ != &::google::protobuf::internal::kEmptyString) {
        cfg_file_->clear();
      }
    }
    if (has_cfg_table()) {
      if (cfg_table_ != &::google::protobuf::internal::kEmptyString) {
        cfg_table_->clear();
      }
    }
    if (has_cfg_field()) {
      if (cfg_field_ != &::google::protobuf::internal::kEmptyString) {
        cfg_field_->clear();
      }
    }
    mount_skill_count_ = 0u;
    if (has_lua()) {
      if (lua_ != &::google::protobuf::internal::kEmptyString) {
        lua_->clear();
      }
    }
    area_id_ = 0u;
    pet_id_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pet_exp_ = 0u;
    money_ = 0u;
    vip_lv_ = 0u;
    month_ = 0u;
    land_day_ = 0u;
    raid_id_ = 0u;
    raid_type_ = 0u;
    once_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    sub_attr_id_ = 0u;
    clear_add_attr_ = false;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mp;
        break;
      }

      // optional int32 mp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prop_id;
        break;
      }

      // optional uint32 prop_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_id_)));
          set_has_prop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prop_num;
        break;
      }

      // optional int32 prop_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prop_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prop_num_)));
          set_has_prop_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attr_id;
        break;
      }

      // optional uint32 attr_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attr_id_)));
          set_has_attr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attr_num;
        break;
      }

      // optional int32 attr_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_num_)));
          set_has_attr_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_task_id;
        break;
      }

      // optional uint32 task_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_drop_id;
        break;
      }

      // optional uint32 drop_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_id_)));
          set_has_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_add_attr_id;
        break;
      }

      // optional uint32 add_attr_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_attr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_attr_id_)));
          set_has_add_attr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_cfg_file;
        break;
      }

      // optional string cfg_file = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cfg_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfg_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cfg_file().data(), this->cfg_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_cfg_table;
        break;
      }

      // optional string cfg_table = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cfg_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfg_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cfg_table().data(), this->cfg_table().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_cfg_field;
        break;
      }

      // optional string cfg_field = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cfg_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfg_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cfg_field().data(), this->cfg_field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mount_skill_count;
        break;
      }

      // optional uint32 mount_skill_count = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_skill_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_skill_count_)));
          set_has_mount_skill_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_lua;
        break;
      }

      // optional string lua = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lua().data(), this->lua().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_pet_id;
        break;
      }

      // optional uint32 pet_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_pet_exp;
        break;
      }

      // optional uint32 pet_exp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_exp_)));
          set_has_pet_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_money;
        break;
      }

      // optional uint32 money = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_vip_lv;
        break;
      }

      // optional uint32 vip_lv = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_lv_)));
          set_has_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_month;
        break;
      }

      // optional uint32 month = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_land_day;
        break;
      }

      // optional uint32 land_day = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &land_day_)));
          set_has_land_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_raid_id;
        break;
      }

      // optional uint32 raid_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_raid_type;
        break;
      }

      // optional uint32 raid_type = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_type_)));
          set_has_raid_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_once;
        break;
      }

      // optional uint32 once = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_once:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &once_)));
          set_has_once();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_sub_attr_id;
        break;
      }

      // optional uint32 sub_attr_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_attr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_attr_id_)));
          set_has_sub_attr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_clear_add_attr;
        break;
      }

      // optional bool clear_add_attr = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clear_add_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_add_attr_)));
          set_has_clear_add_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp(), output);
  }

  // optional int32 mp = 2;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mp(), output);
  }

  // optional uint32 prop_id = 3;
  if (has_prop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prop_id(), output);
  }

  // optional int32 prop_num = 4;
  if (has_prop_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prop_num(), output);
  }

  // optional uint32 attr_id = 5;
  if (has_attr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attr_id(), output);
  }

  // optional int32 attr_num = 6;
  if (has_attr_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attr_num(), output);
  }

  // optional uint32 task_id = 7;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->task_id(), output);
  }

  // optional uint32 drop_id = 8;
  if (has_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->drop_id(), output);
  }

  // optional uint32 add_attr_id = 9;
  if (has_add_attr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->add_attr_id(), output);
  }

  // optional string cfg_file = 10;
  if (has_cfg_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cfg_file().data(), this->cfg_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->cfg_file(), output);
  }

  // optional string cfg_table = 11;
  if (has_cfg_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cfg_table().data(), this->cfg_table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->cfg_table(), output);
  }

  // optional string cfg_field = 12;
  if (has_cfg_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cfg_field().data(), this->cfg_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->cfg_field(), output);
  }

  // optional uint32 mount_skill_count = 13;
  if (has_mount_skill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->mount_skill_count(), output);
  }

  // optional string lua = 14;
  if (has_lua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lua().data(), this->lua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->lua(), output);
  }

  // optional uint32 area_id = 15;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->area_id(), output);
  }

  // optional uint32 pet_id = 16;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pet_id(), output);
  }

  // optional uint32 pet_exp = 17;
  if (has_pet_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->pet_exp(), output);
  }

  // optional uint32 money = 18;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->money(), output);
  }

  // optional uint32 vip_lv = 19;
  if (has_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->vip_lv(), output);
  }

  // optional uint32 month = 20;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->month(), output);
  }

  // optional uint32 land_day = 21;
  if (has_land_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->land_day(), output);
  }

  // optional uint32 raid_id = 22;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->raid_id(), output);
  }

  // optional uint32 raid_type = 23;
  if (has_raid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->raid_type(), output);
  }

  // optional uint32 once = 24;
  if (has_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->once(), output);
  }

  // optional uint32 sub_attr_id = 25;
  if (has_sub_attr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->sub_attr_id(), output);
  }

  // optional bool clear_add_attr = 26;
  if (has_clear_add_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->clear_add_attr(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hp(), target);
  }

  // optional int32 mp = 2;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mp(), target);
  }

  // optional uint32 prop_id = 3;
  if (has_prop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prop_id(), target);
  }

  // optional int32 prop_num = 4;
  if (has_prop_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prop_num(), target);
  }

  // optional uint32 attr_id = 5;
  if (has_attr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attr_id(), target);
  }

  // optional int32 attr_num = 6;
  if (has_attr_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attr_num(), target);
  }

  // optional uint32 task_id = 7;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->task_id(), target);
  }

  // optional uint32 drop_id = 8;
  if (has_drop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->drop_id(), target);
  }

  // optional uint32 add_attr_id = 9;
  if (has_add_attr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->add_attr_id(), target);
  }

  // optional string cfg_file = 10;
  if (has_cfg_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cfg_file().data(), this->cfg_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->cfg_file(), target);
  }

  // optional string cfg_table = 11;
  if (has_cfg_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cfg_table().data(), this->cfg_table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->cfg_table(), target);
  }

  // optional string cfg_field = 12;
  if (has_cfg_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cfg_field().data(), this->cfg_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->cfg_field(), target);
  }

  // optional uint32 mount_skill_count = 13;
  if (has_mount_skill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->mount_skill_count(), target);
  }

  // optional string lua = 14;
  if (has_lua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lua().data(), this->lua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->lua(), target);
  }

  // optional uint32 area_id = 15;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->area_id(), target);
  }

  // optional uint32 pet_id = 16;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pet_id(), target);
  }

  // optional uint32 pet_exp = 17;
  if (has_pet_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->pet_exp(), target);
  }

  // optional uint32 money = 18;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->money(), target);
  }

  // optional uint32 vip_lv = 19;
  if (has_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->vip_lv(), target);
  }

  // optional uint32 month = 20;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->month(), target);
  }

  // optional uint32 land_day = 21;
  if (has_land_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->land_day(), target);
  }

  // optional uint32 raid_id = 22;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->raid_id(), target);
  }

  // optional uint32 raid_type = 23;
  if (has_raid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->raid_type(), target);
  }

  // optional uint32 once = 24;
  if (has_once()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->once(), target);
  }

  // optional uint32 sub_attr_id = 25;
  if (has_sub_attr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->sub_attr_id(), target);
  }

  // optional bool clear_add_attr = 26;
  if (has_clear_add_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->clear_add_attr(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 mp = 2;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional uint32 prop_id = 3;
    if (has_prop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prop_id());
    }

    // optional int32 prop_num = 4;
    if (has_prop_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prop_num());
    }

    // optional uint32 attr_id = 5;
    if (has_attr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attr_id());
    }

    // optional int32 attr_num = 6;
    if (has_attr_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_num());
    }

    // optional uint32 task_id = 7;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional uint32 drop_id = 8;
    if (has_drop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 add_attr_id = 9;
    if (has_add_attr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_attr_id());
    }

    // optional string cfg_file = 10;
    if (has_cfg_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cfg_file());
    }

    // optional string cfg_table = 11;
    if (has_cfg_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cfg_table());
    }

    // optional string cfg_field = 12;
    if (has_cfg_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cfg_field());
    }

    // optional uint32 mount_skill_count = 13;
    if (has_mount_skill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_skill_count());
    }

    // optional string lua = 14;
    if (has_lua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lua());
    }

    // optional uint32 area_id = 15;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional uint32 pet_id = 16;
    if (has_pet_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 pet_exp = 17;
    if (has_pet_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_exp());
    }

    // optional uint32 money = 18;
    if (has_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 vip_lv = 19;
    if (has_vip_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_lv());
    }

    // optional uint32 month = 20;
    if (has_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 land_day = 21;
    if (has_land_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->land_day());
    }

    // optional uint32 raid_id = 22;
    if (has_raid_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // optional uint32 raid_type = 23;
    if (has_raid_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_type());
    }

    // optional uint32 once = 24;
    if (has_once()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->once());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 sub_attr_id = 25;
    if (has_sub_attr_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_attr_id());
    }

    // optional bool clear_add_attr = 26;
    if (has_clear_add_attr()) {
      total_size += 2 + 1;
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test::MergeFrom(const test& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_prop_id()) {
      set_prop_id(from.prop_id());
    }
    if (from.has_prop_num()) {
      set_prop_num(from.prop_num());
    }
    if (from.has_attr_id()) {
      set_attr_id(from.attr_id());
    }
    if (from.has_attr_num()) {
      set_attr_num(from.attr_num());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_drop_id()) {
      set_drop_id(from.drop_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_add_attr_id()) {
      set_add_attr_id(from.add_attr_id());
    }
    if (from.has_cfg_file()) {
      set_cfg_file(from.cfg_file());
    }
    if (from.has_cfg_table()) {
      set_cfg_table(from.cfg_table());
    }
    if (from.has_cfg_field()) {
      set_cfg_field(from.cfg_field());
    }
    if (from.has_mount_skill_count()) {
      set_mount_skill_count(from.mount_skill_count());
    }
    if (from.has_lua()) {
      set_lua(from.lua());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pet_exp()) {
      set_pet_exp(from.pet_exp());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_vip_lv()) {
      set_vip_lv(from.vip_lv());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_land_day()) {
      set_land_day(from.land_day());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_raid_type()) {
      set_raid_type(from.raid_type());
    }
    if (from.has_once()) {
      set_once(from.once());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_sub_attr_id()) {
      set_sub_attr_id(from.sub_attr_id());
    }
    if (from.has_clear_add_attr()) {
      set_clear_add_attr(from.clear_add_attr());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test::CopyFrom(const test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test::IsInitialized() const {

  return true;
}

void test::Swap(test* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(prop_id_, other->prop_id_);
    std::swap(prop_num_, other->prop_num_);
    std::swap(attr_id_, other->attr_id_);
    std::swap(attr_num_, other->attr_num_);
    std::swap(task_id_, other->task_id_);
    std::swap(drop_id_, other->drop_id_);
    std::swap(add_attr_id_, other->add_attr_id_);
    std::swap(cfg_file_, other->cfg_file_);
    std::swap(cfg_table_, other->cfg_table_);
    std::swap(cfg_field_, other->cfg_field_);
    std::swap(mount_skill_count_, other->mount_skill_count_);
    std::swap(lua_, other->lua_);
    std::swap(area_id_, other->area_id_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(pet_exp_, other->pet_exp_);
    std::swap(money_, other->money_);
    std::swap(vip_lv_, other->vip_lv_);
    std::swap(month_, other->month_);
    std::swap(land_day_, other->land_day_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(raid_type_, other->raid_type_);
    std::swap(once_, other->once_);
    std::swap(sub_attr_id_, other->sub_attr_id_);
    std::swap(clear_add_attr_, other->clear_add_attr_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_descriptor_;
  metadata.reflection = test_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
