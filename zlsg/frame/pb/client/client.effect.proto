import "client.comm.proto";
package client;

// buffer效果数值
message buffer_effect_val {
    required uint32 type         = 1[default = 0];    // 影响类型
    required int32  val          = 2[default = 0];    // 影响数据 如果为操作为* 需要除以10000
    enum OP {
        ADD   = 0;
        MULTI = 1;
    }
    optional OP     operate      = 3[default = ADD];  // +(0) or *(1)
    optional int32  max_val      = 4;                 // 最大单次生效值
    optional int32  min_val      = 5;                 // 最小单次生效值
}

message each_bear_harm {
    optional int32 molecular   = 1;
    optional int32 denominator = 2;
    optional int32 val         = 3;
}

message buffer_effect_shield {
    required uint32         effect_id            = 1;
    required int32          durable_max          = 2;
    required each_bear_harm ebh                  = 4; 
    required float          over_back_proportion = 5;
    required int32          over_back_max        = 6;
}

message rebound_damage {
    required uint32 rebound_count      = 1;
    required uint32 rebound_proportion = 2;
}

message trigger_skill {
    required uint32 skill_id = 1;
    optional uint32 cd       = 2;
}

message immune_effect {
    required uint32 type       = 1;
    optional uint32 proportion = 2;
}

message taunt_effect {
    required uint64 inst_id = 1;
    required uint32 ms      = 2;
}

message halo_effect {
    required uint32 radius = 1;
}

// BUFFER信息
message buffer_info {
    required uint32               effect_id             = 1  [default = 0];    // 效果ID, 删除时仅填写
    required uint32               repeat_levels         = 2  [default = 0];    // 叠加级
    optional uint32               cur_stacks            = 3  [default = 0];    // 当前已经叠加次数
    optional uint32               duration              = 4  [default = 0];    // 持续时间（秒）
    optional uint32               interval              = 5  [default = 0];    // 时间间隔
    optional uint32               effect_tick           = 6  [default = 0];    // 上一次效果触发时间
    optional uint32               remain_tick           = 7  [default = 0];    // 当前剩余时间
    optional uint32               max_effect_times      = 8  [default = 0];    // 最大生效次数
    optional uint32               effected_times        = 9  [default = 0];    // 当前已生效次数
    repeated buffer_effect_val    status_val            = 10;                  // 影响状态的buffer
    repeated buffer_effect_val    attr_val              = 11;                  // 影响基础属性的buffer
    optional buffer_effect_shield shield                = 12;                  // 盾类
    optional rebound_damage       rebound               = 13;                  // 伤害反弹
    repeated trigger_skill        skills                = 14;                  // 触发技能
    repeated immune_effect        immune                = 15;                  // 免疫列表
    optional taunt_effect         taunt                 = 16;                  // 嘲讽
    optional buffer_effect_val    seckill               = 17;                  // 致命一击
    optional halo_effect          halo                  = 18;                  // 光环范围
    optional role_data            caster                = 19;                  // 施法者
}
                                    
enum BUFFER_LIST_METHOD_E {                                   
    BLME_ADD    = 1; // 新增加      
    BLME_UPDATE = 2; // 更新        
    BLME_DELETE = 3; // 删除        
}   

// 具体单条协议
message buffer_operate_info {
    required BUFFER_LIST_METHOD_E method = 1; // 操作方法
    required buffer_info          bi     = 2; // buffer数据
}                              

message buffer_list {
    repeated buffer_operate_info boi = 1; // BUFF列表
    required role_data           rd  = 2; // 角色数据
}

// buffer造成的伤害
message buffer_hurt_msg {
    required role_data rd     = 1;
    optional int32     hp     = 2 [default = 0    ]; // 负数掉 正数加
    optional int32     mp     = 3 [default = 0    ];
    optional bool      dead   = 4 [default = false]; // true 死亡
    optional uint32    cur_hp = 5 [default = 0    ];
}

// 免疫通知
message buffer_immune_msg {
    required role_data target = 1; // 被攻击者
    required role_data caster = 2; // 施法者
    required uint32    id     = 3; // 效果ID
}

// 伤害反弹通知
message buffer_rebound_msg {
    required role_data target = 1;
    required role_data caster = 2;
    required uint32    hp     = 3; // 反弹的伤害
}

