// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.team_raid.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.team_raid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* team_raid_enter_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_raid_enter_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_raid_enter_cmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_raid_enter_cmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_raid_try_enter_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_raid_try_enter_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* team_raid_try_enter_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  team_raid_try_enter_rsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eteam_5fraid_2eproto() {
  protobuf_AddDesc_client_2eteam_5fraid_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.team_raid.proto");
  GOOGLE_CHECK(file != NULL);
  team_raid_enter_req_descriptor_ = file->message_type(0);
  static const int team_raid_enter_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_enter_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_enter_req, svr_head_),
  };
  team_raid_enter_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_raid_enter_req_descriptor_,
      team_raid_enter_req::default_instance_,
      team_raid_enter_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_enter_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_enter_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_raid_enter_req));
  team_raid_enter_cmd_descriptor_ = file->message_type(1);
  static const int team_raid_enter_cmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_enter_cmd, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_enter_cmd, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_enter_cmd, raid_id_),
  };
  team_raid_enter_cmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_raid_enter_cmd_descriptor_,
      team_raid_enter_cmd::default_instance_,
      team_raid_enter_cmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_enter_cmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_enter_cmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_raid_enter_cmd));
  team_raid_try_enter_req_descriptor_ = file->message_type(2);
  static const int team_raid_try_enter_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_try_enter_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_try_enter_req, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_try_enter_req, raid_id_),
  };
  team_raid_try_enter_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_raid_try_enter_req_descriptor_,
      team_raid_try_enter_req::default_instance_,
      team_raid_try_enter_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_try_enter_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_try_enter_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_raid_try_enter_req));
  team_raid_try_enter_rsp_descriptor_ = file->message_type(3);
  static const int team_raid_try_enter_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_try_enter_rsp, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_try_enter_rsp, ret_),
  };
  team_raid_try_enter_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      team_raid_try_enter_rsp_descriptor_,
      team_raid_try_enter_rsp::default_instance_,
      team_raid_try_enter_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_try_enter_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(team_raid_try_enter_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(team_raid_try_enter_rsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eteam_5fraid_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_raid_enter_req_descriptor_, &team_raid_enter_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_raid_enter_cmd_descriptor_, &team_raid_enter_cmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_raid_try_enter_req_descriptor_, &team_raid_try_enter_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    team_raid_try_enter_rsp_descriptor_, &team_raid_try_enter_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eteam_5fraid_2eproto() {
  delete team_raid_enter_req::default_instance_;
  delete team_raid_enter_req_reflection_;
  delete team_raid_enter_cmd::default_instance_;
  delete team_raid_enter_cmd_reflection_;
  delete team_raid_try_enter_req::default_instance_;
  delete team_raid_try_enter_req_reflection_;
  delete team_raid_try_enter_rsp::default_instance_;
  delete team_raid_try_enter_rsp_reflection_;
}

void protobuf_AddDesc_client_2eteam_5fraid_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::client::protobuf_AddDesc_client_2eteam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026client.team_raid.proto\022\006client\032\021client"
    ".comm.proto\032\021client.team.proto\"K\n\023team_r"
    "aid_enter_req\022\014\n\004time\030\001 \002(\r\022&\n\010svr_head\030"
    "\350\007 \001(\0132\023.client.server_head\"H\n\023team_raid"
    "_enter_cmd\022\017\n\007role_id\030\001 \002(\r\022\017\n\007team_id\030\002"
    " \002(\r\022\017\n\007raid_id\030\003 \002(\r\"L\n\027team_raid_try_e"
    "nter_req\022\017\n\007role_id\030\001 \002(\r\022\017\n\007team_id\030\002 \002"
    "(\r\022\017\n\007raid_id\030\003 \002(\r\"T\n\027team_raid_try_ent"
    "er_rsp\022,\n\003req\030\001 \002(\0132\037.client.team_raid_t"
    "ry_enter_req\022\013\n\003ret\030\002 \002(\r", 385);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.team_raid.proto", &protobuf_RegisterTypes);
  team_raid_enter_req::default_instance_ = new team_raid_enter_req();
  team_raid_enter_cmd::default_instance_ = new team_raid_enter_cmd();
  team_raid_try_enter_req::default_instance_ = new team_raid_try_enter_req();
  team_raid_try_enter_rsp::default_instance_ = new team_raid_try_enter_rsp();
  team_raid_enter_req::default_instance_->InitAsDefaultInstance();
  team_raid_enter_cmd::default_instance_->InitAsDefaultInstance();
  team_raid_try_enter_req::default_instance_->InitAsDefaultInstance();
  team_raid_try_enter_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eteam_5fraid_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eteam_5fraid_2eproto {
  StaticDescriptorInitializer_client_2eteam_5fraid_2eproto() {
    protobuf_AddDesc_client_2eteam_5fraid_2eproto();
  }
} static_descriptor_initializer_client_2eteam_5fraid_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int team_raid_enter_req::kTimeFieldNumber;
const int team_raid_enter_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

team_raid_enter_req::team_raid_enter_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_raid_enter_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

team_raid_enter_req::team_raid_enter_req(const team_raid_enter_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_raid_enter_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_raid_enter_req::~team_raid_enter_req() {
  SharedDtor();
}

void team_raid_enter_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void team_raid_enter_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_raid_enter_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_raid_enter_req_descriptor_;
}

const team_raid_enter_req& team_raid_enter_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_5fraid_2eproto();
  return *default_instance_;
}

team_raid_enter_req* team_raid_enter_req::default_instance_ = NULL;

team_raid_enter_req* team_raid_enter_req::New() const {
  return new team_raid_enter_req;
}

void team_raid_enter_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_raid_enter_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_raid_enter_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_raid_enter_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_raid_enter_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_raid_enter_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_raid_enter_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_raid_enter_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_raid_enter_req::MergeFrom(const team_raid_enter_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_raid_enter_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_raid_enter_req::CopyFrom(const team_raid_enter_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_raid_enter_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void team_raid_enter_req::Swap(team_raid_enter_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_raid_enter_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_raid_enter_req_descriptor_;
  metadata.reflection = team_raid_enter_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_raid_enter_cmd::kRoleIdFieldNumber;
const int team_raid_enter_cmd::kTeamIdFieldNumber;
const int team_raid_enter_cmd::kRaidIdFieldNumber;
#endif  // !_MSC_VER

team_raid_enter_cmd::team_raid_enter_cmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_raid_enter_cmd::InitAsDefaultInstance() {
}

team_raid_enter_cmd::team_raid_enter_cmd(const team_raid_enter_cmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_raid_enter_cmd::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  team_id_ = 0u;
  raid_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_raid_enter_cmd::~team_raid_enter_cmd() {
  SharedDtor();
}

void team_raid_enter_cmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void team_raid_enter_cmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_raid_enter_cmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_raid_enter_cmd_descriptor_;
}

const team_raid_enter_cmd& team_raid_enter_cmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_5fraid_2eproto();
  return *default_instance_;
}

team_raid_enter_cmd* team_raid_enter_cmd::default_instance_ = NULL;

team_raid_enter_cmd* team_raid_enter_cmd::New() const {
  return new team_raid_enter_cmd;
}

void team_raid_enter_cmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    team_id_ = 0u;
    raid_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_raid_enter_cmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // required uint32 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_raid_enter_cmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // required uint32 raid_id = 3;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raid_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_raid_enter_cmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // required uint32 raid_id = 3;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raid_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_raid_enter_cmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // required uint32 raid_id = 3;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_raid_enter_cmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_raid_enter_cmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_raid_enter_cmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_raid_enter_cmd::MergeFrom(const team_raid_enter_cmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_raid_enter_cmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_raid_enter_cmd::CopyFrom(const team_raid_enter_cmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_raid_enter_cmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void team_raid_enter_cmd::Swap(team_raid_enter_cmd* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_raid_enter_cmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_raid_enter_cmd_descriptor_;
  metadata.reflection = team_raid_enter_cmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_raid_try_enter_req::kRoleIdFieldNumber;
const int team_raid_try_enter_req::kTeamIdFieldNumber;
const int team_raid_try_enter_req::kRaidIdFieldNumber;
#endif  // !_MSC_VER

team_raid_try_enter_req::team_raid_try_enter_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_raid_try_enter_req::InitAsDefaultInstance() {
}

team_raid_try_enter_req::team_raid_try_enter_req(const team_raid_try_enter_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_raid_try_enter_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  team_id_ = 0u;
  raid_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_raid_try_enter_req::~team_raid_try_enter_req() {
  SharedDtor();
}

void team_raid_try_enter_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void team_raid_try_enter_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_raid_try_enter_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_raid_try_enter_req_descriptor_;
}

const team_raid_try_enter_req& team_raid_try_enter_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_5fraid_2eproto();
  return *default_instance_;
}

team_raid_try_enter_req* team_raid_try_enter_req::default_instance_ = NULL;

team_raid_try_enter_req* team_raid_try_enter_req::New() const {
  return new team_raid_try_enter_req;
}

void team_raid_try_enter_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    team_id_ = 0u;
    raid_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_raid_try_enter_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // required uint32 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_raid_try_enter_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // required uint32 raid_id = 3;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raid_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_raid_try_enter_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // required uint32 raid_id = 3;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raid_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_raid_try_enter_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // required uint32 raid_id = 3;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_raid_try_enter_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_raid_try_enter_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_raid_try_enter_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_raid_try_enter_req::MergeFrom(const team_raid_try_enter_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_raid_try_enter_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_raid_try_enter_req::CopyFrom(const team_raid_try_enter_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_raid_try_enter_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void team_raid_try_enter_req::Swap(team_raid_try_enter_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_raid_try_enter_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_raid_try_enter_req_descriptor_;
  metadata.reflection = team_raid_try_enter_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int team_raid_try_enter_rsp::kReqFieldNumber;
const int team_raid_try_enter_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

team_raid_try_enter_rsp::team_raid_try_enter_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void team_raid_try_enter_rsp::InitAsDefaultInstance() {
  req_ = const_cast< ::client::team_raid_try_enter_req*>(&::client::team_raid_try_enter_req::default_instance());
}

team_raid_try_enter_rsp::team_raid_try_enter_rsp(const team_raid_try_enter_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void team_raid_try_enter_rsp::SharedCtor() {
  _cached_size_ = 0;
  req_ = NULL;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

team_raid_try_enter_rsp::~team_raid_try_enter_rsp() {
  SharedDtor();
}

void team_raid_try_enter_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void team_raid_try_enter_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* team_raid_try_enter_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return team_raid_try_enter_rsp_descriptor_;
}

const team_raid_try_enter_rsp& team_raid_try_enter_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eteam_5fraid_2eproto();
  return *default_instance_;
}

team_raid_try_enter_rsp* team_raid_try_enter_rsp::default_instance_ = NULL;

team_raid_try_enter_rsp* team_raid_try_enter_rsp::New() const {
  return new team_raid_try_enter_rsp;
}

void team_raid_try_enter_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req()) {
      if (req_ != NULL) req_->::client::team_raid_try_enter_req::Clear();
    }
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool team_raid_try_enter_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.team_raid_try_enter_req req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void team_raid_try_enter_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.team_raid_try_enter_req req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->req(), output);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* team_raid_try_enter_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.team_raid_try_enter_req req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->req(), target);
  }

  // required uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int team_raid_try_enter_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.team_raid_try_enter_req req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

    // required uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void team_raid_try_enter_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const team_raid_try_enter_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const team_raid_try_enter_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void team_raid_try_enter_rsp::MergeFrom(const team_raid_try_enter_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      mutable_req()->::client::team_raid_try_enter_req::MergeFrom(from.req());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void team_raid_try_enter_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void team_raid_try_enter_rsp::CopyFrom(const team_raid_try_enter_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool team_raid_try_enter_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void team_raid_try_enter_rsp::Swap(team_raid_try_enter_rsp* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata team_raid_try_enter_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = team_raid_try_enter_rsp_descriptor_;
  metadata.reflection = team_raid_try_enter_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
