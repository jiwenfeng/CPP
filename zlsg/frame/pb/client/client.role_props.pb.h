// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_props.proto

#ifndef PROTOBUF_client_2erole_5fprops_2eproto__INCLUDED
#define PROTOBUF_client_2erole_5fprops_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

class embed;
class expend_item_info;
class props_info;
class role_props_msg;
class use_props_req;
class use_props_rsp;
class sell_props_req;
class sell_props_rsp;
class move_props_req;
class equip_props_req;
class equip_props_rsp;
class drop_props_info;
class drop_props_msg;
class pick_up_props_req;
class pick_up_props_rsp;
class upgrade_equip_req;
class upgrade_equip_rsp;
class melting_equip_req;
class melting_equip_rsp;
class cast_equip_req;
class cast_equip_rsp;
class treasure_req;
class treasure_rsp;
class baptize_req;
class baptize_rsp;
class baptize_save_req;
class baptize_save_rsp;
class collect_explore_req;
class collect_explore_rsp;
class record_item_info;
class treasure_db_info;
class black_shop_db_info;
class shop_info;
class black_shop_req;
class black_shop_rsp;
class black_shop_reflesh_req;
class black_shop_reflesh_rsp;
class black_shop_buy_req;
class black_shop_buy_rsp;
class use_props_show_rsp;
class record_attr;

enum props_info_POS {
  props_info_POS_SHOW = 0,
  props_info_POS_PACK = 1,
  props_info_POS_DEPOT = 2,
  props_info_POS_ROLE = 3,
  props_info_POS_EXPLORE = 4,
  props_info_POS_TASK = 5,
  props_info_POS_SCENE = 6,
  props_info_POS_TEMP = 7
};
bool props_info_POS_IsValid(int value);
const props_info_POS props_info_POS_POS_MIN = props_info_POS_SHOW;
const props_info_POS props_info_POS_POS_MAX = props_info_POS_TEMP;
const int props_info_POS_POS_ARRAYSIZE = props_info_POS_POS_MAX + 1;

const ::google::protobuf::EnumDescriptor* props_info_POS_descriptor();
inline const ::std::string& props_info_POS_Name(props_info_POS value) {
  return ::google::protobuf::internal::NameOfEnum(
    props_info_POS_descriptor(), value);
}
inline bool props_info_POS_Parse(
    const ::std::string& name, props_info_POS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<props_info_POS>(
    props_info_POS_descriptor(), name, value);
}
enum drop_props_msg_METHOD {
  drop_props_msg_METHOD_ADD = 1,
  drop_props_msg_METHOD_DEL = 2
};
bool drop_props_msg_METHOD_IsValid(int value);
const drop_props_msg_METHOD drop_props_msg_METHOD_METHOD_MIN = drop_props_msg_METHOD_ADD;
const drop_props_msg_METHOD drop_props_msg_METHOD_METHOD_MAX = drop_props_msg_METHOD_DEL;
const int drop_props_msg_METHOD_METHOD_ARRAYSIZE = drop_props_msg_METHOD_METHOD_MAX + 1;

const ::google::protobuf::EnumDescriptor* drop_props_msg_METHOD_descriptor();
inline const ::std::string& drop_props_msg_METHOD_Name(drop_props_msg_METHOD value) {
  return ::google::protobuf::internal::NameOfEnum(
    drop_props_msg_METHOD_descriptor(), value);
}
inline bool drop_props_msg_METHOD_Parse(
    const ::std::string& name, drop_props_msg_METHOD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<drop_props_msg_METHOD>(
    drop_props_msg_METHOD_descriptor(), name, value);
}
enum pick_up_props_rsp_result {
  pick_up_props_rsp_result_success = 1,
  pick_up_props_rsp_result_not_your = 2,
  pick_up_props_rsp_result_backpack_full = 3,
  pick_up_props_rsp_result_null = 4
};
bool pick_up_props_rsp_result_IsValid(int value);
const pick_up_props_rsp_result pick_up_props_rsp_result_result_MIN = pick_up_props_rsp_result_success;
const pick_up_props_rsp_result pick_up_props_rsp_result_result_MAX = pick_up_props_rsp_result_null;
const int pick_up_props_rsp_result_result_ARRAYSIZE = pick_up_props_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* pick_up_props_rsp_result_descriptor();
inline const ::std::string& pick_up_props_rsp_result_Name(pick_up_props_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    pick_up_props_rsp_result_descriptor(), value);
}
inline bool pick_up_props_rsp_result_Parse(
    const ::std::string& name, pick_up_props_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<pick_up_props_rsp_result>(
    pick_up_props_rsp_result_descriptor(), name, value);
}
enum upgrade_equip_rsp_result {
  upgrade_equip_rsp_result_success = 1,
  upgrade_equip_rsp_result_failed = 2
};
bool upgrade_equip_rsp_result_IsValid(int value);
const upgrade_equip_rsp_result upgrade_equip_rsp_result_result_MIN = upgrade_equip_rsp_result_success;
const upgrade_equip_rsp_result upgrade_equip_rsp_result_result_MAX = upgrade_equip_rsp_result_failed;
const int upgrade_equip_rsp_result_result_ARRAYSIZE = upgrade_equip_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* upgrade_equip_rsp_result_descriptor();
inline const ::std::string& upgrade_equip_rsp_result_Name(upgrade_equip_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    upgrade_equip_rsp_result_descriptor(), value);
}
inline bool upgrade_equip_rsp_result_Parse(
    const ::std::string& name, upgrade_equip_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<upgrade_equip_rsp_result>(
    upgrade_equip_rsp_result_descriptor(), name, value);
}
enum melting_equip_rsp_result {
  melting_equip_rsp_result_success = 1,
  melting_equip_rsp_result_failed = 2
};
bool melting_equip_rsp_result_IsValid(int value);
const melting_equip_rsp_result melting_equip_rsp_result_result_MIN = melting_equip_rsp_result_success;
const melting_equip_rsp_result melting_equip_rsp_result_result_MAX = melting_equip_rsp_result_failed;
const int melting_equip_rsp_result_result_ARRAYSIZE = melting_equip_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* melting_equip_rsp_result_descriptor();
inline const ::std::string& melting_equip_rsp_result_Name(melting_equip_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    melting_equip_rsp_result_descriptor(), value);
}
inline bool melting_equip_rsp_result_Parse(
    const ::std::string& name, melting_equip_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<melting_equip_rsp_result>(
    melting_equip_rsp_result_descriptor(), name, value);
}
enum cast_equip_rsp_result {
  cast_equip_rsp_result_success = 1,
  cast_equip_rsp_result_failed = 2
};
bool cast_equip_rsp_result_IsValid(int value);
const cast_equip_rsp_result cast_equip_rsp_result_result_MIN = cast_equip_rsp_result_success;
const cast_equip_rsp_result cast_equip_rsp_result_result_MAX = cast_equip_rsp_result_failed;
const int cast_equip_rsp_result_result_ARRAYSIZE = cast_equip_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* cast_equip_rsp_result_descriptor();
inline const ::std::string& cast_equip_rsp_result_Name(cast_equip_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    cast_equip_rsp_result_descriptor(), value);
}
inline bool cast_equip_rsp_result_Parse(
    const ::std::string& name, cast_equip_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<cast_equip_rsp_result>(
    cast_equip_rsp_result_descriptor(), name, value);
}
enum ITEM_OPERATE_TYPE {
  ITEM_OPERATE_TYPE_SUCCESS = 0,
  ITEM_OPERATE_TYPE_CONFIG_ERRO = 1,
  ITEM_OPERATE_TYPE_OBJECT_NULL = 2,
  ITEM_OPERATE_TYPE_HP_HAS_MAX = 3,
  ITEM_OPERATE_TYPE_SPACE_NOT_ENOUGH = 4,
  ITEM_OPERATE_TYPE_PET_LEVEL_HAS_MAX = 5,
  ITEM_OPERATE_TYPE_USE_LIMIT = 6,
  ITEM_OPERATE_TYPE_ITEM_NOT_ENOUGH = 7,
  ITEM_OPERATE_TYPE_ITEM_IS_DUE = 8
};
bool ITEM_OPERATE_TYPE_IsValid(int value);
const ITEM_OPERATE_TYPE ITEM_OPERATE_TYPE_MIN = ITEM_OPERATE_TYPE_SUCCESS;
const ITEM_OPERATE_TYPE ITEM_OPERATE_TYPE_MAX = ITEM_OPERATE_TYPE_ITEM_IS_DUE;
const int ITEM_OPERATE_TYPE_ARRAYSIZE = ITEM_OPERATE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ITEM_OPERATE_TYPE_descriptor();
inline const ::std::string& ITEM_OPERATE_TYPE_Name(ITEM_OPERATE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ITEM_OPERATE_TYPE_descriptor(), value);
}
inline bool ITEM_OPERATE_TYPE_Parse(
    const ::std::string& name, ITEM_OPERATE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ITEM_OPERATE_TYPE>(
    ITEM_OPERATE_TYPE_descriptor(), name, value);
}
enum SELL_RESULT_E {
  SELL_RESULT_SUCCESS = 0,
  SELL_RESULT_NOT_SELL = 1
};
bool SELL_RESULT_E_IsValid(int value);
const SELL_RESULT_E SELL_RESULT_E_MIN = SELL_RESULT_SUCCESS;
const SELL_RESULT_E SELL_RESULT_E_MAX = SELL_RESULT_NOT_SELL;
const int SELL_RESULT_E_ARRAYSIZE = SELL_RESULT_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* SELL_RESULT_E_descriptor();
inline const ::std::string& SELL_RESULT_E_Name(SELL_RESULT_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    SELL_RESULT_E_descriptor(), value);
}
inline bool SELL_RESULT_E_Parse(
    const ::std::string& name, SELL_RESULT_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SELL_RESULT_E>(
    SELL_RESULT_E_descriptor(), name, value);
}
enum UPGRADE_TYPE {
  UT_STRENGTHE = 0,
  UT_UPGRADE = 1
};
bool UPGRADE_TYPE_IsValid(int value);
const UPGRADE_TYPE UPGRADE_TYPE_MIN = UT_STRENGTHE;
const UPGRADE_TYPE UPGRADE_TYPE_MAX = UT_UPGRADE;
const int UPGRADE_TYPE_ARRAYSIZE = UPGRADE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* UPGRADE_TYPE_descriptor();
inline const ::std::string& UPGRADE_TYPE_Name(UPGRADE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    UPGRADE_TYPE_descriptor(), value);
}
inline bool UPGRADE_TYPE_Parse(
    const ::std::string& name, UPGRADE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UPGRADE_TYPE>(
    UPGRADE_TYPE_descriptor(), name, value);
}
enum BAPTIZE_TYPE_E {
  BAPTIZE_TYPE_MONEY = 1,
  BAPTIZE_TYPE_ONE = 2,
  BAPTIZE_TYPE_TWO = 3
};
bool BAPTIZE_TYPE_E_IsValid(int value);
const BAPTIZE_TYPE_E BAPTIZE_TYPE_E_MIN = BAPTIZE_TYPE_MONEY;
const BAPTIZE_TYPE_E BAPTIZE_TYPE_E_MAX = BAPTIZE_TYPE_TWO;
const int BAPTIZE_TYPE_E_ARRAYSIZE = BAPTIZE_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* BAPTIZE_TYPE_E_descriptor();
inline const ::std::string& BAPTIZE_TYPE_E_Name(BAPTIZE_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    BAPTIZE_TYPE_E_descriptor(), value);
}
inline bool BAPTIZE_TYPE_E_Parse(
    const ::std::string& name, BAPTIZE_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BAPTIZE_TYPE_E>(
    BAPTIZE_TYPE_E_descriptor(), name, value);
}
enum BAPTIZE_RESULT_TYPE_E {
  BAPTIZE_RESULT_TYPE_SUCESS = 0,
  BAPTIZE_RESULT_TYPE_FAILD = 1
};
bool BAPTIZE_RESULT_TYPE_E_IsValid(int value);
const BAPTIZE_RESULT_TYPE_E BAPTIZE_RESULT_TYPE_E_MIN = BAPTIZE_RESULT_TYPE_SUCESS;
const BAPTIZE_RESULT_TYPE_E BAPTIZE_RESULT_TYPE_E_MAX = BAPTIZE_RESULT_TYPE_FAILD;
const int BAPTIZE_RESULT_TYPE_E_ARRAYSIZE = BAPTIZE_RESULT_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* BAPTIZE_RESULT_TYPE_E_descriptor();
inline const ::std::string& BAPTIZE_RESULT_TYPE_E_Name(BAPTIZE_RESULT_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    BAPTIZE_RESULT_TYPE_E_descriptor(), value);
}
inline bool BAPTIZE_RESULT_TYPE_E_Parse(
    const ::std::string& name, BAPTIZE_RESULT_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BAPTIZE_RESULT_TYPE_E>(
    BAPTIZE_RESULT_TYPE_E_descriptor(), name, value);
}
enum ITEM_USE_SUB_TYPE_E {
  SUB_TYPE_ACQUIRE_SKILL = 0,
  SUB_TYPE_ACQUIRE_BUFF = 1,
  SUB_TYPE_ACQUIRE_TASK = 2,
  SUB_TYPE_OPEN_GIFT = 3,
  SUB_TYPE_MOUNT_UPGRATE = 18,
  SUB_TYPE_PET_UPGRATE = 19,
  SUB_TYPE_DROP_PACK = 26,
  SUB_TYPE_BOW_UPGRATE = 27,
  SUB_TYPE_BOW_SKILL_STUDY = 28,
  SUB_TYPE_MONTH = 29
};
bool ITEM_USE_SUB_TYPE_E_IsValid(int value);
const ITEM_USE_SUB_TYPE_E ITEM_USE_SUB_TYPE_E_MIN = SUB_TYPE_ACQUIRE_SKILL;
const ITEM_USE_SUB_TYPE_E ITEM_USE_SUB_TYPE_E_MAX = SUB_TYPE_MONTH;
const int ITEM_USE_SUB_TYPE_E_ARRAYSIZE = ITEM_USE_SUB_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* ITEM_USE_SUB_TYPE_E_descriptor();
inline const ::std::string& ITEM_USE_SUB_TYPE_E_Name(ITEM_USE_SUB_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    ITEM_USE_SUB_TYPE_E_descriptor(), value);
}
inline bool ITEM_USE_SUB_TYPE_E_Parse(
    const ::std::string& name, ITEM_USE_SUB_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ITEM_USE_SUB_TYPE_E>(
    ITEM_USE_SUB_TYPE_E_descriptor(), name, value);
}
enum ITEM_MEDICINCE_SUB_TYPE_E {
  SUB_TYPE_CHANGE_HP_PRE = 0,
  SUB_TYPE_CHANGE_EXP = 1,
  SUB_TYPE_CHANGE_TAEL = 2,
  SUB_TYPE_CHANGE_STRATEGY = 3,
  SUB_TYPE_CHANGE_LEVEL = 4,
  SUB_TYPE_CHANGE_PK_VALUE = 5,
  SUB_TYPE_CHANGE_RELIVE = 6,
  SUB_TYPE_CHANGE_MOUNT_BLESS = 7,
  SUB_TYPE_CHANGE_BOW_BLESS = 8,
  SUB_TYPE_CHANGE_EXP_PRE = 9,
  SUB_TYPE_CHANGE_SOWAR_WEAPON_EXP = 10,
  SUB_TYPE_CHANGE_MILITAR_VALUE = 11,
  SUB_TYPE_CHANGE_SHAP_CHANGE = 12,
  SUB_TYPE_CHANGE_CLEAN_SHAP = 13,
  SUB_TYPE_CHANGE_POWER = 14,
  SUB_TYPE_CHANGE_INGOT = 15
};
bool ITEM_MEDICINCE_SUB_TYPE_E_IsValid(int value);
const ITEM_MEDICINCE_SUB_TYPE_E ITEM_MEDICINCE_SUB_TYPE_E_MIN = SUB_TYPE_CHANGE_HP_PRE;
const ITEM_MEDICINCE_SUB_TYPE_E ITEM_MEDICINCE_SUB_TYPE_E_MAX = SUB_TYPE_CHANGE_INGOT;
const int ITEM_MEDICINCE_SUB_TYPE_E_ARRAYSIZE = ITEM_MEDICINCE_SUB_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* ITEM_MEDICINCE_SUB_TYPE_E_descriptor();
inline const ::std::string& ITEM_MEDICINCE_SUB_TYPE_E_Name(ITEM_MEDICINCE_SUB_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    ITEM_MEDICINCE_SUB_TYPE_E_descriptor(), value);
}
inline bool ITEM_MEDICINCE_SUB_TYPE_E_Parse(
    const ::std::string& name, ITEM_MEDICINCE_SUB_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ITEM_MEDICINCE_SUB_TYPE_E>(
    ITEM_MEDICINCE_SUB_TYPE_E_descriptor(), name, value);
}
enum COLLECT_RESULT_TYPE_E {
  COLLECT_RESULT_TYPE_SUCCESS = 1,
  COLLECT_RESULT_TYPE_NOT_ENOUGH_SPACE = 2
};
bool COLLECT_RESULT_TYPE_E_IsValid(int value);
const COLLECT_RESULT_TYPE_E COLLECT_RESULT_TYPE_E_MIN = COLLECT_RESULT_TYPE_SUCCESS;
const COLLECT_RESULT_TYPE_E COLLECT_RESULT_TYPE_E_MAX = COLLECT_RESULT_TYPE_NOT_ENOUGH_SPACE;
const int COLLECT_RESULT_TYPE_E_ARRAYSIZE = COLLECT_RESULT_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* COLLECT_RESULT_TYPE_E_descriptor();
inline const ::std::string& COLLECT_RESULT_TYPE_E_Name(COLLECT_RESULT_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    COLLECT_RESULT_TYPE_E_descriptor(), value);
}
inline bool COLLECT_RESULT_TYPE_E_Parse(
    const ::std::string& name, COLLECT_RESULT_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<COLLECT_RESULT_TYPE_E>(
    COLLECT_RESULT_TYPE_E_descriptor(), name, value);
}
enum BLACK_SHOP_RESULT_TYPE_E {
  BLACK_SHOP_RESULT_TYPE_REFLESH_SUCCESS = 1,
  BLACK_SHOP_RESULT_TYPE_SUCCESS = 2,
  BLACK_SHOP_RESULT_TYPE_CONFIG_ERRO = 3,
  BLACK_SHOP_RESULT_TYPE_ITEM_NOT_ENOUGH = 4,
  BLACK_SHOP_RESULT_TYPE_MELTING_NOT_ENOUGH = 5,
  BLACK_SHOP_RESULT_TYPE_REFLESH_COUNT_NOT_ENGOUH = 6,
  BLACK_SHOP_RESULT_TYPE_REFLESH_FAILD = 7
};
bool BLACK_SHOP_RESULT_TYPE_E_IsValid(int value);
const BLACK_SHOP_RESULT_TYPE_E BLACK_SHOP_RESULT_TYPE_E_MIN = BLACK_SHOP_RESULT_TYPE_REFLESH_SUCCESS;
const BLACK_SHOP_RESULT_TYPE_E BLACK_SHOP_RESULT_TYPE_E_MAX = BLACK_SHOP_RESULT_TYPE_REFLESH_FAILD;
const int BLACK_SHOP_RESULT_TYPE_E_ARRAYSIZE = BLACK_SHOP_RESULT_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* BLACK_SHOP_RESULT_TYPE_E_descriptor();
inline const ::std::string& BLACK_SHOP_RESULT_TYPE_E_Name(BLACK_SHOP_RESULT_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    BLACK_SHOP_RESULT_TYPE_E_descriptor(), value);
}
inline bool BLACK_SHOP_RESULT_TYPE_E_Parse(
    const ::std::string& name, BLACK_SHOP_RESULT_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BLACK_SHOP_RESULT_TYPE_E>(
    BLACK_SHOP_RESULT_TYPE_E_descriptor(), name, value);
}
// ===================================================================

class embed : public ::google::protobuf::Message {
 public:
  embed();
  virtual ~embed();

  embed(const embed& from);

  inline embed& operator=(const embed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const embed& default_instance();

  void Swap(embed* other);

  // implements Message ----------------------------------------------

  embed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const embed& from);
  void MergeFrom(const embed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hole_id = 1;
  inline bool has_hole_id() const;
  inline void clear_hole_id();
  static const int kHoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hole_id() const;
  inline void set_hole_id(::google::protobuf::uint32 value);

  // required uint32 gem_id = 2;
  inline bool has_gem_id() const;
  inline void clear_gem_id();
  static const int kGemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 gem_id() const;
  inline void set_gem_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.embed)
 private:
  inline void set_has_hole_id();
  inline void clear_has_hole_id();
  inline void set_has_gem_id();
  inline void clear_has_gem_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hole_id_;
  ::google::protobuf::uint32 gem_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static embed* default_instance_;
};
// -------------------------------------------------------------------

class expend_item_info : public ::google::protobuf::Message {
 public:
  expend_item_info();
  virtual ~expend_item_info();

  expend_item_info(const expend_item_info& from);

  inline expend_item_info& operator=(const expend_item_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const expend_item_info& default_instance();

  void Swap(expend_item_info* other);

  // implements Message ----------------------------------------------

  expend_item_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const expend_item_info& from);
  void MergeFrom(const expend_item_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 expend_id = 1;
  inline bool has_expend_id() const;
  inline void clear_expend_id();
  static const int kExpendIdFieldNumber = 1;
  inline ::google::protobuf::uint32 expend_id() const;
  inline void set_expend_id(::google::protobuf::uint32 value);

  // optional uint32 expend_count = 2;
  inline bool has_expend_count() const;
  inline void clear_expend_count();
  static const int kExpendCountFieldNumber = 2;
  inline ::google::protobuf::uint32 expend_count() const;
  inline void set_expend_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.expend_item_info)
 private:
  inline void set_has_expend_id();
  inline void clear_has_expend_id();
  inline void set_has_expend_count();
  inline void clear_has_expend_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 expend_id_;
  ::google::protobuf::uint32 expend_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static expend_item_info* default_instance_;
};
// -------------------------------------------------------------------

class props_info : public ::google::protobuf::Message {
 public:
  props_info();
  virtual ~props_info();

  props_info(const props_info& from);

  inline props_info& operator=(const props_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const props_info& default_instance();

  void Swap(props_info* other);

  // implements Message ----------------------------------------------

  props_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const props_info& from);
  void MergeFrom(const props_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef props_info_POS POS;
  static const POS SHOW = props_info_POS_SHOW;
  static const POS PACK = props_info_POS_PACK;
  static const POS DEPOT = props_info_POS_DEPOT;
  static const POS ROLE = props_info_POS_ROLE;
  static const POS EXPLORE = props_info_POS_EXPLORE;
  static const POS TASK = props_info_POS_TASK;
  static const POS SCENE = props_info_POS_SCENE;
  static const POS TEMP = props_info_POS_TEMP;
  static inline bool POS_IsValid(int value) {
    return props_info_POS_IsValid(value);
  }
  static const POS POS_MIN =
    props_info_POS_POS_MIN;
  static const POS POS_MAX =
    props_info_POS_POS_MAX;
  static const int POS_ARRAYSIZE =
    props_info_POS_POS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  POS_descriptor() {
    return props_info_POS_descriptor();
  }
  static inline const ::std::string& POS_Name(POS value) {
    return props_info_POS_Name(value);
  }
  static inline bool POS_Parse(const ::std::string& name,
      POS* value) {
    return props_info_POS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // required uint32 grid_index = 2;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // required uint32 props_id = 3;
  inline bool has_props_id() const;
  inline void clear_props_id();
  static const int kPropsIdFieldNumber = 3;
  inline ::google::protobuf::uint32 props_id() const;
  inline void set_props_id(::google::protobuf::uint32 value);

  // required uint32 count = 4 [default = 1];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required uint32 quality = 5 [default = 1];
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 5;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // required uint32 bind = 6 [default = 0];
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 6;
  inline ::google::protobuf::uint32 bind() const;
  inline void set_bind(::google::protobuf::uint32 value);

  // repeated .client.attribute attr = 7;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 7;
  inline const ::client::attribute& attr(int index) const;
  inline ::client::attribute* mutable_attr(int index);
  inline ::client::attribute* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::client::attribute >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::attribute >*
      mutable_attr();

  // repeated .client.embed gem = 8;
  inline int gem_size() const;
  inline void clear_gem();
  static const int kGemFieldNumber = 8;
  inline const ::client::embed& gem(int index) const;
  inline ::client::embed* mutable_gem(int index);
  inline ::client::embed* add_gem();
  inline const ::google::protobuf::RepeatedPtrField< ::client::embed >&
      gem() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::embed >*
      mutable_gem();

  // optional uint32 hole = 9 [default = 0];
  inline bool has_hole() const;
  inline void clear_hole();
  static const int kHoleFieldNumber = 9;
  inline ::google::protobuf::uint32 hole() const;
  inline void set_hole(::google::protobuf::uint32 value);

  // optional uint32 authed = 10 [default = 0];
  inline bool has_authed() const;
  inline void clear_authed();
  static const int kAuthedFieldNumber = 10;
  inline ::google::protobuf::uint32 authed() const;
  inline void set_authed(::google::protobuf::uint32 value);

  // optional uint32 level = 11 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 11;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 creator_id = 12 [default = 0];
  inline bool has_creator_id() const;
  inline void clear_creator_id();
  static const int kCreatorIdFieldNumber = 12;
  inline ::google::protobuf::uint32 creator_id() const;
  inline void set_creator_id(::google::protobuf::uint32 value);

  // optional uint32 active_time = 13 [default = 0];
  inline bool has_active_time() const;
  inline void clear_active_time();
  static const int kActiveTimeFieldNumber = 13;
  inline ::google::protobuf::uint32 active_time() const;
  inline void set_active_time(::google::protobuf::uint32 value);

  // optional uint32 end_date = 14 [default = 0];
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 14;
  inline ::google::protobuf::uint32 end_date() const;
  inline void set_end_date(::google::protobuf::uint32 value);

  // repeated .client.attribute last_attr = 15;
  inline int last_attr_size() const;
  inline void clear_last_attr();
  static const int kLastAttrFieldNumber = 15;
  inline const ::client::attribute& last_attr(int index) const;
  inline ::client::attribute* mutable_last_attr(int index);
  inline ::client::attribute* add_last_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::client::attribute >&
      last_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::attribute >*
      mutable_last_attr();

  // repeated .client.attribute upgrade_attr = 16;
  inline int upgrade_attr_size() const;
  inline void clear_upgrade_attr();
  static const int kUpgradeAttrFieldNumber = 16;
  inline const ::client::attribute& upgrade_attr(int index) const;
  inline ::client::attribute* mutable_upgrade_attr(int index);
  inline ::client::attribute* add_upgrade_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::client::attribute >&
      upgrade_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::attribute >*
      mutable_upgrade_attr();

  // optional uint32 expend_money = 17;
  inline bool has_expend_money() const;
  inline void clear_expend_money();
  static const int kExpendMoneyFieldNumber = 17;
  inline ::google::protobuf::uint32 expend_money() const;
  inline void set_expend_money(::google::protobuf::uint32 value);

  // repeated .client.expend_item_info info = 18;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 18;
  inline const ::client::expend_item_info& info(int index) const;
  inline ::client::expend_item_info* mutable_info(int index);
  inline ::client::expend_item_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::expend_item_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::expend_item_info >*
      mutable_info();

  // optional uint32 system_id = 19 [default = 0];
  inline bool has_system_id() const;
  inline void clear_system_id();
  static const int kSystemIdFieldNumber = 19;
  inline ::google::protobuf::uint32 system_id() const;
  inline void set_system_id(::google::protobuf::uint32 value);

  // optional uint32 to_type = 20;
  inline bool has_to_type() const;
  inline void clear_to_type();
  static const int kToTypeFieldNumber = 20;
  inline ::google::protobuf::uint32 to_type() const;
  inline void set_to_type(::google::protobuf::uint32 value);

  // optional uint32 timeout = 21;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 21;
  inline ::google::protobuf::uint32 timeout() const;
  inline void set_timeout(::google::protobuf::uint32 value);

  // optional bool is_due = 22 [default = false];
  inline bool has_is_due() const;
  inline void clear_is_due();
  static const int kIsDueFieldNumber = 22;
  inline bool is_due() const;
  inline void set_is_due(bool value);

  // @@protoc_insertion_point(class_scope:client.props_info)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_props_id();
  inline void clear_has_props_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_hole();
  inline void clear_has_hole();
  inline void set_has_authed();
  inline void clear_has_authed();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_creator_id();
  inline void clear_has_creator_id();
  inline void set_has_active_time();
  inline void clear_has_active_time();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_expend_money();
  inline void clear_has_expend_money();
  inline void set_has_system_id();
  inline void clear_has_system_id();
  inline void set_has_to_type();
  inline void clear_has_to_type();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_is_due();
  inline void clear_has_is_due();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 grid_index_;
  ::google::protobuf::uint32 props_id_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 bind_;
  ::google::protobuf::RepeatedPtrField< ::client::attribute > attr_;
  ::google::protobuf::RepeatedPtrField< ::client::embed > gem_;
  ::google::protobuf::uint32 hole_;
  ::google::protobuf::uint32 authed_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 creator_id_;
  ::google::protobuf::uint32 active_time_;
  ::google::protobuf::uint32 end_date_;
  ::google::protobuf::RepeatedPtrField< ::client::attribute > last_attr_;
  ::google::protobuf::RepeatedPtrField< ::client::attribute > upgrade_attr_;
  ::google::protobuf::RepeatedPtrField< ::client::expend_item_info > info_;
  ::google::protobuf::uint32 expend_money_;
  ::google::protobuf::uint32 system_id_;
  ::google::protobuf::uint32 to_type_;
  ::google::protobuf::uint32 timeout_;
  bool is_due_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static props_info* default_instance_;
};
// -------------------------------------------------------------------

class role_props_msg : public ::google::protobuf::Message {
 public:
  role_props_msg();
  virtual ~role_props_msg();

  role_props_msg(const role_props_msg& from);

  inline role_props_msg& operator=(const role_props_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_props_msg& default_instance();

  void Swap(role_props_msg* other);

  // implements Message ----------------------------------------------

  role_props_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_props_msg& from);
  void MergeFrom(const role_props_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.role_data rd = 1;
  inline bool has_rd() const;
  inline void clear_rd();
  static const int kRdFieldNumber = 1;
  inline const ::client::role_data& rd() const;
  inline ::client::role_data* mutable_rd();
  inline ::client::role_data* release_rd();
  inline void set_allocated_rd(::client::role_data* rd);

  // repeated .client.props_info pi = 2;
  inline int pi_size() const;
  inline void clear_pi();
  static const int kPiFieldNumber = 2;
  inline const ::client::props_info& pi(int index) const;
  inline ::client::props_info* mutable_pi(int index);
  inline ::client::props_info* add_pi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::props_info >&
      pi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::props_info >*
      mutable_pi();

  // @@protoc_insertion_point(class_scope:client.role_props_msg)
 private:
  inline void set_has_rd();
  inline void clear_has_rd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::role_data* rd_;
  ::google::protobuf::RepeatedPtrField< ::client::props_info > pi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static role_props_msg* default_instance_;
};
// -------------------------------------------------------------------

class use_props_req : public ::google::protobuf::Message {
 public:
  use_props_req();
  virtual ~use_props_req();

  use_props_req(const use_props_req& from);

  inline use_props_req& operator=(const use_props_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const use_props_req& default_instance();

  void Swap(use_props_req* other);

  // implements Message ----------------------------------------------

  use_props_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const use_props_req& from);
  void MergeFrom(const use_props_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // required uint32 use_num = 2;
  inline bool has_use_num() const;
  inline void clear_use_num();
  static const int kUseNumFieldNumber = 2;
  inline ::google::protobuf::uint32 use_num() const;
  inline void set_use_num(::google::protobuf::uint32 value);

  // optional .client.role_data rds = 3;
  inline bool has_rds() const;
  inline void clear_rds();
  static const int kRdsFieldNumber = 3;
  inline const ::client::role_data& rds() const;
  inline ::client::role_data* mutable_rds();
  inline ::client::role_data* release_rds();
  inline void set_allocated_rds(::client::role_data* rds);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.use_props_req)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_use_num();
  inline void clear_has_use_num();
  inline void set_has_rds();
  inline void clear_has_rds();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 grid_index_;
  ::google::protobuf::uint32 use_num_;
  ::client::role_data* rds_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static use_props_req* default_instance_;
};
// -------------------------------------------------------------------

class use_props_rsp : public ::google::protobuf::Message {
 public:
  use_props_rsp();
  virtual ~use_props_rsp();

  use_props_rsp(const use_props_rsp& from);

  inline use_props_rsp& operator=(const use_props_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const use_props_rsp& default_instance();

  void Swap(use_props_rsp* other);

  // implements Message ----------------------------------------------

  use_props_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const use_props_rsp& from);
  void MergeFrom(const use_props_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.ITEM_OPERATE_TYPE opt_type = 1;
  inline bool has_opt_type() const;
  inline void clear_opt_type();
  static const int kOptTypeFieldNumber = 1;
  inline ::client::ITEM_OPERATE_TYPE opt_type() const;
  inline void set_opt_type(::client::ITEM_OPERATE_TYPE value);

  // optional uint32 grid_index = 2;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // optional .client.role_data rds = 3;
  inline bool has_rds() const;
  inline void clear_rds();
  static const int kRdsFieldNumber = 3;
  inline const ::client::role_data& rds() const;
  inline ::client::role_data* mutable_rds();
  inline ::client::role_data* release_rds();
  inline void set_allocated_rds(::client::role_data* rds);

  // @@protoc_insertion_point(class_scope:client.use_props_rsp)
 private:
  inline void set_has_opt_type();
  inline void clear_has_opt_type();
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_rds();
  inline void clear_has_rds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int opt_type_;
  ::google::protobuf::uint32 grid_index_;
  ::client::role_data* rds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static use_props_rsp* default_instance_;
};
// -------------------------------------------------------------------

class sell_props_req : public ::google::protobuf::Message {
 public:
  sell_props_req();
  virtual ~sell_props_req();

  sell_props_req(const sell_props_req& from);

  inline sell_props_req& operator=(const sell_props_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sell_props_req& default_instance();

  void Swap(sell_props_req* other);

  // implements Message ----------------------------------------------

  sell_props_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sell_props_req& from);
  void MergeFrom(const sell_props_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // required uint32 props_count = 2;
  inline bool has_props_count() const;
  inline void clear_props_count();
  static const int kPropsCountFieldNumber = 2;
  inline ::google::protobuf::uint32 props_count() const;
  inline void set_props_count(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.sell_props_req)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_props_count();
  inline void clear_has_props_count();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 grid_index_;
  ::google::protobuf::uint32 props_count_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static sell_props_req* default_instance_;
};
// -------------------------------------------------------------------

class sell_props_rsp : public ::google::protobuf::Message {
 public:
  sell_props_rsp();
  virtual ~sell_props_rsp();

  sell_props_rsp(const sell_props_rsp& from);

  inline sell_props_rsp& operator=(const sell_props_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sell_props_rsp& default_instance();

  void Swap(sell_props_rsp* other);

  // implements Message ----------------------------------------------

  sell_props_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sell_props_rsp& from);
  void MergeFrom(const sell_props_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // required uint32 result_type = 2;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.sell_props_rsp)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 grid_index_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static sell_props_rsp* default_instance_;
};
// -------------------------------------------------------------------

class move_props_req : public ::google::protobuf::Message {
 public:
  move_props_req();
  virtual ~move_props_req();

  move_props_req(const move_props_req& from);

  inline move_props_req& operator=(const move_props_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const move_props_req& default_instance();

  void Swap(move_props_req* other);

  // implements Message ----------------------------------------------

  move_props_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const move_props_req& from);
  void MergeFrom(const move_props_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 src_grid_index = 1;
  inline bool has_src_grid_index() const;
  inline void clear_src_grid_index();
  static const int kSrcGridIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 src_grid_index() const;
  inline void set_src_grid_index(::google::protobuf::uint32 value);

  // required uint32 dst_grid_index = 2;
  inline bool has_dst_grid_index() const;
  inline void clear_dst_grid_index();
  static const int kDstGridIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 dst_grid_index() const;
  inline void set_dst_grid_index(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.move_props_req)
 private:
  inline void set_has_src_grid_index();
  inline void clear_has_src_grid_index();
  inline void set_has_dst_grid_index();
  inline void clear_has_dst_grid_index();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 src_grid_index_;
  ::google::protobuf::uint32 dst_grid_index_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static move_props_req* default_instance_;
};
// -------------------------------------------------------------------

class equip_props_req : public ::google::protobuf::Message {
 public:
  equip_props_req();
  virtual ~equip_props_req();

  equip_props_req(const equip_props_req& from);

  inline equip_props_req& operator=(const equip_props_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equip_props_req& default_instance();

  void Swap(equip_props_req* other);

  // implements Message ----------------------------------------------

  equip_props_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equip_props_req& from);
  void MergeFrom(const equip_props_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 src_grid_index = 1;
  inline bool has_src_grid_index() const;
  inline void clear_src_grid_index();
  static const int kSrcGridIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 src_grid_index() const;
  inline void set_src_grid_index(::google::protobuf::uint32 value);

  // required uint32 dst_grid_index = 2;
  inline bool has_dst_grid_index() const;
  inline void clear_dst_grid_index();
  static const int kDstGridIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 dst_grid_index() const;
  inline void set_dst_grid_index(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.equip_props_req)
 private:
  inline void set_has_src_grid_index();
  inline void clear_has_src_grid_index();
  inline void set_has_dst_grid_index();
  inline void clear_has_dst_grid_index();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 src_grid_index_;
  ::google::protobuf::uint32 dst_grid_index_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static equip_props_req* default_instance_;
};
// -------------------------------------------------------------------

class equip_props_rsp : public ::google::protobuf::Message {
 public:
  equip_props_rsp();
  virtual ~equip_props_rsp();

  equip_props_rsp(const equip_props_rsp& from);

  inline equip_props_rsp& operator=(const equip_props_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const equip_props_rsp& default_instance();

  void Swap(equip_props_rsp* other);

  // implements Message ----------------------------------------------

  equip_props_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const equip_props_rsp& from);
  void MergeFrom(const equip_props_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 clear_grid_index = 1;
  inline bool has_clear_grid_index() const;
  inline void clear_clear_grid_index();
  static const int kClearGridIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 clear_grid_index() const;
  inline void set_clear_grid_index(::google::protobuf::uint32 value);

  // optional uint32 add_grid_index = 2;
  inline bool has_add_grid_index() const;
  inline void clear_add_grid_index();
  static const int kAddGridIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 add_grid_index() const;
  inline void set_add_grid_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.equip_props_rsp)
 private:
  inline void set_has_clear_grid_index();
  inline void clear_has_clear_grid_index();
  inline void set_has_add_grid_index();
  inline void clear_has_add_grid_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 clear_grid_index_;
  ::google::protobuf::uint32 add_grid_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static equip_props_rsp* default_instance_;
};
// -------------------------------------------------------------------

class drop_props_info : public ::google::protobuf::Message {
 public:
  drop_props_info();
  virtual ~drop_props_info();

  drop_props_info(const drop_props_info& from);

  inline drop_props_info& operator=(const drop_props_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const drop_props_info& default_instance();

  void Swap(drop_props_info* other);

  // implements Message ----------------------------------------------

  drop_props_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const drop_props_info& from);
  void MergeFrom(const drop_props_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 belong = 1;
  inline int belong_size() const;
  inline void clear_belong();
  static const int kBelongFieldNumber = 1;
  inline ::google::protobuf::uint32 belong(int index) const;
  inline void set_belong(int index, ::google::protobuf::uint32 value);
  inline void add_belong(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      belong() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_belong();

  // required uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required uint32 x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // required uint32 z = 5;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 5;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // required uint32 end_time = 6;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // required uint32 protect_time = 7;
  inline bool has_protect_time() const;
  inline void clear_protect_time();
  static const int kProtectTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 protect_time() const;
  inline void set_protect_time(::google::protobuf::uint32 value);

  // required .client.props_info pi = 8;
  inline bool has_pi() const;
  inline void clear_pi();
  static const int kPiFieldNumber = 8;
  inline const ::client::props_info& pi() const;
  inline ::client::props_info* mutable_pi();
  inline ::client::props_info* release_pi();
  inline void set_allocated_pi(::client::props_info* pi);

  // @@protoc_insertion_point(class_scope:client.drop_props_info)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_protect_time();
  inline void clear_has_protect_time();
  inline void set_has_pi();
  inline void clear_has_pi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > belong_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;
  ::google::protobuf::uint32 end_time_;
  ::google::protobuf::uint32 protect_time_;
  ::client::props_info* pi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static drop_props_info* default_instance_;
};
// -------------------------------------------------------------------

class drop_props_msg : public ::google::protobuf::Message {
 public:
  drop_props_msg();
  virtual ~drop_props_msg();

  drop_props_msg(const drop_props_msg& from);

  inline drop_props_msg& operator=(const drop_props_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const drop_props_msg& default_instance();

  void Swap(drop_props_msg* other);

  // implements Message ----------------------------------------------

  drop_props_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const drop_props_msg& from);
  void MergeFrom(const drop_props_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef drop_props_msg_METHOD METHOD;
  static const METHOD ADD = drop_props_msg_METHOD_ADD;
  static const METHOD DEL = drop_props_msg_METHOD_DEL;
  static inline bool METHOD_IsValid(int value) {
    return drop_props_msg_METHOD_IsValid(value);
  }
  static const METHOD METHOD_MIN =
    drop_props_msg_METHOD_METHOD_MIN;
  static const METHOD METHOD_MAX =
    drop_props_msg_METHOD_METHOD_MAX;
  static const int METHOD_ARRAYSIZE =
    drop_props_msg_METHOD_METHOD_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  METHOD_descriptor() {
    return drop_props_msg_METHOD_descriptor();
  }
  static inline const ::std::string& METHOD_Name(METHOD value) {
    return drop_props_msg_METHOD_Name(value);
  }
  static inline bool METHOD_Parse(const ::std::string& name,
      METHOD* value) {
    return drop_props_msg_METHOD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.drop_props_msg.METHOD m = 1;
  inline bool has_m() const;
  inline void clear_m();
  static const int kMFieldNumber = 1;
  inline ::client::drop_props_msg_METHOD m() const;
  inline void set_m(::client::drop_props_msg_METHOD value);

  // repeated .client.drop_props_info dpi = 2;
  inline int dpi_size() const;
  inline void clear_dpi();
  static const int kDpiFieldNumber = 2;
  inline const ::client::drop_props_info& dpi(int index) const;
  inline ::client::drop_props_info* mutable_dpi(int index);
  inline ::client::drop_props_info* add_dpi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::drop_props_info >&
      dpi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::drop_props_info >*
      mutable_dpi();

  // @@protoc_insertion_point(class_scope:client.drop_props_msg)
 private:
  inline void set_has_m();
  inline void clear_has_m();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::drop_props_info > dpi_;
  int m_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static drop_props_msg* default_instance_;
};
// -------------------------------------------------------------------

class pick_up_props_req : public ::google::protobuf::Message {
 public:
  pick_up_props_req();
  virtual ~pick_up_props_req();

  pick_up_props_req(const pick_up_props_req& from);

  inline pick_up_props_req& operator=(const pick_up_props_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pick_up_props_req& default_instance();

  void Swap(pick_up_props_req* other);

  // implements Message ----------------------------------------------

  pick_up_props_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pick_up_props_req& from);
  void MergeFrom(const pick_up_props_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 index = 1;
  inline int index_size() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index(int index) const;
  inline void set_index(int index, ::google::protobuf::uint32 value);
  inline void add_index(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_index();

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pick_up_props_req)
 private:
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > index_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static pick_up_props_req* default_instance_;
};
// -------------------------------------------------------------------

class pick_up_props_rsp : public ::google::protobuf::Message {
 public:
  pick_up_props_rsp();
  virtual ~pick_up_props_rsp();

  pick_up_props_rsp(const pick_up_props_rsp& from);

  inline pick_up_props_rsp& operator=(const pick_up_props_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pick_up_props_rsp& default_instance();

  void Swap(pick_up_props_rsp* other);

  // implements Message ----------------------------------------------

  pick_up_props_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pick_up_props_rsp& from);
  void MergeFrom(const pick_up_props_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef pick_up_props_rsp_result result;
  static const result success = pick_up_props_rsp_result_success;
  static const result not_your = pick_up_props_rsp_result_not_your;
  static const result backpack_full = pick_up_props_rsp_result_backpack_full;
  static const result null = pick_up_props_rsp_result_null;
  static inline bool result_IsValid(int value) {
    return pick_up_props_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    pick_up_props_rsp_result_result_MIN;
  static const result result_MAX =
    pick_up_props_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    pick_up_props_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return pick_up_props_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return pick_up_props_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return pick_up_props_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 index = 1;
  inline int index_size() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index(int index) const;
  inline void set_index(int index, ::google::protobuf::uint32 value);
  inline void add_index(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_index();

  // required .client.pick_up_props_rsp.result ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::client::pick_up_props_rsp_result ret() const;
  inline void set_ret(::client::pick_up_props_rsp_result value);

  // @@protoc_insertion_point(class_scope:client.pick_up_props_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > index_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static pick_up_props_rsp* default_instance_;
};
// -------------------------------------------------------------------

class upgrade_equip_req : public ::google::protobuf::Message {
 public:
  upgrade_equip_req();
  virtual ~upgrade_equip_req();

  upgrade_equip_req(const upgrade_equip_req& from);

  inline upgrade_equip_req& operator=(const upgrade_equip_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upgrade_equip_req& default_instance();

  void Swap(upgrade_equip_req* other);

  // implements Message ----------------------------------------------

  upgrade_equip_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upgrade_equip_req& from);
  void MergeFrom(const upgrade_equip_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // required uint32 target_level = 2;
  inline bool has_target_level() const;
  inline void clear_target_level();
  static const int kTargetLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 target_level() const;
  inline void set_target_level(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.upgrade_equip_req)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_target_level();
  inline void clear_has_target_level();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 grid_index_;
  ::google::protobuf::uint32 target_level_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static upgrade_equip_req* default_instance_;
};
// -------------------------------------------------------------------

class upgrade_equip_rsp : public ::google::protobuf::Message {
 public:
  upgrade_equip_rsp();
  virtual ~upgrade_equip_rsp();

  upgrade_equip_rsp(const upgrade_equip_rsp& from);

  inline upgrade_equip_rsp& operator=(const upgrade_equip_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upgrade_equip_rsp& default_instance();

  void Swap(upgrade_equip_rsp* other);

  // implements Message ----------------------------------------------

  upgrade_equip_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upgrade_equip_rsp& from);
  void MergeFrom(const upgrade_equip_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef upgrade_equip_rsp_result result;
  static const result success = upgrade_equip_rsp_result_success;
  static const result failed = upgrade_equip_rsp_result_failed;
  static inline bool result_IsValid(int value) {
    return upgrade_equip_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    upgrade_equip_rsp_result_result_MIN;
  static const result result_MAX =
    upgrade_equip_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    upgrade_equip_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return upgrade_equip_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return upgrade_equip_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return upgrade_equip_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // required .client.upgrade_equip_rsp.result result_type = 2;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 2;
  inline ::client::upgrade_equip_rsp_result result_type() const;
  inline void set_result_type(::client::upgrade_equip_rsp_result value);

  // @@protoc_insertion_point(class_scope:client.upgrade_equip_rsp)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 grid_index_;
  int result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static upgrade_equip_rsp* default_instance_;
};
// -------------------------------------------------------------------

class melting_equip_req : public ::google::protobuf::Message {
 public:
  melting_equip_req();
  virtual ~melting_equip_req();

  melting_equip_req(const melting_equip_req& from);

  inline melting_equip_req& operator=(const melting_equip_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const melting_equip_req& default_instance();

  void Swap(melting_equip_req* other);

  // implements Message ----------------------------------------------

  melting_equip_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const melting_equip_req& from);
  void MergeFrom(const melting_equip_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 melting_type = 1;
  inline bool has_melting_type() const;
  inline void clear_melting_type();
  static const int kMeltingTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 melting_type() const;
  inline void set_melting_type(::google::protobuf::uint32 value);

  // repeated uint32 grid_index = 2;
  inline int grid_index_size() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 grid_index(int index) const;
  inline void set_grid_index(int index, ::google::protobuf::uint32 value);
  inline void add_grid_index(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      grid_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_grid_index();

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.melting_equip_req)
 private:
  inline void set_has_melting_type();
  inline void clear_has_melting_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > grid_index_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 melting_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static melting_equip_req* default_instance_;
};
// -------------------------------------------------------------------

class melting_equip_rsp : public ::google::protobuf::Message {
 public:
  melting_equip_rsp();
  virtual ~melting_equip_rsp();

  melting_equip_rsp(const melting_equip_rsp& from);

  inline melting_equip_rsp& operator=(const melting_equip_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const melting_equip_rsp& default_instance();

  void Swap(melting_equip_rsp* other);

  // implements Message ----------------------------------------------

  melting_equip_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const melting_equip_rsp& from);
  void MergeFrom(const melting_equip_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef melting_equip_rsp_result result;
  static const result success = melting_equip_rsp_result_success;
  static const result failed = melting_equip_rsp_result_failed;
  static inline bool result_IsValid(int value) {
    return melting_equip_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    melting_equip_rsp_result_result_MIN;
  static const result result_MAX =
    melting_equip_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    melting_equip_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return melting_equip_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return melting_equip_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return melting_equip_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.melting_equip_rsp.result result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::client::melting_equip_rsp_result result_type() const;
  inline void set_result_type(::client::melting_equip_rsp_result value);

  // @@protoc_insertion_point(class_scope:client.melting_equip_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static melting_equip_rsp* default_instance_;
};
// -------------------------------------------------------------------

class cast_equip_req : public ::google::protobuf::Message {
 public:
  cast_equip_req();
  virtual ~cast_equip_req();

  cast_equip_req(const cast_equip_req& from);

  inline cast_equip_req& operator=(const cast_equip_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cast_equip_req& default_instance();

  void Swap(cast_equip_req* other);

  // implements Message ----------------------------------------------

  cast_equip_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cast_equip_req& from);
  void MergeFrom(const cast_equip_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 equip_id = 1;
  inline bool has_equip_id() const;
  inline void clear_equip_id();
  static const int kEquipIdFieldNumber = 1;
  inline ::google::protobuf::uint32 equip_id() const;
  inline void set_equip_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.cast_equip_req)
 private:
  inline void set_has_equip_id();
  inline void clear_has_equip_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 equip_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static cast_equip_req* default_instance_;
};
// -------------------------------------------------------------------

class cast_equip_rsp : public ::google::protobuf::Message {
 public:
  cast_equip_rsp();
  virtual ~cast_equip_rsp();

  cast_equip_rsp(const cast_equip_rsp& from);

  inline cast_equip_rsp& operator=(const cast_equip_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cast_equip_rsp& default_instance();

  void Swap(cast_equip_rsp* other);

  // implements Message ----------------------------------------------

  cast_equip_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cast_equip_rsp& from);
  void MergeFrom(const cast_equip_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef cast_equip_rsp_result result;
  static const result success = cast_equip_rsp_result_success;
  static const result failed = cast_equip_rsp_result_failed;
  static inline bool result_IsValid(int value) {
    return cast_equip_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    cast_equip_rsp_result_result_MIN;
  static const result result_MAX =
    cast_equip_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    cast_equip_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return cast_equip_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return cast_equip_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return cast_equip_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.cast_equip_rsp.result result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::client::cast_equip_rsp_result result_type() const;
  inline void set_result_type(::client::cast_equip_rsp_result value);

  // required .client.props_info pi = 2;
  inline bool has_pi() const;
  inline void clear_pi();
  static const int kPiFieldNumber = 2;
  inline const ::client::props_info& pi() const;
  inline ::client::props_info* mutable_pi();
  inline ::client::props_info* release_pi();
  inline void set_allocated_pi(::client::props_info* pi);

  // @@protoc_insertion_point(class_scope:client.cast_equip_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_pi();
  inline void clear_has_pi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::props_info* pi_;
  int result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static cast_equip_rsp* default_instance_;
};
// -------------------------------------------------------------------

class treasure_req : public ::google::protobuf::Message {
 public:
  treasure_req();
  virtual ~treasure_req();

  treasure_req(const treasure_req& from);

  inline treasure_req& operator=(const treasure_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const treasure_req& default_instance();

  void Swap(treasure_req* other);

  // implements Message ----------------------------------------------

  treasure_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const treasure_req& from);
  void MergeFrom(const treasure_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 treasure_count = 1;
  inline bool has_treasure_count() const;
  inline void clear_treasure_count();
  static const int kTreasureCountFieldNumber = 1;
  inline ::google::protobuf::uint32 treasure_count() const;
  inline void set_treasure_count(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.treasure_req)
 private:
  inline void set_has_treasure_count();
  inline void clear_has_treasure_count();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 treasure_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static treasure_req* default_instance_;
};
// -------------------------------------------------------------------

class treasure_rsp : public ::google::protobuf::Message {
 public:
  treasure_rsp();
  virtual ~treasure_rsp();

  treasure_rsp(const treasure_rsp& from);

  inline treasure_rsp& operator=(const treasure_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const treasure_rsp& default_instance();

  void Swap(treasure_rsp* other);

  // implements Message ----------------------------------------------

  treasure_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const treasure_rsp& from);
  void MergeFrom(const treasure_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // repeated uint32 treasure_lost = 2;
  inline int treasure_lost_size() const;
  inline void clear_treasure_lost();
  static const int kTreasureLostFieldNumber = 2;
  inline ::google::protobuf::uint32 treasure_lost(int index) const;
  inline void set_treasure_lost(int index, ::google::protobuf::uint32 value);
  inline void add_treasure_lost(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      treasure_lost() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_treasure_lost();

  // @@protoc_insertion_point(class_scope:client.treasure_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > treasure_lost_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static treasure_rsp* default_instance_;
};
// -------------------------------------------------------------------

class baptize_req : public ::google::protobuf::Message {
 public:
  baptize_req();
  virtual ~baptize_req();

  baptize_req(const baptize_req& from);

  inline baptize_req& operator=(const baptize_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const baptize_req& default_instance();

  void Swap(baptize_req* other);

  // implements Message ----------------------------------------------

  baptize_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const baptize_req& from);
  void MergeFrom(const baptize_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 baptize_type = 1;
  inline bool has_baptize_type() const;
  inline void clear_baptize_type();
  static const int kBaptizeTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 baptize_type() const;
  inline void set_baptize_type(::google::protobuf::uint32 value);

  // required uint32 grid_index = 2;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.baptize_req)
 private:
  inline void set_has_baptize_type();
  inline void clear_has_baptize_type();
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 baptize_type_;
  ::google::protobuf::uint32 grid_index_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static baptize_req* default_instance_;
};
// -------------------------------------------------------------------

class baptize_rsp : public ::google::protobuf::Message {
 public:
  baptize_rsp();
  virtual ~baptize_rsp();

  baptize_rsp(const baptize_rsp& from);

  inline baptize_rsp& operator=(const baptize_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const baptize_rsp& default_instance();

  void Swap(baptize_rsp* other);

  // implements Message ----------------------------------------------

  baptize_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const baptize_rsp& from);
  void MergeFrom(const baptize_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // required uint32 grid_index = 2;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.baptize_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_grid_index();
  inline void clear_has_grid_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_type_;
  ::google::protobuf::uint32 grid_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static baptize_rsp* default_instance_;
};
// -------------------------------------------------------------------

class baptize_save_req : public ::google::protobuf::Message {
 public:
  baptize_save_req();
  virtual ~baptize_save_req();

  baptize_save_req(const baptize_save_req& from);

  inline baptize_save_req& operator=(const baptize_save_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const baptize_save_req& default_instance();

  void Swap(baptize_save_req* other);

  // implements Message ----------------------------------------------

  baptize_save_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const baptize_save_req& from);
  void MergeFrom(const baptize_save_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.baptize_save_req)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 grid_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static baptize_save_req* default_instance_;
};
// -------------------------------------------------------------------

class baptize_save_rsp : public ::google::protobuf::Message {
 public:
  baptize_save_rsp();
  virtual ~baptize_save_rsp();

  baptize_save_rsp(const baptize_save_rsp& from);

  inline baptize_save_rsp& operator=(const baptize_save_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const baptize_save_rsp& default_instance();

  void Swap(baptize_save_rsp* other);

  // implements Message ----------------------------------------------

  baptize_save_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const baptize_save_rsp& from);
  void MergeFrom(const baptize_save_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // required uint32 grid_index = 2;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 grid_index() const;
  inline void set_grid_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.baptize_save_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_grid_index();
  inline void clear_has_grid_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_type_;
  ::google::protobuf::uint32 grid_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static baptize_save_rsp* default_instance_;
};
// -------------------------------------------------------------------

class collect_explore_req : public ::google::protobuf::Message {
 public:
  collect_explore_req();
  virtual ~collect_explore_req();

  collect_explore_req(const collect_explore_req& from);

  inline collect_explore_req& operator=(const collect_explore_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const collect_explore_req& default_instance();

  void Swap(collect_explore_req* other);

  // implements Message ----------------------------------------------

  collect_explore_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const collect_explore_req& from);
  void MergeFrom(const collect_explore_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 collect_type = 1;
  inline bool has_collect_type() const;
  inline void clear_collect_type();
  static const int kCollectTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 collect_type() const;
  inline void set_collect_type(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.collect_explore_req)
 private:
  inline void set_has_collect_type();
  inline void clear_has_collect_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 collect_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static collect_explore_req* default_instance_;
};
// -------------------------------------------------------------------

class collect_explore_rsp : public ::google::protobuf::Message {
 public:
  collect_explore_rsp();
  virtual ~collect_explore_rsp();

  collect_explore_rsp(const collect_explore_rsp& from);

  inline collect_explore_rsp& operator=(const collect_explore_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const collect_explore_rsp& default_instance();

  void Swap(collect_explore_rsp* other);

  // implements Message ----------------------------------------------

  collect_explore_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const collect_explore_rsp& from);
  void MergeFrom(const collect_explore_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.collect_explore_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static collect_explore_rsp* default_instance_;
};
// -------------------------------------------------------------------

class record_item_info : public ::google::protobuf::Message {
 public:
  record_item_info();
  virtual ~record_item_info();

  record_item_info(const record_item_info& from);

  inline record_item_info& operator=(const record_item_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const record_item_info& default_instance();

  void Swap(record_item_info* other);

  // implements Message ----------------------------------------------

  record_item_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const record_item_info& from);
  void MergeFrom(const record_item_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 item_count = 2;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.record_item_info)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static record_item_info* default_instance_;
};
// -------------------------------------------------------------------

class treasure_db_info : public ::google::protobuf::Message {
 public:
  treasure_db_info();
  virtual ~treasure_db_info();

  treasure_db_info(const treasure_db_info& from);

  inline treasure_db_info& operator=(const treasure_db_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const treasure_db_info& default_instance();

  void Swap(treasure_db_info* other);

  // implements Message ----------------------------------------------

  treasure_db_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const treasure_db_info& from);
  void MergeFrom(const treasure_db_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1 [default = 0];
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 item_count = 2 [default = 0];
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);

  // optional uint32 shop_id = 3;
  inline bool has_shop_id() const;
  inline void clear_shop_id();
  static const int kShopIdFieldNumber = 3;
  inline ::google::protobuf::uint32 shop_id() const;
  inline void set_shop_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.treasure_db_info)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_shop_id();
  inline void clear_has_shop_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_count_;
  ::google::protobuf::uint32 shop_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static treasure_db_info* default_instance_;
};
// -------------------------------------------------------------------

class black_shop_db_info : public ::google::protobuf::Message {
 public:
  black_shop_db_info();
  virtual ~black_shop_db_info();

  black_shop_db_info(const black_shop_db_info& from);

  inline black_shop_db_info& operator=(const black_shop_db_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const black_shop_db_info& default_instance();

  void Swap(black_shop_db_info* other);

  // implements Message ----------------------------------------------

  black_shop_db_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const black_shop_db_info& from);
  void MergeFrom(const black_shop_db_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_slot = 1;
  inline bool has_item_slot() const;
  inline void clear_item_slot();
  static const int kItemSlotFieldNumber = 1;
  inline ::google::protobuf::uint32 item_slot() const;
  inline void set_item_slot(::google::protobuf::uint32 value);

  // optional uint32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 item_count = 3;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 3;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);

  // optional uint32 key_id = 4;
  inline bool has_key_id() const;
  inline void clear_key_id();
  static const int kKeyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 key_id() const;
  inline void set_key_id(::google::protobuf::uint32 value);

  // optional bool is_buy = 5 [default = false];
  inline bool has_is_buy() const;
  inline void clear_is_buy();
  static const int kIsBuyFieldNumber = 5;
  inline bool is_buy() const;
  inline void set_is_buy(bool value);

  // @@protoc_insertion_point(class_scope:client.black_shop_db_info)
 private:
  inline void set_has_item_slot();
  inline void clear_has_item_slot();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_key_id();
  inline void clear_has_key_id();
  inline void set_has_is_buy();
  inline void clear_has_is_buy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 item_slot_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_count_;
  ::google::protobuf::uint32 key_id_;
  bool is_buy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static black_shop_db_info* default_instance_;
};
// -------------------------------------------------------------------

class shop_info : public ::google::protobuf::Message {
 public:
  shop_info();
  virtual ~shop_info();

  shop_info(const shop_info& from);

  inline shop_info& operator=(const shop_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shop_info& default_instance();

  void Swap(shop_info* other);

  // implements Message ----------------------------------------------

  shop_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shop_info& from);
  void MergeFrom(const shop_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 item_count = 2;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);

  // optional uint32 probability = 3;
  inline bool has_probability() const;
  inline void clear_probability();
  static const int kProbabilityFieldNumber = 3;
  inline ::google::protobuf::uint32 probability() const;
  inline void set_probability(::google::protobuf::uint32 value);

  // optional uint32 key_id = 4;
  inline bool has_key_id() const;
  inline void clear_key_id();
  static const int kKeyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 key_id() const;
  inline void set_key_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.shop_info)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_probability();
  inline void clear_has_probability();
  inline void set_has_key_id();
  inline void clear_has_key_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_count_;
  ::google::protobuf::uint32 probability_;
  ::google::protobuf::uint32 key_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static shop_info* default_instance_;
};
// -------------------------------------------------------------------

class black_shop_req : public ::google::protobuf::Message {
 public:
  black_shop_req();
  virtual ~black_shop_req();

  black_shop_req(const black_shop_req& from);

  inline black_shop_req& operator=(const black_shop_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const black_shop_req& default_instance();

  void Swap(black_shop_req* other);

  // implements Message ----------------------------------------------

  black_shop_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const black_shop_req& from);
  void MergeFrom(const black_shop_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.black_shop_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static black_shop_req* default_instance_;
};
// -------------------------------------------------------------------

class black_shop_rsp : public ::google::protobuf::Message {
 public:
  black_shop_rsp();
  virtual ~black_shop_rsp();

  black_shop_rsp(const black_shop_rsp& from);

  inline black_shop_rsp& operator=(const black_shop_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const black_shop_rsp& default_instance();

  void Swap(black_shop_rsp* other);

  // implements Message ----------------------------------------------

  black_shop_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const black_shop_rsp& from);
  void MergeFrom(const black_shop_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // optional uint32 reflesh_count = 2;
  inline bool has_reflesh_count() const;
  inline void clear_reflesh_count();
  static const int kRefleshCountFieldNumber = 2;
  inline ::google::protobuf::uint32 reflesh_count() const;
  inline void set_reflesh_count(::google::protobuf::uint32 value);

  // optional uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // repeated .client.black_shop_db_info info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::client::black_shop_db_info& info(int index) const;
  inline ::client::black_shop_db_info* mutable_info(int index);
  inline ::client::black_shop_db_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:client.black_shop_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_reflesh_count();
  inline void clear_has_reflesh_count();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_type_;
  ::google::protobuf::uint32 reflesh_count_;
  ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info > info_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static black_shop_rsp* default_instance_;
};
// -------------------------------------------------------------------

class black_shop_reflesh_req : public ::google::protobuf::Message {
 public:
  black_shop_reflesh_req();
  virtual ~black_shop_reflesh_req();

  black_shop_reflesh_req(const black_shop_reflesh_req& from);

  inline black_shop_reflesh_req& operator=(const black_shop_reflesh_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const black_shop_reflesh_req& default_instance();

  void Swap(black_shop_reflesh_req* other);

  // implements Message ----------------------------------------------

  black_shop_reflesh_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const black_shop_reflesh_req& from);
  void MergeFrom(const black_shop_reflesh_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.black_shop_reflesh_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static black_shop_reflesh_req* default_instance_;
};
// -------------------------------------------------------------------

class black_shop_reflesh_rsp : public ::google::protobuf::Message {
 public:
  black_shop_reflesh_rsp();
  virtual ~black_shop_reflesh_rsp();

  black_shop_reflesh_rsp(const black_shop_reflesh_rsp& from);

  inline black_shop_reflesh_rsp& operator=(const black_shop_reflesh_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const black_shop_reflesh_rsp& default_instance();

  void Swap(black_shop_reflesh_rsp* other);

  // implements Message ----------------------------------------------

  black_shop_reflesh_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const black_shop_reflesh_rsp& from);
  void MergeFrom(const black_shop_reflesh_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // optional uint32 reflesh_count = 2;
  inline bool has_reflesh_count() const;
  inline void clear_reflesh_count();
  static const int kRefleshCountFieldNumber = 2;
  inline ::google::protobuf::uint32 reflesh_count() const;
  inline void set_reflesh_count(::google::protobuf::uint32 value);

  // optional uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // repeated .client.black_shop_db_info info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::client::black_shop_db_info& info(int index) const;
  inline ::client::black_shop_db_info* mutable_info(int index);
  inline ::client::black_shop_db_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:client.black_shop_reflesh_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_reflesh_count();
  inline void clear_has_reflesh_count();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_type_;
  ::google::protobuf::uint32 reflesh_count_;
  ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info > info_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static black_shop_reflesh_rsp* default_instance_;
};
// -------------------------------------------------------------------

class black_shop_buy_req : public ::google::protobuf::Message {
 public:
  black_shop_buy_req();
  virtual ~black_shop_buy_req();

  black_shop_buy_req(const black_shop_buy_req& from);

  inline black_shop_buy_req& operator=(const black_shop_buy_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const black_shop_buy_req& default_instance();

  void Swap(black_shop_buy_req* other);

  // implements Message ----------------------------------------------

  black_shop_buy_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const black_shop_buy_req& from);
  void MergeFrom(const black_shop_buy_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 item_slot = 1;
  inline bool has_item_slot() const;
  inline void clear_item_slot();
  static const int kItemSlotFieldNumber = 1;
  inline ::google::protobuf::uint32 item_slot() const;
  inline void set_item_slot(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.black_shop_buy_req)
 private:
  inline void set_has_item_slot();
  inline void clear_has_item_slot();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 item_slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static black_shop_buy_req* default_instance_;
};
// -------------------------------------------------------------------

class black_shop_buy_rsp : public ::google::protobuf::Message {
 public:
  black_shop_buy_rsp();
  virtual ~black_shop_buy_rsp();

  black_shop_buy_rsp(const black_shop_buy_rsp& from);

  inline black_shop_buy_rsp& operator=(const black_shop_buy_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const black_shop_buy_rsp& default_instance();

  void Swap(black_shop_buy_rsp* other);

  // implements Message ----------------------------------------------

  black_shop_buy_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const black_shop_buy_rsp& from);
  void MergeFrom(const black_shop_buy_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 item_slot = 1;
  inline bool has_item_slot() const;
  inline void clear_item_slot();
  static const int kItemSlotFieldNumber = 1;
  inline ::google::protobuf::uint32 item_slot() const;
  inline void set_item_slot(::google::protobuf::uint32 value);

  // required uint32 result_type = 2;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // repeated .client.black_shop_db_info info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::client::black_shop_db_info& info(int index) const;
  inline ::client::black_shop_db_info* mutable_info(int index);
  inline ::client::black_shop_db_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:client.black_shop_buy_rsp)
 private:
  inline void set_has_item_slot();
  inline void clear_has_item_slot();
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 item_slot_;
  ::google::protobuf::uint32 result_type_;
  ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static black_shop_buy_rsp* default_instance_;
};
// -------------------------------------------------------------------

class use_props_show_rsp : public ::google::protobuf::Message {
 public:
  use_props_show_rsp();
  virtual ~use_props_show_rsp();

  use_props_show_rsp(const use_props_show_rsp& from);

  inline use_props_show_rsp& operator=(const use_props_show_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const use_props_show_rsp& default_instance();

  void Swap(use_props_show_rsp* other);

  // implements Message ----------------------------------------------

  use_props_show_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const use_props_show_rsp& from);
  void MergeFrom(const use_props_show_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rsp_type = 1;
  inline bool has_rsp_type() const;
  inline void clear_rsp_type();
  static const int kRspTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 rsp_type() const;
  inline void set_rsp_type(::google::protobuf::uint32 value);

  // repeated .client.props_info show_info = 2;
  inline int show_info_size() const;
  inline void clear_show_info();
  static const int kShowInfoFieldNumber = 2;
  inline const ::client::props_info& show_info(int index) const;
  inline ::client::props_info* mutable_show_info(int index);
  inline ::client::props_info* add_show_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::props_info >&
      show_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::props_info >*
      mutable_show_info();

  // @@protoc_insertion_point(class_scope:client.use_props_show_rsp)
 private:
  inline void set_has_rsp_type();
  inline void clear_has_rsp_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::props_info > show_info_;
  ::google::protobuf::uint32 rsp_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static use_props_show_rsp* default_instance_;
};
// -------------------------------------------------------------------

class record_attr : public ::google::protobuf::Message {
 public:
  record_attr();
  virtual ~record_attr();

  record_attr(const record_attr& from);

  inline record_attr& operator=(const record_attr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const record_attr& default_instance();

  void Swap(record_attr* other);

  // implements Message ----------------------------------------------

  record_attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const record_attr& from);
  void MergeFrom(const record_attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 old_value = 1;
  inline bool has_old_value() const;
  inline void clear_old_value();
  static const int kOldValueFieldNumber = 1;
  inline ::google::protobuf::uint32 old_value() const;
  inline void set_old_value(::google::protobuf::uint32 value);

  // optional uint32 new_value = 2;
  inline bool has_new_value() const;
  inline void clear_new_value();
  static const int kNewValueFieldNumber = 2;
  inline ::google::protobuf::uint32 new_value() const;
  inline void set_new_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.record_attr)
 private:
  inline void set_has_old_value();
  inline void clear_has_old_value();
  inline void set_has_new_value();
  inline void clear_has_new_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 old_value_;
  ::google::protobuf::uint32 new_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static record_attr* default_instance_;
};
// ===================================================================


// ===================================================================

// embed

// required uint32 hole_id = 1;
inline bool embed::has_hole_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void embed::set_has_hole_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void embed::clear_has_hole_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void embed::clear_hole_id() {
  hole_id_ = 0u;
  clear_has_hole_id();
}
inline ::google::protobuf::uint32 embed::hole_id() const {
  return hole_id_;
}
inline void embed::set_hole_id(::google::protobuf::uint32 value) {
  set_has_hole_id();
  hole_id_ = value;
}

// required uint32 gem_id = 2;
inline bool embed::has_gem_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void embed::set_has_gem_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void embed::clear_has_gem_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void embed::clear_gem_id() {
  gem_id_ = 0u;
  clear_has_gem_id();
}
inline ::google::protobuf::uint32 embed::gem_id() const {
  return gem_id_;
}
inline void embed::set_gem_id(::google::protobuf::uint32 value) {
  set_has_gem_id();
  gem_id_ = value;
}

// -------------------------------------------------------------------

// expend_item_info

// optional uint32 expend_id = 1;
inline bool expend_item_info::has_expend_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void expend_item_info::set_has_expend_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void expend_item_info::clear_has_expend_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void expend_item_info::clear_expend_id() {
  expend_id_ = 0u;
  clear_has_expend_id();
}
inline ::google::protobuf::uint32 expend_item_info::expend_id() const {
  return expend_id_;
}
inline void expend_item_info::set_expend_id(::google::protobuf::uint32 value) {
  set_has_expend_id();
  expend_id_ = value;
}

// optional uint32 expend_count = 2;
inline bool expend_item_info::has_expend_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void expend_item_info::set_has_expend_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void expend_item_info::clear_has_expend_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void expend_item_info::clear_expend_count() {
  expend_count_ = 0u;
  clear_has_expend_count();
}
inline ::google::protobuf::uint32 expend_item_info::expend_count() const {
  return expend_count_;
}
inline void expend_item_info::set_expend_count(::google::protobuf::uint32 value) {
  set_has_expend_count();
  expend_count_ = value;
}

// -------------------------------------------------------------------

// props_info

// required uint32 pos = 1;
inline bool props_info::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void props_info::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void props_info::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void props_info::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 props_info::pos() const {
  return pos_;
}
inline void props_info::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// required uint32 grid_index = 2;
inline bool props_info::has_grid_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void props_info::set_has_grid_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void props_info::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void props_info::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 props_info::grid_index() const {
  return grid_index_;
}
inline void props_info::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// required uint32 props_id = 3;
inline bool props_info::has_props_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void props_info::set_has_props_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void props_info::clear_has_props_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void props_info::clear_props_id() {
  props_id_ = 0u;
  clear_has_props_id();
}
inline ::google::protobuf::uint32 props_info::props_id() const {
  return props_id_;
}
inline void props_info::set_props_id(::google::protobuf::uint32 value) {
  set_has_props_id();
  props_id_ = value;
}

// required uint32 count = 4 [default = 1];
inline bool props_info::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void props_info::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void props_info::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void props_info::clear_count() {
  count_ = 1u;
  clear_has_count();
}
inline ::google::protobuf::uint32 props_info::count() const {
  return count_;
}
inline void props_info::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// required uint32 quality = 5 [default = 1];
inline bool props_info::has_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void props_info::set_has_quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void props_info::clear_has_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void props_info::clear_quality() {
  quality_ = 1u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 props_info::quality() const {
  return quality_;
}
inline void props_info::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// required uint32 bind = 6 [default = 0];
inline bool props_info::has_bind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void props_info::set_has_bind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void props_info::clear_has_bind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void props_info::clear_bind() {
  bind_ = 0u;
  clear_has_bind();
}
inline ::google::protobuf::uint32 props_info::bind() const {
  return bind_;
}
inline void props_info::set_bind(::google::protobuf::uint32 value) {
  set_has_bind();
  bind_ = value;
}

// repeated .client.attribute attr = 7;
inline int props_info::attr_size() const {
  return attr_.size();
}
inline void props_info::clear_attr() {
  attr_.Clear();
}
inline const ::client::attribute& props_info::attr(int index) const {
  return attr_.Get(index);
}
inline ::client::attribute* props_info::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::client::attribute* props_info::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::attribute >&
props_info::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::attribute >*
props_info::mutable_attr() {
  return &attr_;
}

// repeated .client.embed gem = 8;
inline int props_info::gem_size() const {
  return gem_.size();
}
inline void props_info::clear_gem() {
  gem_.Clear();
}
inline const ::client::embed& props_info::gem(int index) const {
  return gem_.Get(index);
}
inline ::client::embed* props_info::mutable_gem(int index) {
  return gem_.Mutable(index);
}
inline ::client::embed* props_info::add_gem() {
  return gem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::embed >&
props_info::gem() const {
  return gem_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::embed >*
props_info::mutable_gem() {
  return &gem_;
}

// optional uint32 hole = 9 [default = 0];
inline bool props_info::has_hole() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void props_info::set_has_hole() {
  _has_bits_[0] |= 0x00000100u;
}
inline void props_info::clear_has_hole() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void props_info::clear_hole() {
  hole_ = 0u;
  clear_has_hole();
}
inline ::google::protobuf::uint32 props_info::hole() const {
  return hole_;
}
inline void props_info::set_hole(::google::protobuf::uint32 value) {
  set_has_hole();
  hole_ = value;
}

// optional uint32 authed = 10 [default = 0];
inline bool props_info::has_authed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void props_info::set_has_authed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void props_info::clear_has_authed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void props_info::clear_authed() {
  authed_ = 0u;
  clear_has_authed();
}
inline ::google::protobuf::uint32 props_info::authed() const {
  return authed_;
}
inline void props_info::set_authed(::google::protobuf::uint32 value) {
  set_has_authed();
  authed_ = value;
}

// optional uint32 level = 11 [default = 0];
inline bool props_info::has_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void props_info::set_has_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void props_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void props_info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 props_info::level() const {
  return level_;
}
inline void props_info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 creator_id = 12 [default = 0];
inline bool props_info::has_creator_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void props_info::set_has_creator_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void props_info::clear_has_creator_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void props_info::clear_creator_id() {
  creator_id_ = 0u;
  clear_has_creator_id();
}
inline ::google::protobuf::uint32 props_info::creator_id() const {
  return creator_id_;
}
inline void props_info::set_creator_id(::google::protobuf::uint32 value) {
  set_has_creator_id();
  creator_id_ = value;
}

// optional uint32 active_time = 13 [default = 0];
inline bool props_info::has_active_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void props_info::set_has_active_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void props_info::clear_has_active_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void props_info::clear_active_time() {
  active_time_ = 0u;
  clear_has_active_time();
}
inline ::google::protobuf::uint32 props_info::active_time() const {
  return active_time_;
}
inline void props_info::set_active_time(::google::protobuf::uint32 value) {
  set_has_active_time();
  active_time_ = value;
}

// optional uint32 end_date = 14 [default = 0];
inline bool props_info::has_end_date() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void props_info::set_has_end_date() {
  _has_bits_[0] |= 0x00002000u;
}
inline void props_info::clear_has_end_date() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void props_info::clear_end_date() {
  end_date_ = 0u;
  clear_has_end_date();
}
inline ::google::protobuf::uint32 props_info::end_date() const {
  return end_date_;
}
inline void props_info::set_end_date(::google::protobuf::uint32 value) {
  set_has_end_date();
  end_date_ = value;
}

// repeated .client.attribute last_attr = 15;
inline int props_info::last_attr_size() const {
  return last_attr_.size();
}
inline void props_info::clear_last_attr() {
  last_attr_.Clear();
}
inline const ::client::attribute& props_info::last_attr(int index) const {
  return last_attr_.Get(index);
}
inline ::client::attribute* props_info::mutable_last_attr(int index) {
  return last_attr_.Mutable(index);
}
inline ::client::attribute* props_info::add_last_attr() {
  return last_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::attribute >&
props_info::last_attr() const {
  return last_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::attribute >*
props_info::mutable_last_attr() {
  return &last_attr_;
}

// repeated .client.attribute upgrade_attr = 16;
inline int props_info::upgrade_attr_size() const {
  return upgrade_attr_.size();
}
inline void props_info::clear_upgrade_attr() {
  upgrade_attr_.Clear();
}
inline const ::client::attribute& props_info::upgrade_attr(int index) const {
  return upgrade_attr_.Get(index);
}
inline ::client::attribute* props_info::mutable_upgrade_attr(int index) {
  return upgrade_attr_.Mutable(index);
}
inline ::client::attribute* props_info::add_upgrade_attr() {
  return upgrade_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::attribute >&
props_info::upgrade_attr() const {
  return upgrade_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::attribute >*
props_info::mutable_upgrade_attr() {
  return &upgrade_attr_;
}

// optional uint32 expend_money = 17;
inline bool props_info::has_expend_money() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void props_info::set_has_expend_money() {
  _has_bits_[0] |= 0x00010000u;
}
inline void props_info::clear_has_expend_money() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void props_info::clear_expend_money() {
  expend_money_ = 0u;
  clear_has_expend_money();
}
inline ::google::protobuf::uint32 props_info::expend_money() const {
  return expend_money_;
}
inline void props_info::set_expend_money(::google::protobuf::uint32 value) {
  set_has_expend_money();
  expend_money_ = value;
}

// repeated .client.expend_item_info info = 18;
inline int props_info::info_size() const {
  return info_.size();
}
inline void props_info::clear_info() {
  info_.Clear();
}
inline const ::client::expend_item_info& props_info::info(int index) const {
  return info_.Get(index);
}
inline ::client::expend_item_info* props_info::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::client::expend_item_info* props_info::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::expend_item_info >&
props_info::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::expend_item_info >*
props_info::mutable_info() {
  return &info_;
}

// optional uint32 system_id = 19 [default = 0];
inline bool props_info::has_system_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void props_info::set_has_system_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void props_info::clear_has_system_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void props_info::clear_system_id() {
  system_id_ = 0u;
  clear_has_system_id();
}
inline ::google::protobuf::uint32 props_info::system_id() const {
  return system_id_;
}
inline void props_info::set_system_id(::google::protobuf::uint32 value) {
  set_has_system_id();
  system_id_ = value;
}

// optional uint32 to_type = 20;
inline bool props_info::has_to_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void props_info::set_has_to_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void props_info::clear_has_to_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void props_info::clear_to_type() {
  to_type_ = 0u;
  clear_has_to_type();
}
inline ::google::protobuf::uint32 props_info::to_type() const {
  return to_type_;
}
inline void props_info::set_to_type(::google::protobuf::uint32 value) {
  set_has_to_type();
  to_type_ = value;
}

// optional uint32 timeout = 21;
inline bool props_info::has_timeout() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void props_info::set_has_timeout() {
  _has_bits_[0] |= 0x00100000u;
}
inline void props_info::clear_has_timeout() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void props_info::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
inline ::google::protobuf::uint32 props_info::timeout() const {
  return timeout_;
}
inline void props_info::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
}

// optional bool is_due = 22 [default = false];
inline bool props_info::has_is_due() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void props_info::set_has_is_due() {
  _has_bits_[0] |= 0x00200000u;
}
inline void props_info::clear_has_is_due() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void props_info::clear_is_due() {
  is_due_ = false;
  clear_has_is_due();
}
inline bool props_info::is_due() const {
  return is_due_;
}
inline void props_info::set_is_due(bool value) {
  set_has_is_due();
  is_due_ = value;
}

// -------------------------------------------------------------------

// role_props_msg

// required .client.role_data rd = 1;
inline bool role_props_msg::has_rd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_props_msg::set_has_rd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_props_msg::clear_has_rd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_props_msg::clear_rd() {
  if (rd_ != NULL) rd_->::client::role_data::Clear();
  clear_has_rd();
}
inline const ::client::role_data& role_props_msg::rd() const {
  return rd_ != NULL ? *rd_ : *default_instance_->rd_;
}
inline ::client::role_data* role_props_msg::mutable_rd() {
  set_has_rd();
  if (rd_ == NULL) rd_ = new ::client::role_data;
  return rd_;
}
inline ::client::role_data* role_props_msg::release_rd() {
  clear_has_rd();
  ::client::role_data* temp = rd_;
  rd_ = NULL;
  return temp;
}
inline void role_props_msg::set_allocated_rd(::client::role_data* rd) {
  delete rd_;
  rd_ = rd;
  if (rd) {
    set_has_rd();
  } else {
    clear_has_rd();
  }
}

// repeated .client.props_info pi = 2;
inline int role_props_msg::pi_size() const {
  return pi_.size();
}
inline void role_props_msg::clear_pi() {
  pi_.Clear();
}
inline const ::client::props_info& role_props_msg::pi(int index) const {
  return pi_.Get(index);
}
inline ::client::props_info* role_props_msg::mutable_pi(int index) {
  return pi_.Mutable(index);
}
inline ::client::props_info* role_props_msg::add_pi() {
  return pi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::props_info >&
role_props_msg::pi() const {
  return pi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::props_info >*
role_props_msg::mutable_pi() {
  return &pi_;
}

// -------------------------------------------------------------------

// use_props_req

// required uint32 grid_index = 1;
inline bool use_props_req::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void use_props_req::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void use_props_req::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void use_props_req::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 use_props_req::grid_index() const {
  return grid_index_;
}
inline void use_props_req::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// required uint32 use_num = 2;
inline bool use_props_req::has_use_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void use_props_req::set_has_use_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void use_props_req::clear_has_use_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void use_props_req::clear_use_num() {
  use_num_ = 0u;
  clear_has_use_num();
}
inline ::google::protobuf::uint32 use_props_req::use_num() const {
  return use_num_;
}
inline void use_props_req::set_use_num(::google::protobuf::uint32 value) {
  set_has_use_num();
  use_num_ = value;
}

// optional .client.role_data rds = 3;
inline bool use_props_req::has_rds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void use_props_req::set_has_rds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void use_props_req::clear_has_rds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void use_props_req::clear_rds() {
  if (rds_ != NULL) rds_->::client::role_data::Clear();
  clear_has_rds();
}
inline const ::client::role_data& use_props_req::rds() const {
  return rds_ != NULL ? *rds_ : *default_instance_->rds_;
}
inline ::client::role_data* use_props_req::mutable_rds() {
  set_has_rds();
  if (rds_ == NULL) rds_ = new ::client::role_data;
  return rds_;
}
inline ::client::role_data* use_props_req::release_rds() {
  clear_has_rds();
  ::client::role_data* temp = rds_;
  rds_ = NULL;
  return temp;
}
inline void use_props_req::set_allocated_rds(::client::role_data* rds) {
  delete rds_;
  rds_ = rds;
  if (rds) {
    set_has_rds();
  } else {
    clear_has_rds();
  }
}

// optional .client.server_head svr_head = 1000;
inline bool use_props_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void use_props_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void use_props_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void use_props_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& use_props_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* use_props_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* use_props_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void use_props_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// use_props_rsp

// required .client.ITEM_OPERATE_TYPE opt_type = 1;
inline bool use_props_rsp::has_opt_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void use_props_rsp::set_has_opt_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void use_props_rsp::clear_has_opt_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void use_props_rsp::clear_opt_type() {
  opt_type_ = 0;
  clear_has_opt_type();
}
inline ::client::ITEM_OPERATE_TYPE use_props_rsp::opt_type() const {
  return static_cast< ::client::ITEM_OPERATE_TYPE >(opt_type_);
}
inline void use_props_rsp::set_opt_type(::client::ITEM_OPERATE_TYPE value) {
  assert(::client::ITEM_OPERATE_TYPE_IsValid(value));
  set_has_opt_type();
  opt_type_ = value;
}

// optional uint32 grid_index = 2;
inline bool use_props_rsp::has_grid_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void use_props_rsp::set_has_grid_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void use_props_rsp::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void use_props_rsp::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 use_props_rsp::grid_index() const {
  return grid_index_;
}
inline void use_props_rsp::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// optional .client.role_data rds = 3;
inline bool use_props_rsp::has_rds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void use_props_rsp::set_has_rds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void use_props_rsp::clear_has_rds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void use_props_rsp::clear_rds() {
  if (rds_ != NULL) rds_->::client::role_data::Clear();
  clear_has_rds();
}
inline const ::client::role_data& use_props_rsp::rds() const {
  return rds_ != NULL ? *rds_ : *default_instance_->rds_;
}
inline ::client::role_data* use_props_rsp::mutable_rds() {
  set_has_rds();
  if (rds_ == NULL) rds_ = new ::client::role_data;
  return rds_;
}
inline ::client::role_data* use_props_rsp::release_rds() {
  clear_has_rds();
  ::client::role_data* temp = rds_;
  rds_ = NULL;
  return temp;
}
inline void use_props_rsp::set_allocated_rds(::client::role_data* rds) {
  delete rds_;
  rds_ = rds;
  if (rds) {
    set_has_rds();
  } else {
    clear_has_rds();
  }
}

// -------------------------------------------------------------------

// sell_props_req

// required uint32 grid_index = 1;
inline bool sell_props_req::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sell_props_req::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sell_props_req::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sell_props_req::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 sell_props_req::grid_index() const {
  return grid_index_;
}
inline void sell_props_req::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// required uint32 props_count = 2;
inline bool sell_props_req::has_props_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sell_props_req::set_has_props_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sell_props_req::clear_has_props_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sell_props_req::clear_props_count() {
  props_count_ = 0u;
  clear_has_props_count();
}
inline ::google::protobuf::uint32 sell_props_req::props_count() const {
  return props_count_;
}
inline void sell_props_req::set_props_count(::google::protobuf::uint32 value) {
  set_has_props_count();
  props_count_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool sell_props_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sell_props_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sell_props_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sell_props_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& sell_props_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* sell_props_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* sell_props_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void sell_props_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// sell_props_rsp

// required uint32 grid_index = 1;
inline bool sell_props_rsp::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sell_props_rsp::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sell_props_rsp::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sell_props_rsp::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 sell_props_rsp::grid_index() const {
  return grid_index_;
}
inline void sell_props_rsp::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// required uint32 result_type = 2;
inline bool sell_props_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sell_props_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sell_props_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sell_props_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 sell_props_rsp::result_type() const {
  return result_type_;
}
inline void sell_props_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// -------------------------------------------------------------------

// move_props_req

// required uint32 src_grid_index = 1;
inline bool move_props_req::has_src_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void move_props_req::set_has_src_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void move_props_req::clear_has_src_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void move_props_req::clear_src_grid_index() {
  src_grid_index_ = 0u;
  clear_has_src_grid_index();
}
inline ::google::protobuf::uint32 move_props_req::src_grid_index() const {
  return src_grid_index_;
}
inline void move_props_req::set_src_grid_index(::google::protobuf::uint32 value) {
  set_has_src_grid_index();
  src_grid_index_ = value;
}

// required uint32 dst_grid_index = 2;
inline bool move_props_req::has_dst_grid_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void move_props_req::set_has_dst_grid_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void move_props_req::clear_has_dst_grid_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void move_props_req::clear_dst_grid_index() {
  dst_grid_index_ = 0u;
  clear_has_dst_grid_index();
}
inline ::google::protobuf::uint32 move_props_req::dst_grid_index() const {
  return dst_grid_index_;
}
inline void move_props_req::set_dst_grid_index(::google::protobuf::uint32 value) {
  set_has_dst_grid_index();
  dst_grid_index_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool move_props_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void move_props_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void move_props_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void move_props_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& move_props_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* move_props_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* move_props_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void move_props_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// equip_props_req

// required uint32 src_grid_index = 1;
inline bool equip_props_req::has_src_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equip_props_req::set_has_src_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equip_props_req::clear_has_src_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equip_props_req::clear_src_grid_index() {
  src_grid_index_ = 0u;
  clear_has_src_grid_index();
}
inline ::google::protobuf::uint32 equip_props_req::src_grid_index() const {
  return src_grid_index_;
}
inline void equip_props_req::set_src_grid_index(::google::protobuf::uint32 value) {
  set_has_src_grid_index();
  src_grid_index_ = value;
}

// required uint32 dst_grid_index = 2;
inline bool equip_props_req::has_dst_grid_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equip_props_req::set_has_dst_grid_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equip_props_req::clear_has_dst_grid_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equip_props_req::clear_dst_grid_index() {
  dst_grid_index_ = 0u;
  clear_has_dst_grid_index();
}
inline ::google::protobuf::uint32 equip_props_req::dst_grid_index() const {
  return dst_grid_index_;
}
inline void equip_props_req::set_dst_grid_index(::google::protobuf::uint32 value) {
  set_has_dst_grid_index();
  dst_grid_index_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool equip_props_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void equip_props_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void equip_props_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void equip_props_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& equip_props_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* equip_props_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* equip_props_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void equip_props_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// equip_props_rsp

// required uint32 clear_grid_index = 1;
inline bool equip_props_rsp::has_clear_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void equip_props_rsp::set_has_clear_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void equip_props_rsp::clear_has_clear_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void equip_props_rsp::clear_clear_grid_index() {
  clear_grid_index_ = 0u;
  clear_has_clear_grid_index();
}
inline ::google::protobuf::uint32 equip_props_rsp::clear_grid_index() const {
  return clear_grid_index_;
}
inline void equip_props_rsp::set_clear_grid_index(::google::protobuf::uint32 value) {
  set_has_clear_grid_index();
  clear_grid_index_ = value;
}

// optional uint32 add_grid_index = 2;
inline bool equip_props_rsp::has_add_grid_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void equip_props_rsp::set_has_add_grid_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void equip_props_rsp::clear_has_add_grid_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void equip_props_rsp::clear_add_grid_index() {
  add_grid_index_ = 0u;
  clear_has_add_grid_index();
}
inline ::google::protobuf::uint32 equip_props_rsp::add_grid_index() const {
  return add_grid_index_;
}
inline void equip_props_rsp::set_add_grid_index(::google::protobuf::uint32 value) {
  set_has_add_grid_index();
  add_grid_index_ = value;
}

// -------------------------------------------------------------------

// drop_props_info

// repeated uint32 belong = 1;
inline int drop_props_info::belong_size() const {
  return belong_.size();
}
inline void drop_props_info::clear_belong() {
  belong_.Clear();
}
inline ::google::protobuf::uint32 drop_props_info::belong(int index) const {
  return belong_.Get(index);
}
inline void drop_props_info::set_belong(int index, ::google::protobuf::uint32 value) {
  belong_.Set(index, value);
}
inline void drop_props_info::add_belong(::google::protobuf::uint32 value) {
  belong_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
drop_props_info::belong() const {
  return belong_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
drop_props_info::mutable_belong() {
  return &belong_;
}

// required uint32 index = 2;
inline bool drop_props_info::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void drop_props_info::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void drop_props_info::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void drop_props_info::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 drop_props_info::index() const {
  return index_;
}
inline void drop_props_info::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required uint32 x = 3;
inline bool drop_props_info::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void drop_props_info::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void drop_props_info::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void drop_props_info::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 drop_props_info::x() const {
  return x_;
}
inline void drop_props_info::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 y = 4;
inline bool drop_props_info::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void drop_props_info::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void drop_props_info::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void drop_props_info::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 drop_props_info::y() const {
  return y_;
}
inline void drop_props_info::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// required uint32 z = 5;
inline bool drop_props_info::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void drop_props_info::set_has_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void drop_props_info::clear_has_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void drop_props_info::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 drop_props_info::z() const {
  return z_;
}
inline void drop_props_info::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// required uint32 end_time = 6;
inline bool drop_props_info::has_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void drop_props_info::set_has_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void drop_props_info::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void drop_props_info::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 drop_props_info::end_time() const {
  return end_time_;
}
inline void drop_props_info::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// required uint32 protect_time = 7;
inline bool drop_props_info::has_protect_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void drop_props_info::set_has_protect_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void drop_props_info::clear_has_protect_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void drop_props_info::clear_protect_time() {
  protect_time_ = 0u;
  clear_has_protect_time();
}
inline ::google::protobuf::uint32 drop_props_info::protect_time() const {
  return protect_time_;
}
inline void drop_props_info::set_protect_time(::google::protobuf::uint32 value) {
  set_has_protect_time();
  protect_time_ = value;
}

// required .client.props_info pi = 8;
inline bool drop_props_info::has_pi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void drop_props_info::set_has_pi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void drop_props_info::clear_has_pi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void drop_props_info::clear_pi() {
  if (pi_ != NULL) pi_->::client::props_info::Clear();
  clear_has_pi();
}
inline const ::client::props_info& drop_props_info::pi() const {
  return pi_ != NULL ? *pi_ : *default_instance_->pi_;
}
inline ::client::props_info* drop_props_info::mutable_pi() {
  set_has_pi();
  if (pi_ == NULL) pi_ = new ::client::props_info;
  return pi_;
}
inline ::client::props_info* drop_props_info::release_pi() {
  clear_has_pi();
  ::client::props_info* temp = pi_;
  pi_ = NULL;
  return temp;
}
inline void drop_props_info::set_allocated_pi(::client::props_info* pi) {
  delete pi_;
  pi_ = pi;
  if (pi) {
    set_has_pi();
  } else {
    clear_has_pi();
  }
}

// -------------------------------------------------------------------

// drop_props_msg

// required .client.drop_props_msg.METHOD m = 1;
inline bool drop_props_msg::has_m() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void drop_props_msg::set_has_m() {
  _has_bits_[0] |= 0x00000001u;
}
inline void drop_props_msg::clear_has_m() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void drop_props_msg::clear_m() {
  m_ = 1;
  clear_has_m();
}
inline ::client::drop_props_msg_METHOD drop_props_msg::m() const {
  return static_cast< ::client::drop_props_msg_METHOD >(m_);
}
inline void drop_props_msg::set_m(::client::drop_props_msg_METHOD value) {
  assert(::client::drop_props_msg_METHOD_IsValid(value));
  set_has_m();
  m_ = value;
}

// repeated .client.drop_props_info dpi = 2;
inline int drop_props_msg::dpi_size() const {
  return dpi_.size();
}
inline void drop_props_msg::clear_dpi() {
  dpi_.Clear();
}
inline const ::client::drop_props_info& drop_props_msg::dpi(int index) const {
  return dpi_.Get(index);
}
inline ::client::drop_props_info* drop_props_msg::mutable_dpi(int index) {
  return dpi_.Mutable(index);
}
inline ::client::drop_props_info* drop_props_msg::add_dpi() {
  return dpi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::drop_props_info >&
drop_props_msg::dpi() const {
  return dpi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::drop_props_info >*
drop_props_msg::mutable_dpi() {
  return &dpi_;
}

// -------------------------------------------------------------------

// pick_up_props_req

// repeated uint32 index = 1;
inline int pick_up_props_req::index_size() const {
  return index_.size();
}
inline void pick_up_props_req::clear_index() {
  index_.Clear();
}
inline ::google::protobuf::uint32 pick_up_props_req::index(int index) const {
  return index_.Get(index);
}
inline void pick_up_props_req::set_index(int index, ::google::protobuf::uint32 value) {
  index_.Set(index, value);
}
inline void pick_up_props_req::add_index(::google::protobuf::uint32 value) {
  index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
pick_up_props_req::index() const {
  return index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
pick_up_props_req::mutable_index() {
  return &index_;
}

// optional .client.server_head svr_head = 1000;
inline bool pick_up_props_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pick_up_props_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pick_up_props_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pick_up_props_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pick_up_props_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pick_up_props_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pick_up_props_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pick_up_props_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pick_up_props_rsp

// repeated uint32 index = 1;
inline int pick_up_props_rsp::index_size() const {
  return index_.size();
}
inline void pick_up_props_rsp::clear_index() {
  index_.Clear();
}
inline ::google::protobuf::uint32 pick_up_props_rsp::index(int index) const {
  return index_.Get(index);
}
inline void pick_up_props_rsp::set_index(int index, ::google::protobuf::uint32 value) {
  index_.Set(index, value);
}
inline void pick_up_props_rsp::add_index(::google::protobuf::uint32 value) {
  index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
pick_up_props_rsp::index() const {
  return index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
pick_up_props_rsp::mutable_index() {
  return &index_;
}

// required .client.pick_up_props_rsp.result ret = 2;
inline bool pick_up_props_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pick_up_props_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pick_up_props_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pick_up_props_rsp::clear_ret() {
  ret_ = 1;
  clear_has_ret();
}
inline ::client::pick_up_props_rsp_result pick_up_props_rsp::ret() const {
  return static_cast< ::client::pick_up_props_rsp_result >(ret_);
}
inline void pick_up_props_rsp::set_ret(::client::pick_up_props_rsp_result value) {
  assert(::client::pick_up_props_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// upgrade_equip_req

// required uint32 grid_index = 1;
inline bool upgrade_equip_req::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upgrade_equip_req::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upgrade_equip_req::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upgrade_equip_req::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 upgrade_equip_req::grid_index() const {
  return grid_index_;
}
inline void upgrade_equip_req::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// required uint32 target_level = 2;
inline bool upgrade_equip_req::has_target_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void upgrade_equip_req::set_has_target_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void upgrade_equip_req::clear_has_target_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void upgrade_equip_req::clear_target_level() {
  target_level_ = 0u;
  clear_has_target_level();
}
inline ::google::protobuf::uint32 upgrade_equip_req::target_level() const {
  return target_level_;
}
inline void upgrade_equip_req::set_target_level(::google::protobuf::uint32 value) {
  set_has_target_level();
  target_level_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool upgrade_equip_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void upgrade_equip_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void upgrade_equip_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void upgrade_equip_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& upgrade_equip_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* upgrade_equip_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* upgrade_equip_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void upgrade_equip_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// upgrade_equip_rsp

// required uint32 grid_index = 1;
inline bool upgrade_equip_rsp::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upgrade_equip_rsp::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upgrade_equip_rsp::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upgrade_equip_rsp::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 upgrade_equip_rsp::grid_index() const {
  return grid_index_;
}
inline void upgrade_equip_rsp::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// required .client.upgrade_equip_rsp.result result_type = 2;
inline bool upgrade_equip_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void upgrade_equip_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void upgrade_equip_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void upgrade_equip_rsp::clear_result_type() {
  result_type_ = 1;
  clear_has_result_type();
}
inline ::client::upgrade_equip_rsp_result upgrade_equip_rsp::result_type() const {
  return static_cast< ::client::upgrade_equip_rsp_result >(result_type_);
}
inline void upgrade_equip_rsp::set_result_type(::client::upgrade_equip_rsp_result value) {
  assert(::client::upgrade_equip_rsp_result_IsValid(value));
  set_has_result_type();
  result_type_ = value;
}

// -------------------------------------------------------------------

// melting_equip_req

// required uint32 melting_type = 1;
inline bool melting_equip_req::has_melting_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void melting_equip_req::set_has_melting_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void melting_equip_req::clear_has_melting_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void melting_equip_req::clear_melting_type() {
  melting_type_ = 0u;
  clear_has_melting_type();
}
inline ::google::protobuf::uint32 melting_equip_req::melting_type() const {
  return melting_type_;
}
inline void melting_equip_req::set_melting_type(::google::protobuf::uint32 value) {
  set_has_melting_type();
  melting_type_ = value;
}

// repeated uint32 grid_index = 2;
inline int melting_equip_req::grid_index_size() const {
  return grid_index_.size();
}
inline void melting_equip_req::clear_grid_index() {
  grid_index_.Clear();
}
inline ::google::protobuf::uint32 melting_equip_req::grid_index(int index) const {
  return grid_index_.Get(index);
}
inline void melting_equip_req::set_grid_index(int index, ::google::protobuf::uint32 value) {
  grid_index_.Set(index, value);
}
inline void melting_equip_req::add_grid_index(::google::protobuf::uint32 value) {
  grid_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
melting_equip_req::grid_index() const {
  return grid_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
melting_equip_req::mutable_grid_index() {
  return &grid_index_;
}

// optional .client.server_head svr_head = 1000;
inline bool melting_equip_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void melting_equip_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void melting_equip_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void melting_equip_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& melting_equip_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* melting_equip_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* melting_equip_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void melting_equip_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// melting_equip_rsp

// required .client.melting_equip_rsp.result result_type = 1;
inline bool melting_equip_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void melting_equip_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void melting_equip_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void melting_equip_rsp::clear_result_type() {
  result_type_ = 1;
  clear_has_result_type();
}
inline ::client::melting_equip_rsp_result melting_equip_rsp::result_type() const {
  return static_cast< ::client::melting_equip_rsp_result >(result_type_);
}
inline void melting_equip_rsp::set_result_type(::client::melting_equip_rsp_result value) {
  assert(::client::melting_equip_rsp_result_IsValid(value));
  set_has_result_type();
  result_type_ = value;
}

// -------------------------------------------------------------------

// cast_equip_req

// required uint32 equip_id = 1;
inline bool cast_equip_req::has_equip_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cast_equip_req::set_has_equip_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cast_equip_req::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cast_equip_req::clear_equip_id() {
  equip_id_ = 0u;
  clear_has_equip_id();
}
inline ::google::protobuf::uint32 cast_equip_req::equip_id() const {
  return equip_id_;
}
inline void cast_equip_req::set_equip_id(::google::protobuf::uint32 value) {
  set_has_equip_id();
  equip_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool cast_equip_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cast_equip_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cast_equip_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cast_equip_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& cast_equip_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* cast_equip_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* cast_equip_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void cast_equip_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// cast_equip_rsp

// required .client.cast_equip_rsp.result result_type = 1;
inline bool cast_equip_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cast_equip_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cast_equip_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cast_equip_rsp::clear_result_type() {
  result_type_ = 1;
  clear_has_result_type();
}
inline ::client::cast_equip_rsp_result cast_equip_rsp::result_type() const {
  return static_cast< ::client::cast_equip_rsp_result >(result_type_);
}
inline void cast_equip_rsp::set_result_type(::client::cast_equip_rsp_result value) {
  assert(::client::cast_equip_rsp_result_IsValid(value));
  set_has_result_type();
  result_type_ = value;
}

// required .client.props_info pi = 2;
inline bool cast_equip_rsp::has_pi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cast_equip_rsp::set_has_pi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cast_equip_rsp::clear_has_pi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cast_equip_rsp::clear_pi() {
  if (pi_ != NULL) pi_->::client::props_info::Clear();
  clear_has_pi();
}
inline const ::client::props_info& cast_equip_rsp::pi() const {
  return pi_ != NULL ? *pi_ : *default_instance_->pi_;
}
inline ::client::props_info* cast_equip_rsp::mutable_pi() {
  set_has_pi();
  if (pi_ == NULL) pi_ = new ::client::props_info;
  return pi_;
}
inline ::client::props_info* cast_equip_rsp::release_pi() {
  clear_has_pi();
  ::client::props_info* temp = pi_;
  pi_ = NULL;
  return temp;
}
inline void cast_equip_rsp::set_allocated_pi(::client::props_info* pi) {
  delete pi_;
  pi_ = pi;
  if (pi) {
    set_has_pi();
  } else {
    clear_has_pi();
  }
}

// -------------------------------------------------------------------

// treasure_req

// required uint32 treasure_count = 1;
inline bool treasure_req::has_treasure_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void treasure_req::set_has_treasure_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void treasure_req::clear_has_treasure_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void treasure_req::clear_treasure_count() {
  treasure_count_ = 0u;
  clear_has_treasure_count();
}
inline ::google::protobuf::uint32 treasure_req::treasure_count() const {
  return treasure_count_;
}
inline void treasure_req::set_treasure_count(::google::protobuf::uint32 value) {
  set_has_treasure_count();
  treasure_count_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool treasure_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void treasure_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void treasure_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void treasure_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& treasure_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* treasure_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* treasure_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void treasure_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// treasure_rsp

// required uint32 result_type = 1;
inline bool treasure_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void treasure_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void treasure_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void treasure_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 treasure_rsp::result_type() const {
  return result_type_;
}
inline void treasure_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// repeated uint32 treasure_lost = 2;
inline int treasure_rsp::treasure_lost_size() const {
  return treasure_lost_.size();
}
inline void treasure_rsp::clear_treasure_lost() {
  treasure_lost_.Clear();
}
inline ::google::protobuf::uint32 treasure_rsp::treasure_lost(int index) const {
  return treasure_lost_.Get(index);
}
inline void treasure_rsp::set_treasure_lost(int index, ::google::protobuf::uint32 value) {
  treasure_lost_.Set(index, value);
}
inline void treasure_rsp::add_treasure_lost(::google::protobuf::uint32 value) {
  treasure_lost_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
treasure_rsp::treasure_lost() const {
  return treasure_lost_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
treasure_rsp::mutable_treasure_lost() {
  return &treasure_lost_;
}

// -------------------------------------------------------------------

// baptize_req

// required uint32 baptize_type = 1;
inline bool baptize_req::has_baptize_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void baptize_req::set_has_baptize_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void baptize_req::clear_has_baptize_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void baptize_req::clear_baptize_type() {
  baptize_type_ = 0u;
  clear_has_baptize_type();
}
inline ::google::protobuf::uint32 baptize_req::baptize_type() const {
  return baptize_type_;
}
inline void baptize_req::set_baptize_type(::google::protobuf::uint32 value) {
  set_has_baptize_type();
  baptize_type_ = value;
}

// required uint32 grid_index = 2;
inline bool baptize_req::has_grid_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void baptize_req::set_has_grid_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void baptize_req::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void baptize_req::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 baptize_req::grid_index() const {
  return grid_index_;
}
inline void baptize_req::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool baptize_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void baptize_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void baptize_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void baptize_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& baptize_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* baptize_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* baptize_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void baptize_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// baptize_rsp

// required uint32 result_type = 1;
inline bool baptize_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void baptize_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void baptize_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void baptize_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 baptize_rsp::result_type() const {
  return result_type_;
}
inline void baptize_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// required uint32 grid_index = 2;
inline bool baptize_rsp::has_grid_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void baptize_rsp::set_has_grid_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void baptize_rsp::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void baptize_rsp::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 baptize_rsp::grid_index() const {
  return grid_index_;
}
inline void baptize_rsp::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// -------------------------------------------------------------------

// baptize_save_req

// required uint32 grid_index = 1;
inline bool baptize_save_req::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void baptize_save_req::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void baptize_save_req::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void baptize_save_req::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 baptize_save_req::grid_index() const {
  return grid_index_;
}
inline void baptize_save_req::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool baptize_save_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void baptize_save_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void baptize_save_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void baptize_save_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& baptize_save_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* baptize_save_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* baptize_save_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void baptize_save_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// baptize_save_rsp

// required uint32 result_type = 1;
inline bool baptize_save_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void baptize_save_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void baptize_save_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void baptize_save_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 baptize_save_rsp::result_type() const {
  return result_type_;
}
inline void baptize_save_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// required uint32 grid_index = 2;
inline bool baptize_save_rsp::has_grid_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void baptize_save_rsp::set_has_grid_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void baptize_save_rsp::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void baptize_save_rsp::clear_grid_index() {
  grid_index_ = 0u;
  clear_has_grid_index();
}
inline ::google::protobuf::uint32 baptize_save_rsp::grid_index() const {
  return grid_index_;
}
inline void baptize_save_rsp::set_grid_index(::google::protobuf::uint32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// -------------------------------------------------------------------

// collect_explore_req

// required uint32 collect_type = 1;
inline bool collect_explore_req::has_collect_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void collect_explore_req::set_has_collect_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void collect_explore_req::clear_has_collect_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void collect_explore_req::clear_collect_type() {
  collect_type_ = 0u;
  clear_has_collect_type();
}
inline ::google::protobuf::uint32 collect_explore_req::collect_type() const {
  return collect_type_;
}
inline void collect_explore_req::set_collect_type(::google::protobuf::uint32 value) {
  set_has_collect_type();
  collect_type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool collect_explore_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void collect_explore_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void collect_explore_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void collect_explore_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& collect_explore_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* collect_explore_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* collect_explore_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void collect_explore_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// collect_explore_rsp

// required uint32 result_type = 1;
inline bool collect_explore_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void collect_explore_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void collect_explore_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void collect_explore_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 collect_explore_rsp::result_type() const {
  return result_type_;
}
inline void collect_explore_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// -------------------------------------------------------------------

// record_item_info

// optional uint32 item_id = 1;
inline bool record_item_info::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void record_item_info::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void record_item_info::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void record_item_info::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 record_item_info::item_id() const {
  return item_id_;
}
inline void record_item_info::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 item_count = 2;
inline bool record_item_info::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void record_item_info::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void record_item_info::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void record_item_info::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 record_item_info::item_count() const {
  return item_count_;
}
inline void record_item_info::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// -------------------------------------------------------------------

// treasure_db_info

// optional uint32 item_id = 1 [default = 0];
inline bool treasure_db_info::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void treasure_db_info::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void treasure_db_info::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void treasure_db_info::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 treasure_db_info::item_id() const {
  return item_id_;
}
inline void treasure_db_info::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 item_count = 2 [default = 0];
inline bool treasure_db_info::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void treasure_db_info::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void treasure_db_info::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void treasure_db_info::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 treasure_db_info::item_count() const {
  return item_count_;
}
inline void treasure_db_info::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// optional uint32 shop_id = 3;
inline bool treasure_db_info::has_shop_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void treasure_db_info::set_has_shop_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void treasure_db_info::clear_has_shop_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void treasure_db_info::clear_shop_id() {
  shop_id_ = 0u;
  clear_has_shop_id();
}
inline ::google::protobuf::uint32 treasure_db_info::shop_id() const {
  return shop_id_;
}
inline void treasure_db_info::set_shop_id(::google::protobuf::uint32 value) {
  set_has_shop_id();
  shop_id_ = value;
}

// -------------------------------------------------------------------

// black_shop_db_info

// optional uint32 item_slot = 1;
inline bool black_shop_db_info::has_item_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void black_shop_db_info::set_has_item_slot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void black_shop_db_info::clear_has_item_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void black_shop_db_info::clear_item_slot() {
  item_slot_ = 0u;
  clear_has_item_slot();
}
inline ::google::protobuf::uint32 black_shop_db_info::item_slot() const {
  return item_slot_;
}
inline void black_shop_db_info::set_item_slot(::google::protobuf::uint32 value) {
  set_has_item_slot();
  item_slot_ = value;
}

// optional uint32 item_id = 2;
inline bool black_shop_db_info::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void black_shop_db_info::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void black_shop_db_info::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void black_shop_db_info::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 black_shop_db_info::item_id() const {
  return item_id_;
}
inline void black_shop_db_info::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 item_count = 3;
inline bool black_shop_db_info::has_item_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void black_shop_db_info::set_has_item_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void black_shop_db_info::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void black_shop_db_info::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 black_shop_db_info::item_count() const {
  return item_count_;
}
inline void black_shop_db_info::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// optional uint32 key_id = 4;
inline bool black_shop_db_info::has_key_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void black_shop_db_info::set_has_key_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void black_shop_db_info::clear_has_key_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void black_shop_db_info::clear_key_id() {
  key_id_ = 0u;
  clear_has_key_id();
}
inline ::google::protobuf::uint32 black_shop_db_info::key_id() const {
  return key_id_;
}
inline void black_shop_db_info::set_key_id(::google::protobuf::uint32 value) {
  set_has_key_id();
  key_id_ = value;
}

// optional bool is_buy = 5 [default = false];
inline bool black_shop_db_info::has_is_buy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void black_shop_db_info::set_has_is_buy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void black_shop_db_info::clear_has_is_buy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void black_shop_db_info::clear_is_buy() {
  is_buy_ = false;
  clear_has_is_buy();
}
inline bool black_shop_db_info::is_buy() const {
  return is_buy_;
}
inline void black_shop_db_info::set_is_buy(bool value) {
  set_has_is_buy();
  is_buy_ = value;
}

// -------------------------------------------------------------------

// shop_info

// optional uint32 item_id = 1;
inline bool shop_info::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shop_info::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shop_info::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shop_info::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 shop_info::item_id() const {
  return item_id_;
}
inline void shop_info::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 item_count = 2;
inline bool shop_info::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shop_info::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shop_info::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shop_info::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 shop_info::item_count() const {
  return item_count_;
}
inline void shop_info::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// optional uint32 probability = 3;
inline bool shop_info::has_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shop_info::set_has_probability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shop_info::clear_has_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shop_info::clear_probability() {
  probability_ = 0u;
  clear_has_probability();
}
inline ::google::protobuf::uint32 shop_info::probability() const {
  return probability_;
}
inline void shop_info::set_probability(::google::protobuf::uint32 value) {
  set_has_probability();
  probability_ = value;
}

// optional uint32 key_id = 4;
inline bool shop_info::has_key_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void shop_info::set_has_key_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void shop_info::clear_has_key_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void shop_info::clear_key_id() {
  key_id_ = 0u;
  clear_has_key_id();
}
inline ::google::protobuf::uint32 shop_info::key_id() const {
  return key_id_;
}
inline void shop_info::set_key_id(::google::protobuf::uint32 value) {
  set_has_key_id();
  key_id_ = value;
}

// -------------------------------------------------------------------

// black_shop_req

// required uint32 unixtime = 1;
inline bool black_shop_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void black_shop_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void black_shop_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void black_shop_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 black_shop_req::unixtime() const {
  return unixtime_;
}
inline void black_shop_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool black_shop_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void black_shop_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void black_shop_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void black_shop_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& black_shop_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* black_shop_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* black_shop_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void black_shop_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// black_shop_rsp

// required uint32 result_type = 1;
inline bool black_shop_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void black_shop_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void black_shop_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void black_shop_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 black_shop_rsp::result_type() const {
  return result_type_;
}
inline void black_shop_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// optional uint32 reflesh_count = 2;
inline bool black_shop_rsp::has_reflesh_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void black_shop_rsp::set_has_reflesh_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void black_shop_rsp::clear_has_reflesh_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void black_shop_rsp::clear_reflesh_count() {
  reflesh_count_ = 0u;
  clear_has_reflesh_count();
}
inline ::google::protobuf::uint32 black_shop_rsp::reflesh_count() const {
  return reflesh_count_;
}
inline void black_shop_rsp::set_reflesh_count(::google::protobuf::uint32 value) {
  set_has_reflesh_count();
  reflesh_count_ = value;
}

// optional uint32 time = 3;
inline bool black_shop_rsp::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void black_shop_rsp::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void black_shop_rsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void black_shop_rsp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 black_shop_rsp::time() const {
  return time_;
}
inline void black_shop_rsp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// repeated .client.black_shop_db_info info = 4;
inline int black_shop_rsp::info_size() const {
  return info_.size();
}
inline void black_shop_rsp::clear_info() {
  info_.Clear();
}
inline const ::client::black_shop_db_info& black_shop_rsp::info(int index) const {
  return info_.Get(index);
}
inline ::client::black_shop_db_info* black_shop_rsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::client::black_shop_db_info* black_shop_rsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info >&
black_shop_rsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info >*
black_shop_rsp::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// black_shop_reflesh_req

// required uint32 unixtime = 1;
inline bool black_shop_reflesh_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void black_shop_reflesh_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void black_shop_reflesh_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void black_shop_reflesh_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 black_shop_reflesh_req::unixtime() const {
  return unixtime_;
}
inline void black_shop_reflesh_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool black_shop_reflesh_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void black_shop_reflesh_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void black_shop_reflesh_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void black_shop_reflesh_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& black_shop_reflesh_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* black_shop_reflesh_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* black_shop_reflesh_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void black_shop_reflesh_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// black_shop_reflesh_rsp

// required uint32 result_type = 1;
inline bool black_shop_reflesh_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void black_shop_reflesh_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void black_shop_reflesh_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void black_shop_reflesh_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 black_shop_reflesh_rsp::result_type() const {
  return result_type_;
}
inline void black_shop_reflesh_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// optional uint32 reflesh_count = 2;
inline bool black_shop_reflesh_rsp::has_reflesh_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void black_shop_reflesh_rsp::set_has_reflesh_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void black_shop_reflesh_rsp::clear_has_reflesh_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void black_shop_reflesh_rsp::clear_reflesh_count() {
  reflesh_count_ = 0u;
  clear_has_reflesh_count();
}
inline ::google::protobuf::uint32 black_shop_reflesh_rsp::reflesh_count() const {
  return reflesh_count_;
}
inline void black_shop_reflesh_rsp::set_reflesh_count(::google::protobuf::uint32 value) {
  set_has_reflesh_count();
  reflesh_count_ = value;
}

// optional uint32 time = 3;
inline bool black_shop_reflesh_rsp::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void black_shop_reflesh_rsp::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void black_shop_reflesh_rsp::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void black_shop_reflesh_rsp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 black_shop_reflesh_rsp::time() const {
  return time_;
}
inline void black_shop_reflesh_rsp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// repeated .client.black_shop_db_info info = 4;
inline int black_shop_reflesh_rsp::info_size() const {
  return info_.size();
}
inline void black_shop_reflesh_rsp::clear_info() {
  info_.Clear();
}
inline const ::client::black_shop_db_info& black_shop_reflesh_rsp::info(int index) const {
  return info_.Get(index);
}
inline ::client::black_shop_db_info* black_shop_reflesh_rsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::client::black_shop_db_info* black_shop_reflesh_rsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info >&
black_shop_reflesh_rsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info >*
black_shop_reflesh_rsp::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// black_shop_buy_req

// required uint32 item_slot = 1;
inline bool black_shop_buy_req::has_item_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void black_shop_buy_req::set_has_item_slot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void black_shop_buy_req::clear_has_item_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void black_shop_buy_req::clear_item_slot() {
  item_slot_ = 0u;
  clear_has_item_slot();
}
inline ::google::protobuf::uint32 black_shop_buy_req::item_slot() const {
  return item_slot_;
}
inline void black_shop_buy_req::set_item_slot(::google::protobuf::uint32 value) {
  set_has_item_slot();
  item_slot_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool black_shop_buy_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void black_shop_buy_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void black_shop_buy_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void black_shop_buy_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& black_shop_buy_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* black_shop_buy_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* black_shop_buy_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void black_shop_buy_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// black_shop_buy_rsp

// required uint32 item_slot = 1;
inline bool black_shop_buy_rsp::has_item_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void black_shop_buy_rsp::set_has_item_slot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void black_shop_buy_rsp::clear_has_item_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void black_shop_buy_rsp::clear_item_slot() {
  item_slot_ = 0u;
  clear_has_item_slot();
}
inline ::google::protobuf::uint32 black_shop_buy_rsp::item_slot() const {
  return item_slot_;
}
inline void black_shop_buy_rsp::set_item_slot(::google::protobuf::uint32 value) {
  set_has_item_slot();
  item_slot_ = value;
}

// required uint32 result_type = 2;
inline bool black_shop_buy_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void black_shop_buy_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void black_shop_buy_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void black_shop_buy_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 black_shop_buy_rsp::result_type() const {
  return result_type_;
}
inline void black_shop_buy_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// repeated .client.black_shop_db_info info = 3;
inline int black_shop_buy_rsp::info_size() const {
  return info_.size();
}
inline void black_shop_buy_rsp::clear_info() {
  info_.Clear();
}
inline const ::client::black_shop_db_info& black_shop_buy_rsp::info(int index) const {
  return info_.Get(index);
}
inline ::client::black_shop_db_info* black_shop_buy_rsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::client::black_shop_db_info* black_shop_buy_rsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info >&
black_shop_buy_rsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::black_shop_db_info >*
black_shop_buy_rsp::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// use_props_show_rsp

// required uint32 rsp_type = 1;
inline bool use_props_show_rsp::has_rsp_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void use_props_show_rsp::set_has_rsp_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void use_props_show_rsp::clear_has_rsp_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void use_props_show_rsp::clear_rsp_type() {
  rsp_type_ = 0u;
  clear_has_rsp_type();
}
inline ::google::protobuf::uint32 use_props_show_rsp::rsp_type() const {
  return rsp_type_;
}
inline void use_props_show_rsp::set_rsp_type(::google::protobuf::uint32 value) {
  set_has_rsp_type();
  rsp_type_ = value;
}

// repeated .client.props_info show_info = 2;
inline int use_props_show_rsp::show_info_size() const {
  return show_info_.size();
}
inline void use_props_show_rsp::clear_show_info() {
  show_info_.Clear();
}
inline const ::client::props_info& use_props_show_rsp::show_info(int index) const {
  return show_info_.Get(index);
}
inline ::client::props_info* use_props_show_rsp::mutable_show_info(int index) {
  return show_info_.Mutable(index);
}
inline ::client::props_info* use_props_show_rsp::add_show_info() {
  return show_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::props_info >&
use_props_show_rsp::show_info() const {
  return show_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::props_info >*
use_props_show_rsp::mutable_show_info() {
  return &show_info_;
}

// -------------------------------------------------------------------

// record_attr

// optional uint32 old_value = 1;
inline bool record_attr::has_old_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void record_attr::set_has_old_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void record_attr::clear_has_old_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void record_attr::clear_old_value() {
  old_value_ = 0u;
  clear_has_old_value();
}
inline ::google::protobuf::uint32 record_attr::old_value() const {
  return old_value_;
}
inline void record_attr::set_old_value(::google::protobuf::uint32 value) {
  set_has_old_value();
  old_value_ = value;
}

// optional uint32 new_value = 2;
inline bool record_attr::has_new_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void record_attr::set_has_new_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void record_attr::clear_has_new_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void record_attr::clear_new_value() {
  new_value_ = 0u;
  clear_has_new_value();
}
inline ::google::protobuf::uint32 record_attr::new_value() const {
  return new_value_;
}
inline void record_attr::set_new_value(::google::protobuf::uint32 value) {
  set_has_new_value();
  new_value_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::props_info_POS>() {
  return ::client::props_info_POS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::drop_props_msg_METHOD>() {
  return ::client::drop_props_msg_METHOD_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::pick_up_props_rsp_result>() {
  return ::client::pick_up_props_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::upgrade_equip_rsp_result>() {
  return ::client::upgrade_equip_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::melting_equip_rsp_result>() {
  return ::client::melting_equip_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::cast_equip_rsp_result>() {
  return ::client::cast_equip_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::ITEM_OPERATE_TYPE>() {
  return ::client::ITEM_OPERATE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::SELL_RESULT_E>() {
  return ::client::SELL_RESULT_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::UPGRADE_TYPE>() {
  return ::client::UPGRADE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::BAPTIZE_TYPE_E>() {
  return ::client::BAPTIZE_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::BAPTIZE_RESULT_TYPE_E>() {
  return ::client::BAPTIZE_RESULT_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::ITEM_USE_SUB_TYPE_E>() {
  return ::client::ITEM_USE_SUB_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::ITEM_MEDICINCE_SUB_TYPE_E>() {
  return ::client::ITEM_MEDICINCE_SUB_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::COLLECT_RESULT_TYPE_E>() {
  return ::client::COLLECT_RESULT_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::BLACK_SHOP_RESULT_TYPE_E>() {
  return ::client::BLACK_SHOP_RESULT_TYPE_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2erole_5fprops_2eproto__INCLUDED
