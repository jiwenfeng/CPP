// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_set.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.role_set.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* shortcut_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shortcut_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* shortcut_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shortcut_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* shortcut_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shortcut_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* shortcut_set_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shortcut_set_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* shortcut_set_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shortcut_set_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* handup_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  handup_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* handup_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  handup_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* handup_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  handup_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* handup_set_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  handup_set_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* handup_set_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  handup_set_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* practice_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  practice_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_set_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_set_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erole_5fset_2eproto() {
  protobuf_AddDesc_client_2erole_5fset_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.role_set.proto");
  GOOGLE_CHECK(file != NULL);
  shortcut_req_descriptor_ = file->message_type(0);
  static const int shortcut_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_req, svr_head_),
  };
  shortcut_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shortcut_req_descriptor_,
      shortcut_req::default_instance_,
      shortcut_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shortcut_req));
  shortcut_info_descriptor_ = file->message_type(1);
  static const int shortcut_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_info, val_),
  };
  shortcut_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shortcut_info_descriptor_,
      shortcut_info::default_instance_,
      shortcut_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shortcut_info));
  shortcut_rsp_descriptor_ = file->message_type(2);
  static const int shortcut_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_rsp, si_),
  };
  shortcut_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shortcut_rsp_descriptor_,
      shortcut_rsp::default_instance_,
      shortcut_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shortcut_rsp));
  shortcut_set_req_descriptor_ = file->message_type(3);
  static const int shortcut_set_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_set_req, si_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_set_req, svr_head_),
  };
  shortcut_set_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shortcut_set_req_descriptor_,
      shortcut_set_req::default_instance_,
      shortcut_set_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_set_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_set_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shortcut_set_req));
  shortcut_set_rsp_descriptor_ = file->message_type(4);
  static const int shortcut_set_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_set_rsp, si_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_set_rsp, ret_),
  };
  shortcut_set_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shortcut_set_rsp_descriptor_,
      shortcut_set_rsp::default_instance_,
      shortcut_set_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_set_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shortcut_set_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shortcut_set_rsp));
  handup_req_descriptor_ = file->message_type(5);
  static const int handup_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_req, svr_head_),
  };
  handup_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      handup_req_descriptor_,
      handup_req::default_instance_,
      handup_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(handup_req));
  handup_info_descriptor_ = file->message_type(6);
  static const int handup_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_info, relive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_info, pick_equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_info, pick_prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_info, back_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_info, skills_),
  };
  handup_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      handup_info_descriptor_,
      handup_info::default_instance_,
      handup_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(handup_info));
  handup_rsp_descriptor_ = file->message_type(7);
  static const int handup_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_rsp, hi_),
  };
  handup_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      handup_rsp_descriptor_,
      handup_rsp::default_instance_,
      handup_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(handup_rsp));
  handup_set_req_descriptor_ = file->message_type(8);
  static const int handup_set_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_set_req, hi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_set_req, svr_head_),
  };
  handup_set_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      handup_set_req_descriptor_,
      handup_set_req::default_instance_,
      handup_set_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_set_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_set_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(handup_set_req));
  handup_set_rsp_descriptor_ = file->message_type(9);
  static const int handup_set_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_set_rsp, hi_),
  };
  handup_set_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      handup_set_rsp_descriptor_,
      handup_set_rsp::default_instance_,
      handup_set_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_set_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(handup_set_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(handup_set_rsp));
  practice_info_descriptor_ = file->message_type(10);
  static const int practice_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(practice_info, auto_practice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(practice_info, auto_comm_practice_),
  };
  practice_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      practice_info_descriptor_,
      practice_info::default_instance_,
      practice_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(practice_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(practice_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(practice_info));
  role_set_info_descriptor_ = file->message_type(11);
  static const int role_set_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_set_info, si_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_set_info, hi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_set_info, pi_),
  };
  role_set_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_set_info_descriptor_,
      role_set_info::default_instance_,
      role_set_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_set_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_set_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_set_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erole_5fset_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shortcut_req_descriptor_, &shortcut_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shortcut_info_descriptor_, &shortcut_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shortcut_rsp_descriptor_, &shortcut_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shortcut_set_req_descriptor_, &shortcut_set_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shortcut_set_rsp_descriptor_, &shortcut_set_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    handup_req_descriptor_, &handup_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    handup_info_descriptor_, &handup_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    handup_rsp_descriptor_, &handup_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    handup_set_req_descriptor_, &handup_set_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    handup_set_rsp_descriptor_, &handup_set_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    practice_info_descriptor_, &practice_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_set_info_descriptor_, &role_set_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erole_5fset_2eproto() {
  delete shortcut_req::default_instance_;
  delete shortcut_req_reflection_;
  delete shortcut_info::default_instance_;
  delete shortcut_info_reflection_;
  delete shortcut_rsp::default_instance_;
  delete shortcut_rsp_reflection_;
  delete shortcut_set_req::default_instance_;
  delete shortcut_set_req_reflection_;
  delete shortcut_set_rsp::default_instance_;
  delete shortcut_set_rsp_reflection_;
  delete handup_req::default_instance_;
  delete handup_req_reflection_;
  delete handup_info::default_instance_;
  delete handup_info_reflection_;
  delete handup_rsp::default_instance_;
  delete handup_rsp_reflection_;
  delete handup_set_req::default_instance_;
  delete handup_set_req_reflection_;
  delete handup_set_rsp::default_instance_;
  delete handup_set_rsp_reflection_;
  delete practice_info::default_instance_;
  delete practice_info_reflection_;
  delete role_set_info::default_instance_;
  delete role_set_info_reflection_;
}

void protobuf_AddDesc_client_2erole_5fset_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025client.role_set.proto\022\006client\032\021client."
    "comm.proto\"H\n\014shortcut_req\022\020\n\010unixtime\030\001"
    " \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_"
    "head\"\?\n\rshortcut_info\022\r\n\002id\030\001 \002(\r:\0010\022\017\n\004"
    "type\030\002 \002(\r:\0010\022\016\n\003val\030\003 \002(\r:\0010\"1\n\014shortcu"
    "t_rsp\022!\n\002si\030\001 \003(\0132\025.client.shortcut_info"
    "\"]\n\020shortcut_set_req\022!\n\002si\030\001 \003(\0132\025.clien"
    "t.shortcut_info\022&\n\010svr_head\030\350\007 \001(\0132\023.cli"
    "ent.server_head\"B\n\020shortcut_set_rsp\022!\n\002s"
    "i\030\001 \003(\0132\025.client.shortcut_info\022\013\n\003ret\030\002 "
    "\003(\r\"F\n\nhandup_req\022\020\n\010unixtime\030\001 \002(\r\022&\n\010s"
    "vr_head\030\350\007 \001(\0132\023.client.server_head\"g\n\013h"
    "andup_info\022\016\n\006relive\030\001 \001(\010\022\022\n\npick_equip"
    "\030\002 \001(\010\022\021\n\tpick_prop\030\003 \001(\r\022\021\n\tback_base\030\004"
    " \001(\010\022\016\n\006skills\030\005 \003(\r\"-\n\nhandup_rsp\022\037\n\002hi"
    "\030\001 \002(\0132\023.client.handup_info\"Y\n\016handup_se"
    "t_req\022\037\n\002hi\030\001 \002(\0132\023.client.handup_info\022&"
    "\n\010svr_head\030\350\007 \001(\0132\023.client.server_head\"1"
    "\n\016handup_set_rsp\022\037\n\002hi\030\001 \002(\0132\023.client.ha"
    "ndup_info\"N\n\rpractice_info\022\033\n\rauto_pract"
    "ice\030\001 \001(\010:\004true\022 \n\022auto_comm_practice\030\002 "
    "\001(\010:\004true\"v\n\rrole_set_info\022!\n\002si\030\001 \003(\0132\025"
    ".client.shortcut_info\022\037\n\002hi\030\002 \001(\0132\023.clie"
    "nt.handup_info\022!\n\002pi\030\003 \001(\0132\025.client.prac"
    "tice_info", 969);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.role_set.proto", &protobuf_RegisterTypes);
  shortcut_req::default_instance_ = new shortcut_req();
  shortcut_info::default_instance_ = new shortcut_info();
  shortcut_rsp::default_instance_ = new shortcut_rsp();
  shortcut_set_req::default_instance_ = new shortcut_set_req();
  shortcut_set_rsp::default_instance_ = new shortcut_set_rsp();
  handup_req::default_instance_ = new handup_req();
  handup_info::default_instance_ = new handup_info();
  handup_rsp::default_instance_ = new handup_rsp();
  handup_set_req::default_instance_ = new handup_set_req();
  handup_set_rsp::default_instance_ = new handup_set_rsp();
  practice_info::default_instance_ = new practice_info();
  role_set_info::default_instance_ = new role_set_info();
  shortcut_req::default_instance_->InitAsDefaultInstance();
  shortcut_info::default_instance_->InitAsDefaultInstance();
  shortcut_rsp::default_instance_->InitAsDefaultInstance();
  shortcut_set_req::default_instance_->InitAsDefaultInstance();
  shortcut_set_rsp::default_instance_->InitAsDefaultInstance();
  handup_req::default_instance_->InitAsDefaultInstance();
  handup_info::default_instance_->InitAsDefaultInstance();
  handup_rsp::default_instance_->InitAsDefaultInstance();
  handup_set_req::default_instance_->InitAsDefaultInstance();
  handup_set_rsp::default_instance_->InitAsDefaultInstance();
  practice_info::default_instance_->InitAsDefaultInstance();
  role_set_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erole_5fset_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erole_5fset_2eproto {
  StaticDescriptorInitializer_client_2erole_5fset_2eproto() {
    protobuf_AddDesc_client_2erole_5fset_2eproto();
  }
} static_descriptor_initializer_client_2erole_5fset_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int shortcut_req::kUnixtimeFieldNumber;
const int shortcut_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

shortcut_req::shortcut_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shortcut_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

shortcut_req::shortcut_req(const shortcut_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shortcut_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shortcut_req::~shortcut_req() {
  SharedDtor();
}

void shortcut_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void shortcut_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shortcut_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shortcut_req_descriptor_;
}

const shortcut_req& shortcut_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fset_2eproto();
  return *default_instance_;
}

shortcut_req* shortcut_req::default_instance_ = NULL;

shortcut_req* shortcut_req::New() const {
  return new shortcut_req;
}

void shortcut_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shortcut_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shortcut_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shortcut_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shortcut_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shortcut_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shortcut_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shortcut_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shortcut_req::MergeFrom(const shortcut_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shortcut_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shortcut_req::CopyFrom(const shortcut_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shortcut_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void shortcut_req::Swap(shortcut_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shortcut_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shortcut_req_descriptor_;
  metadata.reflection = shortcut_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shortcut_info::kIdFieldNumber;
const int shortcut_info::kTypeFieldNumber;
const int shortcut_info::kValFieldNumber;
#endif  // !_MSC_VER

shortcut_info::shortcut_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shortcut_info::InitAsDefaultInstance() {
}

shortcut_info::shortcut_info(const shortcut_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shortcut_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shortcut_info::~shortcut_info() {
  SharedDtor();
}

void shortcut_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shortcut_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shortcut_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shortcut_info_descriptor_;
}

const shortcut_info& shortcut_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fset_2eproto();
  return *default_instance_;
}

shortcut_info* shortcut_info::default_instance_ = NULL;

shortcut_info* shortcut_info::New() const {
  return new shortcut_info;
}

void shortcut_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shortcut_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val;
        break;
      }

      // required uint32 val = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shortcut_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 val = 3 [default = 0];
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shortcut_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 val = 3 [default = 0];
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shortcut_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 type = 2 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 val = 3 [default = 0];
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shortcut_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shortcut_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shortcut_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shortcut_info::MergeFrom(const shortcut_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shortcut_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shortcut_info::CopyFrom(const shortcut_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shortcut_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void shortcut_info::Swap(shortcut_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shortcut_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shortcut_info_descriptor_;
  metadata.reflection = shortcut_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shortcut_rsp::kSiFieldNumber;
#endif  // !_MSC_VER

shortcut_rsp::shortcut_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shortcut_rsp::InitAsDefaultInstance() {
}

shortcut_rsp::shortcut_rsp(const shortcut_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shortcut_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shortcut_rsp::~shortcut_rsp() {
  SharedDtor();
}

void shortcut_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shortcut_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shortcut_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shortcut_rsp_descriptor_;
}

const shortcut_rsp& shortcut_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fset_2eproto();
  return *default_instance_;
}

shortcut_rsp* shortcut_rsp::default_instance_ = NULL;

shortcut_rsp* shortcut_rsp::New() const {
  return new shortcut_rsp;
}

void shortcut_rsp::Clear() {
  si_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shortcut_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.shortcut_info si = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_si:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_si()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_si;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shortcut_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.shortcut_info si = 1;
  for (int i = 0; i < this->si_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->si(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shortcut_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.shortcut_info si = 1;
  for (int i = 0; i < this->si_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->si(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shortcut_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.shortcut_info si = 1;
  total_size += 1 * this->si_size();
  for (int i = 0; i < this->si_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->si(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shortcut_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shortcut_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shortcut_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shortcut_rsp::MergeFrom(const shortcut_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  si_.MergeFrom(from.si_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shortcut_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shortcut_rsp::CopyFrom(const shortcut_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shortcut_rsp::IsInitialized() const {

  for (int i = 0; i < si_size(); i++) {
    if (!this->si(i).IsInitialized()) return false;
  }
  return true;
}

void shortcut_rsp::Swap(shortcut_rsp* other) {
  if (other != this) {
    si_.Swap(&other->si_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shortcut_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shortcut_rsp_descriptor_;
  metadata.reflection = shortcut_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shortcut_set_req::kSiFieldNumber;
const int shortcut_set_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

shortcut_set_req::shortcut_set_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shortcut_set_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

shortcut_set_req::shortcut_set_req(const shortcut_set_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shortcut_set_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shortcut_set_req::~shortcut_set_req() {
  SharedDtor();
}

void shortcut_set_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void shortcut_set_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shortcut_set_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shortcut_set_req_descriptor_;
}

const shortcut_set_req& shortcut_set_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fset_2eproto();
  return *default_instance_;
}

shortcut_set_req* shortcut_set_req::default_instance_ = NULL;

shortcut_set_req* shortcut_set_req::New() const {
  return new shortcut_set_req;
}

void shortcut_set_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  si_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shortcut_set_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.shortcut_info si = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_si:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_si()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_si;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shortcut_set_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.shortcut_info si = 1;
  for (int i = 0; i < this->si_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->si(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shortcut_set_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.shortcut_info si = 1;
  for (int i = 0; i < this->si_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->si(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shortcut_set_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated .client.shortcut_info si = 1;
  total_size += 1 * this->si_size();
  for (int i = 0; i < this->si_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->si(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shortcut_set_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shortcut_set_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shortcut_set_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shortcut_set_req::MergeFrom(const shortcut_set_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  si_.MergeFrom(from.si_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shortcut_set_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shortcut_set_req::CopyFrom(const shortcut_set_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shortcut_set_req::IsInitialized() const {

  for (int i = 0; i < si_size(); i++) {
    if (!this->si(i).IsInitialized()) return false;
  }
  return true;
}

void shortcut_set_req::Swap(shortcut_set_req* other) {
  if (other != this) {
    si_.Swap(&other->si_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shortcut_set_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shortcut_set_req_descriptor_;
  metadata.reflection = shortcut_set_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shortcut_set_rsp::kSiFieldNumber;
const int shortcut_set_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

shortcut_set_rsp::shortcut_set_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shortcut_set_rsp::InitAsDefaultInstance() {
}

shortcut_set_rsp::shortcut_set_rsp(const shortcut_set_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shortcut_set_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shortcut_set_rsp::~shortcut_set_rsp() {
  SharedDtor();
}

void shortcut_set_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shortcut_set_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shortcut_set_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shortcut_set_rsp_descriptor_;
}

const shortcut_set_rsp& shortcut_set_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fset_2eproto();
  return *default_instance_;
}

shortcut_set_rsp* shortcut_set_rsp::default_instance_ = NULL;

shortcut_set_rsp* shortcut_set_rsp::New() const {
  return new shortcut_set_rsp;
}

void shortcut_set_rsp::Clear() {
  si_.Clear();
  ret_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shortcut_set_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.shortcut_info si = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_si:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_si()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_si;
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // repeated uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_ret())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ret())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shortcut_set_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.shortcut_info si = 1;
  for (int i = 0; i < this->si_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->si(i), output);
  }

  // repeated uint32 ret = 2;
  for (int i = 0; i < this->ret_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ret(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shortcut_set_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.shortcut_info si = 1;
  for (int i = 0; i < this->si_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->si(i), target);
  }

  // repeated uint32 ret = 2;
  for (int i = 0; i < this->ret_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->ret(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shortcut_set_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.shortcut_info si = 1;
  total_size += 1 * this->si_size();
  for (int i = 0; i < this->si_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->si(i));
  }

  // repeated uint32 ret = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ret_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ret(i));
    }
    total_size += 1 * this->ret_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shortcut_set_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shortcut_set_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shortcut_set_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shortcut_set_rsp::MergeFrom(const shortcut_set_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  si_.MergeFrom(from.si_);
  ret_.MergeFrom(from.ret_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shortcut_set_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shortcut_set_rsp::CopyFrom(const shortcut_set_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shortcut_set_rsp::IsInitialized() const {

  for (int i = 0; i < si_size(); i++) {
    if (!this->si(i).IsInitialized()) return false;
  }
  return true;
}

void shortcut_set_rsp::Swap(shortcut_set_rsp* other) {
  if (other != this) {
    si_.Swap(&other->si_);
    ret_.Swap(&other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shortcut_set_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shortcut_set_rsp_descriptor_;
  metadata.reflection = shortcut_set_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int handup_req::kUnixtimeFieldNumber;
const int handup_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

handup_req::handup_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void handup_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

handup_req::handup_req(const handup_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void handup_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

handup_req::~handup_req() {
  SharedDtor();
}

void handup_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void handup_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* handup_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return handup_req_descriptor_;
}

const handup_req& handup_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fset_2eproto();
  return *default_instance_;
}

handup_req* handup_req::default_instance_ = NULL;

handup_req* handup_req::New() const {
  return new handup_req;
}

void handup_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool handup_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void handup_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* handup_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int handup_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void handup_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const handup_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const handup_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void handup_req::MergeFrom(const handup_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void handup_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void handup_req::CopyFrom(const handup_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool handup_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void handup_req::Swap(handup_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata handup_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = handup_req_descriptor_;
  metadata.reflection = handup_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int handup_info::kReliveFieldNumber;
const int handup_info::kPickEquipFieldNumber;
const int handup_info::kPickPropFieldNumber;
const int handup_info::kBackBaseFieldNumber;
const int handup_info::kSkillsFieldNumber;
#endif  // !_MSC_VER

handup_info::handup_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void handup_info::InitAsDefaultInstance() {
}

handup_info::handup_info(const handup_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void handup_info::SharedCtor() {
  _cached_size_ = 0;
  relive_ = false;
  pick_equip_ = false;
  pick_prop_ = 0u;
  back_base_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

handup_info::~handup_info() {
  SharedDtor();
}

void handup_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void handup_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* handup_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return handup_info_descriptor_;
}

const handup_info& handup_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fset_2eproto();
  return *default_instance_;
}

handup_info* handup_info::default_instance_ = NULL;

handup_info* handup_info::New() const {
  return new handup_info;
}

void handup_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    relive_ = false;
    pick_equip_ = false;
    pick_prop_ = 0u;
    back_base_ = false;
  }
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool handup_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool relive = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relive_)));
          set_has_relive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pick_equip;
        break;
      }

      // optional bool pick_equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pick_equip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pick_equip_)));
          set_has_pick_equip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pick_prop;
        break;
      }

      // optional uint32 pick_prop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pick_prop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pick_prop_)));
          set_has_pick_prop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_back_base;
        break;
      }

      // optional bool back_base = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_base_)));
          set_has_back_base();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skills;
        break;
      }

      // repeated uint32 skills = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_skills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void handup_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool relive = 1;
  if (has_relive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->relive(), output);
  }

  // optional bool pick_equip = 2;
  if (has_pick_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pick_equip(), output);
  }

  // optional uint32 pick_prop = 3;
  if (has_pick_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pick_prop(), output);
  }

  // optional bool back_base = 4;
  if (has_back_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->back_base(), output);
  }

  // repeated uint32 skills = 5;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* handup_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool relive = 1;
  if (has_relive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->relive(), target);
  }

  // optional bool pick_equip = 2;
  if (has_pick_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pick_equip(), target);
  }

  // optional uint32 pick_prop = 3;
  if (has_pick_prop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pick_prop(), target);
  }

  // optional bool back_base = 4;
  if (has_back_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->back_base(), target);
  }

  // repeated uint32 skills = 5;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int handup_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool relive = 1;
    if (has_relive()) {
      total_size += 1 + 1;
    }

    // optional bool pick_equip = 2;
    if (has_pick_equip()) {
      total_size += 1 + 1;
    }

    // optional uint32 pick_prop = 3;
    if (has_pick_prop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pick_prop());
    }

    // optional bool back_base = 4;
    if (has_back_base()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 skills = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->skills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skills(i));
    }
    total_size += 1 * this->skills_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void handup_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const handup_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const handup_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void handup_info::MergeFrom(const handup_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relive()) {
      set_relive(from.relive());
    }
    if (from.has_pick_equip()) {
      set_pick_equip(from.pick_equip());
    }
    if (from.has_pick_prop()) {
      set_pick_prop(from.pick_prop());
    }
    if (from.has_back_base()) {
      set_back_base(from.back_base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void handup_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void handup_info::CopyFrom(const handup_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool handup_info::IsInitialized() const {

  return true;
}

void handup_info::Swap(handup_info* other) {
  if (other != this) {
    std::swap(relive_, other->relive_);
    std::swap(pick_equip_, other->pick_equip_);
    std::swap(pick_prop_, other->pick_prop_);
    std::swap(back_base_, other->back_base_);
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata handup_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = handup_info_descriptor_;
  metadata.reflection = handup_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int handup_rsp::kHiFieldNumber;
#endif  // !_MSC_VER

handup_rsp::handup_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void handup_rsp::InitAsDefaultInstance() {
  hi_ = const_cast< ::client::handup_info*>(&::client::handup_info::default_instance());
}

handup_rsp::handup_rsp(const handup_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void handup_rsp::SharedCtor() {
  _cached_size_ = 0;
  hi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

handup_rsp::~handup_rsp() {
  SharedDtor();
}

void handup_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete hi_;
  }
}

void handup_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* handup_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return handup_rsp_descriptor_;
}

const handup_rsp& handup_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fset_2eproto();
  return *default_instance_;
}

handup_rsp* handup_rsp::default_instance_ = NULL;

handup_rsp* handup_rsp::New() const {
  return new handup_rsp;
}

void handup_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hi()) {
      if (hi_ != NULL) hi_->::client::handup_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool handup_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.handup_info hi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void handup_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.handup_info hi = 1;
  if (has_hi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* handup_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.handup_info hi = 1;
  if (has_hi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int handup_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.handup_info hi = 1;
    if (has_hi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void handup_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const handup_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const handup_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void handup_rsp::MergeFrom(const handup_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hi()) {
      mutable_hi()->::client::handup_info::MergeFrom(from.hi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void handup_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void handup_rsp::CopyFrom(const handup_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool handup_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void handup_rsp::Swap(handup_rsp* other) {
  if (other != this) {
    std::swap(hi_, other->hi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata handup_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = handup_rsp_descriptor_;
  metadata.reflection = handup_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int handup_set_req::kHiFieldNumber;
const int handup_set_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

handup_set_req::handup_set_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void handup_set_req::InitAsDefaultInstance() {
  hi_ = const_cast< ::client::handup_info*>(&::client::handup_info::default_instance());
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

handup_set_req::handup_set_req(const handup_set_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void handup_set_req::SharedCtor() {
  _cached_size_ = 0;
  hi_ = NULL;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

handup_set_req::~handup_set_req() {
  SharedDtor();
}

void handup_set_req::SharedDtor() {
  if (this != default_instance_) {
    delete hi_;
    delete svr_head_;
  }
}

void handup_set_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* handup_set_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return handup_set_req_descriptor_;
}

const handup_set_req& handup_set_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fset_2eproto();
  return *default_instance_;
}

handup_set_req* handup_set_req::default_instance_ = NULL;

handup_set_req* handup_set_req::New() const {
  return new handup_set_req;
}

void handup_set_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hi()) {
      if (hi_ != NULL) hi_->::client::handup_info::Clear();
    }
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool handup_set_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.handup_info hi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void handup_set_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.handup_info hi = 1;
  if (has_hi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hi(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* handup_set_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.handup_info hi = 1;
  if (has_hi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hi(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int handup_set_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.handup_info hi = 1;
    if (has_hi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hi());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void handup_set_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const handup_set_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const handup_set_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void handup_set_req::MergeFrom(const handup_set_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hi()) {
      mutable_hi()->::client::handup_info::MergeFrom(from.hi());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void handup_set_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void handup_set_req::CopyFrom(const handup_set_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool handup_set_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void handup_set_req::Swap(handup_set_req* other) {
  if (other != this) {
    std::swap(hi_, other->hi_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata handup_set_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = handup_set_req_descriptor_;
  metadata.reflection = handup_set_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int handup_set_rsp::kHiFieldNumber;
#endif  // !_MSC_VER

handup_set_rsp::handup_set_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void handup_set_rsp::InitAsDefaultInstance() {
  hi_ = const_cast< ::client::handup_info*>(&::client::handup_info::default_instance());
}

handup_set_rsp::handup_set_rsp(const handup_set_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void handup_set_rsp::SharedCtor() {
  _cached_size_ = 0;
  hi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

handup_set_rsp::~handup_set_rsp() {
  SharedDtor();
}

void handup_set_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete hi_;
  }
}

void handup_set_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* handup_set_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return handup_set_rsp_descriptor_;
}

const handup_set_rsp& handup_set_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fset_2eproto();
  return *default_instance_;
}

handup_set_rsp* handup_set_rsp::default_instance_ = NULL;

handup_set_rsp* handup_set_rsp::New() const {
  return new handup_set_rsp;
}

void handup_set_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hi()) {
      if (hi_ != NULL) hi_->::client::handup_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool handup_set_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.handup_info hi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void handup_set_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.handup_info hi = 1;
  if (has_hi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* handup_set_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.handup_info hi = 1;
  if (has_hi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int handup_set_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.handup_info hi = 1;
    if (has_hi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void handup_set_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const handup_set_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const handup_set_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void handup_set_rsp::MergeFrom(const handup_set_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hi()) {
      mutable_hi()->::client::handup_info::MergeFrom(from.hi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void handup_set_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void handup_set_rsp::CopyFrom(const handup_set_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool handup_set_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void handup_set_rsp::Swap(handup_set_rsp* other) {
  if (other != this) {
    std::swap(hi_, other->hi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata handup_set_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = handup_set_rsp_descriptor_;
  metadata.reflection = handup_set_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int practice_info::kAutoPracticeFieldNumber;
const int practice_info::kAutoCommPracticeFieldNumber;
#endif  // !_MSC_VER

practice_info::practice_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void practice_info::InitAsDefaultInstance() {
}

practice_info::practice_info(const practice_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void practice_info::SharedCtor() {
  _cached_size_ = 0;
  auto_practice_ = true;
  auto_comm_practice_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

practice_info::~practice_info() {
  SharedDtor();
}

void practice_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void practice_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* practice_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return practice_info_descriptor_;
}

const practice_info& practice_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fset_2eproto();
  return *default_instance_;
}

practice_info* practice_info::default_instance_ = NULL;

practice_info* practice_info::New() const {
  return new practice_info;
}

void practice_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auto_practice_ = true;
    auto_comm_practice_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool practice_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool auto_practice = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_practice_)));
          set_has_auto_practice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auto_comm_practice;
        break;
      }

      // optional bool auto_comm_practice = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_comm_practice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_comm_practice_)));
          set_has_auto_comm_practice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void practice_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool auto_practice = 1 [default = true];
  if (has_auto_practice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->auto_practice(), output);
  }

  // optional bool auto_comm_practice = 2 [default = true];
  if (has_auto_comm_practice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->auto_comm_practice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* practice_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool auto_practice = 1 [default = true];
  if (has_auto_practice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->auto_practice(), target);
  }

  // optional bool auto_comm_practice = 2 [default = true];
  if (has_auto_comm_practice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->auto_comm_practice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int practice_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool auto_practice = 1 [default = true];
    if (has_auto_practice()) {
      total_size += 1 + 1;
    }

    // optional bool auto_comm_practice = 2 [default = true];
    if (has_auto_comm_practice()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void practice_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const practice_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const practice_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void practice_info::MergeFrom(const practice_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_practice()) {
      set_auto_practice(from.auto_practice());
    }
    if (from.has_auto_comm_practice()) {
      set_auto_comm_practice(from.auto_comm_practice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void practice_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void practice_info::CopyFrom(const practice_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool practice_info::IsInitialized() const {

  return true;
}

void practice_info::Swap(practice_info* other) {
  if (other != this) {
    std::swap(auto_practice_, other->auto_practice_);
    std::swap(auto_comm_practice_, other->auto_comm_practice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata practice_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = practice_info_descriptor_;
  metadata.reflection = practice_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_set_info::kSiFieldNumber;
const int role_set_info::kHiFieldNumber;
const int role_set_info::kPiFieldNumber;
#endif  // !_MSC_VER

role_set_info::role_set_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_set_info::InitAsDefaultInstance() {
  hi_ = const_cast< ::client::handup_info*>(&::client::handup_info::default_instance());
  pi_ = const_cast< ::client::practice_info*>(&::client::practice_info::default_instance());
}

role_set_info::role_set_info(const role_set_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_set_info::SharedCtor() {
  _cached_size_ = 0;
  hi_ = NULL;
  pi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_set_info::~role_set_info() {
  SharedDtor();
}

void role_set_info::SharedDtor() {
  if (this != default_instance_) {
    delete hi_;
    delete pi_;
  }
}

void role_set_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_set_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_set_info_descriptor_;
}

const role_set_info& role_set_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erole_5fset_2eproto();
  return *default_instance_;
}

role_set_info* role_set_info::default_instance_ = NULL;

role_set_info* role_set_info::New() const {
  return new role_set_info;
}

void role_set_info::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_hi()) {
      if (hi_ != NULL) hi_->::client::handup_info::Clear();
    }
    if (has_pi()) {
      if (pi_ != NULL) pi_->::client::practice_info::Clear();
    }
  }
  si_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_set_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.shortcut_info si = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_si:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_si()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_si;
        if (input->ExpectTag(18)) goto parse_hi;
        break;
      }

      // optional .client.handup_info hi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pi;
        break;
      }

      // optional .client.practice_info pi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_set_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.shortcut_info si = 1;
  for (int i = 0; i < this->si_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->si(i), output);
  }

  // optional .client.handup_info hi = 2;
  if (has_hi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hi(), output);
  }

  // optional .client.practice_info pi = 3;
  if (has_pi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_set_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.shortcut_info si = 1;
  for (int i = 0; i < this->si_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->si(i), target);
  }

  // optional .client.handup_info hi = 2;
  if (has_hi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hi(), target);
  }

  // optional .client.practice_info pi = 3;
  if (has_pi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_set_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.handup_info hi = 2;
    if (has_hi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hi());
    }

    // optional .client.practice_info pi = 3;
    if (has_pi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pi());
    }

  }
  // repeated .client.shortcut_info si = 1;
  total_size += 1 * this->si_size();
  for (int i = 0; i < this->si_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->si(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_set_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_set_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_set_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_set_info::MergeFrom(const role_set_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  si_.MergeFrom(from.si_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_hi()) {
      mutable_hi()->::client::handup_info::MergeFrom(from.hi());
    }
    if (from.has_pi()) {
      mutable_pi()->::client::practice_info::MergeFrom(from.pi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_set_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_set_info::CopyFrom(const role_set_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_set_info::IsInitialized() const {

  for (int i = 0; i < si_size(); i++) {
    if (!this->si(i).IsInitialized()) return false;
  }
  return true;
}

void role_set_info::Swap(role_set_info* other) {
  if (other != this) {
    si_.Swap(&other->si_);
    std::swap(hi_, other->hi_);
    std::swap(pi_, other->pi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_set_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_set_info_descriptor_;
  metadata.reflection = role_set_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
