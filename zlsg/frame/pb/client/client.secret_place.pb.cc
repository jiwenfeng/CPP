// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.secret_place.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.secret_place.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* prop_secret_place_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  prop_secret_place_reflection_ = NULL;
const ::google::protobuf::Descriptor* explore_secret_place_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  explore_secret_place_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* explore_secret_place_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  explore_secret_place_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* last_explore_secret_place_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  last_explore_secret_place_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* last_explore_secret_place_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  last_explore_secret_place_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* broadcast_explore_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  broadcast_explore_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* explore_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  explore_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* broadcast_explore_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  broadcast_explore_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* explore_update_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  explore_update_list_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2esecret_5fplace_2eproto() {
  protobuf_AddDesc_client_2esecret_5fplace_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.secret_place.proto");
  GOOGLE_CHECK(file != NULL);
  prop_secret_place_descriptor_ = file->message_type(0);
  static const int prop_secret_place_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(prop_secret_place, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(prop_secret_place, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(prop_secret_place, quality_),
  };
  prop_secret_place_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      prop_secret_place_descriptor_,
      prop_secret_place::default_instance_,
      prop_secret_place_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(prop_secret_place, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(prop_secret_place, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(prop_secret_place));
  explore_secret_place_req_descriptor_ = file->message_type(1);
  static const int explore_secret_place_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_secret_place_req, place_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_secret_place_req, explore_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_secret_place_req, svr_head_),
  };
  explore_secret_place_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      explore_secret_place_req_descriptor_,
      explore_secret_place_req::default_instance_,
      explore_secret_place_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_secret_place_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_secret_place_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(explore_secret_place_req));
  explore_secret_place_rsp_descriptor_ = file->message_type(2);
  static const int explore_secret_place_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_secret_place_rsp, place_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_secret_place_rsp, psp_),
  };
  explore_secret_place_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      explore_secret_place_rsp_descriptor_,
      explore_secret_place_rsp::default_instance_,
      explore_secret_place_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_secret_place_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_secret_place_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(explore_secret_place_rsp));
  last_explore_secret_place_req_descriptor_ = file->message_type(3);
  static const int last_explore_secret_place_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(last_explore_secret_place_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(last_explore_secret_place_req, svr_head_),
  };
  last_explore_secret_place_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      last_explore_secret_place_req_descriptor_,
      last_explore_secret_place_req::default_instance_,
      last_explore_secret_place_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(last_explore_secret_place_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(last_explore_secret_place_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(last_explore_secret_place_req));
  last_explore_secret_place_rsp_descriptor_ = file->message_type(4);
  static const int last_explore_secret_place_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(last_explore_secret_place_rsp, place_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(last_explore_secret_place_rsp, psp_),
  };
  last_explore_secret_place_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      last_explore_secret_place_rsp_descriptor_,
      last_explore_secret_place_rsp::default_instance_,
      last_explore_secret_place_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(last_explore_secret_place_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(last_explore_secret_place_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(last_explore_secret_place_rsp));
  broadcast_explore_list_req_descriptor_ = file->message_type(5);
  static const int broadcast_explore_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_explore_list_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_explore_list_req, svr_head_),
  };
  broadcast_explore_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      broadcast_explore_list_req_descriptor_,
      broadcast_explore_list_req::default_instance_,
      broadcast_explore_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_explore_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_explore_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(broadcast_explore_list_req));
  explore_update_descriptor_ = file->message_type(6);
  static const int explore_update_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_update, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_update, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_update, place_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_update, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_update, goods_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_update, goods_quality_),
  };
  explore_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      explore_update_descriptor_,
      explore_update::default_instance_,
      explore_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(explore_update));
  broadcast_explore_list_rsp_descriptor_ = file->message_type(7);
  static const int broadcast_explore_list_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_explore_list_rsp, eu_),
  };
  broadcast_explore_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      broadcast_explore_list_rsp_descriptor_,
      broadcast_explore_list_rsp::default_instance_,
      broadcast_explore_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_explore_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_explore_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(broadcast_explore_list_rsp));
  explore_update_list_descriptor_ = file->message_type(8);
  static const int explore_update_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_update_list, eu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_update_list, svr_head_),
  };
  explore_update_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      explore_update_list_descriptor_,
      explore_update_list::default_instance_,
      explore_update_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_update_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(explore_update_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(explore_update_list));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2esecret_5fplace_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    prop_secret_place_descriptor_, &prop_secret_place::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    explore_secret_place_req_descriptor_, &explore_secret_place_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    explore_secret_place_rsp_descriptor_, &explore_secret_place_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    last_explore_secret_place_req_descriptor_, &last_explore_secret_place_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    last_explore_secret_place_rsp_descriptor_, &last_explore_secret_place_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    broadcast_explore_list_req_descriptor_, &broadcast_explore_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    explore_update_descriptor_, &explore_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    broadcast_explore_list_rsp_descriptor_, &broadcast_explore_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    explore_update_list_descriptor_, &explore_update_list::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2esecret_5fplace_2eproto() {
  delete prop_secret_place::default_instance_;
  delete prop_secret_place_reflection_;
  delete explore_secret_place_req::default_instance_;
  delete explore_secret_place_req_reflection_;
  delete explore_secret_place_rsp::default_instance_;
  delete explore_secret_place_rsp_reflection_;
  delete last_explore_secret_place_req::default_instance_;
  delete last_explore_secret_place_req_reflection_;
  delete last_explore_secret_place_rsp::default_instance_;
  delete last_explore_secret_place_rsp_reflection_;
  delete broadcast_explore_list_req::default_instance_;
  delete broadcast_explore_list_req_reflection_;
  delete explore_update::default_instance_;
  delete explore_update_reflection_;
  delete broadcast_explore_list_rsp::default_instance_;
  delete broadcast_explore_list_rsp_reflection_;
  delete explore_update_list::default_instance_;
  delete explore_update_list_reflection_;
}

void protobuf_AddDesc_client_2esecret_5fplace_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031client.secret_place.proto\022\006client\032\021cli"
    "ent.comm.proto\"=\n\021prop_secret_place\022\n\n\002i"
    "d\030\001 \002(\r\022\013\n\003num\030\002 \002(\r\022\017\n\007quality\030\003 \002(\r\"i\n"
    "\030explore_secret_place_req\022\020\n\010place_id\030\001 "
    "\002(\r\022\023\n\013explore_num\030\002 \002(\r\022&\n\010svr_head\030\350\007 "
    "\001(\0132\023.client.server_head\"T\n\030explore_secr"
    "et_place_rsp\022\020\n\010place_id\030\001 \002(\r\022&\n\003psp\030\002 "
    "\003(\0132\031.client.prop_secret_place\"Y\n\035last_e"
    "xplore_secret_place_req\022\020\n\010unixtime\030\001 \002("
    "\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_hea"
    "d\"Y\n\035last_explore_secret_place_rsp\022\020\n\010pl"
    "ace_id\030\001 \002(\r\022&\n\003psp\030\002 \003(\0132\031.client.prop_"
    "secret_place\"V\n\032broadcast_explore_list_r"
    "eq\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132"
    "\023.client.server_head\"}\n\016explore_update\022\017"
    "\n\007role_id\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\022\020\n\010place_i"
    "d\030\003 \002(\r\022\020\n\010goods_id\030\004 \002(\r\022\021\n\tgoods_num\030\005"
    " \002(\r\022\025\n\rgoods_quality\030\006 \002(\r\"@\n\032broadcast"
    "_explore_list_rsp\022\"\n\002eu\030\001 \003(\0132\026.client.e"
    "xplore_update\"a\n\023explore_update_list\022\"\n\002"
    "eu\030\001 \003(\0132\026.client.explore_update\022&\n\010svr_"
    "head\030\350\007 \001(\0132\023.client.server_head", 872);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.secret_place.proto", &protobuf_RegisterTypes);
  prop_secret_place::default_instance_ = new prop_secret_place();
  explore_secret_place_req::default_instance_ = new explore_secret_place_req();
  explore_secret_place_rsp::default_instance_ = new explore_secret_place_rsp();
  last_explore_secret_place_req::default_instance_ = new last_explore_secret_place_req();
  last_explore_secret_place_rsp::default_instance_ = new last_explore_secret_place_rsp();
  broadcast_explore_list_req::default_instance_ = new broadcast_explore_list_req();
  explore_update::default_instance_ = new explore_update();
  broadcast_explore_list_rsp::default_instance_ = new broadcast_explore_list_rsp();
  explore_update_list::default_instance_ = new explore_update_list();
  prop_secret_place::default_instance_->InitAsDefaultInstance();
  explore_secret_place_req::default_instance_->InitAsDefaultInstance();
  explore_secret_place_rsp::default_instance_->InitAsDefaultInstance();
  last_explore_secret_place_req::default_instance_->InitAsDefaultInstance();
  last_explore_secret_place_rsp::default_instance_->InitAsDefaultInstance();
  broadcast_explore_list_req::default_instance_->InitAsDefaultInstance();
  explore_update::default_instance_->InitAsDefaultInstance();
  broadcast_explore_list_rsp::default_instance_->InitAsDefaultInstance();
  explore_update_list::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2esecret_5fplace_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2esecret_5fplace_2eproto {
  StaticDescriptorInitializer_client_2esecret_5fplace_2eproto() {
    protobuf_AddDesc_client_2esecret_5fplace_2eproto();
  }
} static_descriptor_initializer_client_2esecret_5fplace_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int prop_secret_place::kIdFieldNumber;
const int prop_secret_place::kNumFieldNumber;
const int prop_secret_place::kQualityFieldNumber;
#endif  // !_MSC_VER

prop_secret_place::prop_secret_place()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void prop_secret_place::InitAsDefaultInstance() {
}

prop_secret_place::prop_secret_place(const prop_secret_place& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void prop_secret_place::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  quality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

prop_secret_place::~prop_secret_place() {
  SharedDtor();
}

void prop_secret_place::SharedDtor() {
  if (this != default_instance_) {
  }
}

void prop_secret_place::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* prop_secret_place::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return prop_secret_place_descriptor_;
}

const prop_secret_place& prop_secret_place::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esecret_5fplace_2eproto();
  return *default_instance_;
}

prop_secret_place* prop_secret_place::default_instance_ = NULL;

prop_secret_place* prop_secret_place::New() const {
  return new prop_secret_place;
}

void prop_secret_place::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = 0u;
    quality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool prop_secret_place::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // required uint32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void prop_secret_place::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // required uint32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* prop_secret_place::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // required uint32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int prop_secret_place::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required uint32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void prop_secret_place::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const prop_secret_place* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const prop_secret_place*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void prop_secret_place::MergeFrom(const prop_secret_place& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void prop_secret_place::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void prop_secret_place::CopyFrom(const prop_secret_place& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool prop_secret_place::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void prop_secret_place::Swap(prop_secret_place* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata prop_secret_place::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = prop_secret_place_descriptor_;
  metadata.reflection = prop_secret_place_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int explore_secret_place_req::kPlaceIdFieldNumber;
const int explore_secret_place_req::kExploreNumFieldNumber;
const int explore_secret_place_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

explore_secret_place_req::explore_secret_place_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void explore_secret_place_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

explore_secret_place_req::explore_secret_place_req(const explore_secret_place_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void explore_secret_place_req::SharedCtor() {
  _cached_size_ = 0;
  place_id_ = 0u;
  explore_num_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

explore_secret_place_req::~explore_secret_place_req() {
  SharedDtor();
}

void explore_secret_place_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void explore_secret_place_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* explore_secret_place_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return explore_secret_place_req_descriptor_;
}

const explore_secret_place_req& explore_secret_place_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esecret_5fplace_2eproto();
  return *default_instance_;
}

explore_secret_place_req* explore_secret_place_req::default_instance_ = NULL;

explore_secret_place_req* explore_secret_place_req::New() const {
  return new explore_secret_place_req;
}

void explore_secret_place_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    place_id_ = 0u;
    explore_num_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool explore_secret_place_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 place_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_id_)));
          set_has_place_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_explore_num;
        break;
      }

      // required uint32 explore_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_explore_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &explore_num_)));
          set_has_explore_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void explore_secret_place_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 place_id = 1;
  if (has_place_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->place_id(), output);
  }

  // required uint32 explore_num = 2;
  if (has_explore_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->explore_num(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* explore_secret_place_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 place_id = 1;
  if (has_place_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->place_id(), target);
  }

  // required uint32 explore_num = 2;
  if (has_explore_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->explore_num(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int explore_secret_place_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 place_id = 1;
    if (has_place_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->place_id());
    }

    // required uint32 explore_num = 2;
    if (has_explore_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->explore_num());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void explore_secret_place_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const explore_secret_place_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const explore_secret_place_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void explore_secret_place_req::MergeFrom(const explore_secret_place_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_place_id()) {
      set_place_id(from.place_id());
    }
    if (from.has_explore_num()) {
      set_explore_num(from.explore_num());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void explore_secret_place_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void explore_secret_place_req::CopyFrom(const explore_secret_place_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool explore_secret_place_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void explore_secret_place_req::Swap(explore_secret_place_req* other) {
  if (other != this) {
    std::swap(place_id_, other->place_id_);
    std::swap(explore_num_, other->explore_num_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata explore_secret_place_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = explore_secret_place_req_descriptor_;
  metadata.reflection = explore_secret_place_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int explore_secret_place_rsp::kPlaceIdFieldNumber;
const int explore_secret_place_rsp::kPspFieldNumber;
#endif  // !_MSC_VER

explore_secret_place_rsp::explore_secret_place_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void explore_secret_place_rsp::InitAsDefaultInstance() {
}

explore_secret_place_rsp::explore_secret_place_rsp(const explore_secret_place_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void explore_secret_place_rsp::SharedCtor() {
  _cached_size_ = 0;
  place_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

explore_secret_place_rsp::~explore_secret_place_rsp() {
  SharedDtor();
}

void explore_secret_place_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void explore_secret_place_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* explore_secret_place_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return explore_secret_place_rsp_descriptor_;
}

const explore_secret_place_rsp& explore_secret_place_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esecret_5fplace_2eproto();
  return *default_instance_;
}

explore_secret_place_rsp* explore_secret_place_rsp::default_instance_ = NULL;

explore_secret_place_rsp* explore_secret_place_rsp::New() const {
  return new explore_secret_place_rsp;
}

void explore_secret_place_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    place_id_ = 0u;
  }
  psp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool explore_secret_place_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 place_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_id_)));
          set_has_place_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_psp;
        break;
      }

      // repeated .client.prop_secret_place psp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_psp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_psp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void explore_secret_place_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 place_id = 1;
  if (has_place_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->place_id(), output);
  }

  // repeated .client.prop_secret_place psp = 2;
  for (int i = 0; i < this->psp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->psp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* explore_secret_place_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 place_id = 1;
  if (has_place_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->place_id(), target);
  }

  // repeated .client.prop_secret_place psp = 2;
  for (int i = 0; i < this->psp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->psp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int explore_secret_place_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 place_id = 1;
    if (has_place_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->place_id());
    }

  }
  // repeated .client.prop_secret_place psp = 2;
  total_size += 1 * this->psp_size();
  for (int i = 0; i < this->psp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->psp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void explore_secret_place_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const explore_secret_place_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const explore_secret_place_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void explore_secret_place_rsp::MergeFrom(const explore_secret_place_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  psp_.MergeFrom(from.psp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_place_id()) {
      set_place_id(from.place_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void explore_secret_place_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void explore_secret_place_rsp::CopyFrom(const explore_secret_place_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool explore_secret_place_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < psp_size(); i++) {
    if (!this->psp(i).IsInitialized()) return false;
  }
  return true;
}

void explore_secret_place_rsp::Swap(explore_secret_place_rsp* other) {
  if (other != this) {
    std::swap(place_id_, other->place_id_);
    psp_.Swap(&other->psp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata explore_secret_place_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = explore_secret_place_rsp_descriptor_;
  metadata.reflection = explore_secret_place_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int last_explore_secret_place_req::kUnixtimeFieldNumber;
const int last_explore_secret_place_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

last_explore_secret_place_req::last_explore_secret_place_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void last_explore_secret_place_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

last_explore_secret_place_req::last_explore_secret_place_req(const last_explore_secret_place_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void last_explore_secret_place_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

last_explore_secret_place_req::~last_explore_secret_place_req() {
  SharedDtor();
}

void last_explore_secret_place_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void last_explore_secret_place_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* last_explore_secret_place_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return last_explore_secret_place_req_descriptor_;
}

const last_explore_secret_place_req& last_explore_secret_place_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esecret_5fplace_2eproto();
  return *default_instance_;
}

last_explore_secret_place_req* last_explore_secret_place_req::default_instance_ = NULL;

last_explore_secret_place_req* last_explore_secret_place_req::New() const {
  return new last_explore_secret_place_req;
}

void last_explore_secret_place_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool last_explore_secret_place_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void last_explore_secret_place_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* last_explore_secret_place_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int last_explore_secret_place_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void last_explore_secret_place_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const last_explore_secret_place_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const last_explore_secret_place_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void last_explore_secret_place_req::MergeFrom(const last_explore_secret_place_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void last_explore_secret_place_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void last_explore_secret_place_req::CopyFrom(const last_explore_secret_place_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool last_explore_secret_place_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void last_explore_secret_place_req::Swap(last_explore_secret_place_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata last_explore_secret_place_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = last_explore_secret_place_req_descriptor_;
  metadata.reflection = last_explore_secret_place_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int last_explore_secret_place_rsp::kPlaceIdFieldNumber;
const int last_explore_secret_place_rsp::kPspFieldNumber;
#endif  // !_MSC_VER

last_explore_secret_place_rsp::last_explore_secret_place_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void last_explore_secret_place_rsp::InitAsDefaultInstance() {
}

last_explore_secret_place_rsp::last_explore_secret_place_rsp(const last_explore_secret_place_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void last_explore_secret_place_rsp::SharedCtor() {
  _cached_size_ = 0;
  place_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

last_explore_secret_place_rsp::~last_explore_secret_place_rsp() {
  SharedDtor();
}

void last_explore_secret_place_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void last_explore_secret_place_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* last_explore_secret_place_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return last_explore_secret_place_rsp_descriptor_;
}

const last_explore_secret_place_rsp& last_explore_secret_place_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esecret_5fplace_2eproto();
  return *default_instance_;
}

last_explore_secret_place_rsp* last_explore_secret_place_rsp::default_instance_ = NULL;

last_explore_secret_place_rsp* last_explore_secret_place_rsp::New() const {
  return new last_explore_secret_place_rsp;
}

void last_explore_secret_place_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    place_id_ = 0u;
  }
  psp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool last_explore_secret_place_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 place_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_id_)));
          set_has_place_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_psp;
        break;
      }

      // repeated .client.prop_secret_place psp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_psp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_psp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void last_explore_secret_place_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 place_id = 1;
  if (has_place_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->place_id(), output);
  }

  // repeated .client.prop_secret_place psp = 2;
  for (int i = 0; i < this->psp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->psp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* last_explore_secret_place_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 place_id = 1;
  if (has_place_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->place_id(), target);
  }

  // repeated .client.prop_secret_place psp = 2;
  for (int i = 0; i < this->psp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->psp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int last_explore_secret_place_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 place_id = 1;
    if (has_place_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->place_id());
    }

  }
  // repeated .client.prop_secret_place psp = 2;
  total_size += 1 * this->psp_size();
  for (int i = 0; i < this->psp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->psp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void last_explore_secret_place_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const last_explore_secret_place_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const last_explore_secret_place_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void last_explore_secret_place_rsp::MergeFrom(const last_explore_secret_place_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  psp_.MergeFrom(from.psp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_place_id()) {
      set_place_id(from.place_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void last_explore_secret_place_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void last_explore_secret_place_rsp::CopyFrom(const last_explore_secret_place_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool last_explore_secret_place_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < psp_size(); i++) {
    if (!this->psp(i).IsInitialized()) return false;
  }
  return true;
}

void last_explore_secret_place_rsp::Swap(last_explore_secret_place_rsp* other) {
  if (other != this) {
    std::swap(place_id_, other->place_id_);
    psp_.Swap(&other->psp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata last_explore_secret_place_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = last_explore_secret_place_rsp_descriptor_;
  metadata.reflection = last_explore_secret_place_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int broadcast_explore_list_req::kUnixtimeFieldNumber;
const int broadcast_explore_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

broadcast_explore_list_req::broadcast_explore_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void broadcast_explore_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

broadcast_explore_list_req::broadcast_explore_list_req(const broadcast_explore_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void broadcast_explore_list_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

broadcast_explore_list_req::~broadcast_explore_list_req() {
  SharedDtor();
}

void broadcast_explore_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void broadcast_explore_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadcast_explore_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return broadcast_explore_list_req_descriptor_;
}

const broadcast_explore_list_req& broadcast_explore_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esecret_5fplace_2eproto();
  return *default_instance_;
}

broadcast_explore_list_req* broadcast_explore_list_req::default_instance_ = NULL;

broadcast_explore_list_req* broadcast_explore_list_req::New() const {
  return new broadcast_explore_list_req;
}

void broadcast_explore_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool broadcast_explore_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void broadcast_explore_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* broadcast_explore_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int broadcast_explore_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadcast_explore_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const broadcast_explore_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const broadcast_explore_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void broadcast_explore_list_req::MergeFrom(const broadcast_explore_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void broadcast_explore_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_explore_list_req::CopyFrom(const broadcast_explore_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_explore_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void broadcast_explore_list_req::Swap(broadcast_explore_list_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata broadcast_explore_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = broadcast_explore_list_req_descriptor_;
  metadata.reflection = broadcast_explore_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int explore_update::kRoleIdFieldNumber;
const int explore_update::kTimeFieldNumber;
const int explore_update::kPlaceIdFieldNumber;
const int explore_update::kGoodsIdFieldNumber;
const int explore_update::kGoodsNumFieldNumber;
const int explore_update::kGoodsQualityFieldNumber;
#endif  // !_MSC_VER

explore_update::explore_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void explore_update::InitAsDefaultInstance() {
}

explore_update::explore_update(const explore_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void explore_update::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  time_ = 0u;
  place_id_ = 0u;
  goods_id_ = 0u;
  goods_num_ = 0u;
  goods_quality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

explore_update::~explore_update() {
  SharedDtor();
}

void explore_update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void explore_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* explore_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return explore_update_descriptor_;
}

const explore_update& explore_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esecret_5fplace_2eproto();
  return *default_instance_;
}

explore_update* explore_update::default_instance_ = NULL;

explore_update* explore_update::New() const {
  return new explore_update;
}

void explore_update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    time_ = 0u;
    place_id_ = 0u;
    goods_id_ = 0u;
    goods_num_ = 0u;
    goods_quality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool explore_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_place_id;
        break;
      }

      // required uint32 place_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_id_)));
          set_has_place_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goods_id;
        break;
      }

      // required uint32 goods_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_goods_num;
        break;
      }

      // required uint32 goods_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_num_)));
          set_has_goods_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_goods_quality;
        break;
      }

      // required uint32 goods_quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_quality_)));
          set_has_goods_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void explore_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required uint32 place_id = 3;
  if (has_place_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->place_id(), output);
  }

  // required uint32 goods_id = 4;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->goods_id(), output);
  }

  // required uint32 goods_num = 5;
  if (has_goods_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->goods_num(), output);
  }

  // required uint32 goods_quality = 6;
  if (has_goods_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->goods_quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* explore_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // required uint32 place_id = 3;
  if (has_place_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->place_id(), target);
  }

  // required uint32 goods_id = 4;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->goods_id(), target);
  }

  // required uint32 goods_num = 5;
  if (has_goods_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->goods_num(), target);
  }

  // required uint32 goods_quality = 6;
  if (has_goods_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->goods_quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int explore_update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 place_id = 3;
    if (has_place_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->place_id());
    }

    // required uint32 goods_id = 4;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // required uint32 goods_num = 5;
    if (has_goods_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_num());
    }

    // required uint32 goods_quality = 6;
    if (has_goods_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void explore_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const explore_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const explore_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void explore_update::MergeFrom(const explore_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_place_id()) {
      set_place_id(from.place_id());
    }
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_goods_num()) {
      set_goods_num(from.goods_num());
    }
    if (from.has_goods_quality()) {
      set_goods_quality(from.goods_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void explore_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void explore_update::CopyFrom(const explore_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool explore_update::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void explore_update::Swap(explore_update* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(time_, other->time_);
    std::swap(place_id_, other->place_id_);
    std::swap(goods_id_, other->goods_id_);
    std::swap(goods_num_, other->goods_num_);
    std::swap(goods_quality_, other->goods_quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata explore_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = explore_update_descriptor_;
  metadata.reflection = explore_update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int broadcast_explore_list_rsp::kEuFieldNumber;
#endif  // !_MSC_VER

broadcast_explore_list_rsp::broadcast_explore_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void broadcast_explore_list_rsp::InitAsDefaultInstance() {
}

broadcast_explore_list_rsp::broadcast_explore_list_rsp(const broadcast_explore_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void broadcast_explore_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

broadcast_explore_list_rsp::~broadcast_explore_list_rsp() {
  SharedDtor();
}

void broadcast_explore_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void broadcast_explore_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadcast_explore_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return broadcast_explore_list_rsp_descriptor_;
}

const broadcast_explore_list_rsp& broadcast_explore_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esecret_5fplace_2eproto();
  return *default_instance_;
}

broadcast_explore_list_rsp* broadcast_explore_list_rsp::default_instance_ = NULL;

broadcast_explore_list_rsp* broadcast_explore_list_rsp::New() const {
  return new broadcast_explore_list_rsp;
}

void broadcast_explore_list_rsp::Clear() {
  eu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool broadcast_explore_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.explore_update eu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_eu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void broadcast_explore_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.explore_update eu = 1;
  for (int i = 0; i < this->eu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->eu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* broadcast_explore_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.explore_update eu = 1;
  for (int i = 0; i < this->eu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->eu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int broadcast_explore_list_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.explore_update eu = 1;
  total_size += 1 * this->eu_size();
  for (int i = 0; i < this->eu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadcast_explore_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const broadcast_explore_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const broadcast_explore_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void broadcast_explore_list_rsp::MergeFrom(const broadcast_explore_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  eu_.MergeFrom(from.eu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void broadcast_explore_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_explore_list_rsp::CopyFrom(const broadcast_explore_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_explore_list_rsp::IsInitialized() const {

  for (int i = 0; i < eu_size(); i++) {
    if (!this->eu(i).IsInitialized()) return false;
  }
  return true;
}

void broadcast_explore_list_rsp::Swap(broadcast_explore_list_rsp* other) {
  if (other != this) {
    eu_.Swap(&other->eu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata broadcast_explore_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = broadcast_explore_list_rsp_descriptor_;
  metadata.reflection = broadcast_explore_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int explore_update_list::kEuFieldNumber;
const int explore_update_list::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

explore_update_list::explore_update_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void explore_update_list::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

explore_update_list::explore_update_list(const explore_update_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void explore_update_list::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

explore_update_list::~explore_update_list() {
  SharedDtor();
}

void explore_update_list::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void explore_update_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* explore_update_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return explore_update_list_descriptor_;
}

const explore_update_list& explore_update_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esecret_5fplace_2eproto();
  return *default_instance_;
}

explore_update_list* explore_update_list::default_instance_ = NULL;

explore_update_list* explore_update_list::New() const {
  return new explore_update_list;
}

void explore_update_list::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  eu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool explore_update_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.explore_update eu = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_eu;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void explore_update_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.explore_update eu = 1;
  for (int i = 0; i < this->eu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->eu(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* explore_update_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.explore_update eu = 1;
  for (int i = 0; i < this->eu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->eu(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int explore_update_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated .client.explore_update eu = 1;
  total_size += 1 * this->eu_size();
  for (int i = 0; i < this->eu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void explore_update_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const explore_update_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const explore_update_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void explore_update_list::MergeFrom(const explore_update_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  eu_.MergeFrom(from.eu_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void explore_update_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void explore_update_list::CopyFrom(const explore_update_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool explore_update_list::IsInitialized() const {

  for (int i = 0; i < eu_size(); i++) {
    if (!this->eu(i).IsInitialized()) return false;
  }
  return true;
}

void explore_update_list::Swap(explore_update_list* other) {
  if (other != this) {
    eu_.Swap(&other->eu_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata explore_update_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = explore_update_list_descriptor_;
  metadata.reflection = explore_update_list_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
