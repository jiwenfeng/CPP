// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.saparatism_battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.saparatism_battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* sa_battle_enter_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_battle_enter_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* sa_battle_enter_check_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_battle_enter_check_reflection_ = NULL;
const ::google::protobuf::Descriptor* sa_battle_enter_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_battle_enter_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* sa_self_condition_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_self_condition_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* sa_capture_condition_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_capture_condition_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* sa_capture_flag_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_capture_flag_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* sa_capture_flag_check_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_capture_flag_check_reflection_ = NULL;
const ::google::protobuf::Descriptor* sa_capture_flag_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_capture_flag_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* sa_init_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_init_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* sa_init_data_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_init_data_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* sa_query_family_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_query_family_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* sa_query_family_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_query_family_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* sa_battle_personal_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sa_battle_personal_record_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SA_BATTLE_OPERATE_RET_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SA_FLAG_OPERATOR_RET_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto() {
  protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.saparatism_battle.proto");
  GOOGLE_CHECK(file != NULL);
  sa_battle_enter_req_descriptor_ = file->message_type(0);
  static const int sa_battle_enter_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_enter_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_enter_req, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_enter_req, svr_head_),
  };
  sa_battle_enter_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_battle_enter_req_descriptor_,
      sa_battle_enter_req::default_instance_,
      sa_battle_enter_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_enter_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_enter_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_battle_enter_req));
  sa_battle_enter_check_descriptor_ = file->message_type(1);
  static const int sa_battle_enter_check_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_enter_check, sber_),
  };
  sa_battle_enter_check_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_battle_enter_check_descriptor_,
      sa_battle_enter_check::default_instance_,
      sa_battle_enter_check_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_enter_check, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_enter_check, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_battle_enter_check));
  sa_battle_enter_rsp_descriptor_ = file->message_type(2);
  static const int sa_battle_enter_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_enter_rsp, ret_),
  };
  sa_battle_enter_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_battle_enter_rsp_descriptor_,
      sa_battle_enter_rsp::default_instance_,
      sa_battle_enter_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_enter_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_enter_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_battle_enter_rsp));
  sa_self_condition_info_descriptor_ = file->message_type(3);
  static const int sa_self_condition_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_self_condition_info, benifit_multipe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_self_condition_info, benifit_radix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_self_condition_info, total_get_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_self_condition_info, total_stop_time_),
  };
  sa_self_condition_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_self_condition_info_descriptor_,
      sa_self_condition_info::default_instance_,
      sa_self_condition_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_self_condition_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_self_condition_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_self_condition_info));
  sa_capture_condition_ntf_descriptor_ = file->message_type(4);
  static const int sa_capture_condition_ntf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_condition_ntf, flag_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_condition_ntf, occuption_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_condition_ntf, family_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_condition_ntf, family_flag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_condition_ntf, occuption_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_condition_ntf, selfinfo_),
  };
  sa_capture_condition_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_capture_condition_ntf_descriptor_,
      sa_capture_condition_ntf::default_instance_,
      sa_capture_condition_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_condition_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_condition_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_capture_condition_ntf));
  sa_capture_flag_req_descriptor_ = file->message_type(5);
  static const int sa_capture_flag_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_flag_req, svr_head_),
  };
  sa_capture_flag_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_capture_flag_req_descriptor_,
      sa_capture_flag_req::default_instance_,
      sa_capture_flag_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_flag_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_flag_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_capture_flag_req));
  sa_capture_flag_check_descriptor_ = file->message_type(6);
  static const int sa_capture_flag_check_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_flag_check, req_),
  };
  sa_capture_flag_check_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_capture_flag_check_descriptor_,
      sa_capture_flag_check::default_instance_,
      sa_capture_flag_check_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_flag_check, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_flag_check, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_capture_flag_check));
  sa_capture_flag_rsp_descriptor_ = file->message_type(7);
  static const int sa_capture_flag_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_flag_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_flag_rsp, capture_time_),
  };
  sa_capture_flag_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_capture_flag_rsp_descriptor_,
      sa_capture_flag_rsp::default_instance_,
      sa_capture_flag_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_flag_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_capture_flag_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_capture_flag_rsp));
  sa_init_data_req_descriptor_ = file->message_type(8);
  static const int sa_init_data_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_init_data_req, region_id_),
  };
  sa_init_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_init_data_req_descriptor_,
      sa_init_data_req::default_instance_,
      sa_init_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_init_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_init_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_init_data_req));
  sa_init_data_rsp_descriptor_ = file->message_type(9);
  static const int sa_init_data_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_init_data_rsp, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_init_data_rsp, family_flag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_init_data_rsp, family_name_),
  };
  sa_init_data_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_init_data_rsp_descriptor_,
      sa_init_data_rsp::default_instance_,
      sa_init_data_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_init_data_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_init_data_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_init_data_rsp));
  sa_query_family_info_req_descriptor_ = file->message_type(10);
  static const int sa_query_family_info_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_query_family_info_req, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_query_family_info_req, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_query_family_info_req, family_id_),
  };
  sa_query_family_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_query_family_info_req_descriptor_,
      sa_query_family_info_req::default_instance_,
      sa_query_family_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_query_family_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_query_family_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_query_family_info_req));
  sa_query_family_info_rsp_descriptor_ = file->message_type(11);
  static const int sa_query_family_info_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_query_family_info_rsp, family_flag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_query_family_info_rsp, family_name_),
  };
  sa_query_family_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_query_family_info_rsp_descriptor_,
      sa_query_family_info_rsp::default_instance_,
      sa_query_family_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_query_family_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_query_family_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_query_family_info_rsp));
  sa_battle_personal_record_descriptor_ = file->message_type(12);
  static const int sa_battle_personal_record_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_personal_record, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_personal_record, benifit_multipe_),
  };
  sa_battle_personal_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sa_battle_personal_record_descriptor_,
      sa_battle_personal_record::default_instance_,
      sa_battle_personal_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_personal_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sa_battle_personal_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sa_battle_personal_record));
  SA_BATTLE_OPERATE_RET_E_descriptor_ = file->enum_type(0);
  SA_FLAG_OPERATOR_RET_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2esaparatism_5fbattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_battle_enter_req_descriptor_, &sa_battle_enter_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_battle_enter_check_descriptor_, &sa_battle_enter_check::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_battle_enter_rsp_descriptor_, &sa_battle_enter_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_self_condition_info_descriptor_, &sa_self_condition_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_capture_condition_ntf_descriptor_, &sa_capture_condition_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_capture_flag_req_descriptor_, &sa_capture_flag_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_capture_flag_check_descriptor_, &sa_capture_flag_check::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_capture_flag_rsp_descriptor_, &sa_capture_flag_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_init_data_req_descriptor_, &sa_init_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_init_data_rsp_descriptor_, &sa_init_data_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_query_family_info_req_descriptor_, &sa_query_family_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_query_family_info_rsp_descriptor_, &sa_query_family_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sa_battle_personal_record_descriptor_, &sa_battle_personal_record::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto() {
  delete sa_battle_enter_req::default_instance_;
  delete sa_battle_enter_req_reflection_;
  delete sa_battle_enter_check::default_instance_;
  delete sa_battle_enter_check_reflection_;
  delete sa_battle_enter_rsp::default_instance_;
  delete sa_battle_enter_rsp_reflection_;
  delete sa_self_condition_info::default_instance_;
  delete sa_self_condition_info_reflection_;
  delete sa_capture_condition_ntf::default_instance_;
  delete sa_capture_condition_ntf_reflection_;
  delete sa_capture_flag_req::default_instance_;
  delete sa_capture_flag_req_reflection_;
  delete sa_capture_flag_check::default_instance_;
  delete sa_capture_flag_check_reflection_;
  delete sa_capture_flag_rsp::default_instance_;
  delete sa_capture_flag_rsp_reflection_;
  delete sa_init_data_req::default_instance_;
  delete sa_init_data_req_reflection_;
  delete sa_init_data_rsp::default_instance_;
  delete sa_init_data_rsp_reflection_;
  delete sa_query_family_info_req::default_instance_;
  delete sa_query_family_info_req_reflection_;
  delete sa_query_family_info_rsp::default_instance_;
  delete sa_query_family_info_rsp_reflection_;
  delete sa_battle_personal_record::default_instance_;
  delete sa_battle_personal_record_reflection_;
}

void protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036client.saparatism_battle.proto\022\006client"
    "\032\021client.comm.proto\"W\n\023sa_battle_enter_r"
    "eq\022\014\n\004time\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022&\n\010svr_head"
    "\030\350\007 \001(\0132\023.client.server_head\"B\n\025sa_battl"
    "e_enter_check\022)\n\004sber\030\001 \002(\0132\033.client.sa_"
    "battle_enter_req\"C\n\023sa_battle_enter_rsp\022"
    ",\n\003ret\030\001 \002(\0162\037.client.SA_BATTLE_OPERATE_"
    "RET_E\"x\n\026sa_self_condition_info\022\027\n\017benif"
    "it_multipe\030\001 \002(\r\022\025\n\rbenifit_radix\030\002 \002(\r\022"
    "\025\n\rtotal_get_exp\030\003 \002(\r\022\027\n\017total_stop_tim"
    "e\030\004 \002(\r\"\323\001\n\030sa_capture_condition_ntf\022(\n\010"
    "flag_pos\030\001 \002(\0132\026.client.client_map_pos\022\026"
    "\n\016occuption_name\030\002 \002(\t\022\023\n\013family_name\030\003 "
    "\002(\t\022\026\n\016family_flag_id\030\004 \002(\r\022\026\n\016occuption"
    "_time\030\005 \002(\r\0220\n\010selfinfo\030\006 \002(\0132\036.client.s"
    "a_self_condition_info\"=\n\023sa_capture_flag"
    "_req\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_"
    "head\"A\n\025sa_capture_flag_check\022(\n\003req\030\001 \002"
    "(\0132\033.client.sa_capture_flag_req\"V\n\023sa_ca"
    "pture_flag_rsp\022)\n\003ret\030\001 \002(\0162\034.client.SA_"
    "FLAG_OPERATOR_RET\022\024\n\014capture_time\030\002 \001(\r\""
    "%\n\020sa_init_data_req\022\021\n\tregion_id\030\001 \002(\r\"R"
    "\n\020sa_init_data_rsp\022\021\n\tfamily_id\030\001 \002(\r\022\026\n"
    "\016family_flag_id\030\002 \002(\r\022\023\n\013family_name\030\003 \002"
    "(\t\"O\n\030sa_query_family_info_req\022\016\n\006map_id"
    "\030\001 \002(\r\022\020\n\010scene_id\030\002 \002(\r\022\021\n\tfamily_id\030\003 "
    "\002(\r\"G\n\030sa_query_family_info_rsp\022\026\n\016famil"
    "y_flag_id\030\001 \002(\r\022\023\n\013family_name\030\002 \002(\t\"E\n\031"
    "sa_battle_personal_record\022\017\n\007role_id\030\001 \002"
    "(\r\022\027\n\017benifit_multipe\030\002 \002(\r*\275\001\n\027SA_BATTL"
    "E_OPERATE_RET_E\022\021\n\rSBORE_SUCCESS\020\000\022\024\n\020SB"
    "ORE_TIME_LIMIT\020\001\022\030\n\024SBORE_ROLE_NUM_LIMIT"
    "\020\002\022\026\n\022SBORE_BATTLE_LIMIT\020\003\022\025\n\021SBORE_LEVE"
    "L_LIMIT\020\004\022\034\n\030SBORE_ACTIVITY_OCCUPTION\020\005\022"
    "\022\n\rSBORE_SYS_ERR\020\347\007*\275\001\n\024SA_FLAG_OPERATOR"
    "_RET\022\020\n\014SFOR_SUCCESS\020\000\022\023\n\017SFOR_TIME_LIMI"
    "T\020\001\022\031\n\025SFOR_FAMILY_POS_LIMIT\020\002\022\027\n\023SFOR_F"
    "LAG_POS_LIMIT\020\003\022\033\n\027SFOR_FAMILY_MONEY_LIM"
    "IT\020\004\022\024\n\020SFOR_BREAK_LIMIT\020\005\022\027\n\023SFOR_FLAG_"
    "CAPTURING\020\006", 1571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.saparatism_battle.proto", &protobuf_RegisterTypes);
  sa_battle_enter_req::default_instance_ = new sa_battle_enter_req();
  sa_battle_enter_check::default_instance_ = new sa_battle_enter_check();
  sa_battle_enter_rsp::default_instance_ = new sa_battle_enter_rsp();
  sa_self_condition_info::default_instance_ = new sa_self_condition_info();
  sa_capture_condition_ntf::default_instance_ = new sa_capture_condition_ntf();
  sa_capture_flag_req::default_instance_ = new sa_capture_flag_req();
  sa_capture_flag_check::default_instance_ = new sa_capture_flag_check();
  sa_capture_flag_rsp::default_instance_ = new sa_capture_flag_rsp();
  sa_init_data_req::default_instance_ = new sa_init_data_req();
  sa_init_data_rsp::default_instance_ = new sa_init_data_rsp();
  sa_query_family_info_req::default_instance_ = new sa_query_family_info_req();
  sa_query_family_info_rsp::default_instance_ = new sa_query_family_info_rsp();
  sa_battle_personal_record::default_instance_ = new sa_battle_personal_record();
  sa_battle_enter_req::default_instance_->InitAsDefaultInstance();
  sa_battle_enter_check::default_instance_->InitAsDefaultInstance();
  sa_battle_enter_rsp::default_instance_->InitAsDefaultInstance();
  sa_self_condition_info::default_instance_->InitAsDefaultInstance();
  sa_capture_condition_ntf::default_instance_->InitAsDefaultInstance();
  sa_capture_flag_req::default_instance_->InitAsDefaultInstance();
  sa_capture_flag_check::default_instance_->InitAsDefaultInstance();
  sa_capture_flag_rsp::default_instance_->InitAsDefaultInstance();
  sa_init_data_req::default_instance_->InitAsDefaultInstance();
  sa_init_data_rsp::default_instance_->InitAsDefaultInstance();
  sa_query_family_info_req::default_instance_->InitAsDefaultInstance();
  sa_query_family_info_rsp::default_instance_->InitAsDefaultInstance();
  sa_battle_personal_record::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2esaparatism_5fbattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2esaparatism_5fbattle_2eproto {
  StaticDescriptorInitializer_client_2esaparatism_5fbattle_2eproto() {
    protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  }
} static_descriptor_initializer_client_2esaparatism_5fbattle_2eproto_;
const ::google::protobuf::EnumDescriptor* SA_BATTLE_OPERATE_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SA_BATTLE_OPERATE_RET_E_descriptor_;
}
bool SA_BATTLE_OPERATE_RET_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 999:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SA_FLAG_OPERATOR_RET_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SA_FLAG_OPERATOR_RET_descriptor_;
}
bool SA_FLAG_OPERATOR_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int sa_battle_enter_req::kTimeFieldNumber;
const int sa_battle_enter_req::kIdFieldNumber;
const int sa_battle_enter_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

sa_battle_enter_req::sa_battle_enter_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_battle_enter_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

sa_battle_enter_req::sa_battle_enter_req(const sa_battle_enter_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_battle_enter_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_battle_enter_req::~sa_battle_enter_req() {
  SharedDtor();
}

void sa_battle_enter_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void sa_battle_enter_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_battle_enter_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_battle_enter_req_descriptor_;
}

const sa_battle_enter_req& sa_battle_enter_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_battle_enter_req* sa_battle_enter_req::default_instance_ = NULL;

sa_battle_enter_req* sa_battle_enter_req::New() const {
  return new sa_battle_enter_req;
}

void sa_battle_enter_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_battle_enter_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_battle_enter_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_battle_enter_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_battle_enter_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_battle_enter_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_battle_enter_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_battle_enter_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_battle_enter_req::MergeFrom(const sa_battle_enter_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_battle_enter_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_battle_enter_req::CopyFrom(const sa_battle_enter_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_battle_enter_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sa_battle_enter_req::Swap(sa_battle_enter_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(id_, other->id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_battle_enter_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_battle_enter_req_descriptor_;
  metadata.reflection = sa_battle_enter_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sa_battle_enter_check::kSberFieldNumber;
#endif  // !_MSC_VER

sa_battle_enter_check::sa_battle_enter_check()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_battle_enter_check::InitAsDefaultInstance() {
  sber_ = const_cast< ::client::sa_battle_enter_req*>(&::client::sa_battle_enter_req::default_instance());
}

sa_battle_enter_check::sa_battle_enter_check(const sa_battle_enter_check& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_battle_enter_check::SharedCtor() {
  _cached_size_ = 0;
  sber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_battle_enter_check::~sa_battle_enter_check() {
  SharedDtor();
}

void sa_battle_enter_check::SharedDtor() {
  if (this != default_instance_) {
    delete sber_;
  }
}

void sa_battle_enter_check::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_battle_enter_check::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_battle_enter_check_descriptor_;
}

const sa_battle_enter_check& sa_battle_enter_check::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_battle_enter_check* sa_battle_enter_check::default_instance_ = NULL;

sa_battle_enter_check* sa_battle_enter_check::New() const {
  return new sa_battle_enter_check;
}

void sa_battle_enter_check::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sber()) {
      if (sber_ != NULL) sber_->::client::sa_battle_enter_req::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_battle_enter_check::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.sa_battle_enter_req sber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_battle_enter_check::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.sa_battle_enter_req sber = 1;
  if (has_sber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_battle_enter_check::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.sa_battle_enter_req sber = 1;
  if (has_sber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_battle_enter_check::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.sa_battle_enter_req sber = 1;
    if (has_sber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_battle_enter_check::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_battle_enter_check* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_battle_enter_check*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_battle_enter_check::MergeFrom(const sa_battle_enter_check& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sber()) {
      mutable_sber()->::client::sa_battle_enter_req::MergeFrom(from.sber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_battle_enter_check::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_battle_enter_check::CopyFrom(const sa_battle_enter_check& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_battle_enter_check::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_sber()) {
    if (!this->sber().IsInitialized()) return false;
  }
  return true;
}

void sa_battle_enter_check::Swap(sa_battle_enter_check* other) {
  if (other != this) {
    std::swap(sber_, other->sber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_battle_enter_check::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_battle_enter_check_descriptor_;
  metadata.reflection = sa_battle_enter_check_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sa_battle_enter_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

sa_battle_enter_rsp::sa_battle_enter_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_battle_enter_rsp::InitAsDefaultInstance() {
}

sa_battle_enter_rsp::sa_battle_enter_rsp(const sa_battle_enter_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_battle_enter_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_battle_enter_rsp::~sa_battle_enter_rsp() {
  SharedDtor();
}

void sa_battle_enter_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sa_battle_enter_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_battle_enter_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_battle_enter_rsp_descriptor_;
}

const sa_battle_enter_rsp& sa_battle_enter_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_battle_enter_rsp* sa_battle_enter_rsp::default_instance_ = NULL;

sa_battle_enter_rsp* sa_battle_enter_rsp::New() const {
  return new sa_battle_enter_rsp;
}

void sa_battle_enter_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_battle_enter_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.SA_BATTLE_OPERATE_RET_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::SA_BATTLE_OPERATE_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::SA_BATTLE_OPERATE_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_battle_enter_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.SA_BATTLE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_battle_enter_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.SA_BATTLE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_battle_enter_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.SA_BATTLE_OPERATE_RET_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_battle_enter_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_battle_enter_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_battle_enter_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_battle_enter_rsp::MergeFrom(const sa_battle_enter_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_battle_enter_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_battle_enter_rsp::CopyFrom(const sa_battle_enter_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_battle_enter_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sa_battle_enter_rsp::Swap(sa_battle_enter_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_battle_enter_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_battle_enter_rsp_descriptor_;
  metadata.reflection = sa_battle_enter_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sa_self_condition_info::kBenifitMultipeFieldNumber;
const int sa_self_condition_info::kBenifitRadixFieldNumber;
const int sa_self_condition_info::kTotalGetExpFieldNumber;
const int sa_self_condition_info::kTotalStopTimeFieldNumber;
#endif  // !_MSC_VER

sa_self_condition_info::sa_self_condition_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_self_condition_info::InitAsDefaultInstance() {
}

sa_self_condition_info::sa_self_condition_info(const sa_self_condition_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_self_condition_info::SharedCtor() {
  _cached_size_ = 0;
  benifit_multipe_ = 0u;
  benifit_radix_ = 0u;
  total_get_exp_ = 0u;
  total_stop_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_self_condition_info::~sa_self_condition_info() {
  SharedDtor();
}

void sa_self_condition_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sa_self_condition_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_self_condition_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_self_condition_info_descriptor_;
}

const sa_self_condition_info& sa_self_condition_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_self_condition_info* sa_self_condition_info::default_instance_ = NULL;

sa_self_condition_info* sa_self_condition_info::New() const {
  return new sa_self_condition_info;
}

void sa_self_condition_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    benifit_multipe_ = 0u;
    benifit_radix_ = 0u;
    total_get_exp_ = 0u;
    total_stop_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_self_condition_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 benifit_multipe = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &benifit_multipe_)));
          set_has_benifit_multipe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_benifit_radix;
        break;
      }

      // required uint32 benifit_radix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_benifit_radix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &benifit_radix_)));
          set_has_benifit_radix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_get_exp;
        break;
      }

      // required uint32 total_get_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_get_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_get_exp_)));
          set_has_total_get_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_stop_time;
        break;
      }

      // required uint32 total_stop_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_stop_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_stop_time_)));
          set_has_total_stop_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_self_condition_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 benifit_multipe = 1;
  if (has_benifit_multipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->benifit_multipe(), output);
  }

  // required uint32 benifit_radix = 2;
  if (has_benifit_radix()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->benifit_radix(), output);
  }

  // required uint32 total_get_exp = 3;
  if (has_total_get_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_get_exp(), output);
  }

  // required uint32 total_stop_time = 4;
  if (has_total_stop_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_stop_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_self_condition_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 benifit_multipe = 1;
  if (has_benifit_multipe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->benifit_multipe(), target);
  }

  // required uint32 benifit_radix = 2;
  if (has_benifit_radix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->benifit_radix(), target);
  }

  // required uint32 total_get_exp = 3;
  if (has_total_get_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_get_exp(), target);
  }

  // required uint32 total_stop_time = 4;
  if (has_total_stop_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_stop_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_self_condition_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 benifit_multipe = 1;
    if (has_benifit_multipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->benifit_multipe());
    }

    // required uint32 benifit_radix = 2;
    if (has_benifit_radix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->benifit_radix());
    }

    // required uint32 total_get_exp = 3;
    if (has_total_get_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_get_exp());
    }

    // required uint32 total_stop_time = 4;
    if (has_total_stop_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_stop_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_self_condition_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_self_condition_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_self_condition_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_self_condition_info::MergeFrom(const sa_self_condition_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_benifit_multipe()) {
      set_benifit_multipe(from.benifit_multipe());
    }
    if (from.has_benifit_radix()) {
      set_benifit_radix(from.benifit_radix());
    }
    if (from.has_total_get_exp()) {
      set_total_get_exp(from.total_get_exp());
    }
    if (from.has_total_stop_time()) {
      set_total_stop_time(from.total_stop_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_self_condition_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_self_condition_info::CopyFrom(const sa_self_condition_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_self_condition_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void sa_self_condition_info::Swap(sa_self_condition_info* other) {
  if (other != this) {
    std::swap(benifit_multipe_, other->benifit_multipe_);
    std::swap(benifit_radix_, other->benifit_radix_);
    std::swap(total_get_exp_, other->total_get_exp_);
    std::swap(total_stop_time_, other->total_stop_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_self_condition_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_self_condition_info_descriptor_;
  metadata.reflection = sa_self_condition_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sa_capture_condition_ntf::kFlagPosFieldNumber;
const int sa_capture_condition_ntf::kOccuptionNameFieldNumber;
const int sa_capture_condition_ntf::kFamilyNameFieldNumber;
const int sa_capture_condition_ntf::kFamilyFlagIdFieldNumber;
const int sa_capture_condition_ntf::kOccuptionTimeFieldNumber;
const int sa_capture_condition_ntf::kSelfinfoFieldNumber;
#endif  // !_MSC_VER

sa_capture_condition_ntf::sa_capture_condition_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_capture_condition_ntf::InitAsDefaultInstance() {
  flag_pos_ = const_cast< ::client::client_map_pos*>(&::client::client_map_pos::default_instance());
  selfinfo_ = const_cast< ::client::sa_self_condition_info*>(&::client::sa_self_condition_info::default_instance());
}

sa_capture_condition_ntf::sa_capture_condition_ntf(const sa_capture_condition_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_capture_condition_ntf::SharedCtor() {
  _cached_size_ = 0;
  flag_pos_ = NULL;
  occuption_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  family_flag_id_ = 0u;
  occuption_time_ = 0u;
  selfinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_capture_condition_ntf::~sa_capture_condition_ntf() {
  SharedDtor();
}

void sa_capture_condition_ntf::SharedDtor() {
  if (occuption_name_ != &::google::protobuf::internal::kEmptyString) {
    delete occuption_name_;
  }
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
    delete flag_pos_;
    delete selfinfo_;
  }
}

void sa_capture_condition_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_capture_condition_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_capture_condition_ntf_descriptor_;
}

const sa_capture_condition_ntf& sa_capture_condition_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_capture_condition_ntf* sa_capture_condition_ntf::default_instance_ = NULL;

sa_capture_condition_ntf* sa_capture_condition_ntf::New() const {
  return new sa_capture_condition_ntf;
}

void sa_capture_condition_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_flag_pos()) {
      if (flag_pos_ != NULL) flag_pos_->::client::client_map_pos::Clear();
    }
    if (has_occuption_name()) {
      if (occuption_name_ != &::google::protobuf::internal::kEmptyString) {
        occuption_name_->clear();
      }
    }
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
    family_flag_id_ = 0u;
    occuption_time_ = 0u;
    if (has_selfinfo()) {
      if (selfinfo_ != NULL) selfinfo_->::client::sa_self_condition_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_capture_condition_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.client_map_pos flag_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flag_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_occuption_name;
        break;
      }

      // required string occuption_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_occuption_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_occuption_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->occuption_name().data(), this->occuption_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_family_name;
        break;
      }

      // required string family_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_family_flag_id;
        break;
      }

      // required uint32 family_flag_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_flag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_flag_id_)));
          set_has_family_flag_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_occuption_time;
        break;
      }

      // required uint32 occuption_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occuption_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occuption_time_)));
          set_has_occuption_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_selfinfo;
        break;
      }

      // required .client.sa_self_condition_info selfinfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_capture_condition_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.client_map_pos flag_pos = 1;
  if (has_flag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flag_pos(), output);
  }

  // required string occuption_name = 2;
  if (has_occuption_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->occuption_name().data(), this->occuption_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->occuption_name(), output);
  }

  // required string family_name = 3;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->family_name(), output);
  }

  // required uint32 family_flag_id = 4;
  if (has_family_flag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->family_flag_id(), output);
  }

  // required uint32 occuption_time = 5;
  if (has_occuption_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->occuption_time(), output);
  }

  // required .client.sa_self_condition_info selfinfo = 6;
  if (has_selfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->selfinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_capture_condition_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.client_map_pos flag_pos = 1;
  if (has_flag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flag_pos(), target);
  }

  // required string occuption_name = 2;
  if (has_occuption_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->occuption_name().data(), this->occuption_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->occuption_name(), target);
  }

  // required string family_name = 3;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->family_name(), target);
  }

  // required uint32 family_flag_id = 4;
  if (has_family_flag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->family_flag_id(), target);
  }

  // required uint32 occuption_time = 5;
  if (has_occuption_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->occuption_time(), target);
  }

  // required .client.sa_self_condition_info selfinfo = 6;
  if (has_selfinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->selfinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_capture_condition_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.client_map_pos flag_pos = 1;
    if (has_flag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flag_pos());
    }

    // required string occuption_name = 2;
    if (has_occuption_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->occuption_name());
    }

    // required string family_name = 3;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

    // required uint32 family_flag_id = 4;
    if (has_family_flag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_flag_id());
    }

    // required uint32 occuption_time = 5;
    if (has_occuption_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occuption_time());
    }

    // required .client.sa_self_condition_info selfinfo = 6;
    if (has_selfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_capture_condition_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_capture_condition_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_capture_condition_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_capture_condition_ntf::MergeFrom(const sa_capture_condition_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag_pos()) {
      mutable_flag_pos()->::client::client_map_pos::MergeFrom(from.flag_pos());
    }
    if (from.has_occuption_name()) {
      set_occuption_name(from.occuption_name());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
    if (from.has_family_flag_id()) {
      set_family_flag_id(from.family_flag_id());
    }
    if (from.has_occuption_time()) {
      set_occuption_time(from.occuption_time());
    }
    if (from.has_selfinfo()) {
      mutable_selfinfo()->::client::sa_self_condition_info::MergeFrom(from.selfinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_capture_condition_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_capture_condition_ntf::CopyFrom(const sa_capture_condition_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_capture_condition_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_flag_pos()) {
    if (!this->flag_pos().IsInitialized()) return false;
  }
  if (has_selfinfo()) {
    if (!this->selfinfo().IsInitialized()) return false;
  }
  return true;
}

void sa_capture_condition_ntf::Swap(sa_capture_condition_ntf* other) {
  if (other != this) {
    std::swap(flag_pos_, other->flag_pos_);
    std::swap(occuption_name_, other->occuption_name_);
    std::swap(family_name_, other->family_name_);
    std::swap(family_flag_id_, other->family_flag_id_);
    std::swap(occuption_time_, other->occuption_time_);
    std::swap(selfinfo_, other->selfinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_capture_condition_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_capture_condition_ntf_descriptor_;
  metadata.reflection = sa_capture_condition_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sa_capture_flag_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

sa_capture_flag_req::sa_capture_flag_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_capture_flag_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

sa_capture_flag_req::sa_capture_flag_req(const sa_capture_flag_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_capture_flag_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_capture_flag_req::~sa_capture_flag_req() {
  SharedDtor();
}

void sa_capture_flag_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void sa_capture_flag_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_capture_flag_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_capture_flag_req_descriptor_;
}

const sa_capture_flag_req& sa_capture_flag_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_capture_flag_req* sa_capture_flag_req::default_instance_ = NULL;

sa_capture_flag_req* sa_capture_flag_req::New() const {
  return new sa_capture_flag_req;
}

void sa_capture_flag_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_capture_flag_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_capture_flag_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_capture_flag_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_capture_flag_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_capture_flag_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_capture_flag_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_capture_flag_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_capture_flag_req::MergeFrom(const sa_capture_flag_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_capture_flag_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_capture_flag_req::CopyFrom(const sa_capture_flag_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_capture_flag_req::IsInitialized() const {

  return true;
}

void sa_capture_flag_req::Swap(sa_capture_flag_req* other) {
  if (other != this) {
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_capture_flag_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_capture_flag_req_descriptor_;
  metadata.reflection = sa_capture_flag_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sa_capture_flag_check::kReqFieldNumber;
#endif  // !_MSC_VER

sa_capture_flag_check::sa_capture_flag_check()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_capture_flag_check::InitAsDefaultInstance() {
  req_ = const_cast< ::client::sa_capture_flag_req*>(&::client::sa_capture_flag_req::default_instance());
}

sa_capture_flag_check::sa_capture_flag_check(const sa_capture_flag_check& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_capture_flag_check::SharedCtor() {
  _cached_size_ = 0;
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_capture_flag_check::~sa_capture_flag_check() {
  SharedDtor();
}

void sa_capture_flag_check::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void sa_capture_flag_check::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_capture_flag_check::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_capture_flag_check_descriptor_;
}

const sa_capture_flag_check& sa_capture_flag_check::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_capture_flag_check* sa_capture_flag_check::default_instance_ = NULL;

sa_capture_flag_check* sa_capture_flag_check::New() const {
  return new sa_capture_flag_check;
}

void sa_capture_flag_check::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req()) {
      if (req_ != NULL) req_->::client::sa_capture_flag_req::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_capture_flag_check::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.sa_capture_flag_req req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_capture_flag_check::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.sa_capture_flag_req req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_capture_flag_check::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.sa_capture_flag_req req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_capture_flag_check::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.sa_capture_flag_req req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_capture_flag_check::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_capture_flag_check* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_capture_flag_check*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_capture_flag_check::MergeFrom(const sa_capture_flag_check& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      mutable_req()->::client::sa_capture_flag_req::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_capture_flag_check::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_capture_flag_check::CopyFrom(const sa_capture_flag_check& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_capture_flag_check::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sa_capture_flag_check::Swap(sa_capture_flag_check* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_capture_flag_check::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_capture_flag_check_descriptor_;
  metadata.reflection = sa_capture_flag_check_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sa_capture_flag_rsp::kRetFieldNumber;
const int sa_capture_flag_rsp::kCaptureTimeFieldNumber;
#endif  // !_MSC_VER

sa_capture_flag_rsp::sa_capture_flag_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_capture_flag_rsp::InitAsDefaultInstance() {
}

sa_capture_flag_rsp::sa_capture_flag_rsp(const sa_capture_flag_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_capture_flag_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  capture_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_capture_flag_rsp::~sa_capture_flag_rsp() {
  SharedDtor();
}

void sa_capture_flag_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sa_capture_flag_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_capture_flag_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_capture_flag_rsp_descriptor_;
}

const sa_capture_flag_rsp& sa_capture_flag_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_capture_flag_rsp* sa_capture_flag_rsp::default_instance_ = NULL;

sa_capture_flag_rsp* sa_capture_flag_rsp::New() const {
  return new sa_capture_flag_rsp;
}

void sa_capture_flag_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    capture_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_capture_flag_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.SA_FLAG_OPERATOR_RET ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::SA_FLAG_OPERATOR_RET_IsValid(value)) {
            set_ret(static_cast< ::client::SA_FLAG_OPERATOR_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_capture_time;
        break;
      }

      // optional uint32 capture_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capture_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capture_time_)));
          set_has_capture_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_capture_flag_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.SA_FLAG_OPERATOR_RET ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 capture_time = 2;
  if (has_capture_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->capture_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_capture_flag_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.SA_FLAG_OPERATOR_RET ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 capture_time = 2;
  if (has_capture_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->capture_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_capture_flag_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.SA_FLAG_OPERATOR_RET ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 capture_time = 2;
    if (has_capture_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capture_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_capture_flag_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_capture_flag_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_capture_flag_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_capture_flag_rsp::MergeFrom(const sa_capture_flag_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_capture_time()) {
      set_capture_time(from.capture_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_capture_flag_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_capture_flag_rsp::CopyFrom(const sa_capture_flag_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_capture_flag_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sa_capture_flag_rsp::Swap(sa_capture_flag_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(capture_time_, other->capture_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_capture_flag_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_capture_flag_rsp_descriptor_;
  metadata.reflection = sa_capture_flag_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sa_init_data_req::kRegionIdFieldNumber;
#endif  // !_MSC_VER

sa_init_data_req::sa_init_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_init_data_req::InitAsDefaultInstance() {
}

sa_init_data_req::sa_init_data_req(const sa_init_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_init_data_req::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_init_data_req::~sa_init_data_req() {
  SharedDtor();
}

void sa_init_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sa_init_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_init_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_init_data_req_descriptor_;
}

const sa_init_data_req& sa_init_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_init_data_req* sa_init_data_req::default_instance_ = NULL;

sa_init_data_req* sa_init_data_req::New() const {
  return new sa_init_data_req;
}

void sa_init_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_init_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_init_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->region_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_init_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->region_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_init_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_init_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_init_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_init_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_init_data_req::MergeFrom(const sa_init_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_init_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_init_data_req::CopyFrom(const sa_init_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_init_data_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sa_init_data_req::Swap(sa_init_data_req* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_init_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_init_data_req_descriptor_;
  metadata.reflection = sa_init_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sa_init_data_rsp::kFamilyIdFieldNumber;
const int sa_init_data_rsp::kFamilyFlagIdFieldNumber;
const int sa_init_data_rsp::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

sa_init_data_rsp::sa_init_data_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_init_data_rsp::InitAsDefaultInstance() {
}

sa_init_data_rsp::sa_init_data_rsp(const sa_init_data_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_init_data_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  family_flag_id_ = 0u;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_init_data_rsp::~sa_init_data_rsp() {
  SharedDtor();
}

void sa_init_data_rsp::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
  }
}

void sa_init_data_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_init_data_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_init_data_rsp_descriptor_;
}

const sa_init_data_rsp& sa_init_data_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_init_data_rsp* sa_init_data_rsp::default_instance_ = NULL;

sa_init_data_rsp* sa_init_data_rsp::New() const {
  return new sa_init_data_rsp;
}

void sa_init_data_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    family_flag_id_ = 0u;
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_init_data_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_flag_id;
        break;
      }

      // required uint32 family_flag_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_flag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_flag_id_)));
          set_has_family_flag_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_family_name;
        break;
      }

      // required string family_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_init_data_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 family_flag_id = 2;
  if (has_family_flag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_flag_id(), output);
  }

  // required string family_name = 3;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->family_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_init_data_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 family_flag_id = 2;
  if (has_family_flag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_flag_id(), target);
  }

  // required string family_name = 3;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->family_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_init_data_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 family_flag_id = 2;
    if (has_family_flag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_flag_id());
    }

    // required string family_name = 3;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_init_data_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_init_data_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_init_data_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_init_data_rsp::MergeFrom(const sa_init_data_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_family_flag_id()) {
      set_family_flag_id(from.family_flag_id());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_init_data_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_init_data_rsp::CopyFrom(const sa_init_data_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_init_data_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void sa_init_data_rsp::Swap(sa_init_data_rsp* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(family_flag_id_, other->family_flag_id_);
    std::swap(family_name_, other->family_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_init_data_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_init_data_rsp_descriptor_;
  metadata.reflection = sa_init_data_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sa_query_family_info_req::kMapIdFieldNumber;
const int sa_query_family_info_req::kSceneIdFieldNumber;
const int sa_query_family_info_req::kFamilyIdFieldNumber;
#endif  // !_MSC_VER

sa_query_family_info_req::sa_query_family_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_query_family_info_req::InitAsDefaultInstance() {
}

sa_query_family_info_req::sa_query_family_info_req(const sa_query_family_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_query_family_info_req::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  scene_id_ = 0u;
  family_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_query_family_info_req::~sa_query_family_info_req() {
  SharedDtor();
}

void sa_query_family_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sa_query_family_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_query_family_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_query_family_info_req_descriptor_;
}

const sa_query_family_info_req& sa_query_family_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_query_family_info_req* sa_query_family_info_req::default_instance_ = NULL;

sa_query_family_info_req* sa_query_family_info_req::New() const {
  return new sa_query_family_info_req;
}

void sa_query_family_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    scene_id_ = 0u;
    family_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_query_family_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_query_family_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // required uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  // required uint32 family_id = 3;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->family_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_query_family_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }

  // required uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  // required uint32 family_id = 3;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->family_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_query_family_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // required uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // required uint32 family_id = 3;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_query_family_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_query_family_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_query_family_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_query_family_info_req::MergeFrom(const sa_query_family_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_query_family_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_query_family_info_req::CopyFrom(const sa_query_family_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_query_family_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void sa_query_family_info_req::Swap(sa_query_family_info_req* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(family_id_, other->family_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_query_family_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_query_family_info_req_descriptor_;
  metadata.reflection = sa_query_family_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sa_query_family_info_rsp::kFamilyFlagIdFieldNumber;
const int sa_query_family_info_rsp::kFamilyNameFieldNumber;
#endif  // !_MSC_VER

sa_query_family_info_rsp::sa_query_family_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_query_family_info_rsp::InitAsDefaultInstance() {
}

sa_query_family_info_rsp::sa_query_family_info_rsp(const sa_query_family_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_query_family_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  family_flag_id_ = 0u;
  family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_query_family_info_rsp::~sa_query_family_info_rsp() {
  SharedDtor();
}

void sa_query_family_info_rsp::SharedDtor() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (this != default_instance_) {
  }
}

void sa_query_family_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_query_family_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_query_family_info_rsp_descriptor_;
}

const sa_query_family_info_rsp& sa_query_family_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_query_family_info_rsp* sa_query_family_info_rsp::default_instance_ = NULL;

sa_query_family_info_rsp* sa_query_family_info_rsp::New() const {
  return new sa_query_family_info_rsp;
}

void sa_query_family_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_flag_id_ = 0u;
    if (has_family_name()) {
      if (family_name_ != &::google::protobuf::internal::kEmptyString) {
        family_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_query_family_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_flag_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_flag_id_)));
          set_has_family_flag_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_family_name;
        break;
      }

      // required string family_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_family_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_family_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->family_name().data(), this->family_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_query_family_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_flag_id = 1;
  if (has_family_flag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_flag_id(), output);
  }

  // required string family_name = 2;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->family_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_query_family_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_flag_id = 1;
  if (has_family_flag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_flag_id(), target);
  }

  // required string family_name = 2;
  if (has_family_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->family_name().data(), this->family_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->family_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_query_family_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_flag_id = 1;
    if (has_family_flag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_flag_id());
    }

    // required string family_name = 2;
    if (has_family_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->family_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_query_family_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_query_family_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_query_family_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_query_family_info_rsp::MergeFrom(const sa_query_family_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_flag_id()) {
      set_family_flag_id(from.family_flag_id());
    }
    if (from.has_family_name()) {
      set_family_name(from.family_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_query_family_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_query_family_info_rsp::CopyFrom(const sa_query_family_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_query_family_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sa_query_family_info_rsp::Swap(sa_query_family_info_rsp* other) {
  if (other != this) {
    std::swap(family_flag_id_, other->family_flag_id_);
    std::swap(family_name_, other->family_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_query_family_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_query_family_info_rsp_descriptor_;
  metadata.reflection = sa_query_family_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sa_battle_personal_record::kRoleIdFieldNumber;
const int sa_battle_personal_record::kBenifitMultipeFieldNumber;
#endif  // !_MSC_VER

sa_battle_personal_record::sa_battle_personal_record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sa_battle_personal_record::InitAsDefaultInstance() {
}

sa_battle_personal_record::sa_battle_personal_record(const sa_battle_personal_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sa_battle_personal_record::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  benifit_multipe_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sa_battle_personal_record::~sa_battle_personal_record() {
  SharedDtor();
}

void sa_battle_personal_record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sa_battle_personal_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sa_battle_personal_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sa_battle_personal_record_descriptor_;
}

const sa_battle_personal_record& sa_battle_personal_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2esaparatism_5fbattle_2eproto();
  return *default_instance_;
}

sa_battle_personal_record* sa_battle_personal_record::default_instance_ = NULL;

sa_battle_personal_record* sa_battle_personal_record::New() const {
  return new sa_battle_personal_record;
}

void sa_battle_personal_record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    benifit_multipe_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sa_battle_personal_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_benifit_multipe;
        break;
      }

      // required uint32 benifit_multipe = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_benifit_multipe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &benifit_multipe_)));
          set_has_benifit_multipe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sa_battle_personal_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 benifit_multipe = 2;
  if (has_benifit_multipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->benifit_multipe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sa_battle_personal_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 benifit_multipe = 2;
  if (has_benifit_multipe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->benifit_multipe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sa_battle_personal_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 benifit_multipe = 2;
    if (has_benifit_multipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->benifit_multipe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sa_battle_personal_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sa_battle_personal_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sa_battle_personal_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sa_battle_personal_record::MergeFrom(const sa_battle_personal_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_benifit_multipe()) {
      set_benifit_multipe(from.benifit_multipe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sa_battle_personal_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sa_battle_personal_record::CopyFrom(const sa_battle_personal_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sa_battle_personal_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sa_battle_personal_record::Swap(sa_battle_personal_record* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(benifit_multipe_, other->benifit_multipe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sa_battle_personal_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sa_battle_personal_record_descriptor_;
  metadata.reflection = sa_battle_personal_record_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
