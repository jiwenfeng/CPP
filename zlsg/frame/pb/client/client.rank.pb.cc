// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.rank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* rank_rule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_rule_reflection_ = NULL;
const ::google::protobuf::Descriptor* rank_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* rank_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* rank_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* rank_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* rank_add_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_add_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* act_rank_add_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  act_rank_add_data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RANK_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2erank_2eproto() {
  protobuf_AddDesc_client_2erank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.rank.proto");
  GOOGLE_CHECK(file != NULL);
  rank_rule_descriptor_ = file->message_type(0);
  static const int rank_rule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_rule, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_rule, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_rule, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_rule, third_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_rule, forth_),
  };
  rank_rule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_rule_descriptor_,
      rank_rule::default_instance_,
      rank_rule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_rule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_rule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_rule));
  rank_data_descriptor_ = file->message_type(1);
  static const int rank_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_data, ru_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_data, ru_real_),
  };
  rank_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_data_descriptor_,
      rank_data::default_instance_,
      rank_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_data));
  rank_item_descriptor_ = file->message_type(2);
  static const int rank_item_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_item, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_item, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_item, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_item, vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_item, profession_),
  };
  rank_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_item_descriptor_,
      rank_item::default_instance_,
      rank_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_item));
  rank_list_req_descriptor_ = file->message_type(3);
  static const int rank_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_req, rt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_req, svr_head_),
  };
  rank_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_list_req_descriptor_,
      rank_list_req::default_instance_,
      rank_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_list_req));
  rank_list_rsp_descriptor_ = file->message_type(4);
  static const int rank_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_rsp, rt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_rsp, ri_),
  };
  rank_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_list_rsp_descriptor_,
      rank_list_rsp::default_instance_,
      rank_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_list_rsp));
  rank_add_data_descriptor_ = file->message_type(5);
  static const int rank_add_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_add_data, rt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_add_data, ru_),
  };
  rank_add_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_add_data_descriptor_,
      rank_add_data::default_instance_,
      rank_add_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_add_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_add_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_add_data));
  act_rank_add_data_descriptor_ = file->message_type(6);
  static const int act_rank_add_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_rank_add_data, rt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_rank_add_data, ru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_rank_add_data, limit_value_),
  };
  act_rank_add_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      act_rank_add_data_descriptor_,
      act_rank_add_data::default_instance_,
      act_rank_add_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_rank_add_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(act_rank_add_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(act_rank_add_data));
  RANK_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2erank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_rule_descriptor_, &rank_rule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_data_descriptor_, &rank_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_item_descriptor_, &rank_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_list_req_descriptor_, &rank_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_list_rsp_descriptor_, &rank_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_add_data_descriptor_, &rank_add_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    act_rank_add_data_descriptor_, &act_rank_add_data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2erank_2eproto() {
  delete rank_rule::default_instance_;
  delete rank_rule_reflection_;
  delete rank_data::default_instance_;
  delete rank_data_reflection_;
  delete rank_item::default_instance_;
  delete rank_item_reflection_;
  delete rank_list_req::default_instance_;
  delete rank_list_req_reflection_;
  delete rank_list_rsp::default_instance_;
  delete rank_list_rsp_reflection_;
  delete rank_add_data::default_instance_;
  delete rank_add_data_reflection_;
  delete act_rank_add_data::default_instance_;
  delete act_rank_add_data_reflection_;
}

void protobuf_AddDesc_client_2erank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021client.rank.proto\022\006client\032\021client.comm"
    ".proto\"e\n\trank_rule\022\017\n\007role_id\030\001 \002(\r\022\020\n\005"
    "first\030\002 \001(\r:\0010\022\021\n\006second\030\003 \001(\r:\0010\022\020\n\005thi"
    "rd\030\004 \001(\r:\0010\022\020\n\005forth\030\005 \001(\r:\0010\"S\n\trank_da"
    "ta\022\"\n\007ru_show\030\001 \001(\0132\021.client.rank_rule\022\""
    "\n\007ru_real\030\002 \001(\0132\021.client.rank_rule\"b\n\tra"
    "nk_item\022\017\n\007role_id\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\022"
    "\021\n\trole_name\030\003 \001(\t\022\016\n\006vip_lv\030\004 \001(\r\022\022\n\npr"
    "ofession\030\005 \001(\r\"V\n\rrank_list_req\022\035\n\002rt\030\001 "
    "\002(\0162\021.client.RANK_TYPE\022&\n\010svr_head\030\350\007 \001("
    "\0132\023.client.server_head\"M\n\rrank_list_rsp\022"
    "\035\n\002rt\030\001 \002(\0162\021.client.RANK_TYPE\022\035\n\002ri\030\002 \003"
    "(\0132\021.client.rank_item\"M\n\rrank_add_data\022\035"
    "\n\002rt\030\001 \002(\0162\021.client.RANK_TYPE\022\035\n\002ru\030\002 \002("
    "\0132\021.client.rank_rule\"f\n\021act_rank_add_dat"
    "a\022\035\n\002rt\030\001 \002(\0162\021.client.RANK_TYPE\022\035\n\002ru\030\002"
    " \002(\0132\021.client.rank_rule\022\023\n\013limit_value\030\003"
    " \002(\r*\275\001\n\tRANK_TYPE\022\027\n\023RANK_PERSONAL_POWE"
    "R\020\000\022\027\n\023RANK_PERSONAL_LEVEL\020\001\022\016\n\nRANK_MOU"
    "NT\020\002\022\022\n\016RANK_POTENTIAL\020\003\022\r\n\tRANK_BOWS\020\004\022"
    "\r\n\tRANK_GEMS\020\005\022\024\n\020RANK_EQUIP_POWER\020\006\022\026\n\022"
    "RANK_GEMS_INTEGRAL\020\007\022\016\n\nRANK_COUNT\020\022", 876);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.rank.proto", &protobuf_RegisterTypes);
  rank_rule::default_instance_ = new rank_rule();
  rank_data::default_instance_ = new rank_data();
  rank_item::default_instance_ = new rank_item();
  rank_list_req::default_instance_ = new rank_list_req();
  rank_list_rsp::default_instance_ = new rank_list_rsp();
  rank_add_data::default_instance_ = new rank_add_data();
  act_rank_add_data::default_instance_ = new act_rank_add_data();
  rank_rule::default_instance_->InitAsDefaultInstance();
  rank_data::default_instance_->InitAsDefaultInstance();
  rank_item::default_instance_->InitAsDefaultInstance();
  rank_list_req::default_instance_->InitAsDefaultInstance();
  rank_list_rsp::default_instance_->InitAsDefaultInstance();
  rank_add_data::default_instance_->InitAsDefaultInstance();
  act_rank_add_data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2erank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2erank_2eproto {
  StaticDescriptorInitializer_client_2erank_2eproto() {
    protobuf_AddDesc_client_2erank_2eproto();
  }
} static_descriptor_initializer_client_2erank_2eproto_;
const ::google::protobuf::EnumDescriptor* RANK_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RANK_TYPE_descriptor_;
}
bool RANK_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 18:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int rank_rule::kRoleIdFieldNumber;
const int rank_rule::kFirstFieldNumber;
const int rank_rule::kSecondFieldNumber;
const int rank_rule::kThirdFieldNumber;
const int rank_rule::kForthFieldNumber;
#endif  // !_MSC_VER

rank_rule::rank_rule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_rule::InitAsDefaultInstance() {
}

rank_rule::rank_rule(const rank_rule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_rule::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  first_ = 0u;
  second_ = 0u;
  third_ = 0u;
  forth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_rule::~rank_rule() {
  SharedDtor();
}

void rank_rule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rank_rule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_rule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_rule_descriptor_;
}

const rank_rule& rank_rule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erank_2eproto();
  return *default_instance_;
}

rank_rule* rank_rule::default_instance_ = NULL;

rank_rule* rank_rule::New() const {
  return new rank_rule;
}

void rank_rule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    first_ = 0u;
    second_ = 0u;
    third_ = 0u;
    forth_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first;
        break;
      }

      // optional uint32 first = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_second;
        break;
      }

      // optional uint32 second = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_third;
        break;
      }

      // optional uint32 third = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_third:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &third_)));
          set_has_third();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_forth;
        break;
      }

      // optional uint32 forth = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forth_)));
          set_has_forth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 first = 2 [default = 0];
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first(), output);
  }

  // optional uint32 second = 3 [default = 0];
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->second(), output);
  }

  // optional uint32 third = 4 [default = 0];
  if (has_third()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->third(), output);
  }

  // optional uint32 forth = 5 [default = 0];
  if (has_forth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->forth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_rule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 first = 2 [default = 0];
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->first(), target);
  }

  // optional uint32 second = 3 [default = 0];
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->second(), target);
  }

  // optional uint32 third = 4 [default = 0];
  if (has_third()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->third(), target);
  }

  // optional uint32 forth = 5 [default = 0];
  if (has_forth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->forth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_rule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 first = 2 [default = 0];
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }

    // optional uint32 second = 3 [default = 0];
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->second());
    }

    // optional uint32 third = 4 [default = 0];
    if (has_third()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->third());
    }

    // optional uint32 forth = 5 [default = 0];
    if (has_forth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_rule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_rule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_rule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_rule::MergeFrom(const rank_rule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
    if (from.has_third()) {
      set_third(from.third());
    }
    if (from.has_forth()) {
      set_forth(from.forth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_rule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_rule::CopyFrom(const rank_rule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_rule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void rank_rule::Swap(rank_rule* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(third_, other->third_);
    std::swap(forth_, other->forth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_rule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_rule_descriptor_;
  metadata.reflection = rank_rule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rank_data::kRuShowFieldNumber;
const int rank_data::kRuRealFieldNumber;
#endif  // !_MSC_VER

rank_data::rank_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_data::InitAsDefaultInstance() {
  ru_show_ = const_cast< ::client::rank_rule*>(&::client::rank_rule::default_instance());
  ru_real_ = const_cast< ::client::rank_rule*>(&::client::rank_rule::default_instance());
}

rank_data::rank_data(const rank_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_data::SharedCtor() {
  _cached_size_ = 0;
  ru_show_ = NULL;
  ru_real_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_data::~rank_data() {
  SharedDtor();
}

void rank_data::SharedDtor() {
  if (this != default_instance_) {
    delete ru_show_;
    delete ru_real_;
  }
}

void rank_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_data_descriptor_;
}

const rank_data& rank_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erank_2eproto();
  return *default_instance_;
}

rank_data* rank_data::default_instance_ = NULL;

rank_data* rank_data::New() const {
  return new rank_data;
}

void rank_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ru_show()) {
      if (ru_show_ != NULL) ru_show_->::client::rank_rule::Clear();
    }
    if (has_ru_real()) {
      if (ru_real_ != NULL) ru_real_->::client::rank_rule::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client.rank_rule ru_show = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ru_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ru_real;
        break;
      }

      // optional .client.rank_rule ru_real = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ru_real:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ru_real()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .client.rank_rule ru_show = 1;
  if (has_ru_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ru_show(), output);
  }

  // optional .client.rank_rule ru_real = 2;
  if (has_ru_real()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ru_real(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .client.rank_rule ru_show = 1;
  if (has_ru_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ru_show(), target);
  }

  // optional .client.rank_rule ru_real = 2;
  if (has_ru_real()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ru_real(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client.rank_rule ru_show = 1;
    if (has_ru_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ru_show());
    }

    // optional .client.rank_rule ru_real = 2;
    if (has_ru_real()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ru_real());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_data::MergeFrom(const rank_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ru_show()) {
      mutable_ru_show()->::client::rank_rule::MergeFrom(from.ru_show());
    }
    if (from.has_ru_real()) {
      mutable_ru_real()->::client::rank_rule::MergeFrom(from.ru_real());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_data::CopyFrom(const rank_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_data::IsInitialized() const {

  if (has_ru_show()) {
    if (!this->ru_show().IsInitialized()) return false;
  }
  if (has_ru_real()) {
    if (!this->ru_real().IsInitialized()) return false;
  }
  return true;
}

void rank_data::Swap(rank_data* other) {
  if (other != this) {
    std::swap(ru_show_, other->ru_show_);
    std::swap(ru_real_, other->ru_real_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_data_descriptor_;
  metadata.reflection = rank_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rank_item::kRoleIdFieldNumber;
const int rank_item::kValueFieldNumber;
const int rank_item::kRoleNameFieldNumber;
const int rank_item::kVipLvFieldNumber;
const int rank_item::kProfessionFieldNumber;
#endif  // !_MSC_VER

rank_item::rank_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_item::InitAsDefaultInstance() {
}

rank_item::rank_item(const rank_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_item::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  value_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_lv_ = 0u;
  profession_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_item::~rank_item() {
  SharedDtor();
}

void rank_item::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void rank_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_item_descriptor_;
}

const rank_item& rank_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erank_2eproto();
  return *default_instance_;
}

rank_item* rank_item::default_instance_ = NULL;

rank_item* rank_item::New() const {
  return new rank_item;
}

void rank_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    value_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    vip_lv_ = 0u;
    profession_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_lv;
        break;
      }

      // optional uint32 vip_lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_lv_)));
          set_has_vip_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional uint32 vip_lv = 4;
  if (has_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vip_lv(), output);
  }

  // optional uint32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->profession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional uint32 vip_lv = 4;
  if (has_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vip_lv(), target);
  }

  // optional uint32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->profession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 vip_lv = 4;
    if (has_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_lv());
    }

    // optional uint32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_item::MergeFrom(const rank_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_vip_lv()) {
      set_vip_lv(from.vip_lv());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_item::CopyFrom(const rank_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void rank_item::Swap(rank_item* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(value_, other->value_);
    std::swap(role_name_, other->role_name_);
    std::swap(vip_lv_, other->vip_lv_);
    std::swap(profession_, other->profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_item_descriptor_;
  metadata.reflection = rank_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rank_list_req::kRtFieldNumber;
const int rank_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

rank_list_req::rank_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

rank_list_req::rank_list_req(const rank_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_list_req::SharedCtor() {
  _cached_size_ = 0;
  rt_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_list_req::~rank_list_req() {
  SharedDtor();
}

void rank_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void rank_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_list_req_descriptor_;
}

const rank_list_req& rank_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erank_2eproto();
  return *default_instance_;
}

rank_list_req* rank_list_req::default_instance_ = NULL;

rank_list_req* rank_list_req::New() const {
  return new rank_list_req;
}

void rank_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rt_ = 0;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.RANK_TYPE rt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::RANK_TYPE_IsValid(value)) {
            set_rt(static_cast< ::client::RANK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.RANK_TYPE rt = 1;
  if (has_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rt(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.RANK_TYPE rt = 1;
  if (has_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rt(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.RANK_TYPE rt = 1;
    if (has_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rt());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_list_req::MergeFrom(const rank_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt()) {
      set_rt(from.rt());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_list_req::CopyFrom(const rank_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void rank_list_req::Swap(rank_list_req* other) {
  if (other != this) {
    std::swap(rt_, other->rt_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_list_req_descriptor_;
  metadata.reflection = rank_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rank_list_rsp::kRtFieldNumber;
const int rank_list_rsp::kRiFieldNumber;
#endif  // !_MSC_VER

rank_list_rsp::rank_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_list_rsp::InitAsDefaultInstance() {
}

rank_list_rsp::rank_list_rsp(const rank_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  rt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_list_rsp::~rank_list_rsp() {
  SharedDtor();
}

void rank_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rank_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_list_rsp_descriptor_;
}

const rank_list_rsp& rank_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erank_2eproto();
  return *default_instance_;
}

rank_list_rsp* rank_list_rsp::default_instance_ = NULL;

rank_list_rsp* rank_list_rsp::New() const {
  return new rank_list_rsp;
}

void rank_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rt_ = 0;
  }
  ri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.RANK_TYPE rt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::RANK_TYPE_IsValid(value)) {
            set_rt(static_cast< ::client::RANK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ri;
        break;
      }

      // repeated .client.rank_item ri = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ri;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.RANK_TYPE rt = 1;
  if (has_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rt(), output);
  }

  // repeated .client.rank_item ri = 2;
  for (int i = 0; i < this->ri_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ri(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.RANK_TYPE rt = 1;
  if (has_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rt(), target);
  }

  // repeated .client.rank_item ri = 2;
  for (int i = 0; i < this->ri_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ri(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.RANK_TYPE rt = 1;
    if (has_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rt());
    }

  }
  // repeated .client.rank_item ri = 2;
  total_size += 1 * this->ri_size();
  for (int i = 0; i < this->ri_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ri(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_list_rsp::MergeFrom(const rank_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ri_.MergeFrom(from.ri_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt()) {
      set_rt(from.rt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_list_rsp::CopyFrom(const rank_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ri_size(); i++) {
    if (!this->ri(i).IsInitialized()) return false;
  }
  return true;
}

void rank_list_rsp::Swap(rank_list_rsp* other) {
  if (other != this) {
    std::swap(rt_, other->rt_);
    ri_.Swap(&other->ri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_list_rsp_descriptor_;
  metadata.reflection = rank_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rank_add_data::kRtFieldNumber;
const int rank_add_data::kRuFieldNumber;
#endif  // !_MSC_VER

rank_add_data::rank_add_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_add_data::InitAsDefaultInstance() {
  ru_ = const_cast< ::client::rank_rule*>(&::client::rank_rule::default_instance());
}

rank_add_data::rank_add_data(const rank_add_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_add_data::SharedCtor() {
  _cached_size_ = 0;
  rt_ = 0;
  ru_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_add_data::~rank_add_data() {
  SharedDtor();
}

void rank_add_data::SharedDtor() {
  if (this != default_instance_) {
    delete ru_;
  }
}

void rank_add_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_add_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_add_data_descriptor_;
}

const rank_add_data& rank_add_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erank_2eproto();
  return *default_instance_;
}

rank_add_data* rank_add_data::default_instance_ = NULL;

rank_add_data* rank_add_data::New() const {
  return new rank_add_data;
}

void rank_add_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rt_ = 0;
    if (has_ru()) {
      if (ru_ != NULL) ru_->::client::rank_rule::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_add_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.RANK_TYPE rt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::RANK_TYPE_IsValid(value)) {
            set_rt(static_cast< ::client::RANK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ru;
        break;
      }

      // required .client.rank_rule ru = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ru:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ru()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_add_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.RANK_TYPE rt = 1;
  if (has_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rt(), output);
  }

  // required .client.rank_rule ru = 2;
  if (has_ru()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ru(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_add_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.RANK_TYPE rt = 1;
  if (has_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rt(), target);
  }

  // required .client.rank_rule ru = 2;
  if (has_ru()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ru(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_add_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.RANK_TYPE rt = 1;
    if (has_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rt());
    }

    // required .client.rank_rule ru = 2;
    if (has_ru()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ru());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_add_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_add_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_add_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_add_data::MergeFrom(const rank_add_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt()) {
      set_rt(from.rt());
    }
    if (from.has_ru()) {
      mutable_ru()->::client::rank_rule::MergeFrom(from.ru());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_add_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_add_data::CopyFrom(const rank_add_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_add_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ru()) {
    if (!this->ru().IsInitialized()) return false;
  }
  return true;
}

void rank_add_data::Swap(rank_add_data* other) {
  if (other != this) {
    std::swap(rt_, other->rt_);
    std::swap(ru_, other->ru_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_add_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_add_data_descriptor_;
  metadata.reflection = rank_add_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int act_rank_add_data::kRtFieldNumber;
const int act_rank_add_data::kRuFieldNumber;
const int act_rank_add_data::kLimitValueFieldNumber;
#endif  // !_MSC_VER

act_rank_add_data::act_rank_add_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void act_rank_add_data::InitAsDefaultInstance() {
  ru_ = const_cast< ::client::rank_rule*>(&::client::rank_rule::default_instance());
}

act_rank_add_data::act_rank_add_data(const act_rank_add_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void act_rank_add_data::SharedCtor() {
  _cached_size_ = 0;
  rt_ = 0;
  ru_ = NULL;
  limit_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

act_rank_add_data::~act_rank_add_data() {
  SharedDtor();
}

void act_rank_add_data::SharedDtor() {
  if (this != default_instance_) {
    delete ru_;
  }
}

void act_rank_add_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* act_rank_add_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return act_rank_add_data_descriptor_;
}

const act_rank_add_data& act_rank_add_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2erank_2eproto();
  return *default_instance_;
}

act_rank_add_data* act_rank_add_data::default_instance_ = NULL;

act_rank_add_data* act_rank_add_data::New() const {
  return new act_rank_add_data;
}

void act_rank_add_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rt_ = 0;
    if (has_ru()) {
      if (ru_ != NULL) ru_->::client::rank_rule::Clear();
    }
    limit_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool act_rank_add_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.RANK_TYPE rt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::RANK_TYPE_IsValid(value)) {
            set_rt(static_cast< ::client::RANK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ru;
        break;
      }

      // required .client.rank_rule ru = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ru:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ru()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_limit_value;
        break;
      }

      // required uint32 limit_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_value_)));
          set_has_limit_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void act_rank_add_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.RANK_TYPE rt = 1;
  if (has_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rt(), output);
  }

  // required .client.rank_rule ru = 2;
  if (has_ru()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ru(), output);
  }

  // required uint32 limit_value = 3;
  if (has_limit_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* act_rank_add_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.RANK_TYPE rt = 1;
  if (has_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rt(), target);
  }

  // required .client.rank_rule ru = 2;
  if (has_ru()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ru(), target);
  }

  // required uint32 limit_value = 3;
  if (has_limit_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int act_rank_add_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.RANK_TYPE rt = 1;
    if (has_rt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rt());
    }

    // required .client.rank_rule ru = 2;
    if (has_ru()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ru());
    }

    // required uint32 limit_value = 3;
    if (has_limit_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void act_rank_add_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const act_rank_add_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const act_rank_add_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void act_rank_add_data::MergeFrom(const act_rank_add_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rt()) {
      set_rt(from.rt());
    }
    if (from.has_ru()) {
      mutable_ru()->::client::rank_rule::MergeFrom(from.ru());
    }
    if (from.has_limit_value()) {
      set_limit_value(from.limit_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void act_rank_add_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void act_rank_add_data::CopyFrom(const act_rank_add_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool act_rank_add_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_ru()) {
    if (!this->ru().IsInitialized()) return false;
  }
  return true;
}

void act_rank_add_data::Swap(act_rank_add_data* other) {
  if (other != this) {
    std::swap(rt_, other->rt_);
    std::swap(ru_, other->ru_);
    std::swap(limit_value_, other->limit_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata act_rank_add_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = act_rank_add_data_descriptor_;
  metadata.reflection = act_rank_add_data_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
