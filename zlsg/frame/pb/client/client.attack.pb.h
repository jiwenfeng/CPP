// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.attack.proto

#ifndef PROTOBUF_client_2eattack_2eproto__INCLUDED
#define PROTOBUF_client_2eattack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eattack_2eproto();
void protobuf_AssignDesc_client_2eattack_2eproto();
void protobuf_ShutdownFile_client_2eattack_2eproto();

class attack_cell;
class attack_req;
class attack_collision_data;
class fight_data;
class attack_rsp;
class nearby_npc_pos_req;
class nearby_npc_pos_rsp;
class hate_list;

enum fight_data_TYPE {
  fight_data_TYPE_attk_miss = 0,
  fight_data_TYPE_attk_metal = 1,
  fight_data_TYPE_attk_wood = 2,
  fight_data_TYPE_attk_water = 3,
  fight_data_TYPE_attk_fire = 4,
  fight_data_TYPE_attk_soil = 5,
  fight_data_TYPE_attk_normal = 6,
  fight_data_TYPE_attk_return = 7,
  fight_data_TYPE_attk_dodge = 8,
  fight_data_TYPE_attk_inc = 9,
  fight_data_TYPE_attk_dec = 10,
  fight_data_TYPE_attk_pos = 11,
  fight_data_TYPE_attk_buff = 12,
  fight_data_TYPE_attk_far = 13
};
bool fight_data_TYPE_IsValid(int value);
const fight_data_TYPE fight_data_TYPE_TYPE_MIN = fight_data_TYPE_attk_miss;
const fight_data_TYPE fight_data_TYPE_TYPE_MAX = fight_data_TYPE_attk_far;
const int fight_data_TYPE_TYPE_ARRAYSIZE = fight_data_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* fight_data_TYPE_descriptor();
inline const ::std::string& fight_data_TYPE_Name(fight_data_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    fight_data_TYPE_descriptor(), value);
}
inline bool fight_data_TYPE_Parse(
    const ::std::string& name, fight_data_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<fight_data_TYPE>(
    fight_data_TYPE_descriptor(), name, value);
}
// ===================================================================

class attack_cell : public ::google::protobuf::Message {
 public:
  attack_cell();
  virtual ~attack_cell();

  attack_cell(const attack_cell& from);

  inline attack_cell& operator=(const attack_cell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const attack_cell& default_instance();

  void Swap(attack_cell* other);

  // implements Message ----------------------------------------------

  attack_cell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const attack_cell& from);
  void MergeFrom(const attack_cell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:client.attack_cell)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eattack_2eproto();
  friend void protobuf_AssignDesc_client_2eattack_2eproto();
  friend void protobuf_ShutdownFile_client_2eattack_2eproto();

  void InitAsDefaultInstance();
  static attack_cell* default_instance_;
};
// -------------------------------------------------------------------

class attack_req : public ::google::protobuf::Message {
 public:
  attack_req();
  virtual ~attack_req();

  attack_req(const attack_req& from);

  inline attack_req& operator=(const attack_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const attack_req& default_instance();

  void Swap(attack_req* other);

  // implements Message ----------------------------------------------

  attack_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const attack_req& from);
  void MergeFrom(const attack_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // repeated .client.role_data rd = 2;
  inline int rd_size() const;
  inline void clear_rd();
  static const int kRdFieldNumber = 2;
  inline const ::client::role_data& rd(int index) const;
  inline ::client::role_data* mutable_rd(int index);
  inline ::client::role_data* add_rd();
  inline const ::google::protobuf::RepeatedPtrField< ::client::role_data >&
      rd() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::role_data >*
      mutable_rd();

  // optional .client.attack_cell ac = 3;
  inline bool has_ac() const;
  inline void clear_ac();
  static const int kAcFieldNumber = 3;
  inline const ::client::attack_cell& ac() const;
  inline ::client::attack_cell* mutable_ac();
  inline ::client::attack_cell* release_ac();
  inline void set_allocated_ac(::client::attack_cell* ac);

  // required uint32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.attack_req)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_ac();
  inline void clear_has_ac();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::role_data > rd_;
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 id_;
  ::client::attack_cell* ac_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eattack_2eproto();
  friend void protobuf_AssignDesc_client_2eattack_2eproto();
  friend void protobuf_ShutdownFile_client_2eattack_2eproto();

  void InitAsDefaultInstance();
  static attack_req* default_instance_;
};
// -------------------------------------------------------------------

class attack_collision_data : public ::google::protobuf::Message {
 public:
  attack_collision_data();
  virtual ~attack_collision_data();

  attack_collision_data(const attack_collision_data& from);

  inline attack_collision_data& operator=(const attack_collision_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const attack_collision_data& default_instance();

  void Swap(attack_collision_data* other);

  // implements Message ----------------------------------------------

  attack_collision_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const attack_collision_data& from);
  void MergeFrom(const attack_collision_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 move_speed = 1;
  inline bool has_move_speed() const;
  inline void clear_move_speed();
  static const int kMoveSpeedFieldNumber = 1;
  inline ::google::protobuf::uint32 move_speed() const;
  inline void set_move_speed(::google::protobuf::uint32 value);

  // required .client.client_map_pos pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::client::client_map_pos& pos() const;
  inline ::client::client_map_pos* mutable_pos();
  inline ::client::client_map_pos* release_pos();
  inline void set_allocated_pos(::client::client_map_pos* pos);

  // @@protoc_insertion_point(class_scope:client.attack_collision_data)
 private:
  inline void set_has_move_speed();
  inline void clear_has_move_speed();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::client_map_pos* pos_;
  ::google::protobuf::uint32 move_speed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eattack_2eproto();
  friend void protobuf_AssignDesc_client_2eattack_2eproto();
  friend void protobuf_ShutdownFile_client_2eattack_2eproto();

  void InitAsDefaultInstance();
  static attack_collision_data* default_instance_;
};
// -------------------------------------------------------------------

class fight_data : public ::google::protobuf::Message {
 public:
  fight_data();
  virtual ~fight_data();

  fight_data(const fight_data& from);

  inline fight_data& operator=(const fight_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fight_data& default_instance();

  void Swap(fight_data* other);

  // implements Message ----------------------------------------------

  fight_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fight_data& from);
  void MergeFrom(const fight_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef fight_data_TYPE TYPE;
  static const TYPE attk_miss = fight_data_TYPE_attk_miss;
  static const TYPE attk_metal = fight_data_TYPE_attk_metal;
  static const TYPE attk_wood = fight_data_TYPE_attk_wood;
  static const TYPE attk_water = fight_data_TYPE_attk_water;
  static const TYPE attk_fire = fight_data_TYPE_attk_fire;
  static const TYPE attk_soil = fight_data_TYPE_attk_soil;
  static const TYPE attk_normal = fight_data_TYPE_attk_normal;
  static const TYPE attk_return = fight_data_TYPE_attk_return;
  static const TYPE attk_dodge = fight_data_TYPE_attk_dodge;
  static const TYPE attk_inc = fight_data_TYPE_attk_inc;
  static const TYPE attk_dec = fight_data_TYPE_attk_dec;
  static const TYPE attk_pos = fight_data_TYPE_attk_pos;
  static const TYPE attk_buff = fight_data_TYPE_attk_buff;
  static const TYPE attk_far = fight_data_TYPE_attk_far;
  static inline bool TYPE_IsValid(int value) {
    return fight_data_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    fight_data_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    fight_data_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    fight_data_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return fight_data_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return fight_data_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return fight_data_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .client.role_data dst_rd = 1;
  inline bool has_dst_rd() const;
  inline void clear_dst_rd();
  static const int kDstRdFieldNumber = 1;
  inline const ::client::role_data& dst_rd() const;
  inline ::client::role_data* mutable_dst_rd();
  inline ::client::role_data* release_dst_rd();
  inline void set_allocated_dst_rd(::client::role_data* dst_rd);

  // required .client.fight_data.TYPE fight_type = 2;
  inline bool has_fight_type() const;
  inline void clear_fight_type();
  static const int kFightTypeFieldNumber = 2;
  inline ::client::fight_data_TYPE fight_type() const;
  inline void set_fight_type(::client::fight_data_TYPE value);

  // optional uint32 critical = 3;
  inline bool has_critical() const;
  inline void clear_critical();
  static const int kCriticalFieldNumber = 3;
  inline ::google::protobuf::uint32 critical() const;
  inline void set_critical(::google::protobuf::uint32 value);

  // optional uint32 data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline ::google::protobuf::uint32 data() const;
  inline void set_data(::google::protobuf::uint32 value);

  // optional .client.attack_collision_data acd = 5;
  inline bool has_acd() const;
  inline void clear_acd();
  static const int kAcdFieldNumber = 5;
  inline const ::client::attack_collision_data& acd() const;
  inline ::client::attack_collision_data* mutable_acd();
  inline ::client::attack_collision_data* release_acd();
  inline void set_allocated_acd(::client::attack_collision_data* acd);

  // optional bool dead = 6;
  inline bool has_dead() const;
  inline void clear_dead();
  static const int kDeadFieldNumber = 6;
  inline bool dead() const;
  inline void set_dead(bool value);

  // optional .client.client_map_pos pos = 7;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 7;
  inline const ::client::client_map_pos& pos() const;
  inline ::client::client_map_pos* mutable_pos();
  inline ::client::client_map_pos* release_pos();
  inline void set_allocated_pos(::client::client_map_pos* pos);

  // optional uint32 cur_hp = 8;
  inline bool has_cur_hp() const;
  inline void clear_cur_hp();
  static const int kCurHpFieldNumber = 8;
  inline ::google::protobuf::uint32 cur_hp() const;
  inline void set_cur_hp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.fight_data)
 private:
  inline void set_has_dst_rd();
  inline void clear_has_dst_rd();
  inline void set_has_fight_type();
  inline void clear_has_fight_type();
  inline void set_has_critical();
  inline void clear_has_critical();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_acd();
  inline void clear_has_acd();
  inline void set_has_dead();
  inline void clear_has_dead();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_cur_hp();
  inline void clear_has_cur_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::role_data* dst_rd_;
  int fight_type_;
  ::google::protobuf::uint32 critical_;
  ::client::attack_collision_data* acd_;
  ::google::protobuf::uint32 data_;
  bool dead_;
  ::client::client_map_pos* pos_;
  ::google::protobuf::uint32 cur_hp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eattack_2eproto();
  friend void protobuf_AssignDesc_client_2eattack_2eproto();
  friend void protobuf_ShutdownFile_client_2eattack_2eproto();

  void InitAsDefaultInstance();
  static fight_data* default_instance_;
};
// -------------------------------------------------------------------

class attack_rsp : public ::google::protobuf::Message {
 public:
  attack_rsp();
  virtual ~attack_rsp();

  attack_rsp(const attack_rsp& from);

  inline attack_rsp& operator=(const attack_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const attack_rsp& default_instance();

  void Swap(attack_rsp* other);

  // implements Message ----------------------------------------------

  attack_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const attack_rsp& from);
  void MergeFrom(const attack_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.role_data src_rd = 1;
  inline bool has_src_rd() const;
  inline void clear_src_rd();
  static const int kSrcRdFieldNumber = 1;
  inline const ::client::role_data& src_rd() const;
  inline ::client::role_data* mutable_src_rd();
  inline ::client::role_data* release_src_rd();
  inline void set_allocated_src_rd(::client::role_data* src_rd);

  // optional .client.attack_cell ac = 2;
  inline bool has_ac() const;
  inline void clear_ac();
  static const int kAcFieldNumber = 2;
  inline const ::client::attack_cell& ac() const;
  inline ::client::attack_cell* mutable_ac();
  inline ::client::attack_cell* release_ac();
  inline void set_allocated_ac(::client::attack_cell* ac);

  // required uint32 skill_id = 3;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 3;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // repeated .client.fight_data fd = 4;
  inline int fd_size() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 4;
  inline const ::client::fight_data& fd(int index) const;
  inline ::client::fight_data* mutable_fd(int index);
  inline ::client::fight_data* add_fd();
  inline const ::google::protobuf::RepeatedPtrField< ::client::fight_data >&
      fd() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::fight_data >*
      mutable_fd();

  // required uint32 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bool def = 6;
  inline bool has_def() const;
  inline void clear_def();
  static const int kDefFieldNumber = 6;
  inline bool def() const;
  inline void set_def(bool value);

  // @@protoc_insertion_point(class_scope:client.attack_rsp)
 private:
  inline void set_has_src_rd();
  inline void clear_has_src_rd();
  inline void set_has_ac();
  inline void clear_has_ac();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_def();
  inline void clear_has_def();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::role_data* src_rd_;
  ::client::attack_cell* ac_;
  ::google::protobuf::RepeatedPtrField< ::client::fight_data > fd_;
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 id_;
  bool def_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eattack_2eproto();
  friend void protobuf_AssignDesc_client_2eattack_2eproto();
  friend void protobuf_ShutdownFile_client_2eattack_2eproto();

  void InitAsDefaultInstance();
  static attack_rsp* default_instance_;
};
// -------------------------------------------------------------------

class nearby_npc_pos_req : public ::google::protobuf::Message {
 public:
  nearby_npc_pos_req();
  virtual ~nearby_npc_pos_req();

  nearby_npc_pos_req(const nearby_npc_pos_req& from);

  inline nearby_npc_pos_req& operator=(const nearby_npc_pos_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nearby_npc_pos_req& default_instance();

  void Swap(nearby_npc_pos_req* other);

  // implements Message ----------------------------------------------

  nearby_npc_pos_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nearby_npc_pos_req& from);
  void MergeFrom(const nearby_npc_pos_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.nearby_npc_pos_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eattack_2eproto();
  friend void protobuf_AssignDesc_client_2eattack_2eproto();
  friend void protobuf_ShutdownFile_client_2eattack_2eproto();

  void InitAsDefaultInstance();
  static nearby_npc_pos_req* default_instance_;
};
// -------------------------------------------------------------------

class nearby_npc_pos_rsp : public ::google::protobuf::Message {
 public:
  nearby_npc_pos_rsp();
  virtual ~nearby_npc_pos_rsp();

  nearby_npc_pos_rsp(const nearby_npc_pos_rsp& from);

  inline nearby_npc_pos_rsp& operator=(const nearby_npc_pos_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nearby_npc_pos_rsp& default_instance();

  void Swap(nearby_npc_pos_rsp* other);

  // implements Message ----------------------------------------------

  nearby_npc_pos_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nearby_npc_pos_rsp& from);
  void MergeFrom(const nearby_npc_pos_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.client_map_pos pos = 1;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline const ::client::client_map_pos& pos(int index) const;
  inline ::client::client_map_pos* mutable_pos(int index);
  inline ::client::client_map_pos* add_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::client::client_map_pos >&
      pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::client_map_pos >*
      mutable_pos();

  // required uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.nearby_npc_pos_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::client_map_pos > pos_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eattack_2eproto();
  friend void protobuf_AssignDesc_client_2eattack_2eproto();
  friend void protobuf_ShutdownFile_client_2eattack_2eproto();

  void InitAsDefaultInstance();
  static nearby_npc_pos_rsp* default_instance_;
};
// -------------------------------------------------------------------

class hate_list : public ::google::protobuf::Message {
 public:
  hate_list();
  virtual ~hate_list();

  hate_list(const hate_list& from);

  inline hate_list& operator=(const hate_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hate_list& default_instance();

  void Swap(hate_list* other);

  // implements Message ----------------------------------------------

  hate_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hate_list& from);
  void MergeFrom(const hate_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.role_name target = 1;
  inline int target_size() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 1;
  inline const ::client::role_name& target(int index) const;
  inline ::client::role_name* mutable_target(int index);
  inline ::client::role_name* add_target();
  inline const ::google::protobuf::RepeatedPtrField< ::client::role_name >&
      target() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::role_name >*
      mutable_target();

  // @@protoc_insertion_point(class_scope:client.hate_list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::role_name > target_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eattack_2eproto();
  friend void protobuf_AssignDesc_client_2eattack_2eproto();
  friend void protobuf_ShutdownFile_client_2eattack_2eproto();

  void InitAsDefaultInstance();
  static hate_list* default_instance_;
};
// ===================================================================


// ===================================================================

// attack_cell

// required float x = 1;
inline bool attack_cell::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void attack_cell::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void attack_cell::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void attack_cell::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float attack_cell::x() const {
  return x_;
}
inline void attack_cell::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool attack_cell::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void attack_cell::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void attack_cell::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void attack_cell::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float attack_cell::y() const {
  return y_;
}
inline void attack_cell::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// attack_req

// required uint32 skill_id = 1;
inline bool attack_req::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void attack_req::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void attack_req::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void attack_req::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 attack_req::skill_id() const {
  return skill_id_;
}
inline void attack_req::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// repeated .client.role_data rd = 2;
inline int attack_req::rd_size() const {
  return rd_.size();
}
inline void attack_req::clear_rd() {
  rd_.Clear();
}
inline const ::client::role_data& attack_req::rd(int index) const {
  return rd_.Get(index);
}
inline ::client::role_data* attack_req::mutable_rd(int index) {
  return rd_.Mutable(index);
}
inline ::client::role_data* attack_req::add_rd() {
  return rd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::role_data >&
attack_req::rd() const {
  return rd_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::role_data >*
attack_req::mutable_rd() {
  return &rd_;
}

// optional .client.attack_cell ac = 3;
inline bool attack_req::has_ac() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void attack_req::set_has_ac() {
  _has_bits_[0] |= 0x00000004u;
}
inline void attack_req::clear_has_ac() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void attack_req::clear_ac() {
  if (ac_ != NULL) ac_->::client::attack_cell::Clear();
  clear_has_ac();
}
inline const ::client::attack_cell& attack_req::ac() const {
  return ac_ != NULL ? *ac_ : *default_instance_->ac_;
}
inline ::client::attack_cell* attack_req::mutable_ac() {
  set_has_ac();
  if (ac_ == NULL) ac_ = new ::client::attack_cell;
  return ac_;
}
inline ::client::attack_cell* attack_req::release_ac() {
  clear_has_ac();
  ::client::attack_cell* temp = ac_;
  ac_ = NULL;
  return temp;
}
inline void attack_req::set_allocated_ac(::client::attack_cell* ac) {
  delete ac_;
  ac_ = ac;
  if (ac) {
    set_has_ac();
  } else {
    clear_has_ac();
  }
}

// required uint32 id = 4;
inline bool attack_req::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void attack_req::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void attack_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void attack_req::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 attack_req::id() const {
  return id_;
}
inline void attack_req::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool attack_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void attack_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void attack_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void attack_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& attack_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* attack_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* attack_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void attack_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// attack_collision_data

// required uint32 move_speed = 1;
inline bool attack_collision_data::has_move_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void attack_collision_data::set_has_move_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void attack_collision_data::clear_has_move_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void attack_collision_data::clear_move_speed() {
  move_speed_ = 0u;
  clear_has_move_speed();
}
inline ::google::protobuf::uint32 attack_collision_data::move_speed() const {
  return move_speed_;
}
inline void attack_collision_data::set_move_speed(::google::protobuf::uint32 value) {
  set_has_move_speed();
  move_speed_ = value;
}

// required .client.client_map_pos pos = 2;
inline bool attack_collision_data::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void attack_collision_data::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void attack_collision_data::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void attack_collision_data::clear_pos() {
  if (pos_ != NULL) pos_->::client::client_map_pos::Clear();
  clear_has_pos();
}
inline const ::client::client_map_pos& attack_collision_data::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::client::client_map_pos* attack_collision_data::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::client::client_map_pos;
  return pos_;
}
inline ::client::client_map_pos* attack_collision_data::release_pos() {
  clear_has_pos();
  ::client::client_map_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void attack_collision_data::set_allocated_pos(::client::client_map_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// -------------------------------------------------------------------

// fight_data

// optional .client.role_data dst_rd = 1;
inline bool fight_data::has_dst_rd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fight_data::set_has_dst_rd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fight_data::clear_has_dst_rd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fight_data::clear_dst_rd() {
  if (dst_rd_ != NULL) dst_rd_->::client::role_data::Clear();
  clear_has_dst_rd();
}
inline const ::client::role_data& fight_data::dst_rd() const {
  return dst_rd_ != NULL ? *dst_rd_ : *default_instance_->dst_rd_;
}
inline ::client::role_data* fight_data::mutable_dst_rd() {
  set_has_dst_rd();
  if (dst_rd_ == NULL) dst_rd_ = new ::client::role_data;
  return dst_rd_;
}
inline ::client::role_data* fight_data::release_dst_rd() {
  clear_has_dst_rd();
  ::client::role_data* temp = dst_rd_;
  dst_rd_ = NULL;
  return temp;
}
inline void fight_data::set_allocated_dst_rd(::client::role_data* dst_rd) {
  delete dst_rd_;
  dst_rd_ = dst_rd;
  if (dst_rd) {
    set_has_dst_rd();
  } else {
    clear_has_dst_rd();
  }
}

// required .client.fight_data.TYPE fight_type = 2;
inline bool fight_data::has_fight_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fight_data::set_has_fight_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fight_data::clear_has_fight_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fight_data::clear_fight_type() {
  fight_type_ = 0;
  clear_has_fight_type();
}
inline ::client::fight_data_TYPE fight_data::fight_type() const {
  return static_cast< ::client::fight_data_TYPE >(fight_type_);
}
inline void fight_data::set_fight_type(::client::fight_data_TYPE value) {
  assert(::client::fight_data_TYPE_IsValid(value));
  set_has_fight_type();
  fight_type_ = value;
}

// optional uint32 critical = 3;
inline bool fight_data::has_critical() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fight_data::set_has_critical() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fight_data::clear_has_critical() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fight_data::clear_critical() {
  critical_ = 0u;
  clear_has_critical();
}
inline ::google::protobuf::uint32 fight_data::critical() const {
  return critical_;
}
inline void fight_data::set_critical(::google::protobuf::uint32 value) {
  set_has_critical();
  critical_ = value;
}

// optional uint32 data = 4;
inline bool fight_data::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fight_data::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fight_data::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fight_data::clear_data() {
  data_ = 0u;
  clear_has_data();
}
inline ::google::protobuf::uint32 fight_data::data() const {
  return data_;
}
inline void fight_data::set_data(::google::protobuf::uint32 value) {
  set_has_data();
  data_ = value;
}

// optional .client.attack_collision_data acd = 5;
inline bool fight_data::has_acd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fight_data::set_has_acd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fight_data::clear_has_acd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fight_data::clear_acd() {
  if (acd_ != NULL) acd_->::client::attack_collision_data::Clear();
  clear_has_acd();
}
inline const ::client::attack_collision_data& fight_data::acd() const {
  return acd_ != NULL ? *acd_ : *default_instance_->acd_;
}
inline ::client::attack_collision_data* fight_data::mutable_acd() {
  set_has_acd();
  if (acd_ == NULL) acd_ = new ::client::attack_collision_data;
  return acd_;
}
inline ::client::attack_collision_data* fight_data::release_acd() {
  clear_has_acd();
  ::client::attack_collision_data* temp = acd_;
  acd_ = NULL;
  return temp;
}
inline void fight_data::set_allocated_acd(::client::attack_collision_data* acd) {
  delete acd_;
  acd_ = acd;
  if (acd) {
    set_has_acd();
  } else {
    clear_has_acd();
  }
}

// optional bool dead = 6;
inline bool fight_data::has_dead() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void fight_data::set_has_dead() {
  _has_bits_[0] |= 0x00000020u;
}
inline void fight_data::clear_has_dead() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void fight_data::clear_dead() {
  dead_ = false;
  clear_has_dead();
}
inline bool fight_data::dead() const {
  return dead_;
}
inline void fight_data::set_dead(bool value) {
  set_has_dead();
  dead_ = value;
}

// optional .client.client_map_pos pos = 7;
inline bool fight_data::has_pos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void fight_data::set_has_pos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void fight_data::clear_has_pos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void fight_data::clear_pos() {
  if (pos_ != NULL) pos_->::client::client_map_pos::Clear();
  clear_has_pos();
}
inline const ::client::client_map_pos& fight_data::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::client::client_map_pos* fight_data::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::client::client_map_pos;
  return pos_;
}
inline ::client::client_map_pos* fight_data::release_pos() {
  clear_has_pos();
  ::client::client_map_pos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void fight_data::set_allocated_pos(::client::client_map_pos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional uint32 cur_hp = 8;
inline bool fight_data::has_cur_hp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void fight_data::set_has_cur_hp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void fight_data::clear_has_cur_hp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void fight_data::clear_cur_hp() {
  cur_hp_ = 0u;
  clear_has_cur_hp();
}
inline ::google::protobuf::uint32 fight_data::cur_hp() const {
  return cur_hp_;
}
inline void fight_data::set_cur_hp(::google::protobuf::uint32 value) {
  set_has_cur_hp();
  cur_hp_ = value;
}

// -------------------------------------------------------------------

// attack_rsp

// required .client.role_data src_rd = 1;
inline bool attack_rsp::has_src_rd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void attack_rsp::set_has_src_rd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void attack_rsp::clear_has_src_rd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void attack_rsp::clear_src_rd() {
  if (src_rd_ != NULL) src_rd_->::client::role_data::Clear();
  clear_has_src_rd();
}
inline const ::client::role_data& attack_rsp::src_rd() const {
  return src_rd_ != NULL ? *src_rd_ : *default_instance_->src_rd_;
}
inline ::client::role_data* attack_rsp::mutable_src_rd() {
  set_has_src_rd();
  if (src_rd_ == NULL) src_rd_ = new ::client::role_data;
  return src_rd_;
}
inline ::client::role_data* attack_rsp::release_src_rd() {
  clear_has_src_rd();
  ::client::role_data* temp = src_rd_;
  src_rd_ = NULL;
  return temp;
}
inline void attack_rsp::set_allocated_src_rd(::client::role_data* src_rd) {
  delete src_rd_;
  src_rd_ = src_rd;
  if (src_rd) {
    set_has_src_rd();
  } else {
    clear_has_src_rd();
  }
}

// optional .client.attack_cell ac = 2;
inline bool attack_rsp::has_ac() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void attack_rsp::set_has_ac() {
  _has_bits_[0] |= 0x00000002u;
}
inline void attack_rsp::clear_has_ac() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void attack_rsp::clear_ac() {
  if (ac_ != NULL) ac_->::client::attack_cell::Clear();
  clear_has_ac();
}
inline const ::client::attack_cell& attack_rsp::ac() const {
  return ac_ != NULL ? *ac_ : *default_instance_->ac_;
}
inline ::client::attack_cell* attack_rsp::mutable_ac() {
  set_has_ac();
  if (ac_ == NULL) ac_ = new ::client::attack_cell;
  return ac_;
}
inline ::client::attack_cell* attack_rsp::release_ac() {
  clear_has_ac();
  ::client::attack_cell* temp = ac_;
  ac_ = NULL;
  return temp;
}
inline void attack_rsp::set_allocated_ac(::client::attack_cell* ac) {
  delete ac_;
  ac_ = ac;
  if (ac) {
    set_has_ac();
  } else {
    clear_has_ac();
  }
}

// required uint32 skill_id = 3;
inline bool attack_rsp::has_skill_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void attack_rsp::set_has_skill_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void attack_rsp::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void attack_rsp::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 attack_rsp::skill_id() const {
  return skill_id_;
}
inline void attack_rsp::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// repeated .client.fight_data fd = 4;
inline int attack_rsp::fd_size() const {
  return fd_.size();
}
inline void attack_rsp::clear_fd() {
  fd_.Clear();
}
inline const ::client::fight_data& attack_rsp::fd(int index) const {
  return fd_.Get(index);
}
inline ::client::fight_data* attack_rsp::mutable_fd(int index) {
  return fd_.Mutable(index);
}
inline ::client::fight_data* attack_rsp::add_fd() {
  return fd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::fight_data >&
attack_rsp::fd() const {
  return fd_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::fight_data >*
attack_rsp::mutable_fd() {
  return &fd_;
}

// required uint32 id = 5;
inline bool attack_rsp::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void attack_rsp::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void attack_rsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void attack_rsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 attack_rsp::id() const {
  return id_;
}
inline void attack_rsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bool def = 6;
inline bool attack_rsp::has_def() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void attack_rsp::set_has_def() {
  _has_bits_[0] |= 0x00000020u;
}
inline void attack_rsp::clear_has_def() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void attack_rsp::clear_def() {
  def_ = false;
  clear_has_def();
}
inline bool attack_rsp::def() const {
  return def_;
}
inline void attack_rsp::set_def(bool value) {
  set_has_def();
  def_ = value;
}

// -------------------------------------------------------------------

// nearby_npc_pos_req

// required uint32 unixtime = 1;
inline bool nearby_npc_pos_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nearby_npc_pos_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void nearby_npc_pos_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void nearby_npc_pos_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 nearby_npc_pos_req::unixtime() const {
  return unixtime_;
}
inline void nearby_npc_pos_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool nearby_npc_pos_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nearby_npc_pos_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nearby_npc_pos_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nearby_npc_pos_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& nearby_npc_pos_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* nearby_npc_pos_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* nearby_npc_pos_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void nearby_npc_pos_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// nearby_npc_pos_rsp

// repeated .client.client_map_pos pos = 1;
inline int nearby_npc_pos_rsp::pos_size() const {
  return pos_.size();
}
inline void nearby_npc_pos_rsp::clear_pos() {
  pos_.Clear();
}
inline const ::client::client_map_pos& nearby_npc_pos_rsp::pos(int index) const {
  return pos_.Get(index);
}
inline ::client::client_map_pos* nearby_npc_pos_rsp::mutable_pos(int index) {
  return pos_.Mutable(index);
}
inline ::client::client_map_pos* nearby_npc_pos_rsp::add_pos() {
  return pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::client_map_pos >&
nearby_npc_pos_rsp::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::client_map_pos >*
nearby_npc_pos_rsp::mutable_pos() {
  return &pos_;
}

// required uint32 ret = 2;
inline bool nearby_npc_pos_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nearby_npc_pos_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void nearby_npc_pos_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void nearby_npc_pos_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 nearby_npc_pos_rsp::ret() const {
  return ret_;
}
inline void nearby_npc_pos_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// hate_list

// repeated .client.role_name target = 1;
inline int hate_list::target_size() const {
  return target_.size();
}
inline void hate_list::clear_target() {
  target_.Clear();
}
inline const ::client::role_name& hate_list::target(int index) const {
  return target_.Get(index);
}
inline ::client::role_name* hate_list::mutable_target(int index) {
  return target_.Mutable(index);
}
inline ::client::role_name* hate_list::add_target() {
  return target_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::role_name >&
hate_list::target() const {
  return target_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::role_name >*
hate_list::mutable_target() {
  return &target_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::fight_data_TYPE>() {
  return ::client::fight_data_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eattack_2eproto__INCLUDED
