// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.auth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* auth_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auth_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* auth_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auth_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AUTH_RET_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eauth_2eproto() {
  protobuf_AddDesc_client_2eauth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.auth.proto");
  GOOGLE_CHECK(file != NULL);
  auth_req_descriptor_ = file->message_type(0);
  static const int auth_req_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, openkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, yel_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, effect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, pf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, did_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, app_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, app_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, nm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, mno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, svr_head_),
  };
  auth_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auth_req_descriptor_,
      auth_req::default_instance_,
      auth_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auth_req));
  auth_rsp_descriptor_ = file->message_type(1);
  static const int auth_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_rsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_rsp, svrtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_rsp, role_info_),
  };
  auth_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auth_rsp_descriptor_,
      auth_rsp::default_instance_,
      auth_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auth_rsp));
  AUTH_RET_E_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eauth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auth_req_descriptor_, &auth_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auth_rsp_descriptor_, &auth_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eauth_2eproto() {
  delete auth_req::default_instance_;
  delete auth_req_reflection_;
  delete auth_rsp::default_instance_;
  delete auth_rsp_reflection_;
}

void protobuf_AddDesc_client_2eauth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecreate_5frole_2eproto();
  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021client.auth.proto\022\006client\032\030client.crea"
    "te_role.proto\032\021client.comm.proto\"\342\002\n\010aut"
    "h_req\022\016\n\006openid\030\001 \002(\t\022\017\n\007openkey\030\002 \002(\t\022\017"
    "\n\007yel_vip\030\003 \002(\r\022\014\n\004sign\030\004 \002(\t\022\016\n\006svr_id\030"
    "\005 \002(\r\022\023\n\013effect_time\030\006 \001(\r\022\n\n\002pf\030\007 \001(\t\022\026"
    "\n\013platform_id\030\010 \001(\r:\0010\022\013\n\003sid\030\t \001(\t\022\013\n\003d"
    "id\030\n \001(\t\022\022\n\nchannel_id\030\013 \001(\t\022\023\n\013app_vers"
    "ion\030\014 \001(\t\022\020\n\010app_type\030\r \001(\t\022\016\n\006device\030\016 "
    "\001(\t\022\n\n\002nm\030\017 \001(\t\022\013\n\003mno\030\020 \001(\t\022\016\n\006screen\030\021"
    " \001(\t\022\n\n\002os\030\022 \001(\t\022\013\n\003mac\030\023 \001(\t\022&\n\010svr_hea"
    "d\030\350\007 \001(\0132\023.client.server_head\"w\n\010auth_rs"
    "p\022\017\n\007user_id\030\001 \002(\r\022\037\n\003ret\030\002 \002(\0162\022.client"
    ".AUTH_RET_E\022\017\n\007svrtime\030\003 \002(\r\022(\n\trole_inf"
    "o\030\004 \003(\0132\025.client.role_info_rsp*a\n\nAUTH_R"
    "ET_E\022\017\n\013ARE_SUCCESS\020\001\022\016\n\nARE_LOCKED\020\002\022\016\n"
    "\nARE_WALLOW\020\003\022\016\n\nARE_NOPASS\020\004\022\022\n\016ARE_SYS"
    "TEM_ERR\020\005", 649);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.auth.proto", &protobuf_RegisterTypes);
  auth_req::default_instance_ = new auth_req();
  auth_rsp::default_instance_ = new auth_rsp();
  auth_req::default_instance_->InitAsDefaultInstance();
  auth_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eauth_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eauth_2eproto {
  StaticDescriptorInitializer_client_2eauth_2eproto() {
    protobuf_AddDesc_client_2eauth_2eproto();
  }
} static_descriptor_initializer_client_2eauth_2eproto_;
const ::google::protobuf::EnumDescriptor* AUTH_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AUTH_RET_E_descriptor_;
}
bool AUTH_RET_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int auth_req::kOpenidFieldNumber;
const int auth_req::kOpenkeyFieldNumber;
const int auth_req::kYelVipFieldNumber;
const int auth_req::kSignFieldNumber;
const int auth_req::kSvrIdFieldNumber;
const int auth_req::kEffectTimeFieldNumber;
const int auth_req::kPfFieldNumber;
const int auth_req::kPlatformIdFieldNumber;
const int auth_req::kSidFieldNumber;
const int auth_req::kDidFieldNumber;
const int auth_req::kChannelIdFieldNumber;
const int auth_req::kAppVersionFieldNumber;
const int auth_req::kAppTypeFieldNumber;
const int auth_req::kDeviceFieldNumber;
const int auth_req::kNmFieldNumber;
const int auth_req::kMnoFieldNumber;
const int auth_req::kScreenFieldNumber;
const int auth_req::kOsFieldNumber;
const int auth_req::kMacFieldNumber;
const int auth_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

auth_req::auth_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void auth_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

auth_req::auth_req(const auth_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void auth_req::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yel_vip_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_id_ = 0u;
  effect_time_ = 0u;
  pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_id_ = 0u;
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auth_req::~auth_req() {
  SharedDtor();
}

void auth_req::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete openkey_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    delete pf_;
  }
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (did_ != &::google::protobuf::internal::kEmptyString) {
    delete did_;
  }
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (app_version_ != &::google::protobuf::internal::kEmptyString) {
    delete app_version_;
  }
  if (app_type_ != &::google::protobuf::internal::kEmptyString) {
    delete app_type_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (nm_ != &::google::protobuf::internal::kEmptyString) {
    delete nm_;
  }
  if (mno_ != &::google::protobuf::internal::kEmptyString) {
    delete mno_;
  }
  if (screen_ != &::google::protobuf::internal::kEmptyString) {
    delete screen_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void auth_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auth_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auth_req_descriptor_;
}

const auth_req& auth_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eauth_2eproto();
  return *default_instance_;
}

auth_req* auth_req::default_instance_ = NULL;

auth_req* auth_req::New() const {
  return new auth_req;
}

void auth_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    if (has_openkey()) {
      if (openkey_ != &::google::protobuf::internal::kEmptyString) {
        openkey_->clear();
      }
    }
    yel_vip_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    svr_id_ = 0u;
    effect_time_ = 0u;
    if (has_pf()) {
      if (pf_ != &::google::protobuf::internal::kEmptyString) {
        pf_->clear();
      }
    }
    platform_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
    if (has_did()) {
      if (did_ != &::google::protobuf::internal::kEmptyString) {
        did_->clear();
      }
    }
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
    if (has_app_version()) {
      if (app_version_ != &::google::protobuf::internal::kEmptyString) {
        app_version_->clear();
      }
    }
    if (has_app_type()) {
      if (app_type_ != &::google::protobuf::internal::kEmptyString) {
        app_type_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    if (has_nm()) {
      if (nm_ != &::google::protobuf::internal::kEmptyString) {
        nm_->clear();
      }
    }
    if (has_mno()) {
      if (mno_ != &::google::protobuf::internal::kEmptyString) {
        mno_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_screen()) {
      if (screen_ != &::google::protobuf::internal::kEmptyString) {
        screen_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auth_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openkey;
        break;
      }

      // required string openkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openkey().data(), this->openkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_yel_vip;
        break;
      }

      // required uint32 yel_vip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yel_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yel_vip_)));
          set_has_yel_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }

      // required string sign = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_svr_id;
        break;
      }

      // required uint32 svr_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_id_)));
          set_has_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_effect_time;
        break;
      }

      // optional uint32 effect_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_time_)));
          set_has_effect_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pf;
        break;
      }

      // optional string pf = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pf().data(), this->pf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_platform_id;
        break;
      }

      // optional uint32 platform_id = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sid;
        break;
      }

      // optional string sid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_did;
        break;
      }

      // optional string did = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_did:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_did()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->did().data(), this->did().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_channel_id;
        break;
      }

      // optional string channel_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_app_version;
        break;
      }

      // optional string app_version = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_version().data(), this->app_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_app_type;
        break;
      }

      // optional string app_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_type().data(), this->app_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_device;
        break;
      }

      // optional string device = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_nm;
        break;
      }

      // optional string nm = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nm().data(), this->nm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_mno;
        break;
      }

      // optional string mno = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mno().data(), this->mno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_screen;
        break;
      }

      // optional string screen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_screen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->screen().data(), this->screen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_os;
        break;
      }

      // optional string os = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_mac;
        break;
      }

      // optional string mac = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void auth_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(), output);
  }

  // required string openkey = 2;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openkey(), output);
  }

  // required uint32 yel_vip = 3;
  if (has_yel_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->yel_vip(), output);
  }

  // required string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sign(), output);
  }

  // required uint32 svr_id = 5;
  if (has_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->svr_id(), output);
  }

  // optional uint32 effect_time = 6;
  if (has_effect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->effect_time(), output);
  }

  // optional string pf = 7;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->pf(), output);
  }

  // optional uint32 platform_id = 8 [default = 0];
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->platform_id(), output);
  }

  // optional string sid = 9;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->sid(), output);
  }

  // optional string did = 10;
  if (has_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->did().data(), this->did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->did(), output);
  }

  // optional string channel_id = 11;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->channel_id(), output);
  }

  // optional string app_version = 12;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_version().data(), this->app_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->app_version(), output);
  }

  // optional string app_type = 13;
  if (has_app_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_type().data(), this->app_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->app_type(), output);
  }

  // optional string device = 14;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->device(), output);
  }

  // optional string nm = 15;
  if (has_nm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nm().data(), this->nm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->nm(), output);
  }

  // optional string mno = 16;
  if (has_mno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mno().data(), this->mno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->mno(), output);
  }

  // optional string screen = 17;
  if (has_screen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->screen().data(), this->screen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->screen(), output);
  }

  // optional string os = 18;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->os(), output);
  }

  // optional string mac = 19;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->mac(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* auth_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // required string openkey = 2;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openkey(), target);
  }

  // required uint32 yel_vip = 3;
  if (has_yel_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->yel_vip(), target);
  }

  // required string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign(), target);
  }

  // required uint32 svr_id = 5;
  if (has_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->svr_id(), target);
  }

  // optional uint32 effect_time = 6;
  if (has_effect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->effect_time(), target);
  }

  // optional string pf = 7;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pf(), target);
  }

  // optional uint32 platform_id = 8 [default = 0];
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->platform_id(), target);
  }

  // optional string sid = 9;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sid(), target);
  }

  // optional string did = 10;
  if (has_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->did().data(), this->did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->did(), target);
  }

  // optional string channel_id = 11;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->channel_id(), target);
  }

  // optional string app_version = 12;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_version().data(), this->app_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->app_version(), target);
  }

  // optional string app_type = 13;
  if (has_app_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_type().data(), this->app_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->app_type(), target);
  }

  // optional string device = 14;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->device(), target);
  }

  // optional string nm = 15;
  if (has_nm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nm().data(), this->nm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->nm(), target);
  }

  // optional string mno = 16;
  if (has_mno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mno().data(), this->mno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->mno(), target);
  }

  // optional string screen = 17;
  if (has_screen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->screen().data(), this->screen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->screen(), target);
  }

  // optional string os = 18;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->os(), target);
  }

  // optional string mac = 19;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->mac(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int auth_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string openid = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required string openkey = 2;
    if (has_openkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openkey());
    }

    // required uint32 yel_vip = 3;
    if (has_yel_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yel_vip());
    }

    // required string sign = 4;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // required uint32 svr_id = 5;
    if (has_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_id());
    }

    // optional uint32 effect_time = 6;
    if (has_effect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_time());
    }

    // optional string pf = 7;
    if (has_pf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pf());
    }

    // optional uint32 platform_id = 8 [default = 0];
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string sid = 9;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // optional string did = 10;
    if (has_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->did());
    }

    // optional string channel_id = 11;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // optional string app_version = 12;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_version());
    }

    // optional string app_type = 13;
    if (has_app_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_type());
    }

    // optional string device = 14;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional string nm = 15;
    if (has_nm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nm());
    }

    // optional string mno = 16;
    if (has_mno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mno());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string screen = 17;
    if (has_screen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->screen());
    }

    // optional string os = 18;
    if (has_os()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string mac = 19;
    if (has_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auth_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auth_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auth_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auth_req::MergeFrom(const auth_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_openkey()) {
      set_openkey(from.openkey());
    }
    if (from.has_yel_vip()) {
      set_yel_vip(from.yel_vip());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_svr_id()) {
      set_svr_id(from.svr_id());
    }
    if (from.has_effect_time()) {
      set_effect_time(from.effect_time());
    }
    if (from.has_pf()) {
      set_pf(from.pf());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_did()) {
      set_did(from.did());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_app_version()) {
      set_app_version(from.app_version());
    }
    if (from.has_app_type()) {
      set_app_type(from.app_type());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_nm()) {
      set_nm(from.nm());
    }
    if (from.has_mno()) {
      set_mno(from.mno());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_screen()) {
      set_screen(from.screen());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auth_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auth_req::CopyFrom(const auth_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auth_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void auth_req::Swap(auth_req* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(openkey_, other->openkey_);
    std::swap(yel_vip_, other->yel_vip_);
    std::swap(sign_, other->sign_);
    std::swap(svr_id_, other->svr_id_);
    std::swap(effect_time_, other->effect_time_);
    std::swap(pf_, other->pf_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(sid_, other->sid_);
    std::swap(did_, other->did_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(app_version_, other->app_version_);
    std::swap(app_type_, other->app_type_);
    std::swap(device_, other->device_);
    std::swap(nm_, other->nm_);
    std::swap(mno_, other->mno_);
    std::swap(screen_, other->screen_);
    std::swap(os_, other->os_);
    std::swap(mac_, other->mac_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auth_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auth_req_descriptor_;
  metadata.reflection = auth_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auth_rsp::kUserIdFieldNumber;
const int auth_rsp::kRetFieldNumber;
const int auth_rsp::kSvrtimeFieldNumber;
const int auth_rsp::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

auth_rsp::auth_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void auth_rsp::InitAsDefaultInstance() {
}

auth_rsp::auth_rsp(const auth_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void auth_rsp::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  ret_ = 1;
  svrtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auth_rsp::~auth_rsp() {
  SharedDtor();
}

void auth_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void auth_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auth_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auth_rsp_descriptor_;
}

const auth_rsp& auth_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eauth_2eproto();
  return *default_instance_;
}

auth_rsp* auth_rsp::default_instance_ = NULL;

auth_rsp* auth_rsp::New() const {
  return new auth_rsp;
}

void auth_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    ret_ = 1;
    svrtime_ = 0u;
  }
  role_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auth_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // required .client.AUTH_RET_E ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::AUTH_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::AUTH_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_svrtime;
        break;
      }

      // required uint32 svrtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtime_)));
          set_has_svrtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_info;
        break;
      }

      // repeated .client.role_info_rsp role_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void auth_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .client.AUTH_RET_E ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  // required uint32 svrtime = 3;
  if (has_svrtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->svrtime(), output);
  }

  // repeated .client.role_info_rsp role_info = 4;
  for (int i = 0; i < this->role_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->role_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* auth_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .client.AUTH_RET_E ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  // required uint32 svrtime = 3;
  if (has_svrtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->svrtime(), target);
  }

  // repeated .client.role_info_rsp role_info = 4;
  for (int i = 0; i < this->role_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->role_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int auth_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .client.AUTH_RET_E ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // required uint32 svrtime = 3;
    if (has_svrtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtime());
    }

  }
  // repeated .client.role_info_rsp role_info = 4;
  total_size += 1 * this->role_info_size();
  for (int i = 0; i < this->role_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auth_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auth_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auth_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auth_rsp::MergeFrom(const auth_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_info_.MergeFrom(from.role_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_svrtime()) {
      set_svrtime(from.svrtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auth_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auth_rsp::CopyFrom(const auth_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auth_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < role_info_size(); i++) {
    if (!this->role_info(i).IsInitialized()) return false;
  }
  return true;
}

void auth_rsp::Swap(auth_rsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(ret_, other->ret_);
    std::swap(svrtime_, other->svrtime_);
    role_info_.Swap(&other->role_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auth_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auth_rsp_descriptor_;
  metadata.reflection = auth_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
