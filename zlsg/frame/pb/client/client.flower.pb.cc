// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.flower.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.flower.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* send_flower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_flower_reflection_ = NULL;
const ::google::protobuf::Descriptor* send_flower_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_flower_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* recive_flower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  recive_flower_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FLOWER_NUMBER_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SEND_FLOWER_TYPE_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SEND_FLOWER_RET_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eflower_2eproto() {
  protobuf_AddDesc_client_2eflower_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.flower.proto");
  GOOGLE_CHECK(file != NULL);
  send_flower_descriptor_ = file->message_type(0);
  static const int send_flower_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_flower, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_flower, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_flower, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_flower, dst_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_flower, svr_head_),
  };
  send_flower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_flower_descriptor_,
      send_flower::default_instance_,
      send_flower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_flower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_flower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_flower));
  send_flower_rsp_descriptor_ = file->message_type(1);
  static const int send_flower_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_flower_rsp, ret_),
  };
  send_flower_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_flower_rsp_descriptor_,
      send_flower_rsp::default_instance_,
      send_flower_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_flower_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_flower_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_flower_rsp));
  recive_flower_descriptor_ = file->message_type(2);
  static const int recive_flower_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recive_flower, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recive_flower, sender_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recive_flower, reciver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recive_flower, reciver_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recive_flower, number_),
  };
  recive_flower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      recive_flower_descriptor_,
      recive_flower::default_instance_,
      recive_flower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recive_flower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(recive_flower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(recive_flower));
  FLOWER_NUMBER_TYPE_E_descriptor_ = file->enum_type(0);
  SEND_FLOWER_TYPE_E_descriptor_ = file->enum_type(1);
  SEND_FLOWER_RET_E_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eflower_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_flower_descriptor_, &send_flower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_flower_rsp_descriptor_, &send_flower_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    recive_flower_descriptor_, &recive_flower::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eflower_2eproto() {
  delete send_flower::default_instance_;
  delete send_flower_reflection_;
  delete send_flower_rsp::default_instance_;
  delete send_flower_rsp_reflection_;
  delete recive_flower::default_instance_;
  delete recive_flower_reflection_;
}

void protobuf_AddDesc_client_2eflower_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023client.flower.proto\022\006client\032\021client.co"
    "mm.proto\"\226\001\n\013send_flower\022\014\n\004name\030\001 \002(\t\022("
    "\n\004type\030\002 \002(\0162\032.client.SEND_FLOWER_TYPE_E"
    "\022\022\n\ngrid_index\030\003 \001(\r\022\023\n\013dst_role_id\030\004 \001("
    "\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_hea"
    "d\"9\n\017send_flower_rsp\022&\n\003ret\030\001 \002(\0162\031.clie"
    "nt.SEND_FLOWER_RET_E\"\217\001\n\rrecive_flower\022\016"
    "\n\006sender\030\001 \001(\t\022\026\n\016sender_role_id\030\002 \002(\r\022\017"
    "\n\007reciver\030\003 \002(\t\022\027\n\017reciver_role_id\030\004 \002(\r"
    "\022,\n\006number\030\005 \002(\0162\034.client.FLOWER_NUMBER_"
    "TYPE_E*Y\n\024FLOWER_NUMBER_TYPE_E\022\014\n\010FNTE_O"
    "NE\020\000\022\n\n\006FNTE_N\020\001\022\013\n\007FNTE_NN\020\002\022\014\n\010FNTE_NN"
    "N\020\003\022\014\n\010FNTE_MAX\020\004*1\n\022SEND_FLOWER_TYPE_E\022"
    "\r\n\tSFTE_NAME\020\000\022\014\n\010SFTE_AMS\020\001*m\n\021SEND_FLO"
    "WER_RET_E\022\020\n\014SFRE_SUCCESS\020\000\022\020\n\014SFRE_OFFL"
    "INE\020\001\022\017\n\013SFRE_NONAME\020\002\022\021\n\rSFRE_NOFLOWER\020"
    "\003\022\020\n\014SFRE_NOMONEY\020\004", 659);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.flower.proto", &protobuf_RegisterTypes);
  send_flower::default_instance_ = new send_flower();
  send_flower_rsp::default_instance_ = new send_flower_rsp();
  recive_flower::default_instance_ = new recive_flower();
  send_flower::default_instance_->InitAsDefaultInstance();
  send_flower_rsp::default_instance_->InitAsDefaultInstance();
  recive_flower::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eflower_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eflower_2eproto {
  StaticDescriptorInitializer_client_2eflower_2eproto() {
    protobuf_AddDesc_client_2eflower_2eproto();
  }
} static_descriptor_initializer_client_2eflower_2eproto_;
const ::google::protobuf::EnumDescriptor* FLOWER_NUMBER_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FLOWER_NUMBER_TYPE_E_descriptor_;
}
bool FLOWER_NUMBER_TYPE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SEND_FLOWER_TYPE_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SEND_FLOWER_TYPE_E_descriptor_;
}
bool SEND_FLOWER_TYPE_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SEND_FLOWER_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SEND_FLOWER_RET_E_descriptor_;
}
bool SEND_FLOWER_RET_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int send_flower::kNameFieldNumber;
const int send_flower::kTypeFieldNumber;
const int send_flower::kGridIndexFieldNumber;
const int send_flower::kDstRoleIdFieldNumber;
const int send_flower::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

send_flower::send_flower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_flower::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

send_flower::send_flower(const send_flower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_flower::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  grid_index_ = 0u;
  dst_role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_flower::~send_flower() {
  SharedDtor();
}

void send_flower::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void send_flower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_flower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_flower_descriptor_;
}

const send_flower& send_flower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eflower_2eproto();
  return *default_instance_;
}

send_flower* send_flower::default_instance_ = NULL;

send_flower* send_flower::New() const {
  return new send_flower;
}

void send_flower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    grid_index_ = 0u;
    dst_role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_flower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .client.SEND_FLOWER_TYPE_E type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::SEND_FLOWER_TYPE_E_IsValid(value)) {
            set_type(static_cast< ::client::SEND_FLOWER_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grid_index;
        break;
      }

      // optional uint32 grid_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_role_id;
        break;
      }

      // optional uint32 dst_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_role_id_)));
          set_has_dst_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void send_flower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .client.SEND_FLOWER_TYPE_E type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 grid_index = 3;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grid_index(), output);
  }

  // optional uint32 dst_role_id = 4;
  if (has_dst_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dst_role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_flower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .client.SEND_FLOWER_TYPE_E type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 grid_index = 3;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grid_index(), target);
  }

  // optional uint32 dst_role_id = 4;
  if (has_dst_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dst_role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_flower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .client.SEND_FLOWER_TYPE_E type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 grid_index = 3;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_index());
    }

    // optional uint32 dst_role_id = 4;
    if (has_dst_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_flower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_flower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_flower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_flower::MergeFrom(const send_flower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_dst_role_id()) {
      set_dst_role_id(from.dst_role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_flower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_flower::CopyFrom(const send_flower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_flower::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void send_flower::Swap(send_flower* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(grid_index_, other->grid_index_);
    std::swap(dst_role_id_, other->dst_role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_flower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_flower_descriptor_;
  metadata.reflection = send_flower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int send_flower_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

send_flower_rsp::send_flower_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_flower_rsp::InitAsDefaultInstance() {
}

send_flower_rsp::send_flower_rsp(const send_flower_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_flower_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_flower_rsp::~send_flower_rsp() {
  SharedDtor();
}

void send_flower_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void send_flower_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_flower_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_flower_rsp_descriptor_;
}

const send_flower_rsp& send_flower_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eflower_2eproto();
  return *default_instance_;
}

send_flower_rsp* send_flower_rsp::default_instance_ = NULL;

send_flower_rsp* send_flower_rsp::New() const {
  return new send_flower_rsp;
}

void send_flower_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_flower_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.SEND_FLOWER_RET_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::SEND_FLOWER_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::SEND_FLOWER_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void send_flower_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.SEND_FLOWER_RET_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_flower_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.SEND_FLOWER_RET_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_flower_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.SEND_FLOWER_RET_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_flower_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_flower_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_flower_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_flower_rsp::MergeFrom(const send_flower_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_flower_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_flower_rsp::CopyFrom(const send_flower_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_flower_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void send_flower_rsp::Swap(send_flower_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_flower_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_flower_rsp_descriptor_;
  metadata.reflection = send_flower_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int recive_flower::kSenderFieldNumber;
const int recive_flower::kSenderRoleIdFieldNumber;
const int recive_flower::kReciverFieldNumber;
const int recive_flower::kReciverRoleIdFieldNumber;
const int recive_flower::kNumberFieldNumber;
#endif  // !_MSC_VER

recive_flower::recive_flower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void recive_flower::InitAsDefaultInstance() {
}

recive_flower::recive_flower(const recive_flower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void recive_flower::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_role_id_ = 0u;
  reciver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reciver_role_id_ = 0u;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

recive_flower::~recive_flower() {
  SharedDtor();
}

void recive_flower::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (reciver_ != &::google::protobuf::internal::kEmptyString) {
    delete reciver_;
  }
  if (this != default_instance_) {
  }
}

void recive_flower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* recive_flower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return recive_flower_descriptor_;
}

const recive_flower& recive_flower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eflower_2eproto();
  return *default_instance_;
}

recive_flower* recive_flower::default_instance_ = NULL;

recive_flower* recive_flower::New() const {
  return new recive_flower;
}

void recive_flower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    sender_role_id_ = 0u;
    if (has_reciver()) {
      if (reciver_ != &::google::protobuf::internal::kEmptyString) {
        reciver_->clear();
      }
    }
    reciver_role_id_ = 0u;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool recive_flower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sender_role_id;
        break;
      }

      // required uint32 sender_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_role_id_)));
          set_has_sender_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reciver;
        break;
      }

      // required string reciver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reciver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reciver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reciver().data(), this->reciver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reciver_role_id;
        break;
      }

      // required uint32 reciver_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reciver_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reciver_role_id_)));
          set_has_reciver_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_number;
        break;
      }

      // required .client.FLOWER_NUMBER_TYPE_E number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FLOWER_NUMBER_TYPE_E_IsValid(value)) {
            set_number(static_cast< ::client::FLOWER_NUMBER_TYPE_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void recive_flower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sender(), output);
  }

  // required uint32 sender_role_id = 2;
  if (has_sender_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sender_role_id(), output);
  }

  // required string reciver = 3;
  if (has_reciver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reciver().data(), this->reciver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->reciver(), output);
  }

  // required uint32 reciver_role_id = 4;
  if (has_reciver_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reciver_role_id(), output);
  }

  // required .client.FLOWER_NUMBER_TYPE_E number = 5;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* recive_flower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // required uint32 sender_role_id = 2;
  if (has_sender_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sender_role_id(), target);
  }

  // required string reciver = 3;
  if (has_reciver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reciver().data(), this->reciver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reciver(), target);
  }

  // required uint32 reciver_role_id = 4;
  if (has_reciver_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reciver_role_id(), target);
  }

  // required .client.FLOWER_NUMBER_TYPE_E number = 5;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int recive_flower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // required uint32 sender_role_id = 2;
    if (has_sender_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sender_role_id());
    }

    // required string reciver = 3;
    if (has_reciver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reciver());
    }

    // required uint32 reciver_role_id = 4;
    if (has_reciver_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reciver_role_id());
    }

    // required .client.FLOWER_NUMBER_TYPE_E number = 5;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void recive_flower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const recive_flower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const recive_flower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void recive_flower::MergeFrom(const recive_flower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_sender_role_id()) {
      set_sender_role_id(from.sender_role_id());
    }
    if (from.has_reciver()) {
      set_reciver(from.reciver());
    }
    if (from.has_reciver_role_id()) {
      set_reciver_role_id(from.reciver_role_id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void recive_flower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recive_flower::CopyFrom(const recive_flower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recive_flower::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void recive_flower::Swap(recive_flower* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(sender_role_id_, other->sender_role_id_);
    std::swap(reciver_, other->reciver_);
    std::swap(reciver_role_id_, other->reciver_role_id_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata recive_flower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = recive_flower_descriptor_;
  metadata.reflection = recive_flower_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
