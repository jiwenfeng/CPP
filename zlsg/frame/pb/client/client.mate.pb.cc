// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.mate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.mate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* mate_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mate_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mate_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mate_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* mate_invite_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mate_invite_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mate_invite_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mate_invite_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* mate_create_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mate_create_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* depth_mate_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  depth_mate_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* depth_mate_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  depth_mate_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* depth_mate_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  depth_mate_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* depth_mate_end_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  depth_mate_end_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* depth_mate_end_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  depth_mate_end_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* mate_remove_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mate_remove_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mate_remove_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mate_remove_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* mate_award_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mate_award_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mate_award_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mate_award_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* mate_award_via_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mate_award_via_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MATE_OPERATE_RET_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2emate_2eproto() {
  protobuf_AddDesc_client_2emate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.mate.proto");
  GOOGLE_CHECK(file != NULL);
  mate_info_req_descriptor_ = file->message_type(0);
  static const int mate_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_req, svr_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_req, svr_head_),
  };
  mate_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mate_info_req_descriptor_,
      mate_info_req::default_instance_,
      mate_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mate_info_req));
  mate_info_rsp_descriptor_ = file->message_type(1);
  static const int mate_info_rsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_rsp, mate_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_rsp, today_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_rsp, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_rsp, miss_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_rsp, total_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_rsp, depth_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_rsp, advance_depth_),
  };
  mate_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mate_info_rsp_descriptor_,
      mate_info_rsp::default_instance_,
      mate_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mate_info_rsp));
  mate_invite_req_descriptor_ = file->message_type(2);
  static const int mate_invite_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_invite_req, mate_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_invite_req, svr_head_),
  };
  mate_invite_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mate_invite_req_descriptor_,
      mate_invite_req::default_instance_,
      mate_invite_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_invite_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_invite_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mate_invite_req));
  mate_invite_rsp_descriptor_ = file->message_type(3);
  static const int mate_invite_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_invite_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_invite_rsp, mate_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_invite_rsp, svr_head_),
  };
  mate_invite_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mate_invite_rsp_descriptor_,
      mate_invite_rsp::default_instance_,
      mate_invite_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_invite_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_invite_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mate_invite_rsp));
  mate_create_msg_descriptor_ = file->message_type(4);
  static const int mate_create_msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_create_msg, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_create_msg, mate_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_create_msg, ret_),
  };
  mate_create_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mate_create_msg_descriptor_,
      mate_create_msg::default_instance_,
      mate_create_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_create_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_create_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mate_create_msg));
  depth_mate_req_descriptor_ = file->message_type(5);
  static const int depth_mate_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_req, svr_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_req, advanced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_req, svr_head_),
  };
  depth_mate_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      depth_mate_req_descriptor_,
      depth_mate_req::default_instance_,
      depth_mate_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(depth_mate_req));
  depth_mate_msg_descriptor_ = file->message_type(6);
  static const int depth_mate_msg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_msg, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_msg, mate_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_msg, need_ingot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_msg, ret_),
  };
  depth_mate_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      depth_mate_msg_descriptor_,
      depth_mate_msg::default_instance_,
      depth_mate_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(depth_mate_msg));
  depth_mate_rsp_descriptor_ = file->message_type(7);
  static const int depth_mate_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_rsp, advanced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_rsp, svr_head_),
  };
  depth_mate_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      depth_mate_rsp_descriptor_,
      depth_mate_rsp::default_instance_,
      depth_mate_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(depth_mate_rsp));
  depth_mate_end_req_descriptor_ = file->message_type(8);
  static const int depth_mate_end_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_end_req, svr_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_end_req, svr_head_),
  };
  depth_mate_end_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      depth_mate_end_req_descriptor_,
      depth_mate_end_req::default_instance_,
      depth_mate_end_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_end_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_end_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(depth_mate_end_req));
  depth_mate_end_msg_descriptor_ = file->message_type(9);
  static const int depth_mate_end_msg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_end_msg, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_end_msg, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_end_msg, mate_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_end_msg, advanced_),
  };
  depth_mate_end_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      depth_mate_end_msg_descriptor_,
      depth_mate_end_msg::default_instance_,
      depth_mate_end_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_end_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depth_mate_end_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(depth_mate_end_msg));
  mate_remove_req_descriptor_ = file->message_type(10);
  static const int mate_remove_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_remove_req, svr_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_remove_req, svr_head_),
  };
  mate_remove_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mate_remove_req_descriptor_,
      mate_remove_req::default_instance_,
      mate_remove_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_remove_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_remove_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mate_remove_req));
  mate_remove_msg_descriptor_ = file->message_type(11);
  static const int mate_remove_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_remove_msg, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_remove_msg, role_id_),
  };
  mate_remove_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mate_remove_msg_descriptor_,
      mate_remove_msg::default_instance_,
      mate_remove_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_remove_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_remove_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mate_remove_msg));
  mate_award_req_descriptor_ = file->message_type(12);
  static const int mate_award_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_award_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_award_req, svr_head_),
  };
  mate_award_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mate_award_req_descriptor_,
      mate_award_req::default_instance_,
      mate_award_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_award_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_award_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mate_award_req));
  mate_award_rsp_descriptor_ = file->message_type(13);
  static const int mate_award_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_award_rsp, ret_),
  };
  mate_award_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mate_award_rsp_descriptor_,
      mate_award_rsp::default_instance_,
      mate_award_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_award_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_award_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mate_award_rsp));
  mate_award_via_descriptor_ = file->message_type(14);
  static const int mate_award_via_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_award_via, check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_award_via, award_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_award_via, role_id_),
  };
  mate_award_via_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mate_award_via_descriptor_,
      mate_award_via::default_instance_,
      mate_award_via_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_award_via, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mate_award_via, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mate_award_via));
  MATE_OPERATE_RET_E_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2emate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mate_info_req_descriptor_, &mate_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mate_info_rsp_descriptor_, &mate_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mate_invite_req_descriptor_, &mate_invite_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mate_invite_rsp_descriptor_, &mate_invite_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mate_create_msg_descriptor_, &mate_create_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    depth_mate_req_descriptor_, &depth_mate_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    depth_mate_msg_descriptor_, &depth_mate_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    depth_mate_rsp_descriptor_, &depth_mate_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    depth_mate_end_req_descriptor_, &depth_mate_end_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    depth_mate_end_msg_descriptor_, &depth_mate_end_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mate_remove_req_descriptor_, &mate_remove_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mate_remove_msg_descriptor_, &mate_remove_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mate_award_req_descriptor_, &mate_award_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mate_award_rsp_descriptor_, &mate_award_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mate_award_via_descriptor_, &mate_award_via::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2emate_2eproto() {
  delete mate_info_req::default_instance_;
  delete mate_info_req_reflection_;
  delete mate_info_rsp::default_instance_;
  delete mate_info_rsp_reflection_;
  delete mate_invite_req::default_instance_;
  delete mate_invite_req_reflection_;
  delete mate_invite_rsp::default_instance_;
  delete mate_invite_rsp_reflection_;
  delete mate_create_msg::default_instance_;
  delete mate_create_msg_reflection_;
  delete depth_mate_req::default_instance_;
  delete depth_mate_req_reflection_;
  delete depth_mate_msg::default_instance_;
  delete depth_mate_msg_reflection_;
  delete depth_mate_rsp::default_instance_;
  delete depth_mate_rsp_reflection_;
  delete depth_mate_end_req::default_instance_;
  delete depth_mate_end_req_reflection_;
  delete depth_mate_end_msg::default_instance_;
  delete depth_mate_end_msg_reflection_;
  delete mate_remove_req::default_instance_;
  delete mate_remove_req_reflection_;
  delete mate_remove_msg::default_instance_;
  delete mate_remove_msg_reflection_;
  delete mate_award_req::default_instance_;
  delete mate_award_req_reflection_;
  delete mate_award_rsp::default_instance_;
  delete mate_award_rsp_reflection_;
  delete mate_award_via::default_instance_;
  delete mate_award_via_reflection_;
}

void protobuf_AddDesc_client_2emate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021client.mate.proto\022\006client\032\021client.comm"
    ".proto\"I\n\rmate_info_req\022\020\n\010svr_time\030\001 \002("
    "\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_hea"
    "d\"\241\001\n\rmate_info_rsp\022\024\n\014mate_role_id\030\001 \002("
    "\r\022\023\n\013today_times\030\002 \001(\r\022\021\n\tlast_time\030\003 \001("
    "\r\022\022\n\nmiss_times\030\004 \001(\r\022\023\n\013total_times\030\005 \001"
    "(\r\022\022\n\ndepth_time\030\006 \001(\r\022\025\n\radvance_depth\030"
    "\007 \001(\r\"O\n\017mate_invite_req\022\024\n\014mate_role_id"
    "\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.serve"
    "r_head\"x\n\017mate_invite_rsp\022\'\n\003ret\030\001 \002(\0162\032"
    ".client.MATE_OPERATE_RET_E\022\024\n\014mate_role_"
    "id\030\002 \001(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.ser"
    "ver_head\"a\n\017mate_create_msg\022\017\n\007role_id\030\001"
    " \002(\r\022\024\n\014mate_role_id\030\002 \002(\r\022\'\n\003ret\030\003 \002(\0162"
    "\032.client.MATE_OPERATE_RET_E\"b\n\016depth_mat"
    "e_req\022\020\n\010svr_time\030\001 \002(\r\022\026\n\010advanced\030\002 \001("
    "\010:\004true\022&\n\010svr_head\030\350\007 \001(\0132\023.client.serv"
    "er_head\"t\n\016depth_mate_msg\022\017\n\007role_id\030\001 \002"
    "(\r\022\024\n\014mate_role_id\030\002 \002(\r\022\022\n\nneed_ingot\030\003"
    " \002(\010\022\'\n\003ret\030\004 \002(\0162\032.client.MATE_OPERATE_"
    "RET_E\"y\n\016depth_mate_rsp\022\'\n\003ret\030\001 \002(\0162\032.c"
    "lient.MATE_OPERATE_RET_E\022\026\n\010advanced\030\002 \001"
    "(\010:\004true\022&\n\010svr_head\030\350\007 \001(\0132\023.client.ser"
    "ver_head\"N\n\022depth_mate_end_req\022\020\n\010svr_ti"
    "me\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.ser"
    "ver_head\"v\n\022depth_mate_end_msg\022\'\n\003ret\030\001 "
    "\002(\0162\032.client.MATE_OPERATE_RET_E\022\017\n\007role_"
    "id\030\002 \001(\r\022\024\n\014mate_role_id\030\003 \001(\r\022\020\n\010advanc"
    "ed\030\004 \001(\010\"K\n\017mate_remove_req\022\020\n\010svr_time\030"
    "\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server"
    "_head\"N\n\017mate_remove_msg\022\'\n\003ret\030\001 \002(\0162\032."
    "client.MATE_OPERATE_RET_E\022\022\n\007role_id\030\002 \001"
    "(\r:\0010\"F\n\016mate_award_req\022\014\n\004type\030\001 \002(\r\022&\n"
    "\010svr_head\030\350\007 \001(\0132\023.client.server_head\"\035\n"
    "\016mate_award_rsp\022\013\n\003ret\030\001 \002(\r\"B\n\016mate_awa"
    "rd_via\022\r\n\005check\030\001 \002(\010\022\020\n\010award_id\030\002 \002(\r\022"
    "\017\n\007role_id\030\003 \002(\r*\265\003\n\022MATE_OPERATE_RET_E\022"
    "\020\n\014MORE_SUCCESS\020\000\022\025\n\021MORE_MATE_OFFLINE\020\001"
    "\022\023\n\017MORE_MATE_LIMIT\020\002\022\027\n\023MORE_MATERIAL_L"
    "IMIT\020\003\022\023\n\017MORE_MATE_DENEY\020\004\022\027\n\023MORE_INTI"
    "MACY_LIMIT\020\005\022\021\n\rMORE_NO_INGOT\020\006\022\024\n\020MORE_"
    "TIMES_LIMIT\020\007\022\020\n\014MORE_NO_MATE\020\010\022\021\n\rMORE_"
    "IN_DEPTH\020\t\022\021\n\rMORE_HAD_MATE\020\n\022\025\n\021MORE_DS"
    "T_HAD_MATE\020\013\022\027\n\023MORE_CANT_SELF_MATE\020\014\022\027\n"
    "\023MORE_OTHER_NOT_MATE\020\r\022\025\n\021MORE_OPERATE_D"
    "ENY\020\016\022\031\n\025MORE_DEPTH_TIME_LIMIT\020\017\022\025\n\021MORE"
    "_NOT_IN_DEPTH\020\020\022\025\n\021MORE_NEED_ADVANCE\020\021\022\020"
    "\n\014MORE_NO_TAEL\020\022", 1896);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.mate.proto", &protobuf_RegisterTypes);
  mate_info_req::default_instance_ = new mate_info_req();
  mate_info_rsp::default_instance_ = new mate_info_rsp();
  mate_invite_req::default_instance_ = new mate_invite_req();
  mate_invite_rsp::default_instance_ = new mate_invite_rsp();
  mate_create_msg::default_instance_ = new mate_create_msg();
  depth_mate_req::default_instance_ = new depth_mate_req();
  depth_mate_msg::default_instance_ = new depth_mate_msg();
  depth_mate_rsp::default_instance_ = new depth_mate_rsp();
  depth_mate_end_req::default_instance_ = new depth_mate_end_req();
  depth_mate_end_msg::default_instance_ = new depth_mate_end_msg();
  mate_remove_req::default_instance_ = new mate_remove_req();
  mate_remove_msg::default_instance_ = new mate_remove_msg();
  mate_award_req::default_instance_ = new mate_award_req();
  mate_award_rsp::default_instance_ = new mate_award_rsp();
  mate_award_via::default_instance_ = new mate_award_via();
  mate_info_req::default_instance_->InitAsDefaultInstance();
  mate_info_rsp::default_instance_->InitAsDefaultInstance();
  mate_invite_req::default_instance_->InitAsDefaultInstance();
  mate_invite_rsp::default_instance_->InitAsDefaultInstance();
  mate_create_msg::default_instance_->InitAsDefaultInstance();
  depth_mate_req::default_instance_->InitAsDefaultInstance();
  depth_mate_msg::default_instance_->InitAsDefaultInstance();
  depth_mate_rsp::default_instance_->InitAsDefaultInstance();
  depth_mate_end_req::default_instance_->InitAsDefaultInstance();
  depth_mate_end_msg::default_instance_->InitAsDefaultInstance();
  mate_remove_req::default_instance_->InitAsDefaultInstance();
  mate_remove_msg::default_instance_->InitAsDefaultInstance();
  mate_award_req::default_instance_->InitAsDefaultInstance();
  mate_award_rsp::default_instance_->InitAsDefaultInstance();
  mate_award_via::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2emate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2emate_2eproto {
  StaticDescriptorInitializer_client_2emate_2eproto() {
    protobuf_AddDesc_client_2emate_2eproto();
  }
} static_descriptor_initializer_client_2emate_2eproto_;
const ::google::protobuf::EnumDescriptor* MATE_OPERATE_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MATE_OPERATE_RET_E_descriptor_;
}
bool MATE_OPERATE_RET_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int mate_info_req::kSvrTimeFieldNumber;
const int mate_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

mate_info_req::mate_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mate_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

mate_info_req::mate_info_req(const mate_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mate_info_req::SharedCtor() {
  _cached_size_ = 0;
  svr_time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mate_info_req::~mate_info_req() {
  SharedDtor();
}

void mate_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void mate_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mate_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mate_info_req_descriptor_;
}

const mate_info_req& mate_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

mate_info_req* mate_info_req::default_instance_ = NULL;

mate_info_req* mate_info_req::New() const {
  return new mate_info_req;
}

void mate_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mate_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 svr_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mate_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mate_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mate_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 svr_time = 1;
    if (has_svr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mate_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mate_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mate_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mate_info_req::MergeFrom(const mate_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mate_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mate_info_req::CopyFrom(const mate_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mate_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mate_info_req::Swap(mate_info_req* other) {
  if (other != this) {
    std::swap(svr_time_, other->svr_time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mate_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mate_info_req_descriptor_;
  metadata.reflection = mate_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mate_info_rsp::kMateRoleIdFieldNumber;
const int mate_info_rsp::kTodayTimesFieldNumber;
const int mate_info_rsp::kLastTimeFieldNumber;
const int mate_info_rsp::kMissTimesFieldNumber;
const int mate_info_rsp::kTotalTimesFieldNumber;
const int mate_info_rsp::kDepthTimeFieldNumber;
const int mate_info_rsp::kAdvanceDepthFieldNumber;
#endif  // !_MSC_VER

mate_info_rsp::mate_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mate_info_rsp::InitAsDefaultInstance() {
}

mate_info_rsp::mate_info_rsp(const mate_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mate_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  mate_role_id_ = 0u;
  today_times_ = 0u;
  last_time_ = 0u;
  miss_times_ = 0u;
  total_times_ = 0u;
  depth_time_ = 0u;
  advance_depth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mate_info_rsp::~mate_info_rsp() {
  SharedDtor();
}

void mate_info_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mate_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mate_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mate_info_rsp_descriptor_;
}

const mate_info_rsp& mate_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

mate_info_rsp* mate_info_rsp::default_instance_ = NULL;

mate_info_rsp* mate_info_rsp::New() const {
  return new mate_info_rsp;
}

void mate_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mate_role_id_ = 0u;
    today_times_ = 0u;
    last_time_ = 0u;
    miss_times_ = 0u;
    total_times_ = 0u;
    depth_time_ = 0u;
    advance_depth_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mate_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mate_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mate_role_id_)));
          set_has_mate_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_today_times;
        break;
      }

      // optional uint32 today_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_times_)));
          set_has_today_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_time;
        break;
      }

      // optional uint32 last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_miss_times;
        break;
      }

      // optional uint32 miss_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miss_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &miss_times_)));
          set_has_miss_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_times;
        break;
      }

      // optional uint32 total_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_times_)));
          set_has_total_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_depth_time;
        break;
      }

      // optional uint32 depth_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depth_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depth_time_)));
          set_has_depth_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_advance_depth;
        break;
      }

      // optional uint32 advance_depth = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advance_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advance_depth_)));
          set_has_advance_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mate_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mate_role_id = 1;
  if (has_mate_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mate_role_id(), output);
  }

  // optional uint32 today_times = 2;
  if (has_today_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->today_times(), output);
  }

  // optional uint32 last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_time(), output);
  }

  // optional uint32 miss_times = 4;
  if (has_miss_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->miss_times(), output);
  }

  // optional uint32 total_times = 5;
  if (has_total_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_times(), output);
  }

  // optional uint32 depth_time = 6;
  if (has_depth_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->depth_time(), output);
  }

  // optional uint32 advance_depth = 7;
  if (has_advance_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->advance_depth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mate_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mate_role_id = 1;
  if (has_mate_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mate_role_id(), target);
  }

  // optional uint32 today_times = 2;
  if (has_today_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->today_times(), target);
  }

  // optional uint32 last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_time(), target);
  }

  // optional uint32 miss_times = 4;
  if (has_miss_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->miss_times(), target);
  }

  // optional uint32 total_times = 5;
  if (has_total_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_times(), target);
  }

  // optional uint32 depth_time = 6;
  if (has_depth_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->depth_time(), target);
  }

  // optional uint32 advance_depth = 7;
  if (has_advance_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->advance_depth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mate_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mate_role_id = 1;
    if (has_mate_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mate_role_id());
    }

    // optional uint32 today_times = 2;
    if (has_today_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_times());
    }

    // optional uint32 last_time = 3;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time());
    }

    // optional uint32 miss_times = 4;
    if (has_miss_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->miss_times());
    }

    // optional uint32 total_times = 5;
    if (has_total_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_times());
    }

    // optional uint32 depth_time = 6;
    if (has_depth_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depth_time());
    }

    // optional uint32 advance_depth = 7;
    if (has_advance_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advance_depth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mate_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mate_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mate_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mate_info_rsp::MergeFrom(const mate_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mate_role_id()) {
      set_mate_role_id(from.mate_role_id());
    }
    if (from.has_today_times()) {
      set_today_times(from.today_times());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_miss_times()) {
      set_miss_times(from.miss_times());
    }
    if (from.has_total_times()) {
      set_total_times(from.total_times());
    }
    if (from.has_depth_time()) {
      set_depth_time(from.depth_time());
    }
    if (from.has_advance_depth()) {
      set_advance_depth(from.advance_depth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mate_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mate_info_rsp::CopyFrom(const mate_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mate_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mate_info_rsp::Swap(mate_info_rsp* other) {
  if (other != this) {
    std::swap(mate_role_id_, other->mate_role_id_);
    std::swap(today_times_, other->today_times_);
    std::swap(last_time_, other->last_time_);
    std::swap(miss_times_, other->miss_times_);
    std::swap(total_times_, other->total_times_);
    std::swap(depth_time_, other->depth_time_);
    std::swap(advance_depth_, other->advance_depth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mate_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mate_info_rsp_descriptor_;
  metadata.reflection = mate_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mate_invite_req::kMateRoleIdFieldNumber;
const int mate_invite_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

mate_invite_req::mate_invite_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mate_invite_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

mate_invite_req::mate_invite_req(const mate_invite_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mate_invite_req::SharedCtor() {
  _cached_size_ = 0;
  mate_role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mate_invite_req::~mate_invite_req() {
  SharedDtor();
}

void mate_invite_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void mate_invite_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mate_invite_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mate_invite_req_descriptor_;
}

const mate_invite_req& mate_invite_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

mate_invite_req* mate_invite_req::default_instance_ = NULL;

mate_invite_req* mate_invite_req::New() const {
  return new mate_invite_req;
}

void mate_invite_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mate_role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mate_invite_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mate_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mate_role_id_)));
          set_has_mate_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mate_invite_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mate_role_id = 1;
  if (has_mate_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mate_role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mate_invite_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mate_role_id = 1;
  if (has_mate_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mate_role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mate_invite_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mate_role_id = 1;
    if (has_mate_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mate_role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mate_invite_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mate_invite_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mate_invite_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mate_invite_req::MergeFrom(const mate_invite_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mate_role_id()) {
      set_mate_role_id(from.mate_role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mate_invite_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mate_invite_req::CopyFrom(const mate_invite_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mate_invite_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mate_invite_req::Swap(mate_invite_req* other) {
  if (other != this) {
    std::swap(mate_role_id_, other->mate_role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mate_invite_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mate_invite_req_descriptor_;
  metadata.reflection = mate_invite_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mate_invite_rsp::kRetFieldNumber;
const int mate_invite_rsp::kMateRoleIdFieldNumber;
const int mate_invite_rsp::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

mate_invite_rsp::mate_invite_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mate_invite_rsp::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

mate_invite_rsp::mate_invite_rsp(const mate_invite_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mate_invite_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  mate_role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mate_invite_rsp::~mate_invite_rsp() {
  SharedDtor();
}

void mate_invite_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void mate_invite_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mate_invite_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mate_invite_rsp_descriptor_;
}

const mate_invite_rsp& mate_invite_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

mate_invite_rsp* mate_invite_rsp::default_instance_ = NULL;

mate_invite_rsp* mate_invite_rsp::New() const {
  return new mate_invite_rsp;
}

void mate_invite_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    mate_role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mate_invite_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.MATE_OPERATE_RET_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::MATE_OPERATE_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::MATE_OPERATE_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mate_role_id;
        break;
      }

      // optional uint32 mate_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mate_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mate_role_id_)));
          set_has_mate_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mate_invite_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.MATE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 mate_role_id = 2;
  if (has_mate_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mate_role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mate_invite_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.MATE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 mate_role_id = 2;
  if (has_mate_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mate_role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mate_invite_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.MATE_OPERATE_RET_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 mate_role_id = 2;
    if (has_mate_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mate_role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mate_invite_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mate_invite_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mate_invite_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mate_invite_rsp::MergeFrom(const mate_invite_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mate_role_id()) {
      set_mate_role_id(from.mate_role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mate_invite_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mate_invite_rsp::CopyFrom(const mate_invite_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mate_invite_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mate_invite_rsp::Swap(mate_invite_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mate_role_id_, other->mate_role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mate_invite_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mate_invite_rsp_descriptor_;
  metadata.reflection = mate_invite_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mate_create_msg::kRoleIdFieldNumber;
const int mate_create_msg::kMateRoleIdFieldNumber;
const int mate_create_msg::kRetFieldNumber;
#endif  // !_MSC_VER

mate_create_msg::mate_create_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mate_create_msg::InitAsDefaultInstance() {
}

mate_create_msg::mate_create_msg(const mate_create_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mate_create_msg::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  mate_role_id_ = 0u;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mate_create_msg::~mate_create_msg() {
  SharedDtor();
}

void mate_create_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mate_create_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mate_create_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mate_create_msg_descriptor_;
}

const mate_create_msg& mate_create_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

mate_create_msg* mate_create_msg::default_instance_ = NULL;

mate_create_msg* mate_create_msg::New() const {
  return new mate_create_msg;
}

void mate_create_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    mate_role_id_ = 0u;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mate_create_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mate_role_id;
        break;
      }

      // required uint32 mate_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mate_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mate_role_id_)));
          set_has_mate_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required .client.MATE_OPERATE_RET_E ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::MATE_OPERATE_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::MATE_OPERATE_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mate_create_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 mate_role_id = 2;
  if (has_mate_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mate_role_id(), output);
  }

  // required .client.MATE_OPERATE_RET_E ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mate_create_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 mate_role_id = 2;
  if (has_mate_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mate_role_id(), target);
  }

  // required .client.MATE_OPERATE_RET_E ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mate_create_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 mate_role_id = 2;
    if (has_mate_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mate_role_id());
    }

    // required .client.MATE_OPERATE_RET_E ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mate_create_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mate_create_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mate_create_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mate_create_msg::MergeFrom(const mate_create_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_mate_role_id()) {
      set_mate_role_id(from.mate_role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mate_create_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mate_create_msg::CopyFrom(const mate_create_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mate_create_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mate_create_msg::Swap(mate_create_msg* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(mate_role_id_, other->mate_role_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mate_create_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mate_create_msg_descriptor_;
  metadata.reflection = mate_create_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int depth_mate_req::kSvrTimeFieldNumber;
const int depth_mate_req::kAdvancedFieldNumber;
const int depth_mate_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

depth_mate_req::depth_mate_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void depth_mate_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

depth_mate_req::depth_mate_req(const depth_mate_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void depth_mate_req::SharedCtor() {
  _cached_size_ = 0;
  svr_time_ = 0u;
  advanced_ = true;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

depth_mate_req::~depth_mate_req() {
  SharedDtor();
}

void depth_mate_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void depth_mate_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* depth_mate_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return depth_mate_req_descriptor_;
}

const depth_mate_req& depth_mate_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

depth_mate_req* depth_mate_req::default_instance_ = NULL;

depth_mate_req* depth_mate_req::New() const {
  return new depth_mate_req;
}

void depth_mate_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_time_ = 0u;
    advanced_ = true;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool depth_mate_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 svr_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_advanced;
        break;
      }

      // optional bool advanced = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advanced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &advanced_)));
          set_has_advanced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void depth_mate_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_time(), output);
  }

  // optional bool advanced = 2 [default = true];
  if (has_advanced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->advanced(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* depth_mate_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_time(), target);
  }

  // optional bool advanced = 2 [default = true];
  if (has_advanced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->advanced(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int depth_mate_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 svr_time = 1;
    if (has_svr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_time());
    }

    // optional bool advanced = 2 [default = true];
    if (has_advanced()) {
      total_size += 1 + 1;
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void depth_mate_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const depth_mate_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const depth_mate_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void depth_mate_req::MergeFrom(const depth_mate_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
    if (from.has_advanced()) {
      set_advanced(from.advanced());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void depth_mate_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depth_mate_req::CopyFrom(const depth_mate_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depth_mate_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void depth_mate_req::Swap(depth_mate_req* other) {
  if (other != this) {
    std::swap(svr_time_, other->svr_time_);
    std::swap(advanced_, other->advanced_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata depth_mate_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = depth_mate_req_descriptor_;
  metadata.reflection = depth_mate_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int depth_mate_msg::kRoleIdFieldNumber;
const int depth_mate_msg::kMateRoleIdFieldNumber;
const int depth_mate_msg::kNeedIngotFieldNumber;
const int depth_mate_msg::kRetFieldNumber;
#endif  // !_MSC_VER

depth_mate_msg::depth_mate_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void depth_mate_msg::InitAsDefaultInstance() {
}

depth_mate_msg::depth_mate_msg(const depth_mate_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void depth_mate_msg::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  mate_role_id_ = 0u;
  need_ingot_ = false;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

depth_mate_msg::~depth_mate_msg() {
  SharedDtor();
}

void depth_mate_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void depth_mate_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* depth_mate_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return depth_mate_msg_descriptor_;
}

const depth_mate_msg& depth_mate_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

depth_mate_msg* depth_mate_msg::default_instance_ = NULL;

depth_mate_msg* depth_mate_msg::New() const {
  return new depth_mate_msg;
}

void depth_mate_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    mate_role_id_ = 0u;
    need_ingot_ = false;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool depth_mate_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mate_role_id;
        break;
      }

      // required uint32 mate_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mate_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mate_role_id_)));
          set_has_mate_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_need_ingot;
        break;
      }

      // required bool need_ingot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_ingot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_ingot_)));
          set_has_need_ingot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // required .client.MATE_OPERATE_RET_E ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::MATE_OPERATE_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::MATE_OPERATE_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void depth_mate_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 mate_role_id = 2;
  if (has_mate_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mate_role_id(), output);
  }

  // required bool need_ingot = 3;
  if (has_need_ingot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->need_ingot(), output);
  }

  // required .client.MATE_OPERATE_RET_E ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* depth_mate_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 mate_role_id = 2;
  if (has_mate_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mate_role_id(), target);
  }

  // required bool need_ingot = 3;
  if (has_need_ingot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->need_ingot(), target);
  }

  // required .client.MATE_OPERATE_RET_E ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int depth_mate_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 mate_role_id = 2;
    if (has_mate_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mate_role_id());
    }

    // required bool need_ingot = 3;
    if (has_need_ingot()) {
      total_size += 1 + 1;
    }

    // required .client.MATE_OPERATE_RET_E ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void depth_mate_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const depth_mate_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const depth_mate_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void depth_mate_msg::MergeFrom(const depth_mate_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_mate_role_id()) {
      set_mate_role_id(from.mate_role_id());
    }
    if (from.has_need_ingot()) {
      set_need_ingot(from.need_ingot());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void depth_mate_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depth_mate_msg::CopyFrom(const depth_mate_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depth_mate_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void depth_mate_msg::Swap(depth_mate_msg* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(mate_role_id_, other->mate_role_id_);
    std::swap(need_ingot_, other->need_ingot_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata depth_mate_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = depth_mate_msg_descriptor_;
  metadata.reflection = depth_mate_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int depth_mate_rsp::kRetFieldNumber;
const int depth_mate_rsp::kAdvancedFieldNumber;
const int depth_mate_rsp::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

depth_mate_rsp::depth_mate_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void depth_mate_rsp::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

depth_mate_rsp::depth_mate_rsp(const depth_mate_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void depth_mate_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  advanced_ = true;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

depth_mate_rsp::~depth_mate_rsp() {
  SharedDtor();
}

void depth_mate_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void depth_mate_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* depth_mate_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return depth_mate_rsp_descriptor_;
}

const depth_mate_rsp& depth_mate_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

depth_mate_rsp* depth_mate_rsp::default_instance_ = NULL;

depth_mate_rsp* depth_mate_rsp::New() const {
  return new depth_mate_rsp;
}

void depth_mate_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    advanced_ = true;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool depth_mate_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.MATE_OPERATE_RET_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::MATE_OPERATE_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::MATE_OPERATE_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_advanced;
        break;
      }

      // optional bool advanced = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advanced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &advanced_)));
          set_has_advanced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void depth_mate_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.MATE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional bool advanced = 2 [default = true];
  if (has_advanced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->advanced(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* depth_mate_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.MATE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional bool advanced = 2 [default = true];
  if (has_advanced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->advanced(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int depth_mate_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.MATE_OPERATE_RET_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional bool advanced = 2 [default = true];
    if (has_advanced()) {
      total_size += 1 + 1;
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void depth_mate_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const depth_mate_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const depth_mate_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void depth_mate_rsp::MergeFrom(const depth_mate_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_advanced()) {
      set_advanced(from.advanced());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void depth_mate_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depth_mate_rsp::CopyFrom(const depth_mate_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depth_mate_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void depth_mate_rsp::Swap(depth_mate_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(advanced_, other->advanced_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata depth_mate_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = depth_mate_rsp_descriptor_;
  metadata.reflection = depth_mate_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int depth_mate_end_req::kSvrTimeFieldNumber;
const int depth_mate_end_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

depth_mate_end_req::depth_mate_end_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void depth_mate_end_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

depth_mate_end_req::depth_mate_end_req(const depth_mate_end_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void depth_mate_end_req::SharedCtor() {
  _cached_size_ = 0;
  svr_time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

depth_mate_end_req::~depth_mate_end_req() {
  SharedDtor();
}

void depth_mate_end_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void depth_mate_end_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* depth_mate_end_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return depth_mate_end_req_descriptor_;
}

const depth_mate_end_req& depth_mate_end_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

depth_mate_end_req* depth_mate_end_req::default_instance_ = NULL;

depth_mate_end_req* depth_mate_end_req::New() const {
  return new depth_mate_end_req;
}

void depth_mate_end_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool depth_mate_end_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 svr_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void depth_mate_end_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* depth_mate_end_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int depth_mate_end_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 svr_time = 1;
    if (has_svr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void depth_mate_end_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const depth_mate_end_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const depth_mate_end_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void depth_mate_end_req::MergeFrom(const depth_mate_end_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void depth_mate_end_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depth_mate_end_req::CopyFrom(const depth_mate_end_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depth_mate_end_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void depth_mate_end_req::Swap(depth_mate_end_req* other) {
  if (other != this) {
    std::swap(svr_time_, other->svr_time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata depth_mate_end_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = depth_mate_end_req_descriptor_;
  metadata.reflection = depth_mate_end_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int depth_mate_end_msg::kRetFieldNumber;
const int depth_mate_end_msg::kRoleIdFieldNumber;
const int depth_mate_end_msg::kMateRoleIdFieldNumber;
const int depth_mate_end_msg::kAdvancedFieldNumber;
#endif  // !_MSC_VER

depth_mate_end_msg::depth_mate_end_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void depth_mate_end_msg::InitAsDefaultInstance() {
}

depth_mate_end_msg::depth_mate_end_msg(const depth_mate_end_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void depth_mate_end_msg::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  role_id_ = 0u;
  mate_role_id_ = 0u;
  advanced_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

depth_mate_end_msg::~depth_mate_end_msg() {
  SharedDtor();
}

void depth_mate_end_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void depth_mate_end_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* depth_mate_end_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return depth_mate_end_msg_descriptor_;
}

const depth_mate_end_msg& depth_mate_end_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

depth_mate_end_msg* depth_mate_end_msg::default_instance_ = NULL;

depth_mate_end_msg* depth_mate_end_msg::New() const {
  return new depth_mate_end_msg;
}

void depth_mate_end_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    role_id_ = 0u;
    mate_role_id_ = 0u;
    advanced_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool depth_mate_end_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.MATE_OPERATE_RET_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::MATE_OPERATE_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::MATE_OPERATE_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mate_role_id;
        break;
      }

      // optional uint32 mate_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mate_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mate_role_id_)));
          set_has_mate_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_advanced;
        break;
      }

      // optional bool advanced = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advanced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &advanced_)));
          set_has_advanced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void depth_mate_end_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.MATE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // optional uint32 mate_role_id = 3;
  if (has_mate_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mate_role_id(), output);
  }

  // optional bool advanced = 4;
  if (has_advanced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->advanced(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* depth_mate_end_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.MATE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // optional uint32 mate_role_id = 3;
  if (has_mate_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mate_role_id(), target);
  }

  // optional bool advanced = 4;
  if (has_advanced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->advanced(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int depth_mate_end_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.MATE_OPERATE_RET_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 mate_role_id = 3;
    if (has_mate_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mate_role_id());
    }

    // optional bool advanced = 4;
    if (has_advanced()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void depth_mate_end_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const depth_mate_end_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const depth_mate_end_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void depth_mate_end_msg::MergeFrom(const depth_mate_end_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_mate_role_id()) {
      set_mate_role_id(from.mate_role_id());
    }
    if (from.has_advanced()) {
      set_advanced(from.advanced());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void depth_mate_end_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depth_mate_end_msg::CopyFrom(const depth_mate_end_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depth_mate_end_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void depth_mate_end_msg::Swap(depth_mate_end_msg* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(mate_role_id_, other->mate_role_id_);
    std::swap(advanced_, other->advanced_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata depth_mate_end_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = depth_mate_end_msg_descriptor_;
  metadata.reflection = depth_mate_end_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mate_remove_req::kSvrTimeFieldNumber;
const int mate_remove_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

mate_remove_req::mate_remove_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mate_remove_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

mate_remove_req::mate_remove_req(const mate_remove_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mate_remove_req::SharedCtor() {
  _cached_size_ = 0;
  svr_time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mate_remove_req::~mate_remove_req() {
  SharedDtor();
}

void mate_remove_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void mate_remove_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mate_remove_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mate_remove_req_descriptor_;
}

const mate_remove_req& mate_remove_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

mate_remove_req* mate_remove_req::default_instance_ = NULL;

mate_remove_req* mate_remove_req::New() const {
  return new mate_remove_req;
}

void mate_remove_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mate_remove_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 svr_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mate_remove_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mate_remove_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 svr_time = 1;
  if (has_svr_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mate_remove_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 svr_time = 1;
    if (has_svr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mate_remove_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mate_remove_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mate_remove_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mate_remove_req::MergeFrom(const mate_remove_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mate_remove_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mate_remove_req::CopyFrom(const mate_remove_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mate_remove_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mate_remove_req::Swap(mate_remove_req* other) {
  if (other != this) {
    std::swap(svr_time_, other->svr_time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mate_remove_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mate_remove_req_descriptor_;
  metadata.reflection = mate_remove_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mate_remove_msg::kRetFieldNumber;
const int mate_remove_msg::kRoleIdFieldNumber;
#endif  // !_MSC_VER

mate_remove_msg::mate_remove_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mate_remove_msg::InitAsDefaultInstance() {
}

mate_remove_msg::mate_remove_msg(const mate_remove_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mate_remove_msg::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mate_remove_msg::~mate_remove_msg() {
  SharedDtor();
}

void mate_remove_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mate_remove_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mate_remove_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mate_remove_msg_descriptor_;
}

const mate_remove_msg& mate_remove_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

mate_remove_msg* mate_remove_msg::default_instance_ = NULL;

mate_remove_msg* mate_remove_msg::New() const {
  return new mate_remove_msg;
}

void mate_remove_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mate_remove_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.MATE_OPERATE_RET_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::MATE_OPERATE_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::MATE_OPERATE_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mate_remove_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.MATE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 role_id = 2 [default = 0];
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mate_remove_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.MATE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 role_id = 2 [default = 0];
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mate_remove_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.MATE_OPERATE_RET_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 role_id = 2 [default = 0];
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mate_remove_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mate_remove_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mate_remove_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mate_remove_msg::MergeFrom(const mate_remove_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mate_remove_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mate_remove_msg::CopyFrom(const mate_remove_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mate_remove_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mate_remove_msg::Swap(mate_remove_msg* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mate_remove_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mate_remove_msg_descriptor_;
  metadata.reflection = mate_remove_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mate_award_req::kTypeFieldNumber;
const int mate_award_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

mate_award_req::mate_award_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mate_award_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

mate_award_req::mate_award_req(const mate_award_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mate_award_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mate_award_req::~mate_award_req() {
  SharedDtor();
}

void mate_award_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void mate_award_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mate_award_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mate_award_req_descriptor_;
}

const mate_award_req& mate_award_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

mate_award_req* mate_award_req::default_instance_ = NULL;

mate_award_req* mate_award_req::New() const {
  return new mate_award_req;
}

void mate_award_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mate_award_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mate_award_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mate_award_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mate_award_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mate_award_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mate_award_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mate_award_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mate_award_req::MergeFrom(const mate_award_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mate_award_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mate_award_req::CopyFrom(const mate_award_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mate_award_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mate_award_req::Swap(mate_award_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mate_award_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mate_award_req_descriptor_;
  metadata.reflection = mate_award_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mate_award_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

mate_award_rsp::mate_award_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mate_award_rsp::InitAsDefaultInstance() {
}

mate_award_rsp::mate_award_rsp(const mate_award_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mate_award_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mate_award_rsp::~mate_award_rsp() {
  SharedDtor();
}

void mate_award_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mate_award_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mate_award_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mate_award_rsp_descriptor_;
}

const mate_award_rsp& mate_award_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

mate_award_rsp* mate_award_rsp::default_instance_ = NULL;

mate_award_rsp* mate_award_rsp::New() const {
  return new mate_award_rsp;
}

void mate_award_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mate_award_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mate_award_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mate_award_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mate_award_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mate_award_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mate_award_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mate_award_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mate_award_rsp::MergeFrom(const mate_award_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mate_award_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mate_award_rsp::CopyFrom(const mate_award_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mate_award_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void mate_award_rsp::Swap(mate_award_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mate_award_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mate_award_rsp_descriptor_;
  metadata.reflection = mate_award_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mate_award_via::kCheckFieldNumber;
const int mate_award_via::kAwardIdFieldNumber;
const int mate_award_via::kRoleIdFieldNumber;
#endif  // !_MSC_VER

mate_award_via::mate_award_via()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mate_award_via::InitAsDefaultInstance() {
}

mate_award_via::mate_award_via(const mate_award_via& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mate_award_via::SharedCtor() {
  _cached_size_ = 0;
  check_ = false;
  award_id_ = 0u;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mate_award_via::~mate_award_via() {
  SharedDtor();
}

void mate_award_via::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mate_award_via::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mate_award_via::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mate_award_via_descriptor_;
}

const mate_award_via& mate_award_via::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2emate_2eproto();
  return *default_instance_;
}

mate_award_via* mate_award_via::default_instance_ = NULL;

mate_award_via* mate_award_via::New() const {
  return new mate_award_via;
}

void mate_award_via::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    check_ = false;
    award_id_ = 0u;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mate_award_via::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool check = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_award_id;
        break;
      }

      // required uint32 award_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &award_id_)));
          set_has_award_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mate_award_via::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool check = 1;
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->check(), output);
  }

  // required uint32 award_id = 2;
  if (has_award_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->award_id(), output);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mate_award_via::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool check = 1;
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->check(), target);
  }

  // required uint32 award_id = 2;
  if (has_award_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->award_id(), target);
  }

  // required uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mate_award_via::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool check = 1;
    if (has_check()) {
      total_size += 1 + 1;
    }

    // required uint32 award_id = 2;
    if (has_award_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->award_id());
    }

    // required uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mate_award_via::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mate_award_via* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mate_award_via*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mate_award_via::MergeFrom(const mate_award_via& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_check()) {
      set_check(from.check());
    }
    if (from.has_award_id()) {
      set_award_id(from.award_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mate_award_via::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mate_award_via::CopyFrom(const mate_award_via& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mate_award_via::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mate_award_via::Swap(mate_award_via* other) {
  if (other != this) {
    std::swap(check_, other->check_);
    std::swap(award_id_, other->award_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mate_award_via::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mate_award_via_descriptor_;
  metadata.reflection = mate_award_via_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
