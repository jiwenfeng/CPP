// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.role_vip.proto

#ifndef PROTOBUF_client_2erole_5fvip_2eproto__INCLUDED
#define PROTOBUF_client_2erole_5fvip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2erole_5fvip_2eproto();
void protobuf_AssignDesc_client_2erole_5fvip_2eproto();
void protobuf_ShutdownFile_client_2erole_5fvip_2eproto();

class buy_vip_req;
class buy_vip_rsp;
class vip_day_premiums_req;
class vip_day_premiums_rsp;

enum buy_vip_rsp_RET {
  buy_vip_rsp_RET_SUCCESS = 0,
  buy_vip_rsp_RET_FAILURE = 1
};
bool buy_vip_rsp_RET_IsValid(int value);
const buy_vip_rsp_RET buy_vip_rsp_RET_RET_MIN = buy_vip_rsp_RET_SUCCESS;
const buy_vip_rsp_RET buy_vip_rsp_RET_RET_MAX = buy_vip_rsp_RET_FAILURE;
const int buy_vip_rsp_RET_RET_ARRAYSIZE = buy_vip_rsp_RET_RET_MAX + 1;

const ::google::protobuf::EnumDescriptor* buy_vip_rsp_RET_descriptor();
inline const ::std::string& buy_vip_rsp_RET_Name(buy_vip_rsp_RET value) {
  return ::google::protobuf::internal::NameOfEnum(
    buy_vip_rsp_RET_descriptor(), value);
}
inline bool buy_vip_rsp_RET_Parse(
    const ::std::string& name, buy_vip_rsp_RET* value) {
  return ::google::protobuf::internal::ParseNamedEnum<buy_vip_rsp_RET>(
    buy_vip_rsp_RET_descriptor(), name, value);
}
// ===================================================================

class buy_vip_req : public ::google::protobuf::Message {
 public:
  buy_vip_req();
  virtual ~buy_vip_req();

  buy_vip_req(const buy_vip_req& from);

  inline buy_vip_req& operator=(const buy_vip_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const buy_vip_req& default_instance();

  void Swap(buy_vip_req* other);

  // implements Message ----------------------------------------------

  buy_vip_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const buy_vip_req& from);
  void MergeFrom(const buy_vip_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 lvl = 1;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 1;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.buy_vip_req)
 private:
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 lvl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fvip_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fvip_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fvip_2eproto();

  void InitAsDefaultInstance();
  static buy_vip_req* default_instance_;
};
// -------------------------------------------------------------------

class buy_vip_rsp : public ::google::protobuf::Message {
 public:
  buy_vip_rsp();
  virtual ~buy_vip_rsp();

  buy_vip_rsp(const buy_vip_rsp& from);

  inline buy_vip_rsp& operator=(const buy_vip_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const buy_vip_rsp& default_instance();

  void Swap(buy_vip_rsp* other);

  // implements Message ----------------------------------------------

  buy_vip_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const buy_vip_rsp& from);
  void MergeFrom(const buy_vip_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef buy_vip_rsp_RET RET;
  static const RET SUCCESS = buy_vip_rsp_RET_SUCCESS;
  static const RET FAILURE = buy_vip_rsp_RET_FAILURE;
  static inline bool RET_IsValid(int value) {
    return buy_vip_rsp_RET_IsValid(value);
  }
  static const RET RET_MIN =
    buy_vip_rsp_RET_RET_MIN;
  static const RET RET_MAX =
    buy_vip_rsp_RET_RET_MAX;
  static const int RET_ARRAYSIZE =
    buy_vip_rsp_RET_RET_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RET_descriptor() {
    return buy_vip_rsp_RET_descriptor();
  }
  static inline const ::std::string& RET_Name(RET value) {
    return buy_vip_rsp_RET_Name(value);
  }
  static inline bool RET_Parse(const ::std::string& name,
      RET* value) {
    return buy_vip_rsp_RET_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.buy_vip_rsp.RET ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::buy_vip_rsp_RET ret() const;
  inline void set_ret(::client::buy_vip_rsp_RET value);

  // required uint32 lvl = 2;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 2;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.buy_vip_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_lvl();
  inline void clear_has_lvl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 lvl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fvip_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fvip_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fvip_2eproto();

  void InitAsDefaultInstance();
  static buy_vip_rsp* default_instance_;
};
// -------------------------------------------------------------------

class vip_day_premiums_req : public ::google::protobuf::Message {
 public:
  vip_day_premiums_req();
  virtual ~vip_day_premiums_req();

  vip_day_premiums_req(const vip_day_premiums_req& from);

  inline vip_day_premiums_req& operator=(const vip_day_premiums_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vip_day_premiums_req& default_instance();

  void Swap(vip_day_premiums_req* other);

  // implements Message ----------------------------------------------

  vip_day_premiums_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vip_day_premiums_req& from);
  void MergeFrom(const vip_day_premiums_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.vip_day_premiums_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fvip_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fvip_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fvip_2eproto();

  void InitAsDefaultInstance();
  static vip_day_premiums_req* default_instance_;
};
// -------------------------------------------------------------------

class vip_day_premiums_rsp : public ::google::protobuf::Message {
 public:
  vip_day_premiums_rsp();
  virtual ~vip_day_premiums_rsp();

  vip_day_premiums_rsp(const vip_day_premiums_rsp& from);

  inline vip_day_premiums_rsp& operator=(const vip_day_premiums_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vip_day_premiums_rsp& default_instance();

  void Swap(vip_day_premiums_rsp* other);

  // implements Message ----------------------------------------------

  vip_day_premiums_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vip_day_premiums_rsp& from);
  void MergeFrom(const vip_day_premiums_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.vip_day_premiums_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2erole_5fvip_2eproto();
  friend void protobuf_AssignDesc_client_2erole_5fvip_2eproto();
  friend void protobuf_ShutdownFile_client_2erole_5fvip_2eproto();

  void InitAsDefaultInstance();
  static vip_day_premiums_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// buy_vip_req

// required uint32 lvl = 1;
inline bool buy_vip_req::has_lvl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void buy_vip_req::set_has_lvl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void buy_vip_req::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void buy_vip_req::clear_lvl() {
  lvl_ = 0u;
  clear_has_lvl();
}
inline ::google::protobuf::uint32 buy_vip_req::lvl() const {
  return lvl_;
}
inline void buy_vip_req::set_lvl(::google::protobuf::uint32 value) {
  set_has_lvl();
  lvl_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool buy_vip_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void buy_vip_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void buy_vip_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void buy_vip_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& buy_vip_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* buy_vip_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* buy_vip_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void buy_vip_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// buy_vip_rsp

// required .client.buy_vip_rsp.RET ret = 1;
inline bool buy_vip_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void buy_vip_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void buy_vip_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void buy_vip_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::buy_vip_rsp_RET buy_vip_rsp::ret() const {
  return static_cast< ::client::buy_vip_rsp_RET >(ret_);
}
inline void buy_vip_rsp::set_ret(::client::buy_vip_rsp_RET value) {
  assert(::client::buy_vip_rsp_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// required uint32 lvl = 2;
inline bool buy_vip_rsp::has_lvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void buy_vip_rsp::set_has_lvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void buy_vip_rsp::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void buy_vip_rsp::clear_lvl() {
  lvl_ = 0u;
  clear_has_lvl();
}
inline ::google::protobuf::uint32 buy_vip_rsp::lvl() const {
  return lvl_;
}
inline void buy_vip_rsp::set_lvl(::google::protobuf::uint32 value) {
  set_has_lvl();
  lvl_ = value;
}

// -------------------------------------------------------------------

// vip_day_premiums_req

// required uint32 unixtime = 1;
inline bool vip_day_premiums_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vip_day_premiums_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vip_day_premiums_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vip_day_premiums_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 vip_day_premiums_req::unixtime() const {
  return unixtime_;
}
inline void vip_day_premiums_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool vip_day_premiums_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void vip_day_premiums_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void vip_day_premiums_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void vip_day_premiums_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& vip_day_premiums_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* vip_day_premiums_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* vip_day_premiums_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void vip_day_premiums_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// vip_day_premiums_rsp

// required uint32 ret = 1;
inline bool vip_day_premiums_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vip_day_premiums_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vip_day_premiums_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vip_day_premiums_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 vip_day_premiums_rsp::ret() const {
  return ret_;
}
inline void vip_day_premiums_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::buy_vip_rsp_RET>() {
  return ::client::buy_vip_rsp_RET_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2erole_5fvip_2eproto__INCLUDED
