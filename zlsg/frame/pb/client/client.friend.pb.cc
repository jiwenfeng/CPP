// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* friend_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* temporary_friend_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  temporary_friend_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* friend_info_friend_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* friend_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_add_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_add_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_add_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_add_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_add_ret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_add_ret_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_del_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_del_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_on_off_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_on_off_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_blk_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_blk_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_status_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_status_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_status_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_status_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_status_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_status_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_recommend_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_recommend_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_recommend_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_recommend_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_degree_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_degree_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_degree_add_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_degree_add_reflection_ = NULL;
const ::google::protobuf::Descriptor* attention_role_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  attention_role_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* private_friend_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  private_friend_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FRIEND_OPERATE_RET_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FRIEND_LIST_RES_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2efriend_2eproto() {
  protobuf_AddDesc_client_2efriend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.friend.proto");
  GOOGLE_CHECK(file != NULL);
  friend_list_req_descriptor_ = file->message_type(0);
  static const int friend_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_list_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_list_req, svr_head_),
  };
  friend_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_list_req_descriptor_,
      friend_list_req::default_instance_,
      friend_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_list_req));
  temporary_friend_list_req_descriptor_ = file->message_type(1);
  static const int temporary_friend_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(temporary_friend_list_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(temporary_friend_list_req, svr_head_),
  };
  temporary_friend_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      temporary_friend_list_req_descriptor_,
      temporary_friend_list_req::default_instance_,
      temporary_friend_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(temporary_friend_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(temporary_friend_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(temporary_friend_list_req));
  friend_info_descriptor_ = file->message_type(2);
  static const int friend_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, relation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, friend_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, friend_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, contact_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, vip_level_),
  };
  friend_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_info_descriptor_,
      friend_info::default_instance_,
      friend_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_info));
  friend_info_friend_type_descriptor_ = friend_info_descriptor_->enum_type(0);
  friend_list_rsp_descriptor_ = file->message_type(3);
  static const int friend_list_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_list_rsp, list_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_list_rsp, fi_),
  };
  friend_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_list_rsp_descriptor_,
      friend_list_rsp::default_instance_,
      friend_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_list_rsp));
  friend_add_req_descriptor_ = file->message_type(4);
  static const int friend_add_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_req, svr_head_),
  };
  friend_add_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_add_req_descriptor_,
      friend_add_req::default_instance_,
      friend_add_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_add_req));
  friend_add_rsp_descriptor_ = file->message_type(5);
  static const int friend_add_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_rsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_rsp, role_id_),
  };
  friend_add_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_add_rsp_descriptor_,
      friend_add_rsp::default_instance_,
      friend_add_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_add_rsp));
  friend_add_ret_descriptor_ = file->message_type(6);
  static const int friend_add_ret_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_ret, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_ret, allow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_ret, svr_head_),
  };
  friend_add_ret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_add_ret_descriptor_,
      friend_add_ret::default_instance_,
      friend_add_ret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_ret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_add_ret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_add_ret));
  friend_del_req_descriptor_ = file->message_type(7);
  static const int friend_del_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_del_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_del_req, svr_head_),
  };
  friend_del_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_del_req_descriptor_,
      friend_del_req::default_instance_,
      friend_del_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_del_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_del_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_del_req));
  friend_on_off_notify_descriptor_ = file->message_type(8);
  static const int friend_on_off_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_on_off_notify, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_on_off_notify, online_),
  };
  friend_on_off_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_on_off_notify_descriptor_,
      friend_on_off_notify::default_instance_,
      friend_on_off_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_on_off_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_on_off_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_on_off_notify));
  friend_blk_req_descriptor_ = file->message_type(9);
  static const int friend_blk_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_blk_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_blk_req, svr_head_),
  };
  friend_blk_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_blk_req_descriptor_,
      friend_blk_req::default_instance_,
      friend_blk_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_blk_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_blk_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_blk_req));
  friend_status_req_descriptor_ = file->message_type(10);
  static const int friend_status_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_status_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_status_req, svr_head_),
  };
  friend_status_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_status_req_descriptor_,
      friend_status_req::default_instance_,
      friend_status_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_status_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_status_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_status_req));
  friend_status_info_descriptor_ = file->message_type(11);
  static const int friend_status_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_status_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_status_info, info_),
  };
  friend_status_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_status_info_descriptor_,
      friend_status_info::default_instance_,
      friend_status_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_status_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_status_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_status_info));
  friend_status_rsp_descriptor_ = file->message_type(12);
  static const int friend_status_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_status_rsp, fsi_),
  };
  friend_status_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_status_rsp_descriptor_,
      friend_status_rsp::default_instance_,
      friend_status_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_status_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_status_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_status_rsp));
  friend_recommend_req_descriptor_ = file->message_type(13);
  static const int friend_recommend_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_recommend_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_recommend_req, svr_head_),
  };
  friend_recommend_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_recommend_req_descriptor_,
      friend_recommend_req::default_instance_,
      friend_recommend_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_recommend_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_recommend_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_recommend_req));
  friend_recommend_rsp_descriptor_ = file->message_type(14);
  static const int friend_recommend_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_recommend_rsp, role_id_),
  };
  friend_recommend_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_recommend_rsp_descriptor_,
      friend_recommend_rsp::default_instance_,
      friend_recommend_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_recommend_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_recommend_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_recommend_rsp));
  friend_degree_msg_descriptor_ = file->message_type(15);
  static const int friend_degree_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_degree_msg, friend_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_degree_msg, degree_val_),
  };
  friend_degree_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_degree_msg_descriptor_,
      friend_degree_msg::default_instance_,
      friend_degree_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_degree_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_degree_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_degree_msg));
  friend_degree_add_descriptor_ = file->message_type(16);
  static const int friend_degree_add_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_degree_add, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_degree_add, friend_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_degree_add, degree_val_),
  };
  friend_degree_add_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_degree_add_descriptor_,
      friend_degree_add::default_instance_,
      friend_degree_add_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_degree_add, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_degree_add, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_degree_add));
  attention_role_list_req_descriptor_ = file->message_type(17);
  static const int attention_role_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(attention_role_list_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(attention_role_list_req, svr_head_),
  };
  attention_role_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      attention_role_list_req_descriptor_,
      attention_role_list_req::default_instance_,
      attention_role_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(attention_role_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(attention_role_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(attention_role_list_req));
  private_friend_rsp_descriptor_ = file->message_type(18);
  static const int private_friend_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(private_friend_rsp, result_type_),
  };
  private_friend_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      private_friend_rsp_descriptor_,
      private_friend_rsp::default_instance_,
      private_friend_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(private_friend_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(private_friend_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(private_friend_rsp));
  FRIEND_OPERATE_RET_E_descriptor_ = file->enum_type(0);
  FRIEND_LIST_RES_E_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2efriend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_list_req_descriptor_, &friend_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    temporary_friend_list_req_descriptor_, &temporary_friend_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_info_descriptor_, &friend_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_list_rsp_descriptor_, &friend_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_add_req_descriptor_, &friend_add_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_add_rsp_descriptor_, &friend_add_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_add_ret_descriptor_, &friend_add_ret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_del_req_descriptor_, &friend_del_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_on_off_notify_descriptor_, &friend_on_off_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_blk_req_descriptor_, &friend_blk_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_status_req_descriptor_, &friend_status_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_status_info_descriptor_, &friend_status_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_status_rsp_descriptor_, &friend_status_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_recommend_req_descriptor_, &friend_recommend_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_recommend_rsp_descriptor_, &friend_recommend_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_degree_msg_descriptor_, &friend_degree_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_degree_add_descriptor_, &friend_degree_add::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    attention_role_list_req_descriptor_, &attention_role_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    private_friend_rsp_descriptor_, &private_friend_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2efriend_2eproto() {
  delete friend_list_req::default_instance_;
  delete friend_list_req_reflection_;
  delete temporary_friend_list_req::default_instance_;
  delete temporary_friend_list_req_reflection_;
  delete friend_info::default_instance_;
  delete friend_info_reflection_;
  delete friend_list_rsp::default_instance_;
  delete friend_list_rsp_reflection_;
  delete friend_add_req::default_instance_;
  delete friend_add_req_reflection_;
  delete friend_add_rsp::default_instance_;
  delete friend_add_rsp_reflection_;
  delete friend_add_ret::default_instance_;
  delete friend_add_ret_reflection_;
  delete friend_del_req::default_instance_;
  delete friend_del_req_reflection_;
  delete friend_on_off_notify::default_instance_;
  delete friend_on_off_notify_reflection_;
  delete friend_blk_req::default_instance_;
  delete friend_blk_req_reflection_;
  delete friend_status_req::default_instance_;
  delete friend_status_req_reflection_;
  delete friend_status_info::default_instance_;
  delete friend_status_info_reflection_;
  delete friend_status_rsp::default_instance_;
  delete friend_status_rsp_reflection_;
  delete friend_recommend_req::default_instance_;
  delete friend_recommend_req_reflection_;
  delete friend_recommend_rsp::default_instance_;
  delete friend_recommend_rsp_reflection_;
  delete friend_degree_msg::default_instance_;
  delete friend_degree_msg_reflection_;
  delete friend_degree_add::default_instance_;
  delete friend_degree_add_reflection_;
  delete attention_role_list_req::default_instance_;
  delete attention_role_list_req_reflection_;
  delete private_friend_rsp::default_instance_;
  delete private_friend_rsp_reflection_;
}

void protobuf_AddDesc_client_2efriend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023client.friend.proto\022\006client\032\021client.co"
    "mm.proto\"G\n\017friend_list_req\022\014\n\004time\030\001 \002("
    "\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_hea"
    "d\"Q\n\031temporary_friend_list_req\022\014\n\004time\030\001"
    " \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_"
    "head\"\213\002\n\013friend_info\022\017\n\007role_id\030\001 \002(\r\0226\n"
    "\rrelation_type\030\002 \002(\0162\037.client.friend_inf"
    "o.friend_type\022\021\n\006degree\030\003 \001(\r:\0010\022\024\n\014frie"
    "nd_level\030\004 \001(\r\022\023\n\013friend_name\030\005 \001(\t\022\024\n\014c"
    "ontact_time\030\006 \001(\r\022\021\n\tvip_level\030\007 \001(\r\"L\n\013"
    "friend_type\022\024\n\020temporary_friend\020\001\022\017\n\013rea"
    "l_friend\020\002\022\026\n\022temporary_and_real\020\003\"`\n\017fr"
    "iend_list_rsp\022,\n\tlist_type\030\001 \002(\0162\031.clien"
    "t.FRIEND_LIST_RES_E\022\037\n\002fi\030\002 \003(\0132\023.client"
    ".friend_info\"I\n\016friend_add_req\022\017\n\007role_i"
    "d\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.serv"
    "er_head\"L\n\016friend_add_rsp\022)\n\003ret\030\001 \002(\0162\034"
    ".client.FRIEND_OPERATE_RET_E\022\017\n\007role_id\030"
    "\002 \001(\r\"X\n\016friend_add_ret\022\017\n\007role_id\030\001 \002(\r"
    "\022\r\n\005allow\030\002 \002(\010\022&\n\010svr_head\030\350\007 \001(\0132\023.cli"
    "ent.server_head\"I\n\016friend_del_req\022\017\n\007rol"
    "e_id\030\001 \003(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.s"
    "erver_head\"7\n\024friend_on_off_notify\022\017\n\007ro"
    "le_id\030\001 \002(\r\022\016\n\006online\030\002 \002(\010\"I\n\016friend_bl"
    "k_req\022\017\n\007role_id\030\001 \003(\r\022&\n\010svr_head\030\350\007 \001("
    "\0132\023.client.server_head\"L\n\021friend_status_"
    "req\022\017\n\007role_id\030\001 \003(\r\022&\n\010svr_head\030\350\007 \001(\0132"
    "\023.client.server_head\"3\n\022friend_status_in"
    "fo\022\017\n\007role_id\030\001 \002(\r\022\014\n\004info\030\002 \002(\r\"<\n\021fri"
    "end_status_rsp\022\'\n\003fsi\030\001 \003(\0132\032.client.fri"
    "end_status_info\"P\n\024friend_recommend_req\022"
    "\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.c"
    "lient.server_head\"\'\n\024friend_recommend_rs"
    "p\022\017\n\007role_id\030\001 \003(\r\"\?\n\021friend_degree_msg\022"
    "\026\n\016friend_role_id\030\001 \002(\r\022\022\n\ndegree_val\030\002 "
    "\002(\r\"P\n\021friend_degree_add\022\017\n\007role_id\030\001 \002("
    "\r\022\026\n\016friend_role_id\030\002 \002(\r\022\022\n\ndegree_val\030"
    "\003 \002(\r\"S\n\027attention_role_list_req\022\020\n\010unix"
    "time\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.s"
    "erver_head\")\n\022private_friend_rsp\022\023\n\013resu"
    "lt_type\030\001 \002(\r*\274\001\n\024FRIEND_OPERATE_RET_E\022\021"
    "\n\rCFORE_SUCCESS\020\000\022\022\n\016CFORE_DENY_ADD\020\001\022\032\n"
    "\026CRORE_FRIEND_NUM_LIMIT\020\002\022\030\n\024CRORE_FRIED"
    "N_OFFLINE\020\003\022\032\n\026CRORE_BLACK_LIST_LIMIT\020\004\022"
    "\027\n\023CRORE_ALREAD_FRIEND\020\005\022\022\n\rCFORE_SYS_ER"
    "R\020\347\007*Z\n\021FRIEND_LIST_RES_E\022\r\n\tFLRE_LIST\020\001"
    "\022\014\n\010FLRE_ADD\020\002\022\014\n\010FLRE_DEL\020\003\022\014\n\010FLRE_CHA"
    "\020\004\022\014\n\010FLRE_BLK\020\005", 1896);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.friend.proto", &protobuf_RegisterTypes);
  friend_list_req::default_instance_ = new friend_list_req();
  temporary_friend_list_req::default_instance_ = new temporary_friend_list_req();
  friend_info::default_instance_ = new friend_info();
  friend_list_rsp::default_instance_ = new friend_list_rsp();
  friend_add_req::default_instance_ = new friend_add_req();
  friend_add_rsp::default_instance_ = new friend_add_rsp();
  friend_add_ret::default_instance_ = new friend_add_ret();
  friend_del_req::default_instance_ = new friend_del_req();
  friend_on_off_notify::default_instance_ = new friend_on_off_notify();
  friend_blk_req::default_instance_ = new friend_blk_req();
  friend_status_req::default_instance_ = new friend_status_req();
  friend_status_info::default_instance_ = new friend_status_info();
  friend_status_rsp::default_instance_ = new friend_status_rsp();
  friend_recommend_req::default_instance_ = new friend_recommend_req();
  friend_recommend_rsp::default_instance_ = new friend_recommend_rsp();
  friend_degree_msg::default_instance_ = new friend_degree_msg();
  friend_degree_add::default_instance_ = new friend_degree_add();
  attention_role_list_req::default_instance_ = new attention_role_list_req();
  private_friend_rsp::default_instance_ = new private_friend_rsp();
  friend_list_req::default_instance_->InitAsDefaultInstance();
  temporary_friend_list_req::default_instance_->InitAsDefaultInstance();
  friend_info::default_instance_->InitAsDefaultInstance();
  friend_list_rsp::default_instance_->InitAsDefaultInstance();
  friend_add_req::default_instance_->InitAsDefaultInstance();
  friend_add_rsp::default_instance_->InitAsDefaultInstance();
  friend_add_ret::default_instance_->InitAsDefaultInstance();
  friend_del_req::default_instance_->InitAsDefaultInstance();
  friend_on_off_notify::default_instance_->InitAsDefaultInstance();
  friend_blk_req::default_instance_->InitAsDefaultInstance();
  friend_status_req::default_instance_->InitAsDefaultInstance();
  friend_status_info::default_instance_->InitAsDefaultInstance();
  friend_status_rsp::default_instance_->InitAsDefaultInstance();
  friend_recommend_req::default_instance_->InitAsDefaultInstance();
  friend_recommend_rsp::default_instance_->InitAsDefaultInstance();
  friend_degree_msg::default_instance_->InitAsDefaultInstance();
  friend_degree_add::default_instance_->InitAsDefaultInstance();
  attention_role_list_req::default_instance_->InitAsDefaultInstance();
  private_friend_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2efriend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2efriend_2eproto {
  StaticDescriptorInitializer_client_2efriend_2eproto() {
    protobuf_AddDesc_client_2efriend_2eproto();
  }
} static_descriptor_initializer_client_2efriend_2eproto_;
const ::google::protobuf::EnumDescriptor* FRIEND_OPERATE_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FRIEND_OPERATE_RET_E_descriptor_;
}
bool FRIEND_OPERATE_RET_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 999:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FRIEND_LIST_RES_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FRIEND_LIST_RES_E_descriptor_;
}
bool FRIEND_LIST_RES_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int friend_list_req::kTimeFieldNumber;
const int friend_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

friend_list_req::friend_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

friend_list_req::friend_list_req(const friend_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_list_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_list_req::~friend_list_req() {
  SharedDtor();
}

void friend_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void friend_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_list_req_descriptor_;
}

const friend_list_req& friend_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_list_req* friend_list_req::default_instance_ = NULL;

friend_list_req* friend_list_req::New() const {
  return new friend_list_req;
}

void friend_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_list_req::MergeFrom(const friend_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_list_req::CopyFrom(const friend_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void friend_list_req::Swap(friend_list_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_list_req_descriptor_;
  metadata.reflection = friend_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int temporary_friend_list_req::kTimeFieldNumber;
const int temporary_friend_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

temporary_friend_list_req::temporary_friend_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void temporary_friend_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

temporary_friend_list_req::temporary_friend_list_req(const temporary_friend_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void temporary_friend_list_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

temporary_friend_list_req::~temporary_friend_list_req() {
  SharedDtor();
}

void temporary_friend_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void temporary_friend_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* temporary_friend_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return temporary_friend_list_req_descriptor_;
}

const temporary_friend_list_req& temporary_friend_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

temporary_friend_list_req* temporary_friend_list_req::default_instance_ = NULL;

temporary_friend_list_req* temporary_friend_list_req::New() const {
  return new temporary_friend_list_req;
}

void temporary_friend_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool temporary_friend_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void temporary_friend_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* temporary_friend_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int temporary_friend_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void temporary_friend_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const temporary_friend_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const temporary_friend_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void temporary_friend_list_req::MergeFrom(const temporary_friend_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void temporary_friend_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void temporary_friend_list_req::CopyFrom(const temporary_friend_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool temporary_friend_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void temporary_friend_list_req::Swap(temporary_friend_list_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata temporary_friend_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = temporary_friend_list_req_descriptor_;
  metadata.reflection = temporary_friend_list_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* friend_info_friend_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_info_friend_type_descriptor_;
}
bool friend_info_friend_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const friend_info_friend_type friend_info::temporary_friend;
const friend_info_friend_type friend_info::real_friend;
const friend_info_friend_type friend_info::temporary_and_real;
const friend_info_friend_type friend_info::friend_type_MIN;
const friend_info_friend_type friend_info::friend_type_MAX;
const int friend_info::friend_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int friend_info::kRoleIdFieldNumber;
const int friend_info::kRelationTypeFieldNumber;
const int friend_info::kDegreeFieldNumber;
const int friend_info::kFriendLevelFieldNumber;
const int friend_info::kFriendNameFieldNumber;
const int friend_info::kContactTimeFieldNumber;
const int friend_info::kVipLevelFieldNumber;
#endif  // !_MSC_VER

friend_info::friend_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_info::InitAsDefaultInstance() {
}

friend_info::friend_info(const friend_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  relation_type_ = 1;
  degree_ = 0u;
  friend_level_ = 0u;
  friend_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contact_time_ = 0u;
  vip_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_info::~friend_info() {
  SharedDtor();
}

void friend_info::SharedDtor() {
  if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
    delete friend_name_;
  }
  if (this != default_instance_) {
  }
}

void friend_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_info_descriptor_;
}

const friend_info& friend_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_info* friend_info::default_instance_ = NULL;

friend_info* friend_info::New() const {
  return new friend_info;
}

void friend_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    relation_type_ = 1;
    degree_ = 0u;
    friend_level_ = 0u;
    if (has_friend_name()) {
      if (friend_name_ != &::google::protobuf::internal::kEmptyString) {
        friend_name_->clear();
      }
    }
    contact_time_ = 0u;
    vip_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_relation_type;
        break;
      }

      // required .client.friend_info.friend_type relation_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relation_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::friend_info_friend_type_IsValid(value)) {
            set_relation_type(static_cast< ::client::friend_info_friend_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_degree;
        break;
      }

      // optional uint32 degree = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_friend_level;
        break;
      }

      // optional uint32 friend_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_level_)));
          set_has_friend_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_friend_name;
        break;
      }

      // optional string friend_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friend_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friend_name().data(), this->friend_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_contact_time;
        break;
      }

      // optional uint32 contact_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contact_time_)));
          set_has_contact_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required .client.friend_info.friend_type relation_type = 2;
  if (has_relation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->relation_type(), output);
  }

  // optional uint32 degree = 3 [default = 0];
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->degree(), output);
  }

  // optional uint32 friend_level = 4;
  if (has_friend_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->friend_level(), output);
  }

  // optional string friend_name = 5;
  if (has_friend_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friend_name().data(), this->friend_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->friend_name(), output);
  }

  // optional uint32 contact_time = 6;
  if (has_contact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->contact_time(), output);
  }

  // optional uint32 vip_level = 7;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required .client.friend_info.friend_type relation_type = 2;
  if (has_relation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->relation_type(), target);
  }

  // optional uint32 degree = 3 [default = 0];
  if (has_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->degree(), target);
  }

  // optional uint32 friend_level = 4;
  if (has_friend_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->friend_level(), target);
  }

  // optional string friend_name = 5;
  if (has_friend_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friend_name().data(), this->friend_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->friend_name(), target);
  }

  // optional uint32 contact_time = 6;
  if (has_contact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->contact_time(), target);
  }

  // optional uint32 vip_level = 7;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required .client.friend_info.friend_type relation_type = 2;
    if (has_relation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation_type());
    }

    // optional uint32 degree = 3 [default = 0];
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->degree());
    }

    // optional uint32 friend_level = 4;
    if (has_friend_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_level());
    }

    // optional string friend_name = 5;
    if (has_friend_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friend_name());
    }

    // optional uint32 contact_time = 6;
    if (has_contact_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contact_time());
    }

    // optional uint32 vip_level = 7;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_info::MergeFrom(const friend_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_relation_type()) {
      set_relation_type(from.relation_type());
    }
    if (from.has_degree()) {
      set_degree(from.degree());
    }
    if (from.has_friend_level()) {
      set_friend_level(from.friend_level());
    }
    if (from.has_friend_name()) {
      set_friend_name(from.friend_name());
    }
    if (from.has_contact_time()) {
      set_contact_time(from.contact_time());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_info::CopyFrom(const friend_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void friend_info::Swap(friend_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(relation_type_, other->relation_type_);
    std::swap(degree_, other->degree_);
    std::swap(friend_level_, other->friend_level_);
    std::swap(friend_name_, other->friend_name_);
    std::swap(contact_time_, other->contact_time_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_info_descriptor_;
  metadata.reflection = friend_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_list_rsp::kListTypeFieldNumber;
const int friend_list_rsp::kFiFieldNumber;
#endif  // !_MSC_VER

friend_list_rsp::friend_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_list_rsp::InitAsDefaultInstance() {
}

friend_list_rsp::friend_list_rsp(const friend_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  list_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_list_rsp::~friend_list_rsp() {
  SharedDtor();
}

void friend_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void friend_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_list_rsp_descriptor_;
}

const friend_list_rsp& friend_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_list_rsp* friend_list_rsp::default_instance_ = NULL;

friend_list_rsp* friend_list_rsp::New() const {
  return new friend_list_rsp;
}

void friend_list_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    list_type_ = 1;
  }
  fi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.FRIEND_LIST_RES_E list_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FRIEND_LIST_RES_E_IsValid(value)) {
            set_list_type(static_cast< ::client::FRIEND_LIST_RES_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fi;
        break;
      }

      // repeated .client.friend_info fi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.FRIEND_LIST_RES_E list_type = 1;
  if (has_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->list_type(), output);
  }

  // repeated .client.friend_info fi = 2;
  for (int i = 0; i < this->fi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.FRIEND_LIST_RES_E list_type = 1;
  if (has_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->list_type(), target);
  }

  // repeated .client.friend_info fi = 2;
  for (int i = 0; i < this->fi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_list_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.FRIEND_LIST_RES_E list_type = 1;
    if (has_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->list_type());
    }

  }
  // repeated .client.friend_info fi = 2;
  total_size += 1 * this->fi_size();
  for (int i = 0; i < this->fi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_list_rsp::MergeFrom(const friend_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fi_.MergeFrom(from.fi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_list_type()) {
      set_list_type(from.list_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_list_rsp::CopyFrom(const friend_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_list_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < fi_size(); i++) {
    if (!this->fi(i).IsInitialized()) return false;
  }
  return true;
}

void friend_list_rsp::Swap(friend_list_rsp* other) {
  if (other != this) {
    std::swap(list_type_, other->list_type_);
    fi_.Swap(&other->fi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_list_rsp_descriptor_;
  metadata.reflection = friend_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_add_req::kRoleIdFieldNumber;
const int friend_add_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

friend_add_req::friend_add_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_add_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

friend_add_req::friend_add_req(const friend_add_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_add_req::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_add_req::~friend_add_req() {
  SharedDtor();
}

void friend_add_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void friend_add_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_add_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_add_req_descriptor_;
}

const friend_add_req& friend_add_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_add_req* friend_add_req::default_instance_ = NULL;

friend_add_req* friend_add_req::New() const {
  return new friend_add_req;
}

void friend_add_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_add_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_add_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_add_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_add_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_add_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_add_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_add_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_add_req::MergeFrom(const friend_add_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_add_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_add_req::CopyFrom(const friend_add_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_add_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void friend_add_req::Swap(friend_add_req* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_add_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_add_req_descriptor_;
  metadata.reflection = friend_add_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_add_rsp::kRetFieldNumber;
const int friend_add_rsp::kRoleIdFieldNumber;
#endif  // !_MSC_VER

friend_add_rsp::friend_add_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_add_rsp::InitAsDefaultInstance() {
}

friend_add_rsp::friend_add_rsp(const friend_add_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_add_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_add_rsp::~friend_add_rsp() {
  SharedDtor();
}

void friend_add_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void friend_add_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_add_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_add_rsp_descriptor_;
}

const friend_add_rsp& friend_add_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_add_rsp* friend_add_rsp::default_instance_ = NULL;

friend_add_rsp* friend_add_rsp::New() const {
  return new friend_add_rsp;
}

void friend_add_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_add_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.FRIEND_OPERATE_RET_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::FRIEND_OPERATE_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::FRIEND_OPERATE_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_add_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.FRIEND_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_add_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.FRIEND_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_add_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.FRIEND_OPERATE_RET_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_add_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_add_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_add_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_add_rsp::MergeFrom(const friend_add_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_add_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_add_rsp::CopyFrom(const friend_add_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_add_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void friend_add_rsp::Swap(friend_add_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_add_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_add_rsp_descriptor_;
  metadata.reflection = friend_add_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_add_ret::kRoleIdFieldNumber;
const int friend_add_ret::kAllowFieldNumber;
const int friend_add_ret::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

friend_add_ret::friend_add_ret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_add_ret::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

friend_add_ret::friend_add_ret(const friend_add_ret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_add_ret::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  allow_ = false;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_add_ret::~friend_add_ret() {
  SharedDtor();
}

void friend_add_ret::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void friend_add_ret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_add_ret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_add_ret_descriptor_;
}

const friend_add_ret& friend_add_ret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_add_ret* friend_add_ret::default_instance_ = NULL;

friend_add_ret* friend_add_ret::New() const {
  return new friend_add_ret;
}

void friend_add_ret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    allow_ = false;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_add_ret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allow;
        break;
      }

      // required bool allow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_)));
          set_has_allow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_add_ret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required bool allow = 2;
  if (has_allow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_add_ret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required bool allow = 2;
  if (has_allow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allow(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_add_ret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required bool allow = 2;
    if (has_allow()) {
      total_size += 1 + 1;
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_add_ret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_add_ret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_add_ret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_add_ret::MergeFrom(const friend_add_ret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_allow()) {
      set_allow(from.allow());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_add_ret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_add_ret::CopyFrom(const friend_add_ret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_add_ret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void friend_add_ret::Swap(friend_add_ret* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(allow_, other->allow_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_add_ret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_add_ret_descriptor_;
  metadata.reflection = friend_add_ret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_del_req::kRoleIdFieldNumber;
const int friend_del_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

friend_del_req::friend_del_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_del_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

friend_del_req::friend_del_req(const friend_del_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_del_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_del_req::~friend_del_req() {
  SharedDtor();
}

void friend_del_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void friend_del_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_del_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_del_req_descriptor_;
}

const friend_del_req& friend_del_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_del_req* friend_del_req::default_instance_ = NULL;

friend_del_req* friend_del_req::New() const {
  return new friend_del_req;
}

void friend_del_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  role_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_del_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_id;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_del_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->role_id(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_del_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->role_id(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_del_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 role_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_id(i));
    }
    total_size += 1 * this->role_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_del_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_del_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_del_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_del_req::MergeFrom(const friend_del_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_.MergeFrom(from.role_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_del_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_del_req::CopyFrom(const friend_del_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_del_req::IsInitialized() const {

  return true;
}

void friend_del_req::Swap(friend_del_req* other) {
  if (other != this) {
    role_id_.Swap(&other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_del_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_del_req_descriptor_;
  metadata.reflection = friend_del_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_on_off_notify::kRoleIdFieldNumber;
const int friend_on_off_notify::kOnlineFieldNumber;
#endif  // !_MSC_VER

friend_on_off_notify::friend_on_off_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_on_off_notify::InitAsDefaultInstance() {
}

friend_on_off_notify::friend_on_off_notify(const friend_on_off_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_on_off_notify::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_on_off_notify::~friend_on_off_notify() {
  SharedDtor();
}

void friend_on_off_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void friend_on_off_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_on_off_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_on_off_notify_descriptor_;
}

const friend_on_off_notify& friend_on_off_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_on_off_notify* friend_on_off_notify::default_instance_ = NULL;

friend_on_off_notify* friend_on_off_notify::New() const {
  return new friend_on_off_notify;
}

void friend_on_off_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_on_off_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }

      // required bool online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_on_off_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required bool online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_on_off_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required bool online = 2;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_on_off_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required bool online = 2;
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_on_off_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_on_off_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_on_off_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_on_off_notify::MergeFrom(const friend_on_off_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_on_off_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_on_off_notify::CopyFrom(const friend_on_off_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_on_off_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void friend_on_off_notify::Swap(friend_on_off_notify* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_on_off_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_on_off_notify_descriptor_;
  metadata.reflection = friend_on_off_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_blk_req::kRoleIdFieldNumber;
const int friend_blk_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

friend_blk_req::friend_blk_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_blk_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

friend_blk_req::friend_blk_req(const friend_blk_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_blk_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_blk_req::~friend_blk_req() {
  SharedDtor();
}

void friend_blk_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void friend_blk_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_blk_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_blk_req_descriptor_;
}

const friend_blk_req& friend_blk_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_blk_req* friend_blk_req::default_instance_ = NULL;

friend_blk_req* friend_blk_req::New() const {
  return new friend_blk_req;
}

void friend_blk_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  role_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_blk_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_id;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_blk_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->role_id(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_blk_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->role_id(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_blk_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 role_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_id(i));
    }
    total_size += 1 * this->role_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_blk_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_blk_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_blk_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_blk_req::MergeFrom(const friend_blk_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_.MergeFrom(from.role_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_blk_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_blk_req::CopyFrom(const friend_blk_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_blk_req::IsInitialized() const {

  return true;
}

void friend_blk_req::Swap(friend_blk_req* other) {
  if (other != this) {
    role_id_.Swap(&other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_blk_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_blk_req_descriptor_;
  metadata.reflection = friend_blk_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_status_req::kRoleIdFieldNumber;
const int friend_status_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

friend_status_req::friend_status_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_status_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

friend_status_req::friend_status_req(const friend_status_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_status_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_status_req::~friend_status_req() {
  SharedDtor();
}

void friend_status_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void friend_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_status_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_status_req_descriptor_;
}

const friend_status_req& friend_status_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_status_req* friend_status_req::default_instance_ = NULL;

friend_status_req* friend_status_req::New() const {
  return new friend_status_req;
}

void friend_status_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  role_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_id;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->role_id(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_status_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->role_id(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 role_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_id(i));
    }
    total_size += 1 * this->role_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_status_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_status_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_status_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_status_req::MergeFrom(const friend_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_.MergeFrom(from.role_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_status_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_status_req::CopyFrom(const friend_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_status_req::IsInitialized() const {

  return true;
}

void friend_status_req::Swap(friend_status_req* other) {
  if (other != this) {
    role_id_.Swap(&other->role_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_status_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_status_req_descriptor_;
  metadata.reflection = friend_status_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_status_info::kRoleIdFieldNumber;
const int friend_status_info::kInfoFieldNumber;
#endif  // !_MSC_VER

friend_status_info::friend_status_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_status_info::InitAsDefaultInstance() {
}

friend_status_info::friend_status_info(const friend_status_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_status_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  info_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_status_info::~friend_status_info() {
  SharedDtor();
}

void friend_status_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void friend_status_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_status_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_status_info_descriptor_;
}

const friend_status_info& friend_status_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_status_info* friend_status_info::default_instance_ = NULL;

friend_status_info* friend_status_info::New() const {
  return new friend_status_info;
}

void friend_status_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    info_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_status_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info;
        break;
      }

      // required uint32 info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_)));
          set_has_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_status_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_status_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_status_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_status_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_status_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_status_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_status_info::MergeFrom(const friend_status_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_status_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_status_info::CopyFrom(const friend_status_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_status_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void friend_status_info::Swap(friend_status_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_status_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_status_info_descriptor_;
  metadata.reflection = friend_status_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_status_rsp::kFsiFieldNumber;
#endif  // !_MSC_VER

friend_status_rsp::friend_status_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_status_rsp::InitAsDefaultInstance() {
}

friend_status_rsp::friend_status_rsp(const friend_status_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_status_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_status_rsp::~friend_status_rsp() {
  SharedDtor();
}

void friend_status_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void friend_status_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_status_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_status_rsp_descriptor_;
}

const friend_status_rsp& friend_status_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_status_rsp* friend_status_rsp::default_instance_ = NULL;

friend_status_rsp* friend_status_rsp::New() const {
  return new friend_status_rsp;
}

void friend_status_rsp::Clear() {
  fsi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_status_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.friend_status_info fsi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fsi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fsi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_status_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.friend_status_info fsi = 1;
  for (int i = 0; i < this->fsi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fsi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_status_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.friend_status_info fsi = 1;
  for (int i = 0; i < this->fsi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fsi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_status_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.friend_status_info fsi = 1;
  total_size += 1 * this->fsi_size();
  for (int i = 0; i < this->fsi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fsi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_status_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_status_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_status_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_status_rsp::MergeFrom(const friend_status_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fsi_.MergeFrom(from.fsi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_status_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_status_rsp::CopyFrom(const friend_status_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_status_rsp::IsInitialized() const {

  for (int i = 0; i < fsi_size(); i++) {
    if (!this->fsi(i).IsInitialized()) return false;
  }
  return true;
}

void friend_status_rsp::Swap(friend_status_rsp* other) {
  if (other != this) {
    fsi_.Swap(&other->fsi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_status_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_status_rsp_descriptor_;
  metadata.reflection = friend_status_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_recommend_req::kUnixtimeFieldNumber;
const int friend_recommend_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

friend_recommend_req::friend_recommend_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_recommend_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

friend_recommend_req::friend_recommend_req(const friend_recommend_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_recommend_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_recommend_req::~friend_recommend_req() {
  SharedDtor();
}

void friend_recommend_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void friend_recommend_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_recommend_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_recommend_req_descriptor_;
}

const friend_recommend_req& friend_recommend_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_recommend_req* friend_recommend_req::default_instance_ = NULL;

friend_recommend_req* friend_recommend_req::New() const {
  return new friend_recommend_req;
}

void friend_recommend_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_recommend_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_recommend_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_recommend_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_recommend_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_recommend_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_recommend_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_recommend_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_recommend_req::MergeFrom(const friend_recommend_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_recommend_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_recommend_req::CopyFrom(const friend_recommend_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_recommend_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void friend_recommend_req::Swap(friend_recommend_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_recommend_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_recommend_req_descriptor_;
  metadata.reflection = friend_recommend_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_recommend_rsp::kRoleIdFieldNumber;
#endif  // !_MSC_VER

friend_recommend_rsp::friend_recommend_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_recommend_rsp::InitAsDefaultInstance() {
}

friend_recommend_rsp::friend_recommend_rsp(const friend_recommend_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_recommend_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_recommend_rsp::~friend_recommend_rsp() {
  SharedDtor();
}

void friend_recommend_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void friend_recommend_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_recommend_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_recommend_rsp_descriptor_;
}

const friend_recommend_rsp& friend_recommend_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_recommend_rsp* friend_recommend_rsp::default_instance_ = NULL;

friend_recommend_rsp* friend_recommend_rsp::New() const {
  return new friend_recommend_rsp;
}

void friend_recommend_rsp::Clear() {
  role_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_recommend_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_role_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_role_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_recommend_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->role_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_recommend_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 role_id = 1;
  for (int i = 0; i < this->role_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->role_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_recommend_rsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 role_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role_id(i));
    }
    total_size += 1 * this->role_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_recommend_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_recommend_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_recommend_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_recommend_rsp::MergeFrom(const friend_recommend_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_.MergeFrom(from.role_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_recommend_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_recommend_rsp::CopyFrom(const friend_recommend_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_recommend_rsp::IsInitialized() const {

  return true;
}

void friend_recommend_rsp::Swap(friend_recommend_rsp* other) {
  if (other != this) {
    role_id_.Swap(&other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_recommend_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_recommend_rsp_descriptor_;
  metadata.reflection = friend_recommend_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_degree_msg::kFriendRoleIdFieldNumber;
const int friend_degree_msg::kDegreeValFieldNumber;
#endif  // !_MSC_VER

friend_degree_msg::friend_degree_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_degree_msg::InitAsDefaultInstance() {
}

friend_degree_msg::friend_degree_msg(const friend_degree_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_degree_msg::SharedCtor() {
  _cached_size_ = 0;
  friend_role_id_ = 0u;
  degree_val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_degree_msg::~friend_degree_msg() {
  SharedDtor();
}

void friend_degree_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void friend_degree_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_degree_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_degree_msg_descriptor_;
}

const friend_degree_msg& friend_degree_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_degree_msg* friend_degree_msg::default_instance_ = NULL;

friend_degree_msg* friend_degree_msg::New() const {
  return new friend_degree_msg;
}

void friend_degree_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_role_id_ = 0u;
    degree_val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_degree_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 friend_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_role_id_)));
          set_has_friend_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_degree_val;
        break;
      }

      // required uint32 degree_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_degree_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &degree_val_)));
          set_has_degree_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_degree_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 friend_role_id = 1;
  if (has_friend_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->friend_role_id(), output);
  }

  // required uint32 degree_val = 2;
  if (has_degree_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->degree_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_degree_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 friend_role_id = 1;
  if (has_friend_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->friend_role_id(), target);
  }

  // required uint32 degree_val = 2;
  if (has_degree_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->degree_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_degree_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 friend_role_id = 1;
    if (has_friend_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_role_id());
    }

    // required uint32 degree_val = 2;
    if (has_degree_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->degree_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_degree_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_degree_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_degree_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_degree_msg::MergeFrom(const friend_degree_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_role_id()) {
      set_friend_role_id(from.friend_role_id());
    }
    if (from.has_degree_val()) {
      set_degree_val(from.degree_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_degree_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_degree_msg::CopyFrom(const friend_degree_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_degree_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void friend_degree_msg::Swap(friend_degree_msg* other) {
  if (other != this) {
    std::swap(friend_role_id_, other->friend_role_id_);
    std::swap(degree_val_, other->degree_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_degree_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_degree_msg_descriptor_;
  metadata.reflection = friend_degree_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_degree_add::kRoleIdFieldNumber;
const int friend_degree_add::kFriendRoleIdFieldNumber;
const int friend_degree_add::kDegreeValFieldNumber;
#endif  // !_MSC_VER

friend_degree_add::friend_degree_add()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_degree_add::InitAsDefaultInstance() {
}

friend_degree_add::friend_degree_add(const friend_degree_add& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_degree_add::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  friend_role_id_ = 0u;
  degree_val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_degree_add::~friend_degree_add() {
  SharedDtor();
}

void friend_degree_add::SharedDtor() {
  if (this != default_instance_) {
  }
}

void friend_degree_add::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_degree_add::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_degree_add_descriptor_;
}

const friend_degree_add& friend_degree_add::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

friend_degree_add* friend_degree_add::default_instance_ = NULL;

friend_degree_add* friend_degree_add::New() const {
  return new friend_degree_add;
}

void friend_degree_add::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    friend_role_id_ = 0u;
    degree_val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_degree_add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_role_id;
        break;
      }

      // required uint32 friend_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_role_id_)));
          set_has_friend_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_degree_val;
        break;
      }

      // required uint32 degree_val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_degree_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &degree_val_)));
          set_has_degree_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_degree_add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 friend_role_id = 2;
  if (has_friend_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friend_role_id(), output);
  }

  // required uint32 degree_val = 3;
  if (has_degree_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->degree_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_degree_add::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 friend_role_id = 2;
  if (has_friend_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friend_role_id(), target);
  }

  // required uint32 degree_val = 3;
  if (has_degree_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->degree_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_degree_add::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 friend_role_id = 2;
    if (has_friend_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_role_id());
    }

    // required uint32 degree_val = 3;
    if (has_degree_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->degree_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_degree_add::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_degree_add* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_degree_add*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_degree_add::MergeFrom(const friend_degree_add& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_friend_role_id()) {
      set_friend_role_id(from.friend_role_id());
    }
    if (from.has_degree_val()) {
      set_degree_val(from.degree_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_degree_add::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_degree_add::CopyFrom(const friend_degree_add& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_degree_add::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void friend_degree_add::Swap(friend_degree_add* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(friend_role_id_, other->friend_role_id_);
    std::swap(degree_val_, other->degree_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_degree_add::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_degree_add_descriptor_;
  metadata.reflection = friend_degree_add_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int attention_role_list_req::kUnixtimeFieldNumber;
const int attention_role_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

attention_role_list_req::attention_role_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void attention_role_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

attention_role_list_req::attention_role_list_req(const attention_role_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void attention_role_list_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

attention_role_list_req::~attention_role_list_req() {
  SharedDtor();
}

void attention_role_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void attention_role_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* attention_role_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return attention_role_list_req_descriptor_;
}

const attention_role_list_req& attention_role_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

attention_role_list_req* attention_role_list_req::default_instance_ = NULL;

attention_role_list_req* attention_role_list_req::New() const {
  return new attention_role_list_req;
}

void attention_role_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool attention_role_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void attention_role_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* attention_role_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int attention_role_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void attention_role_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const attention_role_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const attention_role_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void attention_role_list_req::MergeFrom(const attention_role_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void attention_role_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void attention_role_list_req::CopyFrom(const attention_role_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool attention_role_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void attention_role_list_req::Swap(attention_role_list_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata attention_role_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = attention_role_list_req_descriptor_;
  metadata.reflection = attention_role_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int private_friend_rsp::kResultTypeFieldNumber;
#endif  // !_MSC_VER

private_friend_rsp::private_friend_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void private_friend_rsp::InitAsDefaultInstance() {
}

private_friend_rsp::private_friend_rsp(const private_friend_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void private_friend_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

private_friend_rsp::~private_friend_rsp() {
  SharedDtor();
}

void private_friend_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void private_friend_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* private_friend_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return private_friend_rsp_descriptor_;
}

const private_friend_rsp& private_friend_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2efriend_2eproto();
  return *default_instance_;
}

private_friend_rsp* private_friend_rsp::default_instance_ = NULL;

private_friend_rsp* private_friend_rsp::New() const {
  return new private_friend_rsp;
}

void private_friend_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool private_friend_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void private_friend_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* private_friend_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result_type = 1;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int private_friend_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result_type = 1;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void private_friend_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const private_friend_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const private_friend_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void private_friend_rsp::MergeFrom(const private_friend_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void private_friend_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void private_friend_rsp::CopyFrom(const private_friend_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool private_friend_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void private_friend_rsp::Swap(private_friend_rsp* other) {
  if (other != this) {
    std::swap(result_type_, other->result_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata private_friend_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = private_friend_rsp_descriptor_;
  metadata.reflection = private_friend_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
