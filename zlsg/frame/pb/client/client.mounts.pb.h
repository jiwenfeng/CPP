// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.mounts.proto

#ifndef PROTOBUF_client_2emounts_2eproto__INCLUDED
#define PROTOBUF_client_2emounts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
#include "client.role_attr_msg.pb.h"
#include "client.role_skill_msg.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2emounts_2eproto();
void protobuf_AssignDesc_client_2emounts_2eproto();
void protobuf_ShutdownFile_client_2emounts_2eproto();

class mounts_info;
class mounts_msg;
class mounts_level_rsp;
class receive_mounts_req;
class receive_mounts_rsp;
class ride_mounts_req;
class ride_mounts_rsp;
class upgrade_mounts_req;
class upgrade_mounts_rsp;
class upgrade_mounts_skill_req;
class upgrade_mounts_skill_rsp;
class upgrade_mounts_level_req;
class mounts_bless_time_req;
class mounts_bless_time_rsp;

enum receive_mounts_rsp_result {
  receive_mounts_rsp_result_success = 0,
  receive_mounts_rsp_result_lvl_limit = 1,
  receive_mounts_rsp_result_raid_limit = 2,
  receive_mounts_rsp_result_once_limit = 3
};
bool receive_mounts_rsp_result_IsValid(int value);
const receive_mounts_rsp_result receive_mounts_rsp_result_result_MIN = receive_mounts_rsp_result_success;
const receive_mounts_rsp_result receive_mounts_rsp_result_result_MAX = receive_mounts_rsp_result_once_limit;
const int receive_mounts_rsp_result_result_ARRAYSIZE = receive_mounts_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* receive_mounts_rsp_result_descriptor();
inline const ::std::string& receive_mounts_rsp_result_Name(receive_mounts_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    receive_mounts_rsp_result_descriptor(), value);
}
inline bool receive_mounts_rsp_result_Parse(
    const ::std::string& name, receive_mounts_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<receive_mounts_rsp_result>(
    receive_mounts_rsp_result_descriptor(), name, value);
}
enum upgrade_mounts_skill_rsp_result {
  upgrade_mounts_skill_rsp_result_success_add_exp = 0,
  upgrade_mounts_skill_rsp_result_success_level_up = 1,
  upgrade_mounts_skill_rsp_result_count_limit = 2,
  upgrade_mounts_skill_rsp_result_money_limit = 3,
  upgrade_mounts_skill_rsp_result_skill_error = 4,
  upgrade_mounts_skill_rsp_result_max_level = 5,
  upgrade_mounts_skill_rsp_result_level_limit = 6
};
bool upgrade_mounts_skill_rsp_result_IsValid(int value);
const upgrade_mounts_skill_rsp_result upgrade_mounts_skill_rsp_result_result_MIN = upgrade_mounts_skill_rsp_result_success_add_exp;
const upgrade_mounts_skill_rsp_result upgrade_mounts_skill_rsp_result_result_MAX = upgrade_mounts_skill_rsp_result_level_limit;
const int upgrade_mounts_skill_rsp_result_result_ARRAYSIZE = upgrade_mounts_skill_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* upgrade_mounts_skill_rsp_result_descriptor();
inline const ::std::string& upgrade_mounts_skill_rsp_result_Name(upgrade_mounts_skill_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    upgrade_mounts_skill_rsp_result_descriptor(), value);
}
inline bool upgrade_mounts_skill_rsp_result_Parse(
    const ::std::string& name, upgrade_mounts_skill_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<upgrade_mounts_skill_rsp_result>(
    upgrade_mounts_skill_rsp_result_descriptor(), name, value);
}
// ===================================================================

class mounts_info : public ::google::protobuf::Message {
 public:
  mounts_info();
  virtual ~mounts_info();

  mounts_info(const mounts_info& from);

  inline mounts_info& operator=(const mounts_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mounts_info& default_instance();

  void Swap(mounts_info* other);

  // implements Message ----------------------------------------------

  mounts_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mounts_info& from);
  void MergeFrom(const mounts_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mount_id = 1;
  inline bool has_mount_id() const;
  inline void clear_mount_id();
  static const int kMountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mount_id() const;
  inline void set_mount_id(::google::protobuf::uint32 value);

  // required uint32 advance_time = 2;
  inline bool has_advance_time() const;
  inline void clear_advance_time();
  static const int kAdvanceTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 advance_time() const;
  inline void set_advance_time(::google::protobuf::uint32 value);

  // required uint32 advance_bless = 3;
  inline bool has_advance_bless() const;
  inline void clear_advance_bless();
  static const int kAdvanceBlessFieldNumber = 3;
  inline ::google::protobuf::uint32 advance_bless() const;
  inline void set_advance_bless(::google::protobuf::uint32 value);

  // required uint32 skill_upgrade_num = 4;
  inline bool has_skill_upgrade_num() const;
  inline void clear_skill_upgrade_num();
  static const int kSkillUpgradeNumFieldNumber = 4;
  inline ::google::protobuf::uint32 skill_upgrade_num() const;
  inline void set_skill_upgrade_num(::google::protobuf::uint32 value);

  // required uint32 mount_level = 5;
  inline bool has_mount_level() const;
  inline void clear_mount_level();
  static const int kMountLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 mount_level() const;
  inline void set_mount_level(::google::protobuf::uint32 value);

  // required uint32 mount_exp = 6;
  inline bool has_mount_exp() const;
  inline void clear_mount_exp();
  static const int kMountExpFieldNumber = 6;
  inline ::google::protobuf::uint32 mount_exp() const;
  inline void set_mount_exp(::google::protobuf::uint32 value);

  // optional uint32 mount_power = 7;
  inline bool has_mount_power() const;
  inline void clear_mount_power();
  static const int kMountPowerFieldNumber = 7;
  inline ::google::protobuf::uint32 mount_power() const;
  inline void set_mount_power(::google::protobuf::uint32 value);

  // optional .client.role_data rd = 8;
  inline bool has_rd() const;
  inline void clear_rd();
  static const int kRdFieldNumber = 8;
  inline const ::client::role_data& rd() const;
  inline ::client::role_data* mutable_rd();
  inline ::client::role_data* release_rd();
  inline void set_allocated_rd(::client::role_data* rd);

  // optional .client.role_attr attr = 9;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 9;
  inline const ::client::role_attr& attr() const;
  inline ::client::role_attr* mutable_attr();
  inline ::client::role_attr* release_attr();
  inline void set_allocated_attr(::client::role_attr* attr);

  // @@protoc_insertion_point(class_scope:client.mounts_info)
 private:
  inline void set_has_mount_id();
  inline void clear_has_mount_id();
  inline void set_has_advance_time();
  inline void clear_has_advance_time();
  inline void set_has_advance_bless();
  inline void clear_has_advance_bless();
  inline void set_has_skill_upgrade_num();
  inline void clear_has_skill_upgrade_num();
  inline void set_has_mount_level();
  inline void clear_has_mount_level();
  inline void set_has_mount_exp();
  inline void clear_has_mount_exp();
  inline void set_has_mount_power();
  inline void clear_has_mount_power();
  inline void set_has_rd();
  inline void clear_has_rd();
  inline void set_has_attr();
  inline void clear_has_attr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mount_id_;
  ::google::protobuf::uint32 advance_time_;
  ::google::protobuf::uint32 advance_bless_;
  ::google::protobuf::uint32 skill_upgrade_num_;
  ::google::protobuf::uint32 mount_level_;
  ::google::protobuf::uint32 mount_exp_;
  ::client::role_data* rd_;
  ::client::role_attr* attr_;
  ::google::protobuf::uint32 mount_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static mounts_info* default_instance_;
};
// -------------------------------------------------------------------

class mounts_msg : public ::google::protobuf::Message {
 public:
  mounts_msg();
  virtual ~mounts_msg();

  mounts_msg(const mounts_msg& from);

  inline mounts_msg& operator=(const mounts_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mounts_msg& default_instance();

  void Swap(mounts_msg* other);

  // implements Message ----------------------------------------------

  mounts_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mounts_msg& from);
  void MergeFrom(const mounts_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.mounts_info mi = 1;
  inline int mi_size() const;
  inline void clear_mi();
  static const int kMiFieldNumber = 1;
  inline const ::client::mounts_info& mi(int index) const;
  inline ::client::mounts_info* mutable_mi(int index);
  inline ::client::mounts_info* add_mi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::mounts_info >&
      mi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::mounts_info >*
      mutable_mi();

  // @@protoc_insertion_point(class_scope:client.mounts_msg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::mounts_info > mi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static mounts_msg* default_instance_;
};
// -------------------------------------------------------------------

class mounts_level_rsp : public ::google::protobuf::Message {
 public:
  mounts_level_rsp();
  virtual ~mounts_level_rsp();

  mounts_level_rsp(const mounts_level_rsp& from);

  inline mounts_level_rsp& operator=(const mounts_level_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mounts_level_rsp& default_instance();

  void Swap(mounts_level_rsp* other);

  // implements Message ----------------------------------------------

  mounts_level_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mounts_level_rsp& from);
  void MergeFrom(const mounts_level_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.mounts_info mi = 1;
  inline int mi_size() const;
  inline void clear_mi();
  static const int kMiFieldNumber = 1;
  inline const ::client::mounts_info& mi(int index) const;
  inline ::client::mounts_info* mutable_mi(int index);
  inline ::client::mounts_info* add_mi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::mounts_info >&
      mi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::mounts_info >*
      mutable_mi();

  // @@protoc_insertion_point(class_scope:client.mounts_level_rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::mounts_info > mi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static mounts_level_rsp* default_instance_;
};
// -------------------------------------------------------------------

class receive_mounts_req : public ::google::protobuf::Message {
 public:
  receive_mounts_req();
  virtual ~receive_mounts_req();

  receive_mounts_req(const receive_mounts_req& from);

  inline receive_mounts_req& operator=(const receive_mounts_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const receive_mounts_req& default_instance();

  void Swap(receive_mounts_req* other);

  // implements Message ----------------------------------------------

  receive_mounts_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const receive_mounts_req& from);
  void MergeFrom(const receive_mounts_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.receive_mounts_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static receive_mounts_req* default_instance_;
};
// -------------------------------------------------------------------

class receive_mounts_rsp : public ::google::protobuf::Message {
 public:
  receive_mounts_rsp();
  virtual ~receive_mounts_rsp();

  receive_mounts_rsp(const receive_mounts_rsp& from);

  inline receive_mounts_rsp& operator=(const receive_mounts_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const receive_mounts_rsp& default_instance();

  void Swap(receive_mounts_rsp* other);

  // implements Message ----------------------------------------------

  receive_mounts_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const receive_mounts_rsp& from);
  void MergeFrom(const receive_mounts_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef receive_mounts_rsp_result result;
  static const result success = receive_mounts_rsp_result_success;
  static const result lvl_limit = receive_mounts_rsp_result_lvl_limit;
  static const result raid_limit = receive_mounts_rsp_result_raid_limit;
  static const result once_limit = receive_mounts_rsp_result_once_limit;
  static inline bool result_IsValid(int value) {
    return receive_mounts_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    receive_mounts_rsp_result_result_MIN;
  static const result result_MAX =
    receive_mounts_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    receive_mounts_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return receive_mounts_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return receive_mounts_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return receive_mounts_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.receive_mounts_rsp.result ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::receive_mounts_rsp_result ret() const;
  inline void set_ret(::client::receive_mounts_rsp_result value);

  // optional uint32 mount_id = 2;
  inline bool has_mount_id() const;
  inline void clear_mount_id();
  static const int kMountIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mount_id() const;
  inline void set_mount_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.receive_mounts_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_mount_id();
  inline void clear_has_mount_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 mount_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static receive_mounts_rsp* default_instance_;
};
// -------------------------------------------------------------------

class ride_mounts_req : public ::google::protobuf::Message {
 public:
  ride_mounts_req();
  virtual ~ride_mounts_req();

  ride_mounts_req(const ride_mounts_req& from);

  inline ride_mounts_req& operator=(const ride_mounts_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ride_mounts_req& default_instance();

  void Swap(ride_mounts_req* other);

  // implements Message ----------------------------------------------

  ride_mounts_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ride_mounts_req& from);
  void MergeFrom(const ride_mounts_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.ride_mounts_req)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static ride_mounts_req* default_instance_;
};
// -------------------------------------------------------------------

class ride_mounts_rsp : public ::google::protobuf::Message {
 public:
  ride_mounts_rsp();
  virtual ~ride_mounts_rsp();

  ride_mounts_rsp(const ride_mounts_rsp& from);

  inline ride_mounts_rsp& operator=(const ride_mounts_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ride_mounts_rsp& default_instance();

  void Swap(ride_mounts_rsp* other);

  // implements Message ----------------------------------------------

  ride_mounts_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ride_mounts_rsp& from);
  void MergeFrom(const ride_mounts_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.ride_mounts_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static ride_mounts_rsp* default_instance_;
};
// -------------------------------------------------------------------

class upgrade_mounts_req : public ::google::protobuf::Message {
 public:
  upgrade_mounts_req();
  virtual ~upgrade_mounts_req();

  upgrade_mounts_req(const upgrade_mounts_req& from);

  inline upgrade_mounts_req& operator=(const upgrade_mounts_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upgrade_mounts_req& default_instance();

  void Swap(upgrade_mounts_req* other);

  // implements Message ----------------------------------------------

  upgrade_mounts_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upgrade_mounts_req& from);
  void MergeFrom(const upgrade_mounts_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.upgrade_mounts_req)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static upgrade_mounts_req* default_instance_;
};
// -------------------------------------------------------------------

class upgrade_mounts_rsp : public ::google::protobuf::Message {
 public:
  upgrade_mounts_rsp();
  virtual ~upgrade_mounts_rsp();

  upgrade_mounts_rsp(const upgrade_mounts_rsp& from);

  inline upgrade_mounts_rsp& operator=(const upgrade_mounts_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upgrade_mounts_rsp& default_instance();

  void Swap(upgrade_mounts_rsp* other);

  // implements Message ----------------------------------------------

  upgrade_mounts_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upgrade_mounts_rsp& from);
  void MergeFrom(const upgrade_mounts_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .client.mounts_info mi = 2;
  inline int mi_size() const;
  inline void clear_mi();
  static const int kMiFieldNumber = 2;
  inline const ::client::mounts_info& mi(int index) const;
  inline ::client::mounts_info* mutable_mi(int index);
  inline ::client::mounts_info* add_mi();
  inline const ::google::protobuf::RepeatedPtrField< ::client::mounts_info >&
      mi() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::mounts_info >*
      mutable_mi();

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.upgrade_mounts_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::mounts_info > mi_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static upgrade_mounts_rsp* default_instance_;
};
// -------------------------------------------------------------------

class upgrade_mounts_skill_req : public ::google::protobuf::Message {
 public:
  upgrade_mounts_skill_req();
  virtual ~upgrade_mounts_skill_req();

  upgrade_mounts_skill_req(const upgrade_mounts_skill_req& from);

  inline upgrade_mounts_skill_req& operator=(const upgrade_mounts_skill_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upgrade_mounts_skill_req& default_instance();

  void Swap(upgrade_mounts_skill_req* other);

  // implements Message ----------------------------------------------

  upgrade_mounts_skill_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upgrade_mounts_skill_req& from);
  void MergeFrom(const upgrade_mounts_skill_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 upgrade_type = 1 [default = 0];
  inline bool has_upgrade_type() const;
  inline void clear_upgrade_type();
  static const int kUpgradeTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 upgrade_type() const;
  inline void set_upgrade_type(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.upgrade_mounts_skill_req)
 private:
  inline void set_has_upgrade_type();
  inline void clear_has_upgrade_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 upgrade_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static upgrade_mounts_skill_req* default_instance_;
};
// -------------------------------------------------------------------

class upgrade_mounts_skill_rsp : public ::google::protobuf::Message {
 public:
  upgrade_mounts_skill_rsp();
  virtual ~upgrade_mounts_skill_rsp();

  upgrade_mounts_skill_rsp(const upgrade_mounts_skill_rsp& from);

  inline upgrade_mounts_skill_rsp& operator=(const upgrade_mounts_skill_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upgrade_mounts_skill_rsp& default_instance();

  void Swap(upgrade_mounts_skill_rsp* other);

  // implements Message ----------------------------------------------

  upgrade_mounts_skill_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upgrade_mounts_skill_rsp& from);
  void MergeFrom(const upgrade_mounts_skill_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef upgrade_mounts_skill_rsp_result result;
  static const result success_add_exp = upgrade_mounts_skill_rsp_result_success_add_exp;
  static const result success_level_up = upgrade_mounts_skill_rsp_result_success_level_up;
  static const result count_limit = upgrade_mounts_skill_rsp_result_count_limit;
  static const result money_limit = upgrade_mounts_skill_rsp_result_money_limit;
  static const result skill_error = upgrade_mounts_skill_rsp_result_skill_error;
  static const result max_level = upgrade_mounts_skill_rsp_result_max_level;
  static const result level_limit = upgrade_mounts_skill_rsp_result_level_limit;
  static inline bool result_IsValid(int value) {
    return upgrade_mounts_skill_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    upgrade_mounts_skill_rsp_result_result_MIN;
  static const result result_MAX =
    upgrade_mounts_skill_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    upgrade_mounts_skill_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return upgrade_mounts_skill_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return upgrade_mounts_skill_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return upgrade_mounts_skill_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.upgrade_mounts_skill_rsp.result ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::upgrade_mounts_skill_rsp_result ret() const;
  inline void set_ret(::client::upgrade_mounts_skill_rsp_result value);

  // required uint32 upgrade_type = 2;
  inline bool has_upgrade_type() const;
  inline void clear_upgrade_type();
  static const int kUpgradeTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 upgrade_type() const;
  inline void set_upgrade_type(::google::protobuf::uint32 value);

  // repeated uint32 skill_id = 3;
  inline int skill_id_size() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 3;
  inline ::google::protobuf::uint32 skill_id(int index) const;
  inline void set_skill_id(int index, ::google::protobuf::uint32 value);
  inline void add_skill_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skill_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skill_id();

  // required uint32 upgrade_num = 4;
  inline bool has_upgrade_num() const;
  inline void clear_upgrade_num();
  static const int kUpgradeNumFieldNumber = 4;
  inline ::google::protobuf::uint32 upgrade_num() const;
  inline void set_upgrade_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.upgrade_mounts_skill_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_upgrade_type();
  inline void clear_has_upgrade_type();
  inline void set_has_upgrade_num();
  inline void clear_has_upgrade_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 upgrade_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skill_id_;
  ::google::protobuf::uint32 upgrade_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static upgrade_mounts_skill_rsp* default_instance_;
};
// -------------------------------------------------------------------

class upgrade_mounts_level_req : public ::google::protobuf::Message {
 public:
  upgrade_mounts_level_req();
  virtual ~upgrade_mounts_level_req();

  upgrade_mounts_level_req(const upgrade_mounts_level_req& from);

  inline upgrade_mounts_level_req& operator=(const upgrade_mounts_level_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const upgrade_mounts_level_req& default_instance();

  void Swap(upgrade_mounts_level_req* other);

  // implements Message ----------------------------------------------

  upgrade_mounts_level_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const upgrade_mounts_level_req& from);
  void MergeFrom(const upgrade_mounts_level_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mount_id = 1;
  inline bool has_mount_id() const;
  inline void clear_mount_id();
  static const int kMountIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mount_id() const;
  inline void set_mount_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.upgrade_mounts_level_req)
 private:
  inline void set_has_mount_id();
  inline void clear_has_mount_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 mount_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static upgrade_mounts_level_req* default_instance_;
};
// -------------------------------------------------------------------

class mounts_bless_time_req : public ::google::protobuf::Message {
 public:
  mounts_bless_time_req();
  virtual ~mounts_bless_time_req();

  mounts_bless_time_req(const mounts_bless_time_req& from);

  inline mounts_bless_time_req& operator=(const mounts_bless_time_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mounts_bless_time_req& default_instance();

  void Swap(mounts_bless_time_req* other);

  // implements Message ----------------------------------------------

  mounts_bless_time_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mounts_bless_time_req& from);
  void MergeFrom(const mounts_bless_time_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.mounts_bless_time_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static mounts_bless_time_req* default_instance_;
};
// -------------------------------------------------------------------

class mounts_bless_time_rsp : public ::google::protobuf::Message {
 public:
  mounts_bless_time_rsp();
  virtual ~mounts_bless_time_rsp();

  mounts_bless_time_rsp(const mounts_bless_time_rsp& from);

  inline mounts_bless_time_rsp& operator=(const mounts_bless_time_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mounts_bless_time_rsp& default_instance();

  void Swap(mounts_bless_time_rsp* other);

  // implements Message ----------------------------------------------

  mounts_bless_time_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mounts_bless_time_rsp& from);
  void MergeFrom(const mounts_bless_time_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 remain_time = 1;
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 remain_time() const;
  inline void set_remain_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.mounts_bless_time_rsp)
 private:
  inline void set_has_remain_time();
  inline void clear_has_remain_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 remain_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2emounts_2eproto();
  friend void protobuf_AssignDesc_client_2emounts_2eproto();
  friend void protobuf_ShutdownFile_client_2emounts_2eproto();

  void InitAsDefaultInstance();
  static mounts_bless_time_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// mounts_info

// required uint32 mount_id = 1;
inline bool mounts_info::has_mount_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mounts_info::set_has_mount_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mounts_info::clear_has_mount_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mounts_info::clear_mount_id() {
  mount_id_ = 0u;
  clear_has_mount_id();
}
inline ::google::protobuf::uint32 mounts_info::mount_id() const {
  return mount_id_;
}
inline void mounts_info::set_mount_id(::google::protobuf::uint32 value) {
  set_has_mount_id();
  mount_id_ = value;
}

// required uint32 advance_time = 2;
inline bool mounts_info::has_advance_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mounts_info::set_has_advance_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mounts_info::clear_has_advance_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mounts_info::clear_advance_time() {
  advance_time_ = 0u;
  clear_has_advance_time();
}
inline ::google::protobuf::uint32 mounts_info::advance_time() const {
  return advance_time_;
}
inline void mounts_info::set_advance_time(::google::protobuf::uint32 value) {
  set_has_advance_time();
  advance_time_ = value;
}

// required uint32 advance_bless = 3;
inline bool mounts_info::has_advance_bless() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mounts_info::set_has_advance_bless() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mounts_info::clear_has_advance_bless() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mounts_info::clear_advance_bless() {
  advance_bless_ = 0u;
  clear_has_advance_bless();
}
inline ::google::protobuf::uint32 mounts_info::advance_bless() const {
  return advance_bless_;
}
inline void mounts_info::set_advance_bless(::google::protobuf::uint32 value) {
  set_has_advance_bless();
  advance_bless_ = value;
}

// required uint32 skill_upgrade_num = 4;
inline bool mounts_info::has_skill_upgrade_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mounts_info::set_has_skill_upgrade_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mounts_info::clear_has_skill_upgrade_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mounts_info::clear_skill_upgrade_num() {
  skill_upgrade_num_ = 0u;
  clear_has_skill_upgrade_num();
}
inline ::google::protobuf::uint32 mounts_info::skill_upgrade_num() const {
  return skill_upgrade_num_;
}
inline void mounts_info::set_skill_upgrade_num(::google::protobuf::uint32 value) {
  set_has_skill_upgrade_num();
  skill_upgrade_num_ = value;
}

// required uint32 mount_level = 5;
inline bool mounts_info::has_mount_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mounts_info::set_has_mount_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mounts_info::clear_has_mount_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mounts_info::clear_mount_level() {
  mount_level_ = 0u;
  clear_has_mount_level();
}
inline ::google::protobuf::uint32 mounts_info::mount_level() const {
  return mount_level_;
}
inline void mounts_info::set_mount_level(::google::protobuf::uint32 value) {
  set_has_mount_level();
  mount_level_ = value;
}

// required uint32 mount_exp = 6;
inline bool mounts_info::has_mount_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mounts_info::set_has_mount_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mounts_info::clear_has_mount_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mounts_info::clear_mount_exp() {
  mount_exp_ = 0u;
  clear_has_mount_exp();
}
inline ::google::protobuf::uint32 mounts_info::mount_exp() const {
  return mount_exp_;
}
inline void mounts_info::set_mount_exp(::google::protobuf::uint32 value) {
  set_has_mount_exp();
  mount_exp_ = value;
}

// optional uint32 mount_power = 7;
inline bool mounts_info::has_mount_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mounts_info::set_has_mount_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mounts_info::clear_has_mount_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mounts_info::clear_mount_power() {
  mount_power_ = 0u;
  clear_has_mount_power();
}
inline ::google::protobuf::uint32 mounts_info::mount_power() const {
  return mount_power_;
}
inline void mounts_info::set_mount_power(::google::protobuf::uint32 value) {
  set_has_mount_power();
  mount_power_ = value;
}

// optional .client.role_data rd = 8;
inline bool mounts_info::has_rd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mounts_info::set_has_rd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mounts_info::clear_has_rd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mounts_info::clear_rd() {
  if (rd_ != NULL) rd_->::client::role_data::Clear();
  clear_has_rd();
}
inline const ::client::role_data& mounts_info::rd() const {
  return rd_ != NULL ? *rd_ : *default_instance_->rd_;
}
inline ::client::role_data* mounts_info::mutable_rd() {
  set_has_rd();
  if (rd_ == NULL) rd_ = new ::client::role_data;
  return rd_;
}
inline ::client::role_data* mounts_info::release_rd() {
  clear_has_rd();
  ::client::role_data* temp = rd_;
  rd_ = NULL;
  return temp;
}
inline void mounts_info::set_allocated_rd(::client::role_data* rd) {
  delete rd_;
  rd_ = rd;
  if (rd) {
    set_has_rd();
  } else {
    clear_has_rd();
  }
}

// optional .client.role_attr attr = 9;
inline bool mounts_info::has_attr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mounts_info::set_has_attr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mounts_info::clear_has_attr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mounts_info::clear_attr() {
  if (attr_ != NULL) attr_->::client::role_attr::Clear();
  clear_has_attr();
}
inline const ::client::role_attr& mounts_info::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::client::role_attr* mounts_info::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::client::role_attr;
  return attr_;
}
inline ::client::role_attr* mounts_info::release_attr() {
  clear_has_attr();
  ::client::role_attr* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void mounts_info::set_allocated_attr(::client::role_attr* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
}

// -------------------------------------------------------------------

// mounts_msg

// repeated .client.mounts_info mi = 1;
inline int mounts_msg::mi_size() const {
  return mi_.size();
}
inline void mounts_msg::clear_mi() {
  mi_.Clear();
}
inline const ::client::mounts_info& mounts_msg::mi(int index) const {
  return mi_.Get(index);
}
inline ::client::mounts_info* mounts_msg::mutable_mi(int index) {
  return mi_.Mutable(index);
}
inline ::client::mounts_info* mounts_msg::add_mi() {
  return mi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::mounts_info >&
mounts_msg::mi() const {
  return mi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::mounts_info >*
mounts_msg::mutable_mi() {
  return &mi_;
}

// -------------------------------------------------------------------

// mounts_level_rsp

// repeated .client.mounts_info mi = 1;
inline int mounts_level_rsp::mi_size() const {
  return mi_.size();
}
inline void mounts_level_rsp::clear_mi() {
  mi_.Clear();
}
inline const ::client::mounts_info& mounts_level_rsp::mi(int index) const {
  return mi_.Get(index);
}
inline ::client::mounts_info* mounts_level_rsp::mutable_mi(int index) {
  return mi_.Mutable(index);
}
inline ::client::mounts_info* mounts_level_rsp::add_mi() {
  return mi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::mounts_info >&
mounts_level_rsp::mi() const {
  return mi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::mounts_info >*
mounts_level_rsp::mutable_mi() {
  return &mi_;
}

// -------------------------------------------------------------------

// receive_mounts_req

// required uint32 unixtime = 1;
inline bool receive_mounts_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void receive_mounts_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void receive_mounts_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void receive_mounts_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 receive_mounts_req::unixtime() const {
  return unixtime_;
}
inline void receive_mounts_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool receive_mounts_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void receive_mounts_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void receive_mounts_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void receive_mounts_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& receive_mounts_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* receive_mounts_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* receive_mounts_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void receive_mounts_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// receive_mounts_rsp

// required .client.receive_mounts_rsp.result ret = 1;
inline bool receive_mounts_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void receive_mounts_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void receive_mounts_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void receive_mounts_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::receive_mounts_rsp_result receive_mounts_rsp::ret() const {
  return static_cast< ::client::receive_mounts_rsp_result >(ret_);
}
inline void receive_mounts_rsp::set_ret(::client::receive_mounts_rsp_result value) {
  assert(::client::receive_mounts_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 mount_id = 2;
inline bool receive_mounts_rsp::has_mount_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void receive_mounts_rsp::set_has_mount_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void receive_mounts_rsp::clear_has_mount_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void receive_mounts_rsp::clear_mount_id() {
  mount_id_ = 0u;
  clear_has_mount_id();
}
inline ::google::protobuf::uint32 receive_mounts_rsp::mount_id() const {
  return mount_id_;
}
inline void receive_mounts_rsp::set_mount_id(::google::protobuf::uint32 value) {
  set_has_mount_id();
  mount_id_ = value;
}

// -------------------------------------------------------------------

// ride_mounts_req

// required uint32 index = 1;
inline bool ride_mounts_req::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ride_mounts_req::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ride_mounts_req::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ride_mounts_req::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ride_mounts_req::index() const {
  return index_;
}
inline void ride_mounts_req::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool ride_mounts_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ride_mounts_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ride_mounts_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ride_mounts_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& ride_mounts_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* ride_mounts_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* ride_mounts_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void ride_mounts_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// ride_mounts_rsp

// required uint32 ret = 1;
inline bool ride_mounts_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ride_mounts_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ride_mounts_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ride_mounts_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 ride_mounts_rsp::ret() const {
  return ret_;
}
inline void ride_mounts_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 index = 2;
inline bool ride_mounts_rsp::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ride_mounts_rsp::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ride_mounts_rsp::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ride_mounts_rsp::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ride_mounts_rsp::index() const {
  return index_;
}
inline void ride_mounts_rsp::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// upgrade_mounts_req

// required uint32 index = 1;
inline bool upgrade_mounts_req::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upgrade_mounts_req::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upgrade_mounts_req::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upgrade_mounts_req::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 upgrade_mounts_req::index() const {
  return index_;
}
inline void upgrade_mounts_req::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool upgrade_mounts_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void upgrade_mounts_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void upgrade_mounts_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void upgrade_mounts_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& upgrade_mounts_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* upgrade_mounts_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* upgrade_mounts_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void upgrade_mounts_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// upgrade_mounts_rsp

// required uint32 ret = 1;
inline bool upgrade_mounts_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upgrade_mounts_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upgrade_mounts_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upgrade_mounts_rsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 upgrade_mounts_rsp::ret() const {
  return ret_;
}
inline void upgrade_mounts_rsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .client.mounts_info mi = 2;
inline int upgrade_mounts_rsp::mi_size() const {
  return mi_.size();
}
inline void upgrade_mounts_rsp::clear_mi() {
  mi_.Clear();
}
inline const ::client::mounts_info& upgrade_mounts_rsp::mi(int index) const {
  return mi_.Get(index);
}
inline ::client::mounts_info* upgrade_mounts_rsp::mutable_mi(int index) {
  return mi_.Mutable(index);
}
inline ::client::mounts_info* upgrade_mounts_rsp::add_mi() {
  return mi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::mounts_info >&
upgrade_mounts_rsp::mi() const {
  return mi_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::mounts_info >*
upgrade_mounts_rsp::mutable_mi() {
  return &mi_;
}

// optional uint32 index = 3;
inline bool upgrade_mounts_rsp::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void upgrade_mounts_rsp::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void upgrade_mounts_rsp::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void upgrade_mounts_rsp::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 upgrade_mounts_rsp::index() const {
  return index_;
}
inline void upgrade_mounts_rsp::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// upgrade_mounts_skill_req

// required uint32 upgrade_type = 1 [default = 0];
inline bool upgrade_mounts_skill_req::has_upgrade_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upgrade_mounts_skill_req::set_has_upgrade_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upgrade_mounts_skill_req::clear_has_upgrade_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upgrade_mounts_skill_req::clear_upgrade_type() {
  upgrade_type_ = 0u;
  clear_has_upgrade_type();
}
inline ::google::protobuf::uint32 upgrade_mounts_skill_req::upgrade_type() const {
  return upgrade_type_;
}
inline void upgrade_mounts_skill_req::set_upgrade_type(::google::protobuf::uint32 value) {
  set_has_upgrade_type();
  upgrade_type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool upgrade_mounts_skill_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void upgrade_mounts_skill_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void upgrade_mounts_skill_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void upgrade_mounts_skill_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& upgrade_mounts_skill_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* upgrade_mounts_skill_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* upgrade_mounts_skill_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void upgrade_mounts_skill_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// upgrade_mounts_skill_rsp

// required .client.upgrade_mounts_skill_rsp.result ret = 1;
inline bool upgrade_mounts_skill_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upgrade_mounts_skill_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upgrade_mounts_skill_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upgrade_mounts_skill_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::upgrade_mounts_skill_rsp_result upgrade_mounts_skill_rsp::ret() const {
  return static_cast< ::client::upgrade_mounts_skill_rsp_result >(ret_);
}
inline void upgrade_mounts_skill_rsp::set_ret(::client::upgrade_mounts_skill_rsp_result value) {
  assert(::client::upgrade_mounts_skill_rsp_result_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// required uint32 upgrade_type = 2;
inline bool upgrade_mounts_skill_rsp::has_upgrade_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void upgrade_mounts_skill_rsp::set_has_upgrade_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void upgrade_mounts_skill_rsp::clear_has_upgrade_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void upgrade_mounts_skill_rsp::clear_upgrade_type() {
  upgrade_type_ = 0u;
  clear_has_upgrade_type();
}
inline ::google::protobuf::uint32 upgrade_mounts_skill_rsp::upgrade_type() const {
  return upgrade_type_;
}
inline void upgrade_mounts_skill_rsp::set_upgrade_type(::google::protobuf::uint32 value) {
  set_has_upgrade_type();
  upgrade_type_ = value;
}

// repeated uint32 skill_id = 3;
inline int upgrade_mounts_skill_rsp::skill_id_size() const {
  return skill_id_.size();
}
inline void upgrade_mounts_skill_rsp::clear_skill_id() {
  skill_id_.Clear();
}
inline ::google::protobuf::uint32 upgrade_mounts_skill_rsp::skill_id(int index) const {
  return skill_id_.Get(index);
}
inline void upgrade_mounts_skill_rsp::set_skill_id(int index, ::google::protobuf::uint32 value) {
  skill_id_.Set(index, value);
}
inline void upgrade_mounts_skill_rsp::add_skill_id(::google::protobuf::uint32 value) {
  skill_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
upgrade_mounts_skill_rsp::skill_id() const {
  return skill_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
upgrade_mounts_skill_rsp::mutable_skill_id() {
  return &skill_id_;
}

// required uint32 upgrade_num = 4;
inline bool upgrade_mounts_skill_rsp::has_upgrade_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void upgrade_mounts_skill_rsp::set_has_upgrade_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void upgrade_mounts_skill_rsp::clear_has_upgrade_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void upgrade_mounts_skill_rsp::clear_upgrade_num() {
  upgrade_num_ = 0u;
  clear_has_upgrade_num();
}
inline ::google::protobuf::uint32 upgrade_mounts_skill_rsp::upgrade_num() const {
  return upgrade_num_;
}
inline void upgrade_mounts_skill_rsp::set_upgrade_num(::google::protobuf::uint32 value) {
  set_has_upgrade_num();
  upgrade_num_ = value;
}

// -------------------------------------------------------------------

// upgrade_mounts_level_req

// required uint32 mount_id = 1;
inline bool upgrade_mounts_level_req::has_mount_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void upgrade_mounts_level_req::set_has_mount_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void upgrade_mounts_level_req::clear_has_mount_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void upgrade_mounts_level_req::clear_mount_id() {
  mount_id_ = 0u;
  clear_has_mount_id();
}
inline ::google::protobuf::uint32 upgrade_mounts_level_req::mount_id() const {
  return mount_id_;
}
inline void upgrade_mounts_level_req::set_mount_id(::google::protobuf::uint32 value) {
  set_has_mount_id();
  mount_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool upgrade_mounts_level_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void upgrade_mounts_level_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void upgrade_mounts_level_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void upgrade_mounts_level_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& upgrade_mounts_level_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* upgrade_mounts_level_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* upgrade_mounts_level_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void upgrade_mounts_level_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// mounts_bless_time_req

// required uint32 unixtime = 1;
inline bool mounts_bless_time_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mounts_bless_time_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mounts_bless_time_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mounts_bless_time_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 mounts_bless_time_req::unixtime() const {
  return unixtime_;
}
inline void mounts_bless_time_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool mounts_bless_time_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mounts_bless_time_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mounts_bless_time_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mounts_bless_time_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& mounts_bless_time_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* mounts_bless_time_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* mounts_bless_time_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void mounts_bless_time_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// mounts_bless_time_rsp

// required uint32 remain_time = 1;
inline bool mounts_bless_time_rsp::has_remain_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mounts_bless_time_rsp::set_has_remain_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mounts_bless_time_rsp::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mounts_bless_time_rsp::clear_remain_time() {
  remain_time_ = 0u;
  clear_has_remain_time();
}
inline ::google::protobuf::uint32 mounts_bless_time_rsp::remain_time() const {
  return remain_time_;
}
inline void mounts_bless_time_rsp::set_remain_time(::google::protobuf::uint32 value) {
  set_has_remain_time();
  remain_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::receive_mounts_rsp_result>() {
  return ::client::receive_mounts_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::upgrade_mounts_skill_rsp_result>() {
  return ::client::upgrade_mounts_skill_rsp_result_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2emounts_2eproto__INCLUDED
