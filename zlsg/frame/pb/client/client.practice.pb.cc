// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.practice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.practice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* practice_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  practice_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* practice_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  practice_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* comm_practice_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comm_practice_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* comm_practice_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comm_practice_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* comm_practice_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comm_practice_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* comm_practice_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comm_practice_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* comm_practice_list_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comm_practice_list_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* comm_practice_invite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comm_practice_invite_reflection_ = NULL;
const ::google::protobuf::Descriptor* comm_practice_invite_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  comm_practice_invite_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* auto_agree_comm_practice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auto_agree_comm_practice_reflection_ = NULL;
const ::google::protobuf::Descriptor* stop_comm_practice_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stop_comm_practice_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PRACTICE_RESULT_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2epractice_2eproto() {
  protobuf_AddDesc_client_2epractice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.practice.proto");
  GOOGLE_CHECK(file != NULL);
  practice_req_descriptor_ = file->message_type(0);
  static const int practice_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(practice_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(practice_req, svr_head_),
  };
  practice_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      practice_req_descriptor_,
      practice_req::default_instance_,
      practice_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(practice_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(practice_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(practice_req));
  practice_rsp_descriptor_ = file->message_type(1);
  static const int practice_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(practice_rsp, ret_),
  };
  practice_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      practice_rsp_descriptor_,
      practice_rsp::default_instance_,
      practice_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(practice_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(practice_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(practice_rsp));
  comm_practice_req_descriptor_ = file->message_type(2);
  static const int comm_practice_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_req, dst_rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_req, svr_head_),
  };
  comm_practice_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comm_practice_req_descriptor_,
      comm_practice_req::default_instance_,
      comm_practice_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comm_practice_req));
  comm_practice_rsp_descriptor_ = file->message_type(3);
  static const int comm_practice_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_rsp, ret_),
  };
  comm_practice_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comm_practice_rsp_descriptor_,
      comm_practice_rsp::default_instance_,
      comm_practice_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comm_practice_rsp));
  comm_practice_list_req_descriptor_ = file->message_type(4);
  static const int comm_practice_list_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_list_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_list_req, svr_head_),
  };
  comm_practice_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comm_practice_list_req_descriptor_,
      comm_practice_list_req::default_instance_,
      comm_practice_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comm_practice_list_req));
  comm_practice_info_descriptor_ = file->message_type(5);
  static const int comm_practice_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_info, rn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_info, pos_),
  };
  comm_practice_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comm_practice_info_descriptor_,
      comm_practice_info::default_instance_,
      comm_practice_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comm_practice_info));
  comm_practice_list_rsp_descriptor_ = file->message_type(6);
  static const int comm_practice_list_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_list_rsp, cpi_),
  };
  comm_practice_list_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comm_practice_list_rsp_descriptor_,
      comm_practice_list_rsp::default_instance_,
      comm_practice_list_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_list_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_list_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comm_practice_list_rsp));
  comm_practice_invite_descriptor_ = file->message_type(7);
  static const int comm_practice_invite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_invite, cpi_),
  };
  comm_practice_invite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comm_practice_invite_descriptor_,
      comm_practice_invite::default_instance_,
      comm_practice_invite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_invite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_invite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comm_practice_invite));
  comm_practice_invite_result_descriptor_ = file->message_type(8);
  static const int comm_practice_invite_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_invite_result, cpi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_invite_result, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_invite_result, svr_head_),
  };
  comm_practice_invite_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      comm_practice_invite_result_descriptor_,
      comm_practice_invite_result::default_instance_,
      comm_practice_invite_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_invite_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(comm_practice_invite_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(comm_practice_invite_result));
  auto_agree_comm_practice_descriptor_ = file->message_type(9);
  static const int auto_agree_comm_practice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_agree_comm_practice, auto_agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_agree_comm_practice, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_agree_comm_practice, svr_head_),
  };
  auto_agree_comm_practice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auto_agree_comm_practice_descriptor_,
      auto_agree_comm_practice::default_instance_,
      auto_agree_comm_practice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_agree_comm_practice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auto_agree_comm_practice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auto_agree_comm_practice));
  stop_comm_practice_req_descriptor_ = file->message_type(10);
  static const int stop_comm_practice_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stop_comm_practice_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stop_comm_practice_req, svr_head_),
  };
  stop_comm_practice_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stop_comm_practice_req_descriptor_,
      stop_comm_practice_req::default_instance_,
      stop_comm_practice_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stop_comm_practice_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stop_comm_practice_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stop_comm_practice_req));
  PRACTICE_RESULT_E_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2epractice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    practice_req_descriptor_, &practice_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    practice_rsp_descriptor_, &practice_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comm_practice_req_descriptor_, &comm_practice_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comm_practice_rsp_descriptor_, &comm_practice_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comm_practice_list_req_descriptor_, &comm_practice_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comm_practice_info_descriptor_, &comm_practice_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comm_practice_list_rsp_descriptor_, &comm_practice_list_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comm_practice_invite_descriptor_, &comm_practice_invite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    comm_practice_invite_result_descriptor_, &comm_practice_invite_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auto_agree_comm_practice_descriptor_, &auto_agree_comm_practice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stop_comm_practice_req_descriptor_, &stop_comm_practice_req::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2epractice_2eproto() {
  delete practice_req::default_instance_;
  delete practice_req_reflection_;
  delete practice_rsp::default_instance_;
  delete practice_rsp_reflection_;
  delete comm_practice_req::default_instance_;
  delete comm_practice_req_reflection_;
  delete comm_practice_rsp::default_instance_;
  delete comm_practice_rsp_reflection_;
  delete comm_practice_list_req::default_instance_;
  delete comm_practice_list_req_reflection_;
  delete comm_practice_info::default_instance_;
  delete comm_practice_info_reflection_;
  delete comm_practice_list_rsp::default_instance_;
  delete comm_practice_list_rsp_reflection_;
  delete comm_practice_invite::default_instance_;
  delete comm_practice_invite_reflection_;
  delete comm_practice_invite_result::default_instance_;
  delete comm_practice_invite_result_reflection_;
  delete auto_agree_comm_practice::default_instance_;
  delete auto_agree_comm_practice_reflection_;
  delete stop_comm_practice_req::default_instance_;
  delete stop_comm_practice_req_reflection_;
}

void protobuf_AddDesc_client_2epractice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025client.practice.proto\022\006client\032\021client."
    "comm.proto\"D\n\014practice_req\022\014\n\004time\030\001 \002(\r"
    "\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_head"
    "\"6\n\014practice_rsp\022&\n\003ret\030\001 \002(\0162\031.client.P"
    "RACTICE_RESULT_E\"^\n\021comm_practice_req\022!\n"
    "\006dst_rd\030\001 \002(\0132\021.client.role_data\022&\n\010svr_"
    "head\030\350\007 \001(\0132\023.client.server_head\";\n\021comm"
    "_practice_rsp\022&\n\003ret\030\001 \002(\0162\031.client.PRAC"
    "TICE_RESULT_E\"N\n\026comm_practice_list_req\022"
    "\014\n\004time\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.clien"
    "t.server_head\"g\n\022comm_practice_info\022\035\n\002r"
    "n\030\001 \002(\0132\021.client.role_name\022\r\n\005level\030\002 \002("
    "\r\022#\n\003pos\030\003 \002(\0132\026.client.client_map_pos\"A"
    "\n\026comm_practice_list_rsp\022\'\n\003cpi\030\001 \003(\0132\032."
    "client.comm_practice_info\"\?\n\024comm_practi"
    "ce_invite\022\'\n\003cpi\030\001 \002(\0132\032.client.comm_pra"
    "ctice_info\"}\n\033comm_practice_invite_resul"
    "t\022\'\n\003cpi\030\001 \002(\0132\032.client.comm_practice_in"
    "fo\022\r\n\005agree\030\002 \002(\010\022&\n\010svr_head\030\350\007 \001(\0132\023.c"
    "lient.server_head\"c\n\030auto_agree_comm_pra"
    "ctice\022\022\n\nauto_agree\030\001 \002(\010\022\013\n\003get\030\002 \001(\010\022&"
    "\n\010svr_head\030\350\007 \001(\0132\023.client.server_head\"R"
    "\n\026stop_comm_practice_req\022\020\n\010unixtime\030\001 \002"
    "(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_he"
    "ad*\316\001\n\021PRACTICE_RESULT_E\022\017\n\013PRE_SUCCESS\020"
    "\000\022\024\n\020PRE_OTHER_REFUSE\020\001\022\023\n\017PRE_OTHER_PRA"
    "ED\020\002\022\023\n\017PRE_OTHER_LEAVE\020\003\022\024\n\020PRE_OTHER_C"
    "ANNOT\020\004\022\026\n\022PRE_DISTANCE_LIMIT\020\005\022\023\n\017PRE_S"
    "ELF_CANNOT\020\006\022\017\n\013PRE_SYS_ERR\020\007\022\024\n\020PRE_STO"
    "P_SUCCESS\020\010", 1171);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.practice.proto", &protobuf_RegisterTypes);
  practice_req::default_instance_ = new practice_req();
  practice_rsp::default_instance_ = new practice_rsp();
  comm_practice_req::default_instance_ = new comm_practice_req();
  comm_practice_rsp::default_instance_ = new comm_practice_rsp();
  comm_practice_list_req::default_instance_ = new comm_practice_list_req();
  comm_practice_info::default_instance_ = new comm_practice_info();
  comm_practice_list_rsp::default_instance_ = new comm_practice_list_rsp();
  comm_practice_invite::default_instance_ = new comm_practice_invite();
  comm_practice_invite_result::default_instance_ = new comm_practice_invite_result();
  auto_agree_comm_practice::default_instance_ = new auto_agree_comm_practice();
  stop_comm_practice_req::default_instance_ = new stop_comm_practice_req();
  practice_req::default_instance_->InitAsDefaultInstance();
  practice_rsp::default_instance_->InitAsDefaultInstance();
  comm_practice_req::default_instance_->InitAsDefaultInstance();
  comm_practice_rsp::default_instance_->InitAsDefaultInstance();
  comm_practice_list_req::default_instance_->InitAsDefaultInstance();
  comm_practice_info::default_instance_->InitAsDefaultInstance();
  comm_practice_list_rsp::default_instance_->InitAsDefaultInstance();
  comm_practice_invite::default_instance_->InitAsDefaultInstance();
  comm_practice_invite_result::default_instance_->InitAsDefaultInstance();
  auto_agree_comm_practice::default_instance_->InitAsDefaultInstance();
  stop_comm_practice_req::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2epractice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2epractice_2eproto {
  StaticDescriptorInitializer_client_2epractice_2eproto() {
    protobuf_AddDesc_client_2epractice_2eproto();
  }
} static_descriptor_initializer_client_2epractice_2eproto_;
const ::google::protobuf::EnumDescriptor* PRACTICE_RESULT_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRACTICE_RESULT_E_descriptor_;
}
bool PRACTICE_RESULT_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int practice_req::kTimeFieldNumber;
const int practice_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

practice_req::practice_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void practice_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

practice_req::practice_req(const practice_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void practice_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

practice_req::~practice_req() {
  SharedDtor();
}

void practice_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void practice_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* practice_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return practice_req_descriptor_;
}

const practice_req& practice_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epractice_2eproto();
  return *default_instance_;
}

practice_req* practice_req::default_instance_ = NULL;

practice_req* practice_req::New() const {
  return new practice_req;
}

void practice_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool practice_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void practice_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* practice_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int practice_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void practice_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const practice_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const practice_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void practice_req::MergeFrom(const practice_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void practice_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void practice_req::CopyFrom(const practice_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool practice_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void practice_req::Swap(practice_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata practice_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = practice_req_descriptor_;
  metadata.reflection = practice_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int practice_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

practice_rsp::practice_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void practice_rsp::InitAsDefaultInstance() {
}

practice_rsp::practice_rsp(const practice_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void practice_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

practice_rsp::~practice_rsp() {
  SharedDtor();
}

void practice_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void practice_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* practice_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return practice_rsp_descriptor_;
}

const practice_rsp& practice_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epractice_2eproto();
  return *default_instance_;
}

practice_rsp* practice_rsp::default_instance_ = NULL;

practice_rsp* practice_rsp::New() const {
  return new practice_rsp;
}

void practice_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool practice_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.PRACTICE_RESULT_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::PRACTICE_RESULT_E_IsValid(value)) {
            set_ret(static_cast< ::client::PRACTICE_RESULT_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void practice_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.PRACTICE_RESULT_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* practice_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.PRACTICE_RESULT_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int practice_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.PRACTICE_RESULT_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void practice_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const practice_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const practice_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void practice_rsp::MergeFrom(const practice_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void practice_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void practice_rsp::CopyFrom(const practice_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool practice_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void practice_rsp::Swap(practice_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata practice_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = practice_rsp_descriptor_;
  metadata.reflection = practice_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int comm_practice_req::kDstRdFieldNumber;
const int comm_practice_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

comm_practice_req::comm_practice_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comm_practice_req::InitAsDefaultInstance() {
  dst_rd_ = const_cast< ::client::role_data*>(&::client::role_data::default_instance());
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

comm_practice_req::comm_practice_req(const comm_practice_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comm_practice_req::SharedCtor() {
  _cached_size_ = 0;
  dst_rd_ = NULL;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comm_practice_req::~comm_practice_req() {
  SharedDtor();
}

void comm_practice_req::SharedDtor() {
  if (this != default_instance_) {
    delete dst_rd_;
    delete svr_head_;
  }
}

void comm_practice_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comm_practice_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comm_practice_req_descriptor_;
}

const comm_practice_req& comm_practice_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epractice_2eproto();
  return *default_instance_;
}

comm_practice_req* comm_practice_req::default_instance_ = NULL;

comm_practice_req* comm_practice_req::New() const {
  return new comm_practice_req;
}

void comm_practice_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dst_rd()) {
      if (dst_rd_ != NULL) dst_rd_->::client::role_data::Clear();
    }
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comm_practice_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_data dst_rd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst_rd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comm_practice_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_data dst_rd = 1;
  if (has_dst_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dst_rd(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comm_practice_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_data dst_rd = 1;
  if (has_dst_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dst_rd(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comm_practice_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_data dst_rd = 1;
    if (has_dst_rd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst_rd());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comm_practice_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comm_practice_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comm_practice_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comm_practice_req::MergeFrom(const comm_practice_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_rd()) {
      mutable_dst_rd()->::client::role_data::MergeFrom(from.dst_rd());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comm_practice_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comm_practice_req::CopyFrom(const comm_practice_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comm_practice_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_dst_rd()) {
    if (!this->dst_rd().IsInitialized()) return false;
  }
  return true;
}

void comm_practice_req::Swap(comm_practice_req* other) {
  if (other != this) {
    std::swap(dst_rd_, other->dst_rd_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comm_practice_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comm_practice_req_descriptor_;
  metadata.reflection = comm_practice_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int comm_practice_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

comm_practice_rsp::comm_practice_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comm_practice_rsp::InitAsDefaultInstance() {
}

comm_practice_rsp::comm_practice_rsp(const comm_practice_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comm_practice_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comm_practice_rsp::~comm_practice_rsp() {
  SharedDtor();
}

void comm_practice_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void comm_practice_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comm_practice_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comm_practice_rsp_descriptor_;
}

const comm_practice_rsp& comm_practice_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epractice_2eproto();
  return *default_instance_;
}

comm_practice_rsp* comm_practice_rsp::default_instance_ = NULL;

comm_practice_rsp* comm_practice_rsp::New() const {
  return new comm_practice_rsp;
}

void comm_practice_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comm_practice_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.PRACTICE_RESULT_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::PRACTICE_RESULT_E_IsValid(value)) {
            set_ret(static_cast< ::client::PRACTICE_RESULT_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comm_practice_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.PRACTICE_RESULT_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comm_practice_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.PRACTICE_RESULT_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comm_practice_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.PRACTICE_RESULT_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comm_practice_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comm_practice_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comm_practice_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comm_practice_rsp::MergeFrom(const comm_practice_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comm_practice_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comm_practice_rsp::CopyFrom(const comm_practice_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comm_practice_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void comm_practice_rsp::Swap(comm_practice_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comm_practice_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comm_practice_rsp_descriptor_;
  metadata.reflection = comm_practice_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int comm_practice_list_req::kTimeFieldNumber;
const int comm_practice_list_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

comm_practice_list_req::comm_practice_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comm_practice_list_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

comm_practice_list_req::comm_practice_list_req(const comm_practice_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comm_practice_list_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comm_practice_list_req::~comm_practice_list_req() {
  SharedDtor();
}

void comm_practice_list_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void comm_practice_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comm_practice_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comm_practice_list_req_descriptor_;
}

const comm_practice_list_req& comm_practice_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epractice_2eproto();
  return *default_instance_;
}

comm_practice_list_req* comm_practice_list_req::default_instance_ = NULL;

comm_practice_list_req* comm_practice_list_req::New() const {
  return new comm_practice_list_req;
}

void comm_practice_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comm_practice_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comm_practice_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comm_practice_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comm_practice_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comm_practice_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comm_practice_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comm_practice_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comm_practice_list_req::MergeFrom(const comm_practice_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comm_practice_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comm_practice_list_req::CopyFrom(const comm_practice_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comm_practice_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void comm_practice_list_req::Swap(comm_practice_list_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comm_practice_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comm_practice_list_req_descriptor_;
  metadata.reflection = comm_practice_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int comm_practice_info::kRnFieldNumber;
const int comm_practice_info::kLevelFieldNumber;
const int comm_practice_info::kPosFieldNumber;
#endif  // !_MSC_VER

comm_practice_info::comm_practice_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comm_practice_info::InitAsDefaultInstance() {
  rn_ = const_cast< ::client::role_name*>(&::client::role_name::default_instance());
  pos_ = const_cast< ::client::client_map_pos*>(&::client::client_map_pos::default_instance());
}

comm_practice_info::comm_practice_info(const comm_practice_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comm_practice_info::SharedCtor() {
  _cached_size_ = 0;
  rn_ = NULL;
  level_ = 0u;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comm_practice_info::~comm_practice_info() {
  SharedDtor();
}

void comm_practice_info::SharedDtor() {
  if (this != default_instance_) {
    delete rn_;
    delete pos_;
  }
}

void comm_practice_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comm_practice_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comm_practice_info_descriptor_;
}

const comm_practice_info& comm_practice_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epractice_2eproto();
  return *default_instance_;
}

comm_practice_info* comm_practice_info::default_instance_ = NULL;

comm_practice_info* comm_practice_info::New() const {
  return new comm_practice_info;
}

void comm_practice_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rn()) {
      if (rn_ != NULL) rn_->::client::role_name::Clear();
    }
    level_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::client::client_map_pos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comm_practice_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.role_name rn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .client.client_map_pos pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comm_practice_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.role_name rn = 1;
  if (has_rn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rn(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required .client.client_map_pos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comm_practice_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.role_name rn = 1;
  if (has_rn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rn(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required .client.client_map_pos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comm_practice_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.role_name rn = 1;
    if (has_rn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rn());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required .client.client_map_pos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comm_practice_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comm_practice_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comm_practice_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comm_practice_info::MergeFrom(const comm_practice_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rn()) {
      mutable_rn()->::client::role_name::MergeFrom(from.rn());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_pos()) {
      mutable_pos()->::client::client_map_pos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comm_practice_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comm_practice_info::CopyFrom(const comm_practice_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comm_practice_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_rn()) {
    if (!this->rn().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void comm_practice_info::Swap(comm_practice_info* other) {
  if (other != this) {
    std::swap(rn_, other->rn_);
    std::swap(level_, other->level_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comm_practice_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comm_practice_info_descriptor_;
  metadata.reflection = comm_practice_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int comm_practice_list_rsp::kCpiFieldNumber;
#endif  // !_MSC_VER

comm_practice_list_rsp::comm_practice_list_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comm_practice_list_rsp::InitAsDefaultInstance() {
}

comm_practice_list_rsp::comm_practice_list_rsp(const comm_practice_list_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comm_practice_list_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comm_practice_list_rsp::~comm_practice_list_rsp() {
  SharedDtor();
}

void comm_practice_list_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void comm_practice_list_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comm_practice_list_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comm_practice_list_rsp_descriptor_;
}

const comm_practice_list_rsp& comm_practice_list_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epractice_2eproto();
  return *default_instance_;
}

comm_practice_list_rsp* comm_practice_list_rsp::default_instance_ = NULL;

comm_practice_list_rsp* comm_practice_list_rsp::New() const {
  return new comm_practice_list_rsp;
}

void comm_practice_list_rsp::Clear() {
  cpi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comm_practice_list_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.comm_practice_info cpi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cpi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cpi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cpi;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comm_practice_list_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.comm_practice_info cpi = 1;
  for (int i = 0; i < this->cpi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cpi(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comm_practice_list_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.comm_practice_info cpi = 1;
  for (int i = 0; i < this->cpi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cpi(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comm_practice_list_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.comm_practice_info cpi = 1;
  total_size += 1 * this->cpi_size();
  for (int i = 0; i < this->cpi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cpi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comm_practice_list_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comm_practice_list_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comm_practice_list_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comm_practice_list_rsp::MergeFrom(const comm_practice_list_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cpi_.MergeFrom(from.cpi_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comm_practice_list_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comm_practice_list_rsp::CopyFrom(const comm_practice_list_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comm_practice_list_rsp::IsInitialized() const {

  for (int i = 0; i < cpi_size(); i++) {
    if (!this->cpi(i).IsInitialized()) return false;
  }
  return true;
}

void comm_practice_list_rsp::Swap(comm_practice_list_rsp* other) {
  if (other != this) {
    cpi_.Swap(&other->cpi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comm_practice_list_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comm_practice_list_rsp_descriptor_;
  metadata.reflection = comm_practice_list_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int comm_practice_invite::kCpiFieldNumber;
#endif  // !_MSC_VER

comm_practice_invite::comm_practice_invite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comm_practice_invite::InitAsDefaultInstance() {
  cpi_ = const_cast< ::client::comm_practice_info*>(&::client::comm_practice_info::default_instance());
}

comm_practice_invite::comm_practice_invite(const comm_practice_invite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comm_practice_invite::SharedCtor() {
  _cached_size_ = 0;
  cpi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comm_practice_invite::~comm_practice_invite() {
  SharedDtor();
}

void comm_practice_invite::SharedDtor() {
  if (this != default_instance_) {
    delete cpi_;
  }
}

void comm_practice_invite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comm_practice_invite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comm_practice_invite_descriptor_;
}

const comm_practice_invite& comm_practice_invite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epractice_2eproto();
  return *default_instance_;
}

comm_practice_invite* comm_practice_invite::default_instance_ = NULL;

comm_practice_invite* comm_practice_invite::New() const {
  return new comm_practice_invite;
}

void comm_practice_invite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cpi()) {
      if (cpi_ != NULL) cpi_->::client::comm_practice_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comm_practice_invite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.comm_practice_info cpi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cpi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comm_practice_invite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.comm_practice_info cpi = 1;
  if (has_cpi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cpi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comm_practice_invite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.comm_practice_info cpi = 1;
  if (has_cpi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cpi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comm_practice_invite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.comm_practice_info cpi = 1;
    if (has_cpi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cpi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comm_practice_invite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comm_practice_invite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comm_practice_invite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comm_practice_invite::MergeFrom(const comm_practice_invite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpi()) {
      mutable_cpi()->::client::comm_practice_info::MergeFrom(from.cpi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comm_practice_invite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comm_practice_invite::CopyFrom(const comm_practice_invite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comm_practice_invite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cpi()) {
    if (!this->cpi().IsInitialized()) return false;
  }
  return true;
}

void comm_practice_invite::Swap(comm_practice_invite* other) {
  if (other != this) {
    std::swap(cpi_, other->cpi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comm_practice_invite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comm_practice_invite_descriptor_;
  metadata.reflection = comm_practice_invite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int comm_practice_invite_result::kCpiFieldNumber;
const int comm_practice_invite_result::kAgreeFieldNumber;
const int comm_practice_invite_result::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

comm_practice_invite_result::comm_practice_invite_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void comm_practice_invite_result::InitAsDefaultInstance() {
  cpi_ = const_cast< ::client::comm_practice_info*>(&::client::comm_practice_info::default_instance());
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

comm_practice_invite_result::comm_practice_invite_result(const comm_practice_invite_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void comm_practice_invite_result::SharedCtor() {
  _cached_size_ = 0;
  cpi_ = NULL;
  agree_ = false;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

comm_practice_invite_result::~comm_practice_invite_result() {
  SharedDtor();
}

void comm_practice_invite_result::SharedDtor() {
  if (this != default_instance_) {
    delete cpi_;
    delete svr_head_;
  }
}

void comm_practice_invite_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* comm_practice_invite_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return comm_practice_invite_result_descriptor_;
}

const comm_practice_invite_result& comm_practice_invite_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epractice_2eproto();
  return *default_instance_;
}

comm_practice_invite_result* comm_practice_invite_result::default_instance_ = NULL;

comm_practice_invite_result* comm_practice_invite_result::New() const {
  return new comm_practice_invite_result;
}

void comm_practice_invite_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cpi()) {
      if (cpi_ != NULL) cpi_->::client::comm_practice_info::Clear();
    }
    agree_ = false;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool comm_practice_invite_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.comm_practice_info cpi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cpi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // required bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void comm_practice_invite_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.comm_practice_info cpi = 1;
  if (has_cpi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cpi(), output);
  }

  // required bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* comm_practice_invite_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.comm_practice_info cpi = 1;
  if (has_cpi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cpi(), target);
  }

  // required bool agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int comm_practice_invite_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.comm_practice_info cpi = 1;
    if (has_cpi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cpi());
    }

    // required bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void comm_practice_invite_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const comm_practice_invite_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const comm_practice_invite_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void comm_practice_invite_result::MergeFrom(const comm_practice_invite_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpi()) {
      mutable_cpi()->::client::comm_practice_info::MergeFrom(from.cpi());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void comm_practice_invite_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void comm_practice_invite_result::CopyFrom(const comm_practice_invite_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool comm_practice_invite_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cpi()) {
    if (!this->cpi().IsInitialized()) return false;
  }
  return true;
}

void comm_practice_invite_result::Swap(comm_practice_invite_result* other) {
  if (other != this) {
    std::swap(cpi_, other->cpi_);
    std::swap(agree_, other->agree_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata comm_practice_invite_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = comm_practice_invite_result_descriptor_;
  metadata.reflection = comm_practice_invite_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auto_agree_comm_practice::kAutoAgreeFieldNumber;
const int auto_agree_comm_practice::kGetFieldNumber;
const int auto_agree_comm_practice::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

auto_agree_comm_practice::auto_agree_comm_practice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void auto_agree_comm_practice::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

auto_agree_comm_practice::auto_agree_comm_practice(const auto_agree_comm_practice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void auto_agree_comm_practice::SharedCtor() {
  _cached_size_ = 0;
  auto_agree_ = false;
  get_ = false;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auto_agree_comm_practice::~auto_agree_comm_practice() {
  SharedDtor();
}

void auto_agree_comm_practice::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void auto_agree_comm_practice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auto_agree_comm_practice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auto_agree_comm_practice_descriptor_;
}

const auto_agree_comm_practice& auto_agree_comm_practice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epractice_2eproto();
  return *default_instance_;
}

auto_agree_comm_practice* auto_agree_comm_practice::default_instance_ = NULL;

auto_agree_comm_practice* auto_agree_comm_practice::New() const {
  return new auto_agree_comm_practice;
}

void auto_agree_comm_practice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auto_agree_ = false;
    get_ = false;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auto_agree_comm_practice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool auto_agree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_agree_)));
          set_has_auto_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get;
        break;
      }

      // optional bool get = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_)));
          set_has_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void auto_agree_comm_practice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool auto_agree = 1;
  if (has_auto_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->auto_agree(), output);
  }

  // optional bool get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->get(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* auto_agree_comm_practice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool auto_agree = 1;
  if (has_auto_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->auto_agree(), target);
  }

  // optional bool get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->get(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int auto_agree_comm_practice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool auto_agree = 1;
    if (has_auto_agree()) {
      total_size += 1 + 1;
    }

    // optional bool get = 2;
    if (has_get()) {
      total_size += 1 + 1;
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auto_agree_comm_practice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auto_agree_comm_practice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auto_agree_comm_practice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auto_agree_comm_practice::MergeFrom(const auto_agree_comm_practice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_agree()) {
      set_auto_agree(from.auto_agree());
    }
    if (from.has_get()) {
      set_get(from.get());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auto_agree_comm_practice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auto_agree_comm_practice::CopyFrom(const auto_agree_comm_practice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auto_agree_comm_practice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void auto_agree_comm_practice::Swap(auto_agree_comm_practice* other) {
  if (other != this) {
    std::swap(auto_agree_, other->auto_agree_);
    std::swap(get_, other->get_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auto_agree_comm_practice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auto_agree_comm_practice_descriptor_;
  metadata.reflection = auto_agree_comm_practice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stop_comm_practice_req::kUnixtimeFieldNumber;
const int stop_comm_practice_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

stop_comm_practice_req::stop_comm_practice_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stop_comm_practice_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

stop_comm_practice_req::stop_comm_practice_req(const stop_comm_practice_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stop_comm_practice_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stop_comm_practice_req::~stop_comm_practice_req() {
  SharedDtor();
}

void stop_comm_practice_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void stop_comm_practice_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stop_comm_practice_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stop_comm_practice_req_descriptor_;
}

const stop_comm_practice_req& stop_comm_practice_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2epractice_2eproto();
  return *default_instance_;
}

stop_comm_practice_req* stop_comm_practice_req::default_instance_ = NULL;

stop_comm_practice_req* stop_comm_practice_req::New() const {
  return new stop_comm_practice_req;
}

void stop_comm_practice_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stop_comm_practice_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stop_comm_practice_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stop_comm_practice_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stop_comm_practice_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stop_comm_practice_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stop_comm_practice_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stop_comm_practice_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stop_comm_practice_req::MergeFrom(const stop_comm_practice_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stop_comm_practice_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stop_comm_practice_req::CopyFrom(const stop_comm_practice_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stop_comm_practice_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void stop_comm_practice_req::Swap(stop_comm_practice_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stop_comm_practice_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stop_comm_practice_req_descriptor_;
  metadata.reflection = stop_comm_practice_req_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
