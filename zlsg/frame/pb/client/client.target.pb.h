// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.target.proto

#ifndef PROTOBUF_client_2etarget_2eproto__INCLUDED
#define PROTOBUF_client_2etarget_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2etarget_2eproto();
void protobuf_AssignDesc_client_2etarget_2eproto();
void protobuf_ShutdownFile_client_2etarget_2eproto();

class target_list_req;
class target_item;
class target_list_rsp;
class target_prize_req;
class target_prize_rsp;
class target_info;
class cond_equal;
class cond_great;
class cond_less;
class target_complete_cond;
class target_progress;
class point_tips_rsp;

enum target_prize_rsp_status_e {
  target_prize_rsp_status_e_SUCCESS = 1,
  target_prize_rsp_status_e_NEED_PREV = 2,
  target_prize_rsp_status_e_PACK_LIMIT = 3,
  target_prize_rsp_status_e_STATUS_LIMIT = 4
};
bool target_prize_rsp_status_e_IsValid(int value);
const target_prize_rsp_status_e target_prize_rsp_status_e_status_e_MIN = target_prize_rsp_status_e_SUCCESS;
const target_prize_rsp_status_e target_prize_rsp_status_e_status_e_MAX = target_prize_rsp_status_e_STATUS_LIMIT;
const int target_prize_rsp_status_e_status_e_ARRAYSIZE = target_prize_rsp_status_e_status_e_MAX + 1;

const ::google::protobuf::EnumDescriptor* target_prize_rsp_status_e_descriptor();
inline const ::std::string& target_prize_rsp_status_e_Name(target_prize_rsp_status_e value) {
  return ::google::protobuf::internal::NameOfEnum(
    target_prize_rsp_status_e_descriptor(), value);
}
inline bool target_prize_rsp_status_e_Parse(
    const ::std::string& name, target_prize_rsp_status_e* value) {
  return ::google::protobuf::internal::ParseNamedEnum<target_prize_rsp_status_e>(
    target_prize_rsp_status_e_descriptor(), name, value);
}
enum TARGET_TYPE_E {
  ACHIEVEMENT = 1,
  DAILY_MISSION = 2
};
bool TARGET_TYPE_E_IsValid(int value);
const TARGET_TYPE_E TARGET_TYPE_E_MIN = ACHIEVEMENT;
const TARGET_TYPE_E TARGET_TYPE_E_MAX = DAILY_MISSION;
const int TARGET_TYPE_E_ARRAYSIZE = TARGET_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* TARGET_TYPE_E_descriptor();
inline const ::std::string& TARGET_TYPE_E_Name(TARGET_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    TARGET_TYPE_E_descriptor(), value);
}
inline bool TARGET_TYPE_E_Parse(
    const ::std::string& name, TARGET_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TARGET_TYPE_E>(
    TARGET_TYPE_E_descriptor(), name, value);
}
enum TARGET_STATUS_E {
  STATUS_DOING = 1,
  STATUS_PRIZE = 2,
  STATUS_FINISH = 3
};
bool TARGET_STATUS_E_IsValid(int value);
const TARGET_STATUS_E TARGET_STATUS_E_MIN = STATUS_DOING;
const TARGET_STATUS_E TARGET_STATUS_E_MAX = STATUS_FINISH;
const int TARGET_STATUS_E_ARRAYSIZE = TARGET_STATUS_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* TARGET_STATUS_E_descriptor();
inline const ::std::string& TARGET_STATUS_E_Name(TARGET_STATUS_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    TARGET_STATUS_E_descriptor(), value);
}
inline bool TARGET_STATUS_E_Parse(
    const ::std::string& name, TARGET_STATUS_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TARGET_STATUS_E>(
    TARGET_STATUS_E_descriptor(), name, value);
}
// ===================================================================

class target_list_req : public ::google::protobuf::Message {
 public:
  target_list_req();
  virtual ~target_list_req();

  target_list_req(const target_list_req& from);

  inline target_list_req& operator=(const target_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const target_list_req& default_instance();

  void Swap(target_list_req* other);

  // implements Message ----------------------------------------------

  target_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const target_list_req& from);
  void MergeFrom(const target_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.TARGET_TYPE_E type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::client::TARGET_TYPE_E type() const;
  inline void set_type(::client::TARGET_TYPE_E value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.target_list_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etarget_2eproto();
  friend void protobuf_AssignDesc_client_2etarget_2eproto();
  friend void protobuf_ShutdownFile_client_2etarget_2eproto();

  void InitAsDefaultInstance();
  static target_list_req* default_instance_;
};
// -------------------------------------------------------------------

class target_item : public ::google::protobuf::Message {
 public:
  target_item();
  virtual ~target_item();

  target_item(const target_item& from);

  inline target_item& operator=(const target_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const target_item& default_instance();

  void Swap(target_item* other);

  // implements Message ----------------------------------------------

  target_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const target_item& from);
  void MergeFrom(const target_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // required .client.TARGET_STATUS_E status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::client::TARGET_STATUS_E status() const;
  inline void set_status(::client::TARGET_STATUS_E value);

  // optional uint32 extra = 4;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 4;
  inline ::google::protobuf::uint32 extra() const;
  inline void set_extra(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.target_item)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_extra();
  inline void clear_has_extra();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  int status_;
  ::google::protobuf::uint32 extra_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etarget_2eproto();
  friend void protobuf_AssignDesc_client_2etarget_2eproto();
  friend void protobuf_ShutdownFile_client_2etarget_2eproto();

  void InitAsDefaultInstance();
  static target_item* default_instance_;
};
// -------------------------------------------------------------------

class target_list_rsp : public ::google::protobuf::Message {
 public:
  target_list_rsp();
  virtual ~target_list_rsp();

  target_list_rsp(const target_list_rsp& from);

  inline target_list_rsp& operator=(const target_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const target_list_rsp& default_instance();

  void Swap(target_list_rsp* other);

  // implements Message ----------------------------------------------

  target_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const target_list_rsp& from);
  void MergeFrom(const target_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.TARGET_TYPE_E type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::client::TARGET_TYPE_E type() const;
  inline void set_type(::client::TARGET_TYPE_E value);

  // repeated .client.target_item ti = 2;
  inline int ti_size() const;
  inline void clear_ti();
  static const int kTiFieldNumber = 2;
  inline const ::client::target_item& ti(int index) const;
  inline ::client::target_item* mutable_ti(int index);
  inline ::client::target_item* add_ti();
  inline const ::google::protobuf::RepeatedPtrField< ::client::target_item >&
      ti() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::target_item >*
      mutable_ti();

  // @@protoc_insertion_point(class_scope:client.target_list_rsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::target_item > ti_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etarget_2eproto();
  friend void protobuf_AssignDesc_client_2etarget_2eproto();
  friend void protobuf_ShutdownFile_client_2etarget_2eproto();

  void InitAsDefaultInstance();
  static target_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class target_prize_req : public ::google::protobuf::Message {
 public:
  target_prize_req();
  virtual ~target_prize_req();

  target_prize_req(const target_prize_req& from);

  inline target_prize_req& operator=(const target_prize_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const target_prize_req& default_instance();

  void Swap(target_prize_req* other);

  // implements Message ----------------------------------------------

  target_prize_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const target_prize_req& from);
  void MergeFrom(const target_prize_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.target_prize_req)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etarget_2eproto();
  friend void protobuf_AssignDesc_client_2etarget_2eproto();
  friend void protobuf_ShutdownFile_client_2etarget_2eproto();

  void InitAsDefaultInstance();
  static target_prize_req* default_instance_;
};
// -------------------------------------------------------------------

class target_prize_rsp : public ::google::protobuf::Message {
 public:
  target_prize_rsp();
  virtual ~target_prize_rsp();

  target_prize_rsp(const target_prize_rsp& from);

  inline target_prize_rsp& operator=(const target_prize_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const target_prize_rsp& default_instance();

  void Swap(target_prize_rsp* other);

  // implements Message ----------------------------------------------

  target_prize_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const target_prize_rsp& from);
  void MergeFrom(const target_prize_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef target_prize_rsp_status_e status_e;
  static const status_e SUCCESS = target_prize_rsp_status_e_SUCCESS;
  static const status_e NEED_PREV = target_prize_rsp_status_e_NEED_PREV;
  static const status_e PACK_LIMIT = target_prize_rsp_status_e_PACK_LIMIT;
  static const status_e STATUS_LIMIT = target_prize_rsp_status_e_STATUS_LIMIT;
  static inline bool status_e_IsValid(int value) {
    return target_prize_rsp_status_e_IsValid(value);
  }
  static const status_e status_e_MIN =
    target_prize_rsp_status_e_status_e_MIN;
  static const status_e status_e_MAX =
    target_prize_rsp_status_e_status_e_MAX;
  static const int status_e_ARRAYSIZE =
    target_prize_rsp_status_e_status_e_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  status_e_descriptor() {
    return target_prize_rsp_status_e_descriptor();
  }
  static inline const ::std::string& status_e_Name(status_e value) {
    return target_prize_rsp_status_e_Name(value);
  }
  static inline bool status_e_Parse(const ::std::string& name,
      status_e* value) {
    return target_prize_rsp_status_e_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.target_prize_rsp.status_e status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::client::target_prize_rsp_status_e status() const;
  inline void set_status(::client::target_prize_rsp_status_e value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .client.target_item ti = 3;
  inline bool has_ti() const;
  inline void clear_ti();
  static const int kTiFieldNumber = 3;
  inline const ::client::target_item& ti() const;
  inline ::client::target_item* mutable_ti();
  inline ::client::target_item* release_ti();
  inline void set_allocated_ti(::client::target_item* ti);

  // @@protoc_insertion_point(class_scope:client.target_prize_rsp)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ti();
  inline void clear_has_ti();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int status_;
  ::google::protobuf::uint32 id_;
  ::client::target_item* ti_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etarget_2eproto();
  friend void protobuf_AssignDesc_client_2etarget_2eproto();
  friend void protobuf_ShutdownFile_client_2etarget_2eproto();

  void InitAsDefaultInstance();
  static target_prize_rsp* default_instance_;
};
// -------------------------------------------------------------------

class target_info : public ::google::protobuf::Message {
 public:
  target_info();
  virtual ~target_info();

  target_info(const target_info& from);

  inline target_info& operator=(const target_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const target_info& default_instance();

  void Swap(target_info* other);

  // implements Message ----------------------------------------------

  target_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const target_info& from);
  void MergeFrom(const target_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 target_id = 1;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 target_id() const;
  inline void set_target_id(::google::protobuf::uint32 value);

  // required .client.TARGET_STATUS_E status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::client::TARGET_STATUS_E status() const;
  inline void set_status(::client::TARGET_STATUS_E value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.target_info)
 private:
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 target_id_;
  int status_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etarget_2eproto();
  friend void protobuf_AssignDesc_client_2etarget_2eproto();
  friend void protobuf_ShutdownFile_client_2etarget_2eproto();

  void InitAsDefaultInstance();
  static target_info* default_instance_;
};
// -------------------------------------------------------------------

class cond_equal : public ::google::protobuf::Message {
 public:
  cond_equal();
  virtual ~cond_equal();

  cond_equal(const cond_equal& from);

  inline cond_equal& operator=(const cond_equal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cond_equal& default_instance();

  void Swap(cond_equal* other);

  // implements Message ----------------------------------------------

  cond_equal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cond_equal& from);
  void MergeFrom(const cond_equal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::uint32 value);
  inline void add_value(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:client.cond_equal)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etarget_2eproto();
  friend void protobuf_AssignDesc_client_2etarget_2eproto();
  friend void protobuf_ShutdownFile_client_2etarget_2eproto();

  void InitAsDefaultInstance();
  static cond_equal* default_instance_;
};
// -------------------------------------------------------------------

class cond_great : public ::google::protobuf::Message {
 public:
  cond_great();
  virtual ~cond_great();

  cond_great(const cond_great& from);

  inline cond_great& operator=(const cond_great& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cond_great& default_instance();

  void Swap(cond_great* other);

  // implements Message ----------------------------------------------

  cond_great* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cond_great& from);
  void MergeFrom(const cond_great& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::uint32 value);
  inline void add_value(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:client.cond_great)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etarget_2eproto();
  friend void protobuf_AssignDesc_client_2etarget_2eproto();
  friend void protobuf_ShutdownFile_client_2etarget_2eproto();

  void InitAsDefaultInstance();
  static cond_great* default_instance_;
};
// -------------------------------------------------------------------

class cond_less : public ::google::protobuf::Message {
 public:
  cond_less();
  virtual ~cond_less();

  cond_less(const cond_less& from);

  inline cond_less& operator=(const cond_less& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cond_less& default_instance();

  void Swap(cond_less* other);

  // implements Message ----------------------------------------------

  cond_less* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cond_less& from);
  void MergeFrom(const cond_less& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::uint32 value);
  inline void add_value(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:client.cond_less)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etarget_2eproto();
  friend void protobuf_AssignDesc_client_2etarget_2eproto();
  friend void protobuf_ShutdownFile_client_2etarget_2eproto();

  void InitAsDefaultInstance();
  static cond_less* default_instance_;
};
// -------------------------------------------------------------------

class target_complete_cond : public ::google::protobuf::Message {
 public:
  target_complete_cond();
  virtual ~target_complete_cond();

  target_complete_cond(const target_complete_cond& from);

  inline target_complete_cond& operator=(const target_complete_cond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const target_complete_cond& default_instance();

  void Swap(target_complete_cond* other);

  // implements Message ----------------------------------------------

  target_complete_cond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const target_complete_cond& from);
  void MergeFrom(const target_complete_cond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.cond_equal equal = 1;
  inline int equal_size() const;
  inline void clear_equal();
  static const int kEqualFieldNumber = 1;
  inline const ::client::cond_equal& equal(int index) const;
  inline ::client::cond_equal* mutable_equal(int index);
  inline ::client::cond_equal* add_equal();
  inline const ::google::protobuf::RepeatedPtrField< ::client::cond_equal >&
      equal() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::cond_equal >*
      mutable_equal();

  // repeated .client.cond_great great = 2;
  inline int great_size() const;
  inline void clear_great();
  static const int kGreatFieldNumber = 2;
  inline const ::client::cond_great& great(int index) const;
  inline ::client::cond_great* mutable_great(int index);
  inline ::client::cond_great* add_great();
  inline const ::google::protobuf::RepeatedPtrField< ::client::cond_great >&
      great() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::cond_great >*
      mutable_great();

  // repeated .client.cond_less less = 3;
  inline int less_size() const;
  inline void clear_less();
  static const int kLessFieldNumber = 3;
  inline const ::client::cond_less& less(int index) const;
  inline ::client::cond_less* mutable_less(int index);
  inline ::client::cond_less* add_less();
  inline const ::google::protobuf::RepeatedPtrField< ::client::cond_less >&
      less() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::cond_less >*
      mutable_less();

  // @@protoc_insertion_point(class_scope:client.target_complete_cond)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::cond_equal > equal_;
  ::google::protobuf::RepeatedPtrField< ::client::cond_great > great_;
  ::google::protobuf::RepeatedPtrField< ::client::cond_less > less_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etarget_2eproto();
  friend void protobuf_AssignDesc_client_2etarget_2eproto();
  friend void protobuf_ShutdownFile_client_2etarget_2eproto();

  void InitAsDefaultInstance();
  static target_complete_cond* default_instance_;
};
// -------------------------------------------------------------------

class target_progress : public ::google::protobuf::Message {
 public:
  target_progress();
  virtual ~target_progress();

  target_progress(const target_progress& from);

  inline target_progress& operator=(const target_progress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const target_progress& default_instance();

  void Swap(target_progress* other);

  // implements Message ----------------------------------------------

  target_progress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const target_progress& from);
  void MergeFrom(const target_progress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // repeated uint32 equal = 2;
  inline int equal_size() const;
  inline void clear_equal();
  static const int kEqualFieldNumber = 2;
  inline ::google::protobuf::uint32 equal(int index) const;
  inline void set_equal(int index, ::google::protobuf::uint32 value);
  inline void add_equal(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      equal() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_equal();

  // repeated uint32 great = 3;
  inline int great_size() const;
  inline void clear_great();
  static const int kGreatFieldNumber = 3;
  inline ::google::protobuf::uint32 great(int index) const;
  inline void set_great(int index, ::google::protobuf::uint32 value);
  inline void add_great(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      great() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_great();

  // repeated uint32 less = 4;
  inline int less_size() const;
  inline void clear_less();
  static const int kLessFieldNumber = 4;
  inline ::google::protobuf::uint32 less(int index) const;
  inline void set_less(int index, ::google::protobuf::uint32 value);
  inline void add_less(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      less() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_less();

  // @@protoc_insertion_point(class_scope:client.target_progress)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > equal_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > great_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > less_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etarget_2eproto();
  friend void protobuf_AssignDesc_client_2etarget_2eproto();
  friend void protobuf_ShutdownFile_client_2etarget_2eproto();

  void InitAsDefaultInstance();
  static target_progress* default_instance_;
};
// -------------------------------------------------------------------

class point_tips_rsp : public ::google::protobuf::Message {
 public:
  point_tips_rsp();
  virtual ~point_tips_rsp();

  point_tips_rsp(const point_tips_rsp& from);

  inline point_tips_rsp& operator=(const point_tips_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const point_tips_rsp& default_instance();

  void Swap(point_tips_rsp* other);

  // implements Message ----------------------------------------------

  point_tips_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const point_tips_rsp& from);
  void MergeFrom(const point_tips_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.TARGET_TYPE_E fc = 1;
  inline int fc_size() const;
  inline void clear_fc();
  static const int kFcFieldNumber = 1;
  inline ::client::TARGET_TYPE_E fc(int index) const;
  inline void set_fc(int index, ::client::TARGET_TYPE_E value);
  inline void add_fc(::client::TARGET_TYPE_E value);
  inline const ::google::protobuf::RepeatedField<int>& fc() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_fc();

  // @@protoc_insertion_point(class_scope:client.point_tips_rsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField<int> fc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2etarget_2eproto();
  friend void protobuf_AssignDesc_client_2etarget_2eproto();
  friend void protobuf_ShutdownFile_client_2etarget_2eproto();

  void InitAsDefaultInstance();
  static point_tips_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// target_list_req

// required .client.TARGET_TYPE_E type = 1;
inline bool target_list_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void target_list_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void target_list_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void target_list_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::client::TARGET_TYPE_E target_list_req::type() const {
  return static_cast< ::client::TARGET_TYPE_E >(type_);
}
inline void target_list_req::set_type(::client::TARGET_TYPE_E value) {
  assert(::client::TARGET_TYPE_E_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool target_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void target_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void target_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void target_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& target_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* target_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* target_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void target_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// target_item

// required uint32 id = 1;
inline bool target_item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void target_item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void target_item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void target_item::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 target_item::id() const {
  return id_;
}
inline void target_item::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 num = 2;
inline bool target_item::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void target_item::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void target_item::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void target_item::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 target_item::num() const {
  return num_;
}
inline void target_item::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// required .client.TARGET_STATUS_E status = 3;
inline bool target_item::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void target_item::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void target_item::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void target_item::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::client::TARGET_STATUS_E target_item::status() const {
  return static_cast< ::client::TARGET_STATUS_E >(status_);
}
inline void target_item::set_status(::client::TARGET_STATUS_E value) {
  assert(::client::TARGET_STATUS_E_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint32 extra = 4;
inline bool target_item::has_extra() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void target_item::set_has_extra() {
  _has_bits_[0] |= 0x00000008u;
}
inline void target_item::clear_has_extra() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void target_item::clear_extra() {
  extra_ = 0u;
  clear_has_extra();
}
inline ::google::protobuf::uint32 target_item::extra() const {
  return extra_;
}
inline void target_item::set_extra(::google::protobuf::uint32 value) {
  set_has_extra();
  extra_ = value;
}

// -------------------------------------------------------------------

// target_list_rsp

// required .client.TARGET_TYPE_E type = 1;
inline bool target_list_rsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void target_list_rsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void target_list_rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void target_list_rsp::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::client::TARGET_TYPE_E target_list_rsp::type() const {
  return static_cast< ::client::TARGET_TYPE_E >(type_);
}
inline void target_list_rsp::set_type(::client::TARGET_TYPE_E value) {
  assert(::client::TARGET_TYPE_E_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .client.target_item ti = 2;
inline int target_list_rsp::ti_size() const {
  return ti_.size();
}
inline void target_list_rsp::clear_ti() {
  ti_.Clear();
}
inline const ::client::target_item& target_list_rsp::ti(int index) const {
  return ti_.Get(index);
}
inline ::client::target_item* target_list_rsp::mutable_ti(int index) {
  return ti_.Mutable(index);
}
inline ::client::target_item* target_list_rsp::add_ti() {
  return ti_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::target_item >&
target_list_rsp::ti() const {
  return ti_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::target_item >*
target_list_rsp::mutable_ti() {
  return &ti_;
}

// -------------------------------------------------------------------

// target_prize_req

// required uint32 id = 1;
inline bool target_prize_req::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void target_prize_req::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void target_prize_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void target_prize_req::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 target_prize_req::id() const {
  return id_;
}
inline void target_prize_req::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool target_prize_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void target_prize_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void target_prize_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void target_prize_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& target_prize_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* target_prize_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* target_prize_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void target_prize_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// target_prize_rsp

// required .client.target_prize_rsp.status_e status = 1;
inline bool target_prize_rsp::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void target_prize_rsp::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void target_prize_rsp::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void target_prize_rsp::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::client::target_prize_rsp_status_e target_prize_rsp::status() const {
  return static_cast< ::client::target_prize_rsp_status_e >(status_);
}
inline void target_prize_rsp::set_status(::client::target_prize_rsp_status_e value) {
  assert(::client::target_prize_rsp_status_e_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint32 id = 2;
inline bool target_prize_rsp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void target_prize_rsp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void target_prize_rsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void target_prize_rsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 target_prize_rsp::id() const {
  return id_;
}
inline void target_prize_rsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .client.target_item ti = 3;
inline bool target_prize_rsp::has_ti() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void target_prize_rsp::set_has_ti() {
  _has_bits_[0] |= 0x00000004u;
}
inline void target_prize_rsp::clear_has_ti() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void target_prize_rsp::clear_ti() {
  if (ti_ != NULL) ti_->::client::target_item::Clear();
  clear_has_ti();
}
inline const ::client::target_item& target_prize_rsp::ti() const {
  return ti_ != NULL ? *ti_ : *default_instance_->ti_;
}
inline ::client::target_item* target_prize_rsp::mutable_ti() {
  set_has_ti();
  if (ti_ == NULL) ti_ = new ::client::target_item;
  return ti_;
}
inline ::client::target_item* target_prize_rsp::release_ti() {
  clear_has_ti();
  ::client::target_item* temp = ti_;
  ti_ = NULL;
  return temp;
}
inline void target_prize_rsp::set_allocated_ti(::client::target_item* ti) {
  delete ti_;
  ti_ = ti;
  if (ti) {
    set_has_ti();
  } else {
    clear_has_ti();
  }
}

// -------------------------------------------------------------------

// target_info

// required uint32 target_id = 1;
inline bool target_info::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void target_info::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void target_info::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void target_info::clear_target_id() {
  target_id_ = 0u;
  clear_has_target_id();
}
inline ::google::protobuf::uint32 target_info::target_id() const {
  return target_id_;
}
inline void target_info::set_target_id(::google::protobuf::uint32 value) {
  set_has_target_id();
  target_id_ = value;
}

// required .client.TARGET_STATUS_E status = 2;
inline bool target_info::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void target_info::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void target_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void target_info::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::client::TARGET_STATUS_E target_info::status() const {
  return static_cast< ::client::TARGET_STATUS_E >(status_);
}
inline void target_info::set_status(::client::TARGET_STATUS_E value) {
  assert(::client::TARGET_STATUS_E_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint32 num = 3;
inline bool target_info::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void target_info::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void target_info::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void target_info::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 target_info::num() const {
  return num_;
}
inline void target_info::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// cond_equal

// repeated uint32 value = 1;
inline int cond_equal::value_size() const {
  return value_.size();
}
inline void cond_equal::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::uint32 cond_equal::value(int index) const {
  return value_.Get(index);
}
inline void cond_equal::set_value(int index, ::google::protobuf::uint32 value) {
  value_.Set(index, value);
}
inline void cond_equal::add_value(::google::protobuf::uint32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
cond_equal::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
cond_equal::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// cond_great

// repeated uint32 value = 1;
inline int cond_great::value_size() const {
  return value_.size();
}
inline void cond_great::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::uint32 cond_great::value(int index) const {
  return value_.Get(index);
}
inline void cond_great::set_value(int index, ::google::protobuf::uint32 value) {
  value_.Set(index, value);
}
inline void cond_great::add_value(::google::protobuf::uint32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
cond_great::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
cond_great::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// cond_less

// repeated uint32 value = 1;
inline int cond_less::value_size() const {
  return value_.size();
}
inline void cond_less::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::uint32 cond_less::value(int index) const {
  return value_.Get(index);
}
inline void cond_less::set_value(int index, ::google::protobuf::uint32 value) {
  value_.Set(index, value);
}
inline void cond_less::add_value(::google::protobuf::uint32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
cond_less::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
cond_less::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// target_complete_cond

// repeated .client.cond_equal equal = 1;
inline int target_complete_cond::equal_size() const {
  return equal_.size();
}
inline void target_complete_cond::clear_equal() {
  equal_.Clear();
}
inline const ::client::cond_equal& target_complete_cond::equal(int index) const {
  return equal_.Get(index);
}
inline ::client::cond_equal* target_complete_cond::mutable_equal(int index) {
  return equal_.Mutable(index);
}
inline ::client::cond_equal* target_complete_cond::add_equal() {
  return equal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::cond_equal >&
target_complete_cond::equal() const {
  return equal_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::cond_equal >*
target_complete_cond::mutable_equal() {
  return &equal_;
}

// repeated .client.cond_great great = 2;
inline int target_complete_cond::great_size() const {
  return great_.size();
}
inline void target_complete_cond::clear_great() {
  great_.Clear();
}
inline const ::client::cond_great& target_complete_cond::great(int index) const {
  return great_.Get(index);
}
inline ::client::cond_great* target_complete_cond::mutable_great(int index) {
  return great_.Mutable(index);
}
inline ::client::cond_great* target_complete_cond::add_great() {
  return great_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::cond_great >&
target_complete_cond::great() const {
  return great_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::cond_great >*
target_complete_cond::mutable_great() {
  return &great_;
}

// repeated .client.cond_less less = 3;
inline int target_complete_cond::less_size() const {
  return less_.size();
}
inline void target_complete_cond::clear_less() {
  less_.Clear();
}
inline const ::client::cond_less& target_complete_cond::less(int index) const {
  return less_.Get(index);
}
inline ::client::cond_less* target_complete_cond::mutable_less(int index) {
  return less_.Mutable(index);
}
inline ::client::cond_less* target_complete_cond::add_less() {
  return less_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::cond_less >&
target_complete_cond::less() const {
  return less_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::cond_less >*
target_complete_cond::mutable_less() {
  return &less_;
}

// -------------------------------------------------------------------

// target_progress

// required uint32 value = 1;
inline bool target_progress::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void target_progress::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void target_progress::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void target_progress::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 target_progress::value() const {
  return value_;
}
inline void target_progress::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// repeated uint32 equal = 2;
inline int target_progress::equal_size() const {
  return equal_.size();
}
inline void target_progress::clear_equal() {
  equal_.Clear();
}
inline ::google::protobuf::uint32 target_progress::equal(int index) const {
  return equal_.Get(index);
}
inline void target_progress::set_equal(int index, ::google::protobuf::uint32 value) {
  equal_.Set(index, value);
}
inline void target_progress::add_equal(::google::protobuf::uint32 value) {
  equal_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
target_progress::equal() const {
  return equal_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
target_progress::mutable_equal() {
  return &equal_;
}

// repeated uint32 great = 3;
inline int target_progress::great_size() const {
  return great_.size();
}
inline void target_progress::clear_great() {
  great_.Clear();
}
inline ::google::protobuf::uint32 target_progress::great(int index) const {
  return great_.Get(index);
}
inline void target_progress::set_great(int index, ::google::protobuf::uint32 value) {
  great_.Set(index, value);
}
inline void target_progress::add_great(::google::protobuf::uint32 value) {
  great_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
target_progress::great() const {
  return great_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
target_progress::mutable_great() {
  return &great_;
}

// repeated uint32 less = 4;
inline int target_progress::less_size() const {
  return less_.size();
}
inline void target_progress::clear_less() {
  less_.Clear();
}
inline ::google::protobuf::uint32 target_progress::less(int index) const {
  return less_.Get(index);
}
inline void target_progress::set_less(int index, ::google::protobuf::uint32 value) {
  less_.Set(index, value);
}
inline void target_progress::add_less(::google::protobuf::uint32 value) {
  less_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
target_progress::less() const {
  return less_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
target_progress::mutable_less() {
  return &less_;
}

// -------------------------------------------------------------------

// point_tips_rsp

// repeated .client.TARGET_TYPE_E fc = 1;
inline int point_tips_rsp::fc_size() const {
  return fc_.size();
}
inline void point_tips_rsp::clear_fc() {
  fc_.Clear();
}
inline ::client::TARGET_TYPE_E point_tips_rsp::fc(int index) const {
  return static_cast< ::client::TARGET_TYPE_E >(fc_.Get(index));
}
inline void point_tips_rsp::set_fc(int index, ::client::TARGET_TYPE_E value) {
  assert(::client::TARGET_TYPE_E_IsValid(value));
  fc_.Set(index, value);
}
inline void point_tips_rsp::add_fc(::client::TARGET_TYPE_E value) {
  assert(::client::TARGET_TYPE_E_IsValid(value));
  fc_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
point_tips_rsp::fc() const {
  return fc_;
}
inline ::google::protobuf::RepeatedField<int>*
point_tips_rsp::mutable_fc() {
  return &fc_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::target_prize_rsp_status_e>() {
  return ::client::target_prize_rsp_status_e_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::TARGET_TYPE_E>() {
  return ::client::TARGET_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::TARGET_STATUS_E>() {
  return ::client::TARGET_STATUS_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2etarget_2eproto__INCLUDED
