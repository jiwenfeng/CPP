// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.spa.proto

#ifndef PROTOBUF_client_2espa_2eproto__INCLUDED
#define PROTOBUF_client_2espa_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2espa_2eproto();
void protobuf_AssignDesc_client_2espa_2eproto();
void protobuf_ShutdownFile_client_2espa_2eproto();

class enter_spa_req;
class enter_spa_rsp;
class leave_spa_req;
class spa_action_req;
class spa_action_msg;

enum ENTER_SPA_RET_E {
  ESRE_SUCCESS = 0,
  ESRE_LVL_LIMIT = 1,
  ESRE_TIME_LIMIT = 2,
  ESRE_SYS_ERROR = 3
};
bool ENTER_SPA_RET_E_IsValid(int value);
const ENTER_SPA_RET_E ENTER_SPA_RET_E_MIN = ESRE_SUCCESS;
const ENTER_SPA_RET_E ENTER_SPA_RET_E_MAX = ESRE_SYS_ERROR;
const int ENTER_SPA_RET_E_ARRAYSIZE = ENTER_SPA_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENTER_SPA_RET_E_descriptor();
inline const ::std::string& ENTER_SPA_RET_E_Name(ENTER_SPA_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENTER_SPA_RET_E_descriptor(), value);
}
inline bool ENTER_SPA_RET_E_Parse(
    const ::std::string& name, ENTER_SPA_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENTER_SPA_RET_E>(
    ENTER_SPA_RET_E_descriptor(), name, value);
}
enum SPA_ACTION_TYPE_E {
  SATE_XISHUI = 1,
  SATE_CUOBEI = 2,
  SATE_ANMO = 3,
  SATE_TIMES = 4
};
bool SPA_ACTION_TYPE_E_IsValid(int value);
const SPA_ACTION_TYPE_E SPA_ACTION_TYPE_E_MIN = SATE_XISHUI;
const SPA_ACTION_TYPE_E SPA_ACTION_TYPE_E_MAX = SATE_TIMES;
const int SPA_ACTION_TYPE_E_ARRAYSIZE = SPA_ACTION_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPA_ACTION_TYPE_E_descriptor();
inline const ::std::string& SPA_ACTION_TYPE_E_Name(SPA_ACTION_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPA_ACTION_TYPE_E_descriptor(), value);
}
inline bool SPA_ACTION_TYPE_E_Parse(
    const ::std::string& name, SPA_ACTION_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPA_ACTION_TYPE_E>(
    SPA_ACTION_TYPE_E_descriptor(), name, value);
}
enum SPA_ACTION_RET_E {
  SARE_SUCCESS = 0,
  SARE_TIMES_LIMIT = 1,
  SARE_OUT = 2
};
bool SPA_ACTION_RET_E_IsValid(int value);
const SPA_ACTION_RET_E SPA_ACTION_RET_E_MIN = SARE_SUCCESS;
const SPA_ACTION_RET_E SPA_ACTION_RET_E_MAX = SARE_OUT;
const int SPA_ACTION_RET_E_ARRAYSIZE = SPA_ACTION_RET_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPA_ACTION_RET_E_descriptor();
inline const ::std::string& SPA_ACTION_RET_E_Name(SPA_ACTION_RET_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPA_ACTION_RET_E_descriptor(), value);
}
inline bool SPA_ACTION_RET_E_Parse(
    const ::std::string& name, SPA_ACTION_RET_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPA_ACTION_RET_E>(
    SPA_ACTION_RET_E_descriptor(), name, value);
}
// ===================================================================

class enter_spa_req : public ::google::protobuf::Message {
 public:
  enter_spa_req();
  virtual ~enter_spa_req();

  enter_spa_req(const enter_spa_req& from);

  inline enter_spa_req& operator=(const enter_spa_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_spa_req& default_instance();

  void Swap(enter_spa_req* other);

  // implements Message ----------------------------------------------

  enter_spa_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_spa_req& from);
  void MergeFrom(const enter_spa_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 now = 1;
  inline bool has_now() const;
  inline void clear_now();
  static const int kNowFieldNumber = 1;
  inline ::google::protobuf::uint32 now() const;
  inline void set_now(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.enter_spa_req)
 private:
  inline void set_has_now();
  inline void clear_has_now();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 now_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2espa_2eproto();
  friend void protobuf_AssignDesc_client_2espa_2eproto();
  friend void protobuf_ShutdownFile_client_2espa_2eproto();

  void InitAsDefaultInstance();
  static enter_spa_req* default_instance_;
};
// -------------------------------------------------------------------

class enter_spa_rsp : public ::google::protobuf::Message {
 public:
  enter_spa_rsp();
  virtual ~enter_spa_rsp();

  enter_spa_rsp(const enter_spa_rsp& from);

  inline enter_spa_rsp& operator=(const enter_spa_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_spa_rsp& default_instance();

  void Swap(enter_spa_rsp* other);

  // implements Message ----------------------------------------------

  enter_spa_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_spa_rsp& from);
  void MergeFrom(const enter_spa_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.ENTER_SPA_RET_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::ENTER_SPA_RET_E ret() const;
  inline void set_ret(::client::ENTER_SPA_RET_E value);

  // @@protoc_insertion_point(class_scope:client.enter_spa_rsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2espa_2eproto();
  friend void protobuf_AssignDesc_client_2espa_2eproto();
  friend void protobuf_ShutdownFile_client_2espa_2eproto();

  void InitAsDefaultInstance();
  static enter_spa_rsp* default_instance_;
};
// -------------------------------------------------------------------

class leave_spa_req : public ::google::protobuf::Message {
 public:
  leave_spa_req();
  virtual ~leave_spa_req();

  leave_spa_req(const leave_spa_req& from);

  inline leave_spa_req& operator=(const leave_spa_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const leave_spa_req& default_instance();

  void Swap(leave_spa_req* other);

  // implements Message ----------------------------------------------

  leave_spa_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const leave_spa_req& from);
  void MergeFrom(const leave_spa_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 now = 1;
  inline bool has_now() const;
  inline void clear_now();
  static const int kNowFieldNumber = 1;
  inline ::google::protobuf::uint32 now() const;
  inline void set_now(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.leave_spa_req)
 private:
  inline void set_has_now();
  inline void clear_has_now();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 now_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2espa_2eproto();
  friend void protobuf_AssignDesc_client_2espa_2eproto();
  friend void protobuf_ShutdownFile_client_2espa_2eproto();

  void InitAsDefaultInstance();
  static leave_spa_req* default_instance_;
};
// -------------------------------------------------------------------

class spa_action_req : public ::google::protobuf::Message {
 public:
  spa_action_req();
  virtual ~spa_action_req();

  spa_action_req(const spa_action_req& from);

  inline spa_action_req& operator=(const spa_action_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const spa_action_req& default_instance();

  void Swap(spa_action_req* other);

  // implements Message ----------------------------------------------

  spa_action_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const spa_action_req& from);
  void MergeFrom(const spa_action_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dst_role_id = 1;
  inline bool has_dst_role_id() const;
  inline void clear_dst_role_id();
  static const int kDstRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 dst_role_id() const;
  inline void set_dst_role_id(::google::protobuf::uint32 value);

  // required .client.SPA_ACTION_TYPE_E action_type = 2;
  inline bool has_action_type() const;
  inline void clear_action_type();
  static const int kActionTypeFieldNumber = 2;
  inline ::client::SPA_ACTION_TYPE_E action_type() const;
  inline void set_action_type(::client::SPA_ACTION_TYPE_E value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.spa_action_req)
 private:
  inline void set_has_dst_role_id();
  inline void clear_has_dst_role_id();
  inline void set_has_action_type();
  inline void clear_has_action_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 dst_role_id_;
  int action_type_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2espa_2eproto();
  friend void protobuf_AssignDesc_client_2espa_2eproto();
  friend void protobuf_ShutdownFile_client_2espa_2eproto();

  void InitAsDefaultInstance();
  static spa_action_req* default_instance_;
};
// -------------------------------------------------------------------

class spa_action_msg : public ::google::protobuf::Message {
 public:
  spa_action_msg();
  virtual ~spa_action_msg();

  spa_action_msg(const spa_action_msg& from);

  inline spa_action_msg& operator=(const spa_action_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const spa_action_msg& default_instance();

  void Swap(spa_action_msg* other);

  // implements Message ----------------------------------------------

  spa_action_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const spa_action_msg& from);
  void MergeFrom(const spa_action_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.SPA_ACTION_RET_E ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::client::SPA_ACTION_RET_E ret() const;
  inline void set_ret(::client::SPA_ACTION_RET_E value);

  // required .client.SPA_ACTION_TYPE_E action_type = 2;
  inline bool has_action_type() const;
  inline void clear_action_type();
  static const int kActionTypeFieldNumber = 2;
  inline ::client::SPA_ACTION_TYPE_E action_type() const;
  inline void set_action_type(::client::SPA_ACTION_TYPE_E value);

  // required uint32 times = 3;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // optional uint32 src_role_id = 4;
  inline bool has_src_role_id() const;
  inline void clear_src_role_id();
  static const int kSrcRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint32 src_role_id() const;
  inline void set_src_role_id(::google::protobuf::uint32 value);

  // optional uint32 dst_role_id = 5;
  inline bool has_dst_role_id() const;
  inline void clear_dst_role_id();
  static const int kDstRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint32 dst_role_id() const;
  inline void set_dst_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.spa_action_msg)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_action_type();
  inline void clear_has_action_type();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_src_role_id();
  inline void clear_has_src_role_id();
  inline void set_has_dst_role_id();
  inline void clear_has_dst_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  int action_type_;
  ::google::protobuf::uint32 times_;
  ::google::protobuf::uint32 src_role_id_;
  ::google::protobuf::uint32 dst_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2espa_2eproto();
  friend void protobuf_AssignDesc_client_2espa_2eproto();
  friend void protobuf_ShutdownFile_client_2espa_2eproto();

  void InitAsDefaultInstance();
  static spa_action_msg* default_instance_;
};
// ===================================================================


// ===================================================================

// enter_spa_req

// required uint32 now = 1;
inline bool enter_spa_req::has_now() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_spa_req::set_has_now() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_spa_req::clear_has_now() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_spa_req::clear_now() {
  now_ = 0u;
  clear_has_now();
}
inline ::google::protobuf::uint32 enter_spa_req::now() const {
  return now_;
}
inline void enter_spa_req::set_now(::google::protobuf::uint32 value) {
  set_has_now();
  now_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool enter_spa_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_spa_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_spa_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_spa_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& enter_spa_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* enter_spa_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* enter_spa_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void enter_spa_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// enter_spa_rsp

// required .client.ENTER_SPA_RET_E ret = 1;
inline bool enter_spa_rsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_spa_rsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_spa_rsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_spa_rsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::ENTER_SPA_RET_E enter_spa_rsp::ret() const {
  return static_cast< ::client::ENTER_SPA_RET_E >(ret_);
}
inline void enter_spa_rsp::set_ret(::client::ENTER_SPA_RET_E value) {
  assert(::client::ENTER_SPA_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// leave_spa_req

// required uint32 now = 1;
inline bool leave_spa_req::has_now() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void leave_spa_req::set_has_now() {
  _has_bits_[0] |= 0x00000001u;
}
inline void leave_spa_req::clear_has_now() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void leave_spa_req::clear_now() {
  now_ = 0u;
  clear_has_now();
}
inline ::google::protobuf::uint32 leave_spa_req::now() const {
  return now_;
}
inline void leave_spa_req::set_now(::google::protobuf::uint32 value) {
  set_has_now();
  now_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool leave_spa_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void leave_spa_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void leave_spa_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void leave_spa_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& leave_spa_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* leave_spa_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* leave_spa_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void leave_spa_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// spa_action_req

// required uint32 dst_role_id = 1;
inline bool spa_action_req::has_dst_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void spa_action_req::set_has_dst_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void spa_action_req::clear_has_dst_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void spa_action_req::clear_dst_role_id() {
  dst_role_id_ = 0u;
  clear_has_dst_role_id();
}
inline ::google::protobuf::uint32 spa_action_req::dst_role_id() const {
  return dst_role_id_;
}
inline void spa_action_req::set_dst_role_id(::google::protobuf::uint32 value) {
  set_has_dst_role_id();
  dst_role_id_ = value;
}

// required .client.SPA_ACTION_TYPE_E action_type = 2;
inline bool spa_action_req::has_action_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void spa_action_req::set_has_action_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void spa_action_req::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void spa_action_req::clear_action_type() {
  action_type_ = 1;
  clear_has_action_type();
}
inline ::client::SPA_ACTION_TYPE_E spa_action_req::action_type() const {
  return static_cast< ::client::SPA_ACTION_TYPE_E >(action_type_);
}
inline void spa_action_req::set_action_type(::client::SPA_ACTION_TYPE_E value) {
  assert(::client::SPA_ACTION_TYPE_E_IsValid(value));
  set_has_action_type();
  action_type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool spa_action_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void spa_action_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void spa_action_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void spa_action_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& spa_action_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* spa_action_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* spa_action_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void spa_action_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// spa_action_msg

// required .client.SPA_ACTION_RET_E ret = 1;
inline bool spa_action_msg::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void spa_action_msg::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void spa_action_msg::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void spa_action_msg::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::client::SPA_ACTION_RET_E spa_action_msg::ret() const {
  return static_cast< ::client::SPA_ACTION_RET_E >(ret_);
}
inline void spa_action_msg::set_ret(::client::SPA_ACTION_RET_E value) {
  assert(::client::SPA_ACTION_RET_E_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// required .client.SPA_ACTION_TYPE_E action_type = 2;
inline bool spa_action_msg::has_action_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void spa_action_msg::set_has_action_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void spa_action_msg::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void spa_action_msg::clear_action_type() {
  action_type_ = 1;
  clear_has_action_type();
}
inline ::client::SPA_ACTION_TYPE_E spa_action_msg::action_type() const {
  return static_cast< ::client::SPA_ACTION_TYPE_E >(action_type_);
}
inline void spa_action_msg::set_action_type(::client::SPA_ACTION_TYPE_E value) {
  assert(::client::SPA_ACTION_TYPE_E_IsValid(value));
  set_has_action_type();
  action_type_ = value;
}

// required uint32 times = 3;
inline bool spa_action_msg::has_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void spa_action_msg::set_has_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void spa_action_msg::clear_has_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void spa_action_msg::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 spa_action_msg::times() const {
  return times_;
}
inline void spa_action_msg::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// optional uint32 src_role_id = 4;
inline bool spa_action_msg::has_src_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void spa_action_msg::set_has_src_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void spa_action_msg::clear_has_src_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void spa_action_msg::clear_src_role_id() {
  src_role_id_ = 0u;
  clear_has_src_role_id();
}
inline ::google::protobuf::uint32 spa_action_msg::src_role_id() const {
  return src_role_id_;
}
inline void spa_action_msg::set_src_role_id(::google::protobuf::uint32 value) {
  set_has_src_role_id();
  src_role_id_ = value;
}

// optional uint32 dst_role_id = 5;
inline bool spa_action_msg::has_dst_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void spa_action_msg::set_has_dst_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void spa_action_msg::clear_has_dst_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void spa_action_msg::clear_dst_role_id() {
  dst_role_id_ = 0u;
  clear_has_dst_role_id();
}
inline ::google::protobuf::uint32 spa_action_msg::dst_role_id() const {
  return dst_role_id_;
}
inline void spa_action_msg::set_dst_role_id(::google::protobuf::uint32 value) {
  set_has_dst_role_id();
  dst_role_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::ENTER_SPA_RET_E>() {
  return ::client::ENTER_SPA_RET_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::SPA_ACTION_TYPE_E>() {
  return ::client::SPA_ACTION_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::SPA_ACTION_RET_E>() {
  return ::client::SPA_ACTION_RET_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2espa_2eproto__INCLUDED
