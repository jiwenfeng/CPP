// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.trans_user.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.trans_user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* trans_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  trans_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* jump_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  jump_user_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2etrans_5fuser_2eproto() {
  protobuf_AddDesc_client_2etrans_5fuser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.trans_user.proto");
  GOOGLE_CHECK(file != NULL);
  trans_user_descriptor_ = file->message_type(0);
  static const int trans_user_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_user, ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_user, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_user, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_user, scene_inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_user, svr_head_),
  };
  trans_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      trans_user_descriptor_,
      trans_user::default_instance_,
      trans_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(trans_user));
  jump_user_descriptor_ = file->message_type(1);
  static const int jump_user_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_user, ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_user, trans_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_user, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_user, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_user, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_user, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_user, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_user, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_user, same_scene_),
  };
  jump_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      jump_user_descriptor_,
      jump_user::default_instance_,
      jump_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(jump_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(jump_user));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2etrans_5fuser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    trans_user_descriptor_, &trans_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    jump_user_descriptor_, &jump_user::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2etrans_5fuser_2eproto() {
  delete trans_user::default_instance_;
  delete trans_user_reflection_;
  delete jump_user::default_instance_;
  delete jump_user_reflection_;
}

void protobuf_AddDesc_client_2etrans_5fuser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027client.trans_user.proto\022\006client\032\021clien"
    "t.comm.proto\"\203\001\n\ntrans_user\022\013\n\003ptr\030\001 \002(\004"
    "\022\021\n\006map_id\030\002 \001(\r:\0010\022\023\n\010scene_id\030\003 \001(\r:\0010"
    "\022\030\n\rscene_inst_id\030\004 \001(\r:\0010\022&\n\010svr_head\030\350"
    "\007 \001(\0132\023.client.server_head\"\222\001\n\tjump_user"
    "\022\013\n\003ptr\030\001 \002(\004\022\020\n\010trans_id\030\002 \002(\r\022\016\n\006map_i"
    "d\030\003 \002(\r\022\020\n\010scene_id\030\004 \002(\r\022\t\n\001x\030\005 \002(\005\022\t\n\001"
    "y\030\006 \002(\005\022\t\n\001z\030\007 \002(\005\022\017\n\007role_id\030\010 \001(\r\022\022\n\ns"
    "ame_scene\030\t \001(\010", 335);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.trans_user.proto", &protobuf_RegisterTypes);
  trans_user::default_instance_ = new trans_user();
  jump_user::default_instance_ = new jump_user();
  trans_user::default_instance_->InitAsDefaultInstance();
  jump_user::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2etrans_5fuser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2etrans_5fuser_2eproto {
  StaticDescriptorInitializer_client_2etrans_5fuser_2eproto() {
    protobuf_AddDesc_client_2etrans_5fuser_2eproto();
  }
} static_descriptor_initializer_client_2etrans_5fuser_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int trans_user::kPtrFieldNumber;
const int trans_user::kMapIdFieldNumber;
const int trans_user::kSceneIdFieldNumber;
const int trans_user::kSceneInstIdFieldNumber;
const int trans_user::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

trans_user::trans_user()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void trans_user::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

trans_user::trans_user(const trans_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void trans_user::SharedCtor() {
  _cached_size_ = 0;
  ptr_ = GOOGLE_ULONGLONG(0);
  map_id_ = 0u;
  scene_id_ = 0u;
  scene_inst_id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

trans_user::~trans_user() {
  SharedDtor();
}

void trans_user::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void trans_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trans_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return trans_user_descriptor_;
}

const trans_user& trans_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etrans_5fuser_2eproto();
  return *default_instance_;
}

trans_user* trans_user::default_instance_ = NULL;

trans_user* trans_user::New() const {
  return new trans_user;
}

void trans_user::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ptr_ = GOOGLE_ULONGLONG(0);
    map_id_ = 0u;
    scene_id_ = 0u;
    scene_inst_id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool trans_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ptr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
          set_has_ptr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }

      // optional uint32 map_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_inst_id;
        break;
      }

      // optional uint32 scene_inst_id = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_inst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_inst_id_)));
          set_has_scene_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void trans_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  // optional uint32 map_id = 2 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_id(), output);
  }

  // optional uint32 scene_id = 3 [default = 0];
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_id(), output);
  }

  // optional uint32 scene_inst_id = 4 [default = 0];
  if (has_scene_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_inst_id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* trans_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  // optional uint32 map_id = 2 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_id(), target);
  }

  // optional uint32 scene_id = 3 [default = 0];
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_id(), target);
  }

  // optional uint32 scene_inst_id = 4 [default = 0];
  if (has_scene_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_inst_id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int trans_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ptr = 1;
    if (has_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ptr());
    }

    // optional uint32 map_id = 2 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 scene_id = 3 [default = 0];
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_inst_id = 4 [default = 0];
    if (has_scene_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_inst_id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trans_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const trans_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const trans_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void trans_user::MergeFrom(const trans_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptr()) {
      set_ptr(from.ptr());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_inst_id()) {
      set_scene_inst_id(from.scene_inst_id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void trans_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trans_user::CopyFrom(const trans_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trans_user::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void trans_user::Swap(trans_user* other) {
  if (other != this) {
    std::swap(ptr_, other->ptr_);
    std::swap(map_id_, other->map_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_inst_id_, other->scene_inst_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata trans_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = trans_user_descriptor_;
  metadata.reflection = trans_user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int jump_user::kPtrFieldNumber;
const int jump_user::kTransIdFieldNumber;
const int jump_user::kMapIdFieldNumber;
const int jump_user::kSceneIdFieldNumber;
const int jump_user::kXFieldNumber;
const int jump_user::kYFieldNumber;
const int jump_user::kZFieldNumber;
const int jump_user::kRoleIdFieldNumber;
const int jump_user::kSameSceneFieldNumber;
#endif  // !_MSC_VER

jump_user::jump_user()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void jump_user::InitAsDefaultInstance() {
}

jump_user::jump_user(const jump_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void jump_user::SharedCtor() {
  _cached_size_ = 0;
  ptr_ = GOOGLE_ULONGLONG(0);
  trans_id_ = 0u;
  map_id_ = 0u;
  scene_id_ = 0u;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  role_id_ = 0u;
  same_scene_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

jump_user::~jump_user() {
  SharedDtor();
}

void jump_user::SharedDtor() {
  if (this != default_instance_) {
  }
}

void jump_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* jump_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return jump_user_descriptor_;
}

const jump_user& jump_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2etrans_5fuser_2eproto();
  return *default_instance_;
}

jump_user* jump_user::default_instance_ = NULL;

jump_user* jump_user::New() const {
  return new jump_user;
}

void jump_user::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ptr_ = GOOGLE_ULONGLONG(0);
    trans_id_ = 0u;
    map_id_ = 0u;
    scene_id_ = 0u;
    x_ = 0;
    y_ = 0;
    z_ = 0;
    role_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    same_scene_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool jump_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ptr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
          set_has_ptr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trans_id;
        break;
      }

      // required uint32 trans_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trans_id_)));
          set_has_trans_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }

      // required uint32 map_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // required uint32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_x;
        break;
      }

      // required int32 x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_y;
        break;
      }

      // required int32 y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_z;
        break;
      }

      // required int32 z = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_same_scene;
        break;
      }

      // optional bool same_scene = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_same_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &same_scene_)));
          set_has_same_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void jump_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  // required uint32 trans_id = 2;
  if (has_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trans_id(), output);
  }

  // required uint32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->map_id(), output);
  }

  // required uint32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_id(), output);
  }

  // required int32 x = 5;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->x(), output);
  }

  // required int32 y = 6;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->y(), output);
  }

  // required int32 z = 7;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->z(), output);
  }

  // optional uint32 role_id = 8;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->role_id(), output);
  }

  // optional bool same_scene = 9;
  if (has_same_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->same_scene(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* jump_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  // required uint32 trans_id = 2;
  if (has_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trans_id(), target);
  }

  // required uint32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->map_id(), target);
  }

  // required uint32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_id(), target);
  }

  // required int32 x = 5;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->x(), target);
  }

  // required int32 y = 6;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->y(), target);
  }

  // required int32 z = 7;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->z(), target);
  }

  // optional uint32 role_id = 8;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->role_id(), target);
  }

  // optional bool same_scene = 9;
  if (has_same_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->same_scene(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int jump_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ptr = 1;
    if (has_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ptr());
    }

    // required uint32 trans_id = 2;
    if (has_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trans_id());
    }

    // required uint32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // required uint32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // required int32 x = 5;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 6;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 z = 7;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

    // optional uint32 role_id = 8;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool same_scene = 9;
    if (has_same_scene()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void jump_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const jump_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const jump_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void jump_user::MergeFrom(const jump_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptr()) {
      set_ptr(from.ptr());
    }
    if (from.has_trans_id()) {
      set_trans_id(from.trans_id());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_same_scene()) {
      set_same_scene(from.same_scene());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void jump_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void jump_user::CopyFrom(const jump_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool jump_user::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void jump_user::Swap(jump_user* other) {
  if (other != this) {
    std::swap(ptr_, other->ptr_);
    std::swap(trans_id_, other->trans_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(role_id_, other->role_id_);
    std::swap(same_scene_, other->same_scene_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata jump_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = jump_user_descriptor_;
  metadata.reflection = jump_user_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
