// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.pets.proto

#ifndef PROTOBUF_client_2epets_2eproto__INCLUDED
#define PROTOBUF_client_2epets_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client.comm.pb.h"
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2epets_2eproto();
void protobuf_AssignDesc_client_2epets_2eproto();
void protobuf_ShutdownFile_client_2epets_2eproto();

class pet_kill_count_msg;
class pet_change_mode_req;
class pet_change_mode_rsp;
class pet_id_rsp;
class pet_fight_attr;
class pet_db_info;
class pets_msg;
class pet_recruit_req;
class pet_recruit_rsp;
class pet_lingering_req;
class pet_lingering_rsp;
class pet_levelup_req;
class pet_levelup_rsp;
class pet_list_req;
class pet_list_rsp;
class pet_rest_or_fight_req;
class pet_rest_or_fight_rsp;
class pet_resurgence_req;
class pet_resurgence_rsp;
class pet_info_req;
class pet_info_rsp;
class magic_upgrade_req;
class magic_upgrade_rsp;
class pet_skill_rpgrate_req;
class pet_fight_mode_change_req;
class pet_fight_info;
class pet_fight_mode_change_rsp;
class pet_levels_set_req;
class pet_levels_set_rsp;

enum pet_lingering_rsp_result {
  pet_lingering_rsp_result_success = 1,
  pet_lingering_rsp_result_failed = 2
};
bool pet_lingering_rsp_result_IsValid(int value);
const pet_lingering_rsp_result pet_lingering_rsp_result_result_MIN = pet_lingering_rsp_result_success;
const pet_lingering_rsp_result pet_lingering_rsp_result_result_MAX = pet_lingering_rsp_result_failed;
const int pet_lingering_rsp_result_result_ARRAYSIZE = pet_lingering_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* pet_lingering_rsp_result_descriptor();
inline const ::std::string& pet_lingering_rsp_result_Name(pet_lingering_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    pet_lingering_rsp_result_descriptor(), value);
}
inline bool pet_lingering_rsp_result_Parse(
    const ::std::string& name, pet_lingering_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<pet_lingering_rsp_result>(
    pet_lingering_rsp_result_descriptor(), name, value);
}
enum pet_levelup_rsp_result {
  pet_levelup_rsp_result_success = 1,
  pet_levelup_rsp_result_failed = 2
};
bool pet_levelup_rsp_result_IsValid(int value);
const pet_levelup_rsp_result pet_levelup_rsp_result_result_MIN = pet_levelup_rsp_result_success;
const pet_levelup_rsp_result pet_levelup_rsp_result_result_MAX = pet_levelup_rsp_result_failed;
const int pet_levelup_rsp_result_result_ARRAYSIZE = pet_levelup_rsp_result_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* pet_levelup_rsp_result_descriptor();
inline const ::std::string& pet_levelup_rsp_result_Name(pet_levelup_rsp_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    pet_levelup_rsp_result_descriptor(), value);
}
inline bool pet_levelup_rsp_result_Parse(
    const ::std::string& name, pet_levelup_rsp_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<pet_levelup_rsp_result>(
    pet_levelup_rsp_result_descriptor(), name, value);
}
enum PET_MODE {
  PM_FOLLOW = 1,
  PM_STAY = 2
};
bool PET_MODE_IsValid(int value);
const PET_MODE PET_MODE_MIN = PM_FOLLOW;
const PET_MODE PET_MODE_MAX = PM_STAY;
const int PET_MODE_ARRAYSIZE = PET_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_MODE_descriptor();
inline const ::std::string& PET_MODE_Name(PET_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_MODE_descriptor(), value);
}
inline bool PET_MODE_Parse(
    const ::std::string& name, PET_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_MODE>(
    PET_MODE_descriptor(), name, value);
}
enum PET_STATUS_E {
  PET_STATUS_TRUCE = 0,
  PET_STATUS_FIGHTING = 1,
  PET_STATUS_DEAD = 2,
  PET_STATUS_PREPARE = 3
};
bool PET_STATUS_E_IsValid(int value);
const PET_STATUS_E PET_STATUS_E_MIN = PET_STATUS_TRUCE;
const PET_STATUS_E PET_STATUS_E_MAX = PET_STATUS_PREPARE;
const int PET_STATUS_E_ARRAYSIZE = PET_STATUS_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_STATUS_E_descriptor();
inline const ::std::string& PET_STATUS_E_Name(PET_STATUS_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_STATUS_E_descriptor(), value);
}
inline bool PET_STATUS_E_Parse(
    const ::std::string& name, PET_STATUS_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_STATUS_E>(
    PET_STATUS_E_descriptor(), name, value);
}
enum PET_LINGERING_STATUS_E {
  PET_LINGERING_STATUS_NOT = 0,
  PET_LINGERING_STATUS_HAD = 1
};
bool PET_LINGERING_STATUS_E_IsValid(int value);
const PET_LINGERING_STATUS_E PET_LINGERING_STATUS_E_MIN = PET_LINGERING_STATUS_NOT;
const PET_LINGERING_STATUS_E PET_LINGERING_STATUS_E_MAX = PET_LINGERING_STATUS_HAD;
const int PET_LINGERING_STATUS_E_ARRAYSIZE = PET_LINGERING_STATUS_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_LINGERING_STATUS_E_descriptor();
inline const ::std::string& PET_LINGERING_STATUS_E_Name(PET_LINGERING_STATUS_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_LINGERING_STATUS_E_descriptor(), value);
}
inline bool PET_LINGERING_STATUS_E_Parse(
    const ::std::string& name, PET_LINGERING_STATUS_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_LINGERING_STATUS_E>(
    PET_LINGERING_STATUS_E_descriptor(), name, value);
}
enum RECRUIT_TYPE {
  RECRUIT_SUCCESS = 1,
  RECRUIT_STRATEGY_NOT_ENOUGH = 2,
  RECRUIT_LEVEL_NOT_ENOUGH = 3,
  RECRUIT_HAS_RECRUIT = 4
};
bool RECRUIT_TYPE_IsValid(int value);
const RECRUIT_TYPE RECRUIT_TYPE_MIN = RECRUIT_SUCCESS;
const RECRUIT_TYPE RECRUIT_TYPE_MAX = RECRUIT_HAS_RECRUIT;
const int RECRUIT_TYPE_ARRAYSIZE = RECRUIT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* RECRUIT_TYPE_descriptor();
inline const ::std::string& RECRUIT_TYPE_Name(RECRUIT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    RECRUIT_TYPE_descriptor(), value);
}
inline bool RECRUIT_TYPE_Parse(
    const ::std::string& name, RECRUIT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RECRUIT_TYPE>(
    RECRUIT_TYPE_descriptor(), name, value);
}
enum PET_OPERATE_E {
  PET_OPERATE_REST = 0,
  PET_OPERATE_FIGHT = 1
};
bool PET_OPERATE_E_IsValid(int value);
const PET_OPERATE_E PET_OPERATE_E_MIN = PET_OPERATE_REST;
const PET_OPERATE_E PET_OPERATE_E_MAX = PET_OPERATE_FIGHT;
const int PET_OPERATE_E_ARRAYSIZE = PET_OPERATE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_OPERATE_E_descriptor();
inline const ::std::string& PET_OPERATE_E_Name(PET_OPERATE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_OPERATE_E_descriptor(), value);
}
inline bool PET_OPERATE_E_Parse(
    const ::std::string& name, PET_OPERATE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_OPERATE_E>(
    PET_OPERATE_E_descriptor(), name, value);
}
enum PET_REST_OR_FIGHT_E {
  PET_REST_SUCCESS = 0,
  PET_FIGHT_SUCCESS = 1,
  PET_REST_FAILD = 2,
  PET_FIGHT_FAILD = 3,
  PET_PREPARE_SUCCESS = 4
};
bool PET_REST_OR_FIGHT_E_IsValid(int value);
const PET_REST_OR_FIGHT_E PET_REST_OR_FIGHT_E_MIN = PET_REST_SUCCESS;
const PET_REST_OR_FIGHT_E PET_REST_OR_FIGHT_E_MAX = PET_PREPARE_SUCCESS;
const int PET_REST_OR_FIGHT_E_ARRAYSIZE = PET_REST_OR_FIGHT_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_REST_OR_FIGHT_E_descriptor();
inline const ::std::string& PET_REST_OR_FIGHT_E_Name(PET_REST_OR_FIGHT_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_REST_OR_FIGHT_E_descriptor(), value);
}
inline bool PET_REST_OR_FIGHT_E_Parse(
    const ::std::string& name, PET_REST_OR_FIGHT_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_REST_OR_FIGHT_E>(
    PET_REST_OR_FIGHT_E_descriptor(), name, value);
}
enum PET_RESURGENCE_TYPE_E {
  PET_RESURGENCE_TYPE_RESURGENCE = 0,
  PET_RESURGENCE_TYPE_CURE = 1
};
bool PET_RESURGENCE_TYPE_E_IsValid(int value);
const PET_RESURGENCE_TYPE_E PET_RESURGENCE_TYPE_E_MIN = PET_RESURGENCE_TYPE_RESURGENCE;
const PET_RESURGENCE_TYPE_E PET_RESURGENCE_TYPE_E_MAX = PET_RESURGENCE_TYPE_CURE;
const int PET_RESURGENCE_TYPE_E_ARRAYSIZE = PET_RESURGENCE_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_RESURGENCE_TYPE_E_descriptor();
inline const ::std::string& PET_RESURGENCE_TYPE_E_Name(PET_RESURGENCE_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_RESURGENCE_TYPE_E_descriptor(), value);
}
inline bool PET_RESURGENCE_TYPE_E_Parse(
    const ::std::string& name, PET_RESURGENCE_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_RESURGENCE_TYPE_E>(
    PET_RESURGENCE_TYPE_E_descriptor(), name, value);
}
enum PET_RESURGENCE_E {
  PET_RESURGENCE_SUCCESS = 0,
  PET_RESURGENCE_HP_SUCCESS = 1,
  PET_RESURGENCE_REPUTATION_NOT_ENOUGH = 2,
  PET_RESURGENCE_SILIVER_NOT_ENOUGH = 3,
  PET_RESURGENCE_HP_ENOUGH = 4
};
bool PET_RESURGENCE_E_IsValid(int value);
const PET_RESURGENCE_E PET_RESURGENCE_E_MIN = PET_RESURGENCE_SUCCESS;
const PET_RESURGENCE_E PET_RESURGENCE_E_MAX = PET_RESURGENCE_HP_ENOUGH;
const int PET_RESURGENCE_E_ARRAYSIZE = PET_RESURGENCE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_RESURGENCE_E_descriptor();
inline const ::std::string& PET_RESURGENCE_E_Name(PET_RESURGENCE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_RESURGENCE_E_descriptor(), value);
}
inline bool PET_RESURGENCE_E_Parse(
    const ::std::string& name, PET_RESURGENCE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_RESURGENCE_E>(
    PET_RESURGENCE_E_descriptor(), name, value);
}
enum PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E {
  PET_FIGHT_MODE_CHANGE_SUCCEED = 1,
  PET_FIGHT_MODE_CHANGE_FAILED = 2
};
bool PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_IsValid(int value);
const PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_MIN = PET_FIGHT_MODE_CHANGE_SUCCEED;
const PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_MAX = PET_FIGHT_MODE_CHANGE_FAILED;
const int PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_ARRAYSIZE = PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_descriptor();
inline const ::std::string& PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_Name(PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_descriptor(), value);
}
inline bool PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_Parse(
    const ::std::string& name, PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E>(
    PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_descriptor(), name, value);
}
enum PET_ATTR_CHANGE_TYPE_E {
  PET_ATTR_CHANGE_TYPE_LEVEL = 1,
  PET_ATTR_CHANGE_TYPE_EQUIP = 2
};
bool PET_ATTR_CHANGE_TYPE_E_IsValid(int value);
const PET_ATTR_CHANGE_TYPE_E PET_ATTR_CHANGE_TYPE_E_MIN = PET_ATTR_CHANGE_TYPE_LEVEL;
const PET_ATTR_CHANGE_TYPE_E PET_ATTR_CHANGE_TYPE_E_MAX = PET_ATTR_CHANGE_TYPE_EQUIP;
const int PET_ATTR_CHANGE_TYPE_E_ARRAYSIZE = PET_ATTR_CHANGE_TYPE_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PET_ATTR_CHANGE_TYPE_E_descriptor();
inline const ::std::string& PET_ATTR_CHANGE_TYPE_E_Name(PET_ATTR_CHANGE_TYPE_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PET_ATTR_CHANGE_TYPE_E_descriptor(), value);
}
inline bool PET_ATTR_CHANGE_TYPE_E_Parse(
    const ::std::string& name, PET_ATTR_CHANGE_TYPE_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PET_ATTR_CHANGE_TYPE_E>(
    PET_ATTR_CHANGE_TYPE_E_descriptor(), name, value);
}
// ===================================================================

class pet_kill_count_msg : public ::google::protobuf::Message {
 public:
  pet_kill_count_msg();
  virtual ~pet_kill_count_msg();

  pet_kill_count_msg(const pet_kill_count_msg& from);

  inline pet_kill_count_msg& operator=(const pet_kill_count_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_kill_count_msg& default_instance();

  void Swap(pet_kill_count_msg* other);

  // implements Message ----------------------------------------------

  pet_kill_count_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_kill_count_msg& from);
  void MergeFrom(const pet_kill_count_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.pet_kill_count_msg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_kill_count_msg* default_instance_;
};
// -------------------------------------------------------------------

class pet_change_mode_req : public ::google::protobuf::Message {
 public:
  pet_change_mode_req();
  virtual ~pet_change_mode_req();

  pet_change_mode_req(const pet_change_mode_req& from);

  inline pet_change_mode_req& operator=(const pet_change_mode_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_change_mode_req& default_instance();

  void Swap(pet_change_mode_req* other);

  // implements Message ----------------------------------------------

  pet_change_mode_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_change_mode_req& from);
  void MergeFrom(const pet_change_mode_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.PET_MODE m = 1;
  inline bool has_m() const;
  inline void clear_m();
  static const int kMFieldNumber = 1;
  inline ::client::PET_MODE m() const;
  inline void set_m(::client::PET_MODE value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_change_mode_req)
 private:
  inline void set_has_m();
  inline void clear_has_m();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  int m_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_change_mode_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_change_mode_rsp : public ::google::protobuf::Message {
 public:
  pet_change_mode_rsp();
  virtual ~pet_change_mode_rsp();

  pet_change_mode_rsp(const pet_change_mode_rsp& from);

  inline pet_change_mode_rsp& operator=(const pet_change_mode_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_change_mode_rsp& default_instance();

  void Swap(pet_change_mode_rsp* other);

  // implements Message ----------------------------------------------

  pet_change_mode_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_change_mode_rsp& from);
  void MergeFrom(const pet_change_mode_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.PET_MODE m = 1;
  inline bool has_m() const;
  inline void clear_m();
  static const int kMFieldNumber = 1;
  inline ::client::PET_MODE m() const;
  inline void set_m(::client::PET_MODE value);

  // @@protoc_insertion_point(class_scope:client.pet_change_mode_rsp)
 private:
  inline void set_has_m();
  inline void clear_has_m();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int m_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_change_mode_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_id_rsp : public ::google::protobuf::Message {
 public:
  pet_id_rsp();
  virtual ~pet_id_rsp();

  pet_id_rsp(const pet_id_rsp& from);

  inline pet_id_rsp& operator=(const pet_id_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_id_rsp& default_instance();

  void Swap(pet_id_rsp* other);

  // implements Message ----------------------------------------------

  pet_id_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_id_rsp& from);
  void MergeFrom(const pet_id_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.pet_db_info pet_info = 1;
  inline bool has_pet_info() const;
  inline void clear_pet_info();
  static const int kPetInfoFieldNumber = 1;
  inline const ::client::pet_db_info& pet_info() const;
  inline ::client::pet_db_info* mutable_pet_info();
  inline ::client::pet_db_info* release_pet_info();
  inline void set_allocated_pet_info(::client::pet_db_info* pet_info);

  // @@protoc_insertion_point(class_scope:client.pet_id_rsp)
 private:
  inline void set_has_pet_info();
  inline void clear_has_pet_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::pet_db_info* pet_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_id_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_fight_attr : public ::google::protobuf::Message {
 public:
  pet_fight_attr();
  virtual ~pet_fight_attr();

  pet_fight_attr(const pet_fight_attr& from);

  inline pet_fight_attr& operator=(const pet_fight_attr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_fight_attr& default_instance();

  void Swap(pet_fight_attr* other);

  // implements Message ----------------------------------------------

  pet_fight_attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_fight_attr& from);
  void MergeFrom(const pet_fight_attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.pet_fight_attr)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_fight_attr* default_instance_;
};
// -------------------------------------------------------------------

class pet_db_info : public ::google::protobuf::Message {
 public:
  pet_db_info();
  virtual ~pet_db_info();

  pet_db_info(const pet_db_info& from);

  inline pet_db_info& operator=(const pet_db_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_db_info& default_instance();

  void Swap(pet_db_info* other);

  // implements Message ----------------------------------------------

  pet_db_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_db_info& from);
  void MergeFrom(const pet_db_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // required uint32 pet_level = 2;
  inline bool has_pet_level() const;
  inline void clear_pet_level();
  static const int kPetLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 pet_level() const;
  inline void set_pet_level(::google::protobuf::uint32 value);

  // required uint32 pet_exp = 3;
  inline bool has_pet_exp() const;
  inline void clear_pet_exp();
  static const int kPetExpFieldNumber = 3;
  inline ::google::protobuf::uint32 pet_exp() const;
  inline void set_pet_exp(::google::protobuf::uint32 value);

  // required uint32 cur_hp = 4;
  inline bool has_cur_hp() const;
  inline void clear_cur_hp();
  static const int kCurHpFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_hp() const;
  inline void set_cur_hp(::google::protobuf::uint32 value);

  // required uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required uint32 lingering_count = 6;
  inline bool has_lingering_count() const;
  inline void clear_lingering_count();
  static const int kLingeringCountFieldNumber = 6;
  inline ::google::protobuf::uint32 lingering_count() const;
  inline void set_lingering_count(::google::protobuf::uint32 value);

  // required uint32 magic_star = 7;
  inline bool has_magic_star() const;
  inline void clear_magic_star();
  static const int kMagicStarFieldNumber = 7;
  inline ::google::protobuf::uint32 magic_star() const;
  inline void set_magic_star(::google::protobuf::uint32 value);

  // required uint32 debris_exp = 8;
  inline bool has_debris_exp() const;
  inline void clear_debris_exp();
  static const int kDebrisExpFieldNumber = 8;
  inline ::google::protobuf::uint32 debris_exp() const;
  inline void set_debris_exp(::google::protobuf::uint32 value);

  // repeated .client.pet_fight_attr pfa = 9;
  inline int pfa_size() const;
  inline void clear_pfa();
  static const int kPfaFieldNumber = 9;
  inline const ::client::pet_fight_attr& pfa(int index) const;
  inline ::client::pet_fight_attr* mutable_pfa(int index);
  inline ::client::pet_fight_attr* add_pfa();
  inline const ::google::protobuf::RepeatedPtrField< ::client::pet_fight_attr >&
      pfa() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::pet_fight_attr >*
      mutable_pfa();

  // optional uint32 max_hp = 10;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 10;
  inline ::google::protobuf::uint32 max_hp() const;
  inline void set_max_hp(::google::protobuf::uint32 value);

  // optional uint32 levels_status = 11;
  inline bool has_levels_status() const;
  inline void clear_levels_status();
  static const int kLevelsStatusFieldNumber = 11;
  inline ::google::protobuf::uint32 levels_status() const;
  inline void set_levels_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.pet_db_info)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_pet_level();
  inline void clear_has_pet_level();
  inline void set_has_pet_exp();
  inline void clear_has_pet_exp();
  inline void set_has_cur_hp();
  inline void clear_has_cur_hp();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_lingering_count();
  inline void clear_has_lingering_count();
  inline void set_has_magic_star();
  inline void clear_has_magic_star();
  inline void set_has_debris_exp();
  inline void clear_has_debris_exp();
  inline void set_has_max_hp();
  inline void clear_has_max_hp();
  inline void set_has_levels_status();
  inline void clear_has_levels_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pet_id_;
  ::google::protobuf::uint32 pet_level_;
  ::google::protobuf::uint32 pet_exp_;
  ::google::protobuf::uint32 cur_hp_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 lingering_count_;
  ::google::protobuf::uint32 magic_star_;
  ::google::protobuf::uint32 debris_exp_;
  ::google::protobuf::RepeatedPtrField< ::client::pet_fight_attr > pfa_;
  ::google::protobuf::uint32 max_hp_;
  ::google::protobuf::uint32 levels_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_db_info* default_instance_;
};
// -------------------------------------------------------------------

class pets_msg : public ::google::protobuf::Message {
 public:
  pets_msg();
  virtual ~pets_msg();

  pets_msg(const pets_msg& from);

  inline pets_msg& operator=(const pets_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pets_msg& default_instance();

  void Swap(pets_msg* other);

  // implements Message ----------------------------------------------

  pets_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pets_msg& from);
  void MergeFrom(const pets_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .client.pet_db_info pet_info = 1;
  inline int pet_info_size() const;
  inline void clear_pet_info();
  static const int kPetInfoFieldNumber = 1;
  inline const ::client::pet_db_info& pet_info(int index) const;
  inline ::client::pet_db_info* mutable_pet_info(int index);
  inline ::client::pet_db_info* add_pet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
      pet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
      mutable_pet_info();

  // @@protoc_insertion_point(class_scope:client.pets_msg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::pet_db_info > pet_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pets_msg* default_instance_;
};
// -------------------------------------------------------------------

class pet_recruit_req : public ::google::protobuf::Message {
 public:
  pet_recruit_req();
  virtual ~pet_recruit_req();

  pet_recruit_req(const pet_recruit_req& from);

  inline pet_recruit_req& operator=(const pet_recruit_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_recruit_req& default_instance();

  void Swap(pet_recruit_req* other);

  // implements Message ----------------------------------------------

  pet_recruit_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_recruit_req& from);
  void MergeFrom(const pet_recruit_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_recruit_req)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_recruit_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_recruit_rsp : public ::google::protobuf::Message {
 public:
  pet_recruit_rsp();
  virtual ~pet_recruit_rsp();

  pet_recruit_rsp(const pet_recruit_rsp& from);

  inline pet_recruit_rsp& operator=(const pet_recruit_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_recruit_rsp& default_instance();

  void Swap(pet_recruit_rsp* other);

  // implements Message ----------------------------------------------

  pet_recruit_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_recruit_rsp& from);
  void MergeFrom(const pet_recruit_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 recruit_type = 1;
  inline bool has_recruit_type() const;
  inline void clear_recruit_type();
  static const int kRecruitTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 recruit_type() const;
  inline void set_recruit_type(::google::protobuf::uint32 value);

  // optional .client.pet_db_info pet_info = 2;
  inline bool has_pet_info() const;
  inline void clear_pet_info();
  static const int kPetInfoFieldNumber = 2;
  inline const ::client::pet_db_info& pet_info() const;
  inline ::client::pet_db_info* mutable_pet_info();
  inline ::client::pet_db_info* release_pet_info();
  inline void set_allocated_pet_info(::client::pet_db_info* pet_info);

  // @@protoc_insertion_point(class_scope:client.pet_recruit_rsp)
 private:
  inline void set_has_recruit_type();
  inline void clear_has_recruit_type();
  inline void set_has_pet_info();
  inline void clear_has_pet_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::pet_db_info* pet_info_;
  ::google::protobuf::uint32 recruit_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_recruit_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_lingering_req : public ::google::protobuf::Message {
 public:
  pet_lingering_req();
  virtual ~pet_lingering_req();

  pet_lingering_req(const pet_lingering_req& from);

  inline pet_lingering_req& operator=(const pet_lingering_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_lingering_req& default_instance();

  void Swap(pet_lingering_req* other);

  // implements Message ----------------------------------------------

  pet_lingering_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_lingering_req& from);
  void MergeFrom(const pet_lingering_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_lingering_req)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_lingering_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_lingering_rsp : public ::google::protobuf::Message {
 public:
  pet_lingering_rsp();
  virtual ~pet_lingering_rsp();

  pet_lingering_rsp(const pet_lingering_rsp& from);

  inline pet_lingering_rsp& operator=(const pet_lingering_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_lingering_rsp& default_instance();

  void Swap(pet_lingering_rsp* other);

  // implements Message ----------------------------------------------

  pet_lingering_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_lingering_rsp& from);
  void MergeFrom(const pet_lingering_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef pet_lingering_rsp_result result;
  static const result success = pet_lingering_rsp_result_success;
  static const result failed = pet_lingering_rsp_result_failed;
  static inline bool result_IsValid(int value) {
    return pet_lingering_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    pet_lingering_rsp_result_result_MIN;
  static const result result_MAX =
    pet_lingering_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    pet_lingering_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return pet_lingering_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return pet_lingering_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return pet_lingering_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.pet_lingering_rsp.result result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::client::pet_lingering_rsp_result result_type() const;
  inline void set_result_type(::client::pet_lingering_rsp_result value);

  // repeated .client.pet_db_info pet_info = 2;
  inline int pet_info_size() const;
  inline void clear_pet_info();
  static const int kPetInfoFieldNumber = 2;
  inline const ::client::pet_db_info& pet_info(int index) const;
  inline ::client::pet_db_info* mutable_pet_info(int index);
  inline ::client::pet_db_info* add_pet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
      pet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
      mutable_pet_info();

  // @@protoc_insertion_point(class_scope:client.pet_lingering_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::pet_db_info > pet_info_;
  int result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_lingering_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_levelup_req : public ::google::protobuf::Message {
 public:
  pet_levelup_req();
  virtual ~pet_levelup_req();

  pet_levelup_req(const pet_levelup_req& from);

  inline pet_levelup_req& operator=(const pet_levelup_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_levelup_req& default_instance();

  void Swap(pet_levelup_req* other);

  // implements Message ----------------------------------------------

  pet_levelup_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_levelup_req& from);
  void MergeFrom(const pet_levelup_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_levelup_req)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_levelup_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_levelup_rsp : public ::google::protobuf::Message {
 public:
  pet_levelup_rsp();
  virtual ~pet_levelup_rsp();

  pet_levelup_rsp(const pet_levelup_rsp& from);

  inline pet_levelup_rsp& operator=(const pet_levelup_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_levelup_rsp& default_instance();

  void Swap(pet_levelup_rsp* other);

  // implements Message ----------------------------------------------

  pet_levelup_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_levelup_rsp& from);
  void MergeFrom(const pet_levelup_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef pet_levelup_rsp_result result;
  static const result success = pet_levelup_rsp_result_success;
  static const result failed = pet_levelup_rsp_result_failed;
  static inline bool result_IsValid(int value) {
    return pet_levelup_rsp_result_IsValid(value);
  }
  static const result result_MIN =
    pet_levelup_rsp_result_result_MIN;
  static const result result_MAX =
    pet_levelup_rsp_result_result_MAX;
  static const int result_ARRAYSIZE =
    pet_levelup_rsp_result_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_descriptor() {
    return pet_levelup_rsp_result_descriptor();
  }
  static inline const ::std::string& result_Name(result value) {
    return pet_levelup_rsp_result_Name(value);
  }
  static inline bool result_Parse(const ::std::string& name,
      result* value) {
    return pet_levelup_rsp_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .client.pet_levelup_rsp.result result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::client::pet_levelup_rsp_result result_type() const;
  inline void set_result_type(::client::pet_levelup_rsp_result value);

  // repeated .client.pet_db_info pet_info = 2;
  inline int pet_info_size() const;
  inline void clear_pet_info();
  static const int kPetInfoFieldNumber = 2;
  inline const ::client::pet_db_info& pet_info(int index) const;
  inline ::client::pet_db_info* mutable_pet_info(int index);
  inline ::client::pet_db_info* add_pet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
      pet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
      mutable_pet_info();

  // @@protoc_insertion_point(class_scope:client.pet_levelup_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::pet_db_info > pet_info_;
  int result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_levelup_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_list_req : public ::google::protobuf::Message {
 public:
  pet_list_req();
  virtual ~pet_list_req();

  pet_list_req(const pet_list_req& from);

  inline pet_list_req& operator=(const pet_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_list_req& default_instance();

  void Swap(pet_list_req* other);

  // implements Message ----------------------------------------------

  pet_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_list_req& from);
  void MergeFrom(const pet_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_list_req)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 unixtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_list_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_list_rsp : public ::google::protobuf::Message {
 public:
  pet_list_rsp();
  virtual ~pet_list_rsp();

  pet_list_rsp(const pet_list_rsp& from);

  inline pet_list_rsp& operator=(const pet_list_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_list_rsp& default_instance();

  void Swap(pet_list_rsp* other);

  // implements Message ----------------------------------------------

  pet_list_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_list_rsp& from);
  void MergeFrom(const pet_list_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.role_data rd = 1;
  inline bool has_rd() const;
  inline void clear_rd();
  static const int kRdFieldNumber = 1;
  inline const ::client::role_data& rd() const;
  inline ::client::role_data* mutable_rd();
  inline ::client::role_data* release_rd();
  inline void set_allocated_rd(::client::role_data* rd);

  // repeated .client.pet_db_info pet_info = 2;
  inline int pet_info_size() const;
  inline void clear_pet_info();
  static const int kPetInfoFieldNumber = 2;
  inline const ::client::pet_db_info& pet_info(int index) const;
  inline ::client::pet_db_info* mutable_pet_info(int index);
  inline ::client::pet_db_info* add_pet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
      pet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
      mutable_pet_info();

  // @@protoc_insertion_point(class_scope:client.pet_list_rsp)
 private:
  inline void set_has_rd();
  inline void clear_has_rd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::role_data* rd_;
  ::google::protobuf::RepeatedPtrField< ::client::pet_db_info > pet_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_list_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_rest_or_fight_req : public ::google::protobuf::Message {
 public:
  pet_rest_or_fight_req();
  virtual ~pet_rest_or_fight_req();

  pet_rest_or_fight_req(const pet_rest_or_fight_req& from);

  inline pet_rest_or_fight_req& operator=(const pet_rest_or_fight_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_rest_or_fight_req& default_instance();

  void Swap(pet_rest_or_fight_req* other);

  // implements Message ----------------------------------------------

  pet_rest_or_fight_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_rest_or_fight_req& from);
  void MergeFrom(const pet_rest_or_fight_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // required uint32 operate_type = 2;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 operate_type() const;
  inline void set_operate_type(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_rest_or_fight_req)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pet_id_;
  ::google::protobuf::uint32 operate_type_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_rest_or_fight_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_rest_or_fight_rsp : public ::google::protobuf::Message {
 public:
  pet_rest_or_fight_rsp();
  virtual ~pet_rest_or_fight_rsp();

  pet_rest_or_fight_rsp(const pet_rest_or_fight_rsp& from);

  inline pet_rest_or_fight_rsp& operator=(const pet_rest_or_fight_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_rest_or_fight_rsp& default_instance();

  void Swap(pet_rest_or_fight_rsp* other);

  // implements Message ----------------------------------------------

  pet_rest_or_fight_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_rest_or_fight_rsp& from);
  void MergeFrom(const pet_rest_or_fight_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // required uint32 result_type = 2;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.pet_rest_or_fight_rsp)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pet_id_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_rest_or_fight_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_resurgence_req : public ::google::protobuf::Message {
 public:
  pet_resurgence_req();
  virtual ~pet_resurgence_req();

  pet_resurgence_req(const pet_resurgence_req& from);

  inline pet_resurgence_req& operator=(const pet_resurgence_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_resurgence_req& default_instance();

  void Swap(pet_resurgence_req* other);

  // implements Message ----------------------------------------------

  pet_resurgence_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_resurgence_req& from);
  void MergeFrom(const pet_resurgence_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // required uint32 operate_type = 2;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 operate_type() const;
  inline void set_operate_type(::google::protobuf::uint32 value);

  // required uint32 resurgence_type = 3;
  inline bool has_resurgence_type() const;
  inline void clear_resurgence_type();
  static const int kResurgenceTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 resurgence_type() const;
  inline void set_resurgence_type(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_resurgence_req)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_resurgence_type();
  inline void clear_has_resurgence_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pet_id_;
  ::google::protobuf::uint32 operate_type_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 resurgence_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_resurgence_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_resurgence_rsp : public ::google::protobuf::Message {
 public:
  pet_resurgence_rsp();
  virtual ~pet_resurgence_rsp();

  pet_resurgence_rsp(const pet_resurgence_rsp& from);

  inline pet_resurgence_rsp& operator=(const pet_resurgence_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_resurgence_rsp& default_instance();

  void Swap(pet_resurgence_rsp* other);

  // implements Message ----------------------------------------------

  pet_resurgence_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_resurgence_rsp& from);
  void MergeFrom(const pet_resurgence_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // repeated .client.pet_db_info pet_info = 2;
  inline int pet_info_size() const;
  inline void clear_pet_info();
  static const int kPetInfoFieldNumber = 2;
  inline const ::client::pet_db_info& pet_info(int index) const;
  inline ::client::pet_db_info* mutable_pet_info(int index);
  inline ::client::pet_db_info* add_pet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
      pet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
      mutable_pet_info();

  // @@protoc_insertion_point(class_scope:client.pet_resurgence_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::pet_db_info > pet_info_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_resurgence_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_info_req : public ::google::protobuf::Message {
 public:
  pet_info_req();
  virtual ~pet_info_req();

  pet_info_req(const pet_info_req& from);

  inline pet_info_req& operator=(const pet_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_info_req& default_instance();

  void Swap(pet_info_req* other);

  // implements Message ----------------------------------------------

  pet_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_info_req& from);
  void MergeFrom(const pet_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_info_req)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_info_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_info_rsp : public ::google::protobuf::Message {
 public:
  pet_info_rsp();
  virtual ~pet_info_rsp();

  pet_info_rsp(const pet_info_rsp& from);

  inline pet_info_rsp& operator=(const pet_info_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_info_rsp& default_instance();

  void Swap(pet_info_rsp* other);

  // implements Message ----------------------------------------------

  pet_info_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_info_rsp& from);
  void MergeFrom(const pet_info_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.role_data rd = 1;
  inline bool has_rd() const;
  inline void clear_rd();
  static const int kRdFieldNumber = 1;
  inline const ::client::role_data& rd() const;
  inline ::client::role_data* mutable_rd();
  inline ::client::role_data* release_rd();
  inline void set_allocated_rd(::client::role_data* rd);

  // repeated .client.pet_db_info pet_info = 2;
  inline int pet_info_size() const;
  inline void clear_pet_info();
  static const int kPetInfoFieldNumber = 2;
  inline const ::client::pet_db_info& pet_info(int index) const;
  inline ::client::pet_db_info* mutable_pet_info(int index);
  inline ::client::pet_db_info* add_pet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
      pet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
      mutable_pet_info();

  // @@protoc_insertion_point(class_scope:client.pet_info_rsp)
 private:
  inline void set_has_rd();
  inline void clear_has_rd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::role_data* rd_;
  ::google::protobuf::RepeatedPtrField< ::client::pet_db_info > pet_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_info_rsp* default_instance_;
};
// -------------------------------------------------------------------

class magic_upgrade_req : public ::google::protobuf::Message {
 public:
  magic_upgrade_req();
  virtual ~magic_upgrade_req();

  magic_upgrade_req(const magic_upgrade_req& from);

  inline magic_upgrade_req& operator=(const magic_upgrade_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const magic_upgrade_req& default_instance();

  void Swap(magic_upgrade_req* other);

  // implements Message ----------------------------------------------

  magic_upgrade_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const magic_upgrade_req& from);
  void MergeFrom(const magic_upgrade_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.magic_upgrade_req)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static magic_upgrade_req* default_instance_;
};
// -------------------------------------------------------------------

class magic_upgrade_rsp : public ::google::protobuf::Message {
 public:
  magic_upgrade_rsp();
  virtual ~magic_upgrade_rsp();

  magic_upgrade_rsp(const magic_upgrade_rsp& from);

  inline magic_upgrade_rsp& operator=(const magic_upgrade_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const magic_upgrade_rsp& default_instance();

  void Swap(magic_upgrade_rsp* other);

  // implements Message ----------------------------------------------

  magic_upgrade_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const magic_upgrade_rsp& from);
  void MergeFrom(const magic_upgrade_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // repeated .client.pet_db_info pet_info = 2;
  inline int pet_info_size() const;
  inline void clear_pet_info();
  static const int kPetInfoFieldNumber = 2;
  inline const ::client::pet_db_info& pet_info(int index) const;
  inline ::client::pet_db_info* mutable_pet_info(int index);
  inline ::client::pet_db_info* add_pet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
      pet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
      mutable_pet_info();

  // @@protoc_insertion_point(class_scope:client.magic_upgrade_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::pet_db_info > pet_info_;
  ::google::protobuf::uint32 result_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static magic_upgrade_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_skill_rpgrate_req : public ::google::protobuf::Message {
 public:
  pet_skill_rpgrate_req();
  virtual ~pet_skill_rpgrate_req();

  pet_skill_rpgrate_req(const pet_skill_rpgrate_req& from);

  inline pet_skill_rpgrate_req& operator=(const pet_skill_rpgrate_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_skill_rpgrate_req& default_instance();

  void Swap(pet_skill_rpgrate_req* other);

  // implements Message ----------------------------------------------

  pet_skill_rpgrate_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_skill_rpgrate_req& from);
  void MergeFrom(const pet_skill_rpgrate_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_skill_rpgrate_req)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 skill_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_skill_rpgrate_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_fight_mode_change_req : public ::google::protobuf::Message {
 public:
  pet_fight_mode_change_req();
  virtual ~pet_fight_mode_change_req();

  pet_fight_mode_change_req(const pet_fight_mode_change_req& from);

  inline pet_fight_mode_change_req& operator=(const pet_fight_mode_change_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_fight_mode_change_req& default_instance();

  void Swap(pet_fight_mode_change_req* other);

  // implements Message ----------------------------------------------

  pet_fight_mode_change_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_fight_mode_change_req& from);
  void MergeFrom(const pet_fight_mode_change_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // optional uint32 is_first = 2;
  inline bool has_is_first() const;
  inline void clear_is_first();
  static const int kIsFirstFieldNumber = 2;
  inline ::google::protobuf::uint32 is_first() const;
  inline void set_is_first(::google::protobuf::uint32 value);

  // optional uint32 flag_type = 3;
  inline bool has_flag_type() const;
  inline void clear_flag_type();
  static const int kFlagTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 flag_type() const;
  inline void set_flag_type(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_fight_mode_change_req)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_is_first();
  inline void clear_has_is_first();
  inline void set_has_flag_type();
  inline void clear_has_flag_type();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pet_id_;
  ::google::protobuf::uint32 is_first_;
  ::client::server_head* svr_head_;
  ::google::protobuf::uint32 flag_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_fight_mode_change_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_fight_info : public ::google::protobuf::Message {
 public:
  pet_fight_info();
  virtual ~pet_fight_info();

  pet_fight_info(const pet_fight_info& from);

  inline pet_fight_info& operator=(const pet_fight_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_fight_info& default_instance();

  void Swap(pet_fight_info* other);

  // implements Message ----------------------------------------------

  pet_fight_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_fight_info& from);
  void MergeFrom(const pet_fight_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // optional uint32 pet_status = 2;
  inline bool has_pet_status() const;
  inline void clear_pet_status();
  static const int kPetStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 pet_status() const;
  inline void set_pet_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.pet_fight_info)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_pet_status();
  inline void clear_has_pet_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pet_id_;
  ::google::protobuf::uint32 pet_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_fight_info* default_instance_;
};
// -------------------------------------------------------------------

class pet_fight_mode_change_rsp : public ::google::protobuf::Message {
 public:
  pet_fight_mode_change_rsp();
  virtual ~pet_fight_mode_change_rsp();

  pet_fight_mode_change_rsp(const pet_fight_mode_change_rsp& from);

  inline pet_fight_mode_change_rsp& operator=(const pet_fight_mode_change_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_fight_mode_change_rsp& default_instance();

  void Swap(pet_fight_mode_change_rsp* other);

  // implements Message ----------------------------------------------

  pet_fight_mode_change_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_fight_mode_change_rsp& from);
  void MergeFrom(const pet_fight_mode_change_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // repeated .client.pet_fight_info info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::client::pet_fight_info& info(int index) const;
  inline ::client::pet_fight_info* mutable_info(int index);
  inline ::client::pet_fight_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::client::pet_fight_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::pet_fight_info >*
      mutable_info();

  // optional uint32 flag_type = 3;
  inline bool has_flag_type() const;
  inline void clear_flag_type();
  static const int kFlagTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 flag_type() const;
  inline void set_flag_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.pet_fight_mode_change_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_flag_type();
  inline void clear_has_flag_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::client::pet_fight_info > info_;
  ::google::protobuf::uint32 result_type_;
  ::google::protobuf::uint32 flag_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_fight_mode_change_rsp* default_instance_;
};
// -------------------------------------------------------------------

class pet_levels_set_req : public ::google::protobuf::Message {
 public:
  pet_levels_set_req();
  virtual ~pet_levels_set_req();

  pet_levels_set_req(const pet_levels_set_req& from);

  inline pet_levels_set_req& operator=(const pet_levels_set_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_levels_set_req& default_instance();

  void Swap(pet_levels_set_req* other);

  // implements Message ----------------------------------------------

  pet_levels_set_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_levels_set_req& from);
  void MergeFrom(const pet_levels_set_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pet_id = 1;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // required uint32 levels_status = 2;
  inline bool has_levels_status() const;
  inline void clear_levels_status();
  static const int kLevelsStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 levels_status() const;
  inline void set_levels_status(::google::protobuf::uint32 value);

  // optional .client.server_head svr_head = 1000;
  inline bool has_svr_head() const;
  inline void clear_svr_head();
  static const int kSvrHeadFieldNumber = 1000;
  inline const ::client::server_head& svr_head() const;
  inline ::client::server_head* mutable_svr_head();
  inline ::client::server_head* release_svr_head();
  inline void set_allocated_svr_head(::client::server_head* svr_head);

  // @@protoc_insertion_point(class_scope:client.pet_levels_set_req)
 private:
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_levels_status();
  inline void clear_has_levels_status();
  inline void set_has_svr_head();
  inline void clear_has_svr_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pet_id_;
  ::google::protobuf::uint32 levels_status_;
  ::client::server_head* svr_head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_levels_set_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_levels_set_rsp : public ::google::protobuf::Message {
 public:
  pet_levels_set_rsp();
  virtual ~pet_levels_set_rsp();

  pet_levels_set_rsp(const pet_levels_set_rsp& from);

  inline pet_levels_set_rsp& operator=(const pet_levels_set_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_levels_set_rsp& default_instance();

  void Swap(pet_levels_set_rsp* other);

  // implements Message ----------------------------------------------

  pet_levels_set_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_levels_set_rsp& from);
  void MergeFrom(const pet_levels_set_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_type = 1;
  inline bool has_result_type() const;
  inline void clear_result_type();
  static const int kResultTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_type() const;
  inline void set_result_type(::google::protobuf::uint32 value);

  // required uint32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // required uint32 levels_status = 3;
  inline bool has_levels_status() const;
  inline void clear_levels_status();
  static const int kLevelsStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 levels_status() const;
  inline void set_levels_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:client.pet_levels_set_rsp)
 private:
  inline void set_has_result_type();
  inline void clear_has_result_type();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_levels_status();
  inline void clear_has_levels_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_type_;
  ::google::protobuf::uint32 pet_id_;
  ::google::protobuf::uint32 levels_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2epets_2eproto();
  friend void protobuf_AssignDesc_client_2epets_2eproto();
  friend void protobuf_ShutdownFile_client_2epets_2eproto();

  void InitAsDefaultInstance();
  static pet_levels_set_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// pet_kill_count_msg

// required uint32 id = 1;
inline bool pet_kill_count_msg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_kill_count_msg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_kill_count_msg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_kill_count_msg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 pet_kill_count_msg::id() const {
  return id_;
}
inline void pet_kill_count_msg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 count = 2;
inline bool pet_kill_count_msg::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_kill_count_msg::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_kill_count_msg::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_kill_count_msg::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 pet_kill_count_msg::count() const {
  return count_;
}
inline void pet_kill_count_msg::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// pet_change_mode_req

// required .client.PET_MODE m = 1;
inline bool pet_change_mode_req::has_m() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_change_mode_req::set_has_m() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_change_mode_req::clear_has_m() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_change_mode_req::clear_m() {
  m_ = 1;
  clear_has_m();
}
inline ::client::PET_MODE pet_change_mode_req::m() const {
  return static_cast< ::client::PET_MODE >(m_);
}
inline void pet_change_mode_req::set_m(::client::PET_MODE value) {
  assert(::client::PET_MODE_IsValid(value));
  set_has_m();
  m_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_change_mode_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_change_mode_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_change_mode_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_change_mode_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_change_mode_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_change_mode_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_change_mode_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_change_mode_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_change_mode_rsp

// required .client.PET_MODE m = 1;
inline bool pet_change_mode_rsp::has_m() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_change_mode_rsp::set_has_m() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_change_mode_rsp::clear_has_m() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_change_mode_rsp::clear_m() {
  m_ = 1;
  clear_has_m();
}
inline ::client::PET_MODE pet_change_mode_rsp::m() const {
  return static_cast< ::client::PET_MODE >(m_);
}
inline void pet_change_mode_rsp::set_m(::client::PET_MODE value) {
  assert(::client::PET_MODE_IsValid(value));
  set_has_m();
  m_ = value;
}

// -------------------------------------------------------------------

// pet_id_rsp

// required .client.pet_db_info pet_info = 1;
inline bool pet_id_rsp::has_pet_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_id_rsp::set_has_pet_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_id_rsp::clear_has_pet_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_id_rsp::clear_pet_info() {
  if (pet_info_ != NULL) pet_info_->::client::pet_db_info::Clear();
  clear_has_pet_info();
}
inline const ::client::pet_db_info& pet_id_rsp::pet_info() const {
  return pet_info_ != NULL ? *pet_info_ : *default_instance_->pet_info_;
}
inline ::client::pet_db_info* pet_id_rsp::mutable_pet_info() {
  set_has_pet_info();
  if (pet_info_ == NULL) pet_info_ = new ::client::pet_db_info;
  return pet_info_;
}
inline ::client::pet_db_info* pet_id_rsp::release_pet_info() {
  clear_has_pet_info();
  ::client::pet_db_info* temp = pet_info_;
  pet_info_ = NULL;
  return temp;
}
inline void pet_id_rsp::set_allocated_pet_info(::client::pet_db_info* pet_info) {
  delete pet_info_;
  pet_info_ = pet_info;
  if (pet_info) {
    set_has_pet_info();
  } else {
    clear_has_pet_info();
  }
}

// -------------------------------------------------------------------

// pet_fight_attr

// required uint32 id = 1;
inline bool pet_fight_attr::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_fight_attr::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_fight_attr::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_fight_attr::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 pet_fight_attr::id() const {
  return id_;
}
inline void pet_fight_attr::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 num = 2;
inline bool pet_fight_attr::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_fight_attr::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_fight_attr::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_fight_attr::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 pet_fight_attr::num() const {
  return num_;
}
inline void pet_fight_attr::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// pet_db_info

// required uint32 pet_id = 1;
inline bool pet_db_info::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_db_info::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_db_info::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_db_info::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_db_info::pet_id() const {
  return pet_id_;
}
inline void pet_db_info::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// required uint32 pet_level = 2;
inline bool pet_db_info::has_pet_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_db_info::set_has_pet_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_db_info::clear_has_pet_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_db_info::clear_pet_level() {
  pet_level_ = 0u;
  clear_has_pet_level();
}
inline ::google::protobuf::uint32 pet_db_info::pet_level() const {
  return pet_level_;
}
inline void pet_db_info::set_pet_level(::google::protobuf::uint32 value) {
  set_has_pet_level();
  pet_level_ = value;
}

// required uint32 pet_exp = 3;
inline bool pet_db_info::has_pet_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_db_info::set_has_pet_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_db_info::clear_has_pet_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_db_info::clear_pet_exp() {
  pet_exp_ = 0u;
  clear_has_pet_exp();
}
inline ::google::protobuf::uint32 pet_db_info::pet_exp() const {
  return pet_exp_;
}
inline void pet_db_info::set_pet_exp(::google::protobuf::uint32 value) {
  set_has_pet_exp();
  pet_exp_ = value;
}

// required uint32 cur_hp = 4;
inline bool pet_db_info::has_cur_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_db_info::set_has_cur_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_db_info::clear_has_cur_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_db_info::clear_cur_hp() {
  cur_hp_ = 0u;
  clear_has_cur_hp();
}
inline ::google::protobuf::uint32 pet_db_info::cur_hp() const {
  return cur_hp_;
}
inline void pet_db_info::set_cur_hp(::google::protobuf::uint32 value) {
  set_has_cur_hp();
  cur_hp_ = value;
}

// required uint32 status = 5;
inline bool pet_db_info::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pet_db_info::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pet_db_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pet_db_info::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 pet_db_info::status() const {
  return status_;
}
inline void pet_db_info::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 lingering_count = 6;
inline bool pet_db_info::has_lingering_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pet_db_info::set_has_lingering_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pet_db_info::clear_has_lingering_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pet_db_info::clear_lingering_count() {
  lingering_count_ = 0u;
  clear_has_lingering_count();
}
inline ::google::protobuf::uint32 pet_db_info::lingering_count() const {
  return lingering_count_;
}
inline void pet_db_info::set_lingering_count(::google::protobuf::uint32 value) {
  set_has_lingering_count();
  lingering_count_ = value;
}

// required uint32 magic_star = 7;
inline bool pet_db_info::has_magic_star() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pet_db_info::set_has_magic_star() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pet_db_info::clear_has_magic_star() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pet_db_info::clear_magic_star() {
  magic_star_ = 0u;
  clear_has_magic_star();
}
inline ::google::protobuf::uint32 pet_db_info::magic_star() const {
  return magic_star_;
}
inline void pet_db_info::set_magic_star(::google::protobuf::uint32 value) {
  set_has_magic_star();
  magic_star_ = value;
}

// required uint32 debris_exp = 8;
inline bool pet_db_info::has_debris_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pet_db_info::set_has_debris_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pet_db_info::clear_has_debris_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pet_db_info::clear_debris_exp() {
  debris_exp_ = 0u;
  clear_has_debris_exp();
}
inline ::google::protobuf::uint32 pet_db_info::debris_exp() const {
  return debris_exp_;
}
inline void pet_db_info::set_debris_exp(::google::protobuf::uint32 value) {
  set_has_debris_exp();
  debris_exp_ = value;
}

// repeated .client.pet_fight_attr pfa = 9;
inline int pet_db_info::pfa_size() const {
  return pfa_.size();
}
inline void pet_db_info::clear_pfa() {
  pfa_.Clear();
}
inline const ::client::pet_fight_attr& pet_db_info::pfa(int index) const {
  return pfa_.Get(index);
}
inline ::client::pet_fight_attr* pet_db_info::mutable_pfa(int index) {
  return pfa_.Mutable(index);
}
inline ::client::pet_fight_attr* pet_db_info::add_pfa() {
  return pfa_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::pet_fight_attr >&
pet_db_info::pfa() const {
  return pfa_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::pet_fight_attr >*
pet_db_info::mutable_pfa() {
  return &pfa_;
}

// optional uint32 max_hp = 10;
inline bool pet_db_info::has_max_hp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pet_db_info::set_has_max_hp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pet_db_info::clear_has_max_hp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pet_db_info::clear_max_hp() {
  max_hp_ = 0u;
  clear_has_max_hp();
}
inline ::google::protobuf::uint32 pet_db_info::max_hp() const {
  return max_hp_;
}
inline void pet_db_info::set_max_hp(::google::protobuf::uint32 value) {
  set_has_max_hp();
  max_hp_ = value;
}

// optional uint32 levels_status = 11;
inline bool pet_db_info::has_levels_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pet_db_info::set_has_levels_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pet_db_info::clear_has_levels_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pet_db_info::clear_levels_status() {
  levels_status_ = 0u;
  clear_has_levels_status();
}
inline ::google::protobuf::uint32 pet_db_info::levels_status() const {
  return levels_status_;
}
inline void pet_db_info::set_levels_status(::google::protobuf::uint32 value) {
  set_has_levels_status();
  levels_status_ = value;
}

// -------------------------------------------------------------------

// pets_msg

// repeated .client.pet_db_info pet_info = 1;
inline int pets_msg::pet_info_size() const {
  return pet_info_.size();
}
inline void pets_msg::clear_pet_info() {
  pet_info_.Clear();
}
inline const ::client::pet_db_info& pets_msg::pet_info(int index) const {
  return pet_info_.Get(index);
}
inline ::client::pet_db_info* pets_msg::mutable_pet_info(int index) {
  return pet_info_.Mutable(index);
}
inline ::client::pet_db_info* pets_msg::add_pet_info() {
  return pet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
pets_msg::pet_info() const {
  return pet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
pets_msg::mutable_pet_info() {
  return &pet_info_;
}

// -------------------------------------------------------------------

// pet_recruit_req

// required uint32 pet_id = 1;
inline bool pet_recruit_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_recruit_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_recruit_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_recruit_req::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_recruit_req::pet_id() const {
  return pet_id_;
}
inline void pet_recruit_req::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_recruit_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_recruit_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_recruit_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_recruit_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_recruit_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_recruit_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_recruit_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_recruit_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_recruit_rsp

// required uint32 recruit_type = 1;
inline bool pet_recruit_rsp::has_recruit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_recruit_rsp::set_has_recruit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_recruit_rsp::clear_has_recruit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_recruit_rsp::clear_recruit_type() {
  recruit_type_ = 0u;
  clear_has_recruit_type();
}
inline ::google::protobuf::uint32 pet_recruit_rsp::recruit_type() const {
  return recruit_type_;
}
inline void pet_recruit_rsp::set_recruit_type(::google::protobuf::uint32 value) {
  set_has_recruit_type();
  recruit_type_ = value;
}

// optional .client.pet_db_info pet_info = 2;
inline bool pet_recruit_rsp::has_pet_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_recruit_rsp::set_has_pet_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_recruit_rsp::clear_has_pet_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_recruit_rsp::clear_pet_info() {
  if (pet_info_ != NULL) pet_info_->::client::pet_db_info::Clear();
  clear_has_pet_info();
}
inline const ::client::pet_db_info& pet_recruit_rsp::pet_info() const {
  return pet_info_ != NULL ? *pet_info_ : *default_instance_->pet_info_;
}
inline ::client::pet_db_info* pet_recruit_rsp::mutable_pet_info() {
  set_has_pet_info();
  if (pet_info_ == NULL) pet_info_ = new ::client::pet_db_info;
  return pet_info_;
}
inline ::client::pet_db_info* pet_recruit_rsp::release_pet_info() {
  clear_has_pet_info();
  ::client::pet_db_info* temp = pet_info_;
  pet_info_ = NULL;
  return temp;
}
inline void pet_recruit_rsp::set_allocated_pet_info(::client::pet_db_info* pet_info) {
  delete pet_info_;
  pet_info_ = pet_info;
  if (pet_info) {
    set_has_pet_info();
  } else {
    clear_has_pet_info();
  }
}

// -------------------------------------------------------------------

// pet_lingering_req

// required uint32 pet_id = 1;
inline bool pet_lingering_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_lingering_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_lingering_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_lingering_req::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_lingering_req::pet_id() const {
  return pet_id_;
}
inline void pet_lingering_req::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_lingering_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_lingering_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_lingering_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_lingering_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_lingering_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_lingering_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_lingering_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_lingering_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_lingering_rsp

// required .client.pet_lingering_rsp.result result_type = 1;
inline bool pet_lingering_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_lingering_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_lingering_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_lingering_rsp::clear_result_type() {
  result_type_ = 1;
  clear_has_result_type();
}
inline ::client::pet_lingering_rsp_result pet_lingering_rsp::result_type() const {
  return static_cast< ::client::pet_lingering_rsp_result >(result_type_);
}
inline void pet_lingering_rsp::set_result_type(::client::pet_lingering_rsp_result value) {
  assert(::client::pet_lingering_rsp_result_IsValid(value));
  set_has_result_type();
  result_type_ = value;
}

// repeated .client.pet_db_info pet_info = 2;
inline int pet_lingering_rsp::pet_info_size() const {
  return pet_info_.size();
}
inline void pet_lingering_rsp::clear_pet_info() {
  pet_info_.Clear();
}
inline const ::client::pet_db_info& pet_lingering_rsp::pet_info(int index) const {
  return pet_info_.Get(index);
}
inline ::client::pet_db_info* pet_lingering_rsp::mutable_pet_info(int index) {
  return pet_info_.Mutable(index);
}
inline ::client::pet_db_info* pet_lingering_rsp::add_pet_info() {
  return pet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
pet_lingering_rsp::pet_info() const {
  return pet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
pet_lingering_rsp::mutable_pet_info() {
  return &pet_info_;
}

// -------------------------------------------------------------------

// pet_levelup_req

// required uint32 pet_id = 1;
inline bool pet_levelup_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_levelup_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_levelup_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_levelup_req::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_levelup_req::pet_id() const {
  return pet_id_;
}
inline void pet_levelup_req::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_levelup_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_levelup_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_levelup_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_levelup_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_levelup_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_levelup_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_levelup_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_levelup_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_levelup_rsp

// required .client.pet_levelup_rsp.result result_type = 1;
inline bool pet_levelup_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_levelup_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_levelup_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_levelup_rsp::clear_result_type() {
  result_type_ = 1;
  clear_has_result_type();
}
inline ::client::pet_levelup_rsp_result pet_levelup_rsp::result_type() const {
  return static_cast< ::client::pet_levelup_rsp_result >(result_type_);
}
inline void pet_levelup_rsp::set_result_type(::client::pet_levelup_rsp_result value) {
  assert(::client::pet_levelup_rsp_result_IsValid(value));
  set_has_result_type();
  result_type_ = value;
}

// repeated .client.pet_db_info pet_info = 2;
inline int pet_levelup_rsp::pet_info_size() const {
  return pet_info_.size();
}
inline void pet_levelup_rsp::clear_pet_info() {
  pet_info_.Clear();
}
inline const ::client::pet_db_info& pet_levelup_rsp::pet_info(int index) const {
  return pet_info_.Get(index);
}
inline ::client::pet_db_info* pet_levelup_rsp::mutable_pet_info(int index) {
  return pet_info_.Mutable(index);
}
inline ::client::pet_db_info* pet_levelup_rsp::add_pet_info() {
  return pet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
pet_levelup_rsp::pet_info() const {
  return pet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
pet_levelup_rsp::mutable_pet_info() {
  return &pet_info_;
}

// -------------------------------------------------------------------

// pet_list_req

// required uint32 unixtime = 1;
inline bool pet_list_req::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_list_req::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_list_req::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_list_req::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 pet_list_req::unixtime() const {
  return unixtime_;
}
inline void pet_list_req::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_list_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_list_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_list_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_list_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_list_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_list_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_list_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_list_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_list_rsp

// required .client.role_data rd = 1;
inline bool pet_list_rsp::has_rd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_list_rsp::set_has_rd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_list_rsp::clear_has_rd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_list_rsp::clear_rd() {
  if (rd_ != NULL) rd_->::client::role_data::Clear();
  clear_has_rd();
}
inline const ::client::role_data& pet_list_rsp::rd() const {
  return rd_ != NULL ? *rd_ : *default_instance_->rd_;
}
inline ::client::role_data* pet_list_rsp::mutable_rd() {
  set_has_rd();
  if (rd_ == NULL) rd_ = new ::client::role_data;
  return rd_;
}
inline ::client::role_data* pet_list_rsp::release_rd() {
  clear_has_rd();
  ::client::role_data* temp = rd_;
  rd_ = NULL;
  return temp;
}
inline void pet_list_rsp::set_allocated_rd(::client::role_data* rd) {
  delete rd_;
  rd_ = rd;
  if (rd) {
    set_has_rd();
  } else {
    clear_has_rd();
  }
}

// repeated .client.pet_db_info pet_info = 2;
inline int pet_list_rsp::pet_info_size() const {
  return pet_info_.size();
}
inline void pet_list_rsp::clear_pet_info() {
  pet_info_.Clear();
}
inline const ::client::pet_db_info& pet_list_rsp::pet_info(int index) const {
  return pet_info_.Get(index);
}
inline ::client::pet_db_info* pet_list_rsp::mutable_pet_info(int index) {
  return pet_info_.Mutable(index);
}
inline ::client::pet_db_info* pet_list_rsp::add_pet_info() {
  return pet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
pet_list_rsp::pet_info() const {
  return pet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
pet_list_rsp::mutable_pet_info() {
  return &pet_info_;
}

// -------------------------------------------------------------------

// pet_rest_or_fight_req

// required uint32 pet_id = 1;
inline bool pet_rest_or_fight_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_rest_or_fight_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_rest_or_fight_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_rest_or_fight_req::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_rest_or_fight_req::pet_id() const {
  return pet_id_;
}
inline void pet_rest_or_fight_req::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// required uint32 operate_type = 2;
inline bool pet_rest_or_fight_req::has_operate_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_rest_or_fight_req::set_has_operate_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_rest_or_fight_req::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_rest_or_fight_req::clear_operate_type() {
  operate_type_ = 0u;
  clear_has_operate_type();
}
inline ::google::protobuf::uint32 pet_rest_or_fight_req::operate_type() const {
  return operate_type_;
}
inline void pet_rest_or_fight_req::set_operate_type(::google::protobuf::uint32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_rest_or_fight_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_rest_or_fight_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_rest_or_fight_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_rest_or_fight_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_rest_or_fight_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_rest_or_fight_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_rest_or_fight_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_rest_or_fight_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_rest_or_fight_rsp

// required uint32 pet_id = 1;
inline bool pet_rest_or_fight_rsp::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_rest_or_fight_rsp::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_rest_or_fight_rsp::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_rest_or_fight_rsp::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_rest_or_fight_rsp::pet_id() const {
  return pet_id_;
}
inline void pet_rest_or_fight_rsp::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// required uint32 result_type = 2;
inline bool pet_rest_or_fight_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_rest_or_fight_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_rest_or_fight_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_rest_or_fight_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 pet_rest_or_fight_rsp::result_type() const {
  return result_type_;
}
inline void pet_rest_or_fight_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// -------------------------------------------------------------------

// pet_resurgence_req

// required uint32 pet_id = 1;
inline bool pet_resurgence_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_resurgence_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_resurgence_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_resurgence_req::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_resurgence_req::pet_id() const {
  return pet_id_;
}
inline void pet_resurgence_req::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// required uint32 operate_type = 2;
inline bool pet_resurgence_req::has_operate_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_resurgence_req::set_has_operate_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_resurgence_req::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_resurgence_req::clear_operate_type() {
  operate_type_ = 0u;
  clear_has_operate_type();
}
inline ::google::protobuf::uint32 pet_resurgence_req::operate_type() const {
  return operate_type_;
}
inline void pet_resurgence_req::set_operate_type(::google::protobuf::uint32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// required uint32 resurgence_type = 3;
inline bool pet_resurgence_req::has_resurgence_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_resurgence_req::set_has_resurgence_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_resurgence_req::clear_has_resurgence_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_resurgence_req::clear_resurgence_type() {
  resurgence_type_ = 0u;
  clear_has_resurgence_type();
}
inline ::google::protobuf::uint32 pet_resurgence_req::resurgence_type() const {
  return resurgence_type_;
}
inline void pet_resurgence_req::set_resurgence_type(::google::protobuf::uint32 value) {
  set_has_resurgence_type();
  resurgence_type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_resurgence_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_resurgence_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_resurgence_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_resurgence_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_resurgence_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_resurgence_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_resurgence_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_resurgence_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_resurgence_rsp

// required uint32 result_type = 1;
inline bool pet_resurgence_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_resurgence_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_resurgence_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_resurgence_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 pet_resurgence_rsp::result_type() const {
  return result_type_;
}
inline void pet_resurgence_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// repeated .client.pet_db_info pet_info = 2;
inline int pet_resurgence_rsp::pet_info_size() const {
  return pet_info_.size();
}
inline void pet_resurgence_rsp::clear_pet_info() {
  pet_info_.Clear();
}
inline const ::client::pet_db_info& pet_resurgence_rsp::pet_info(int index) const {
  return pet_info_.Get(index);
}
inline ::client::pet_db_info* pet_resurgence_rsp::mutable_pet_info(int index) {
  return pet_info_.Mutable(index);
}
inline ::client::pet_db_info* pet_resurgence_rsp::add_pet_info() {
  return pet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
pet_resurgence_rsp::pet_info() const {
  return pet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
pet_resurgence_rsp::mutable_pet_info() {
  return &pet_info_;
}

// -------------------------------------------------------------------

// pet_info_req

// required uint32 pet_id = 1;
inline bool pet_info_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_info_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_info_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_info_req::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_info_req::pet_id() const {
  return pet_id_;
}
inline void pet_info_req::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_info_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_info_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_info_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_info_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_info_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_info_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_info_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_info_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_info_rsp

// required .client.role_data rd = 1;
inline bool pet_info_rsp::has_rd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_info_rsp::set_has_rd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_info_rsp::clear_has_rd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_info_rsp::clear_rd() {
  if (rd_ != NULL) rd_->::client::role_data::Clear();
  clear_has_rd();
}
inline const ::client::role_data& pet_info_rsp::rd() const {
  return rd_ != NULL ? *rd_ : *default_instance_->rd_;
}
inline ::client::role_data* pet_info_rsp::mutable_rd() {
  set_has_rd();
  if (rd_ == NULL) rd_ = new ::client::role_data;
  return rd_;
}
inline ::client::role_data* pet_info_rsp::release_rd() {
  clear_has_rd();
  ::client::role_data* temp = rd_;
  rd_ = NULL;
  return temp;
}
inline void pet_info_rsp::set_allocated_rd(::client::role_data* rd) {
  delete rd_;
  rd_ = rd;
  if (rd) {
    set_has_rd();
  } else {
    clear_has_rd();
  }
}

// repeated .client.pet_db_info pet_info = 2;
inline int pet_info_rsp::pet_info_size() const {
  return pet_info_.size();
}
inline void pet_info_rsp::clear_pet_info() {
  pet_info_.Clear();
}
inline const ::client::pet_db_info& pet_info_rsp::pet_info(int index) const {
  return pet_info_.Get(index);
}
inline ::client::pet_db_info* pet_info_rsp::mutable_pet_info(int index) {
  return pet_info_.Mutable(index);
}
inline ::client::pet_db_info* pet_info_rsp::add_pet_info() {
  return pet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
pet_info_rsp::pet_info() const {
  return pet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
pet_info_rsp::mutable_pet_info() {
  return &pet_info_;
}

// -------------------------------------------------------------------

// magic_upgrade_req

// required uint32 pet_id = 1;
inline bool magic_upgrade_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void magic_upgrade_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void magic_upgrade_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void magic_upgrade_req::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 magic_upgrade_req::pet_id() const {
  return pet_id_;
}
inline void magic_upgrade_req::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool magic_upgrade_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void magic_upgrade_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void magic_upgrade_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void magic_upgrade_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& magic_upgrade_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* magic_upgrade_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* magic_upgrade_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void magic_upgrade_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// magic_upgrade_rsp

// required uint32 result_type = 1;
inline bool magic_upgrade_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void magic_upgrade_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void magic_upgrade_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void magic_upgrade_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 magic_upgrade_rsp::result_type() const {
  return result_type_;
}
inline void magic_upgrade_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// repeated .client.pet_db_info pet_info = 2;
inline int magic_upgrade_rsp::pet_info_size() const {
  return pet_info_.size();
}
inline void magic_upgrade_rsp::clear_pet_info() {
  pet_info_.Clear();
}
inline const ::client::pet_db_info& magic_upgrade_rsp::pet_info(int index) const {
  return pet_info_.Get(index);
}
inline ::client::pet_db_info* magic_upgrade_rsp::mutable_pet_info(int index) {
  return pet_info_.Mutable(index);
}
inline ::client::pet_db_info* magic_upgrade_rsp::add_pet_info() {
  return pet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >&
magic_upgrade_rsp::pet_info() const {
  return pet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::pet_db_info >*
magic_upgrade_rsp::mutable_pet_info() {
  return &pet_info_;
}

// -------------------------------------------------------------------

// pet_skill_rpgrate_req

// required uint32 skill_id = 1;
inline bool pet_skill_rpgrate_req::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_skill_rpgrate_req::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_skill_rpgrate_req::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_skill_rpgrate_req::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 pet_skill_rpgrate_req::skill_id() const {
  return skill_id_;
}
inline void pet_skill_rpgrate_req::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_skill_rpgrate_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_skill_rpgrate_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_skill_rpgrate_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_skill_rpgrate_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_skill_rpgrate_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_skill_rpgrate_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_skill_rpgrate_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_skill_rpgrate_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_fight_mode_change_req

// required uint32 pet_id = 1;
inline bool pet_fight_mode_change_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_fight_mode_change_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_fight_mode_change_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_fight_mode_change_req::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_fight_mode_change_req::pet_id() const {
  return pet_id_;
}
inline void pet_fight_mode_change_req::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional uint32 is_first = 2;
inline bool pet_fight_mode_change_req::has_is_first() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_fight_mode_change_req::set_has_is_first() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_fight_mode_change_req::clear_has_is_first() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_fight_mode_change_req::clear_is_first() {
  is_first_ = 0u;
  clear_has_is_first();
}
inline ::google::protobuf::uint32 pet_fight_mode_change_req::is_first() const {
  return is_first_;
}
inline void pet_fight_mode_change_req::set_is_first(::google::protobuf::uint32 value) {
  set_has_is_first();
  is_first_ = value;
}

// optional uint32 flag_type = 3;
inline bool pet_fight_mode_change_req::has_flag_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_fight_mode_change_req::set_has_flag_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_fight_mode_change_req::clear_has_flag_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_fight_mode_change_req::clear_flag_type() {
  flag_type_ = 0u;
  clear_has_flag_type();
}
inline ::google::protobuf::uint32 pet_fight_mode_change_req::flag_type() const {
  return flag_type_;
}
inline void pet_fight_mode_change_req::set_flag_type(::google::protobuf::uint32 value) {
  set_has_flag_type();
  flag_type_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_fight_mode_change_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_fight_mode_change_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_fight_mode_change_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_fight_mode_change_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_fight_mode_change_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_fight_mode_change_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_fight_mode_change_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_fight_mode_change_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_fight_info

// optional uint32 pet_id = 1;
inline bool pet_fight_info::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_fight_info::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_fight_info::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_fight_info::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_fight_info::pet_id() const {
  return pet_id_;
}
inline void pet_fight_info::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional uint32 pet_status = 2;
inline bool pet_fight_info::has_pet_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_fight_info::set_has_pet_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_fight_info::clear_has_pet_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_fight_info::clear_pet_status() {
  pet_status_ = 0u;
  clear_has_pet_status();
}
inline ::google::protobuf::uint32 pet_fight_info::pet_status() const {
  return pet_status_;
}
inline void pet_fight_info::set_pet_status(::google::protobuf::uint32 value) {
  set_has_pet_status();
  pet_status_ = value;
}

// -------------------------------------------------------------------

// pet_fight_mode_change_rsp

// required uint32 result_type = 1;
inline bool pet_fight_mode_change_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_fight_mode_change_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_fight_mode_change_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_fight_mode_change_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 pet_fight_mode_change_rsp::result_type() const {
  return result_type_;
}
inline void pet_fight_mode_change_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// repeated .client.pet_fight_info info = 2;
inline int pet_fight_mode_change_rsp::info_size() const {
  return info_.size();
}
inline void pet_fight_mode_change_rsp::clear_info() {
  info_.Clear();
}
inline const ::client::pet_fight_info& pet_fight_mode_change_rsp::info(int index) const {
  return info_.Get(index);
}
inline ::client::pet_fight_info* pet_fight_mode_change_rsp::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::client::pet_fight_info* pet_fight_mode_change_rsp::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::pet_fight_info >&
pet_fight_mode_change_rsp::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::pet_fight_info >*
pet_fight_mode_change_rsp::mutable_info() {
  return &info_;
}

// optional uint32 flag_type = 3;
inline bool pet_fight_mode_change_rsp::has_flag_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_fight_mode_change_rsp::set_has_flag_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_fight_mode_change_rsp::clear_has_flag_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_fight_mode_change_rsp::clear_flag_type() {
  flag_type_ = 0u;
  clear_has_flag_type();
}
inline ::google::protobuf::uint32 pet_fight_mode_change_rsp::flag_type() const {
  return flag_type_;
}
inline void pet_fight_mode_change_rsp::set_flag_type(::google::protobuf::uint32 value) {
  set_has_flag_type();
  flag_type_ = value;
}

// -------------------------------------------------------------------

// pet_levels_set_req

// required uint32 pet_id = 1;
inline bool pet_levels_set_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_levels_set_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_levels_set_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_levels_set_req::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_levels_set_req::pet_id() const {
  return pet_id_;
}
inline void pet_levels_set_req::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// required uint32 levels_status = 2;
inline bool pet_levels_set_req::has_levels_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_levels_set_req::set_has_levels_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_levels_set_req::clear_has_levels_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_levels_set_req::clear_levels_status() {
  levels_status_ = 0u;
  clear_has_levels_status();
}
inline ::google::protobuf::uint32 pet_levels_set_req::levels_status() const {
  return levels_status_;
}
inline void pet_levels_set_req::set_levels_status(::google::protobuf::uint32 value) {
  set_has_levels_status();
  levels_status_ = value;
}

// optional .client.server_head svr_head = 1000;
inline bool pet_levels_set_req::has_svr_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_levels_set_req::set_has_svr_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_levels_set_req::clear_has_svr_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_levels_set_req::clear_svr_head() {
  if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
  clear_has_svr_head();
}
inline const ::client::server_head& pet_levels_set_req::svr_head() const {
  return svr_head_ != NULL ? *svr_head_ : *default_instance_->svr_head_;
}
inline ::client::server_head* pet_levels_set_req::mutable_svr_head() {
  set_has_svr_head();
  if (svr_head_ == NULL) svr_head_ = new ::client::server_head;
  return svr_head_;
}
inline ::client::server_head* pet_levels_set_req::release_svr_head() {
  clear_has_svr_head();
  ::client::server_head* temp = svr_head_;
  svr_head_ = NULL;
  return temp;
}
inline void pet_levels_set_req::set_allocated_svr_head(::client::server_head* svr_head) {
  delete svr_head_;
  svr_head_ = svr_head;
  if (svr_head) {
    set_has_svr_head();
  } else {
    clear_has_svr_head();
  }
}

// -------------------------------------------------------------------

// pet_levels_set_rsp

// required uint32 result_type = 1;
inline bool pet_levels_set_rsp::has_result_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_levels_set_rsp::set_has_result_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_levels_set_rsp::clear_has_result_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_levels_set_rsp::clear_result_type() {
  result_type_ = 0u;
  clear_has_result_type();
}
inline ::google::protobuf::uint32 pet_levels_set_rsp::result_type() const {
  return result_type_;
}
inline void pet_levels_set_rsp::set_result_type(::google::protobuf::uint32 value) {
  set_has_result_type();
  result_type_ = value;
}

// required uint32 pet_id = 2;
inline bool pet_levels_set_rsp::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_levels_set_rsp::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_levels_set_rsp::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_levels_set_rsp::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 pet_levels_set_rsp::pet_id() const {
  return pet_id_;
}
inline void pet_levels_set_rsp::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// required uint32 levels_status = 3;
inline bool pet_levels_set_rsp::has_levels_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_levels_set_rsp::set_has_levels_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_levels_set_rsp::clear_has_levels_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_levels_set_rsp::clear_levels_status() {
  levels_status_ = 0u;
  clear_has_levels_status();
}
inline ::google::protobuf::uint32 pet_levels_set_rsp::levels_status() const {
  return levels_status_;
}
inline void pet_levels_set_rsp::set_levels_status(::google::protobuf::uint32 value) {
  set_has_levels_status();
  levels_status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::pet_lingering_rsp_result>() {
  return ::client::pet_lingering_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::pet_levelup_rsp_result>() {
  return ::client::pet_levelup_rsp_result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_MODE>() {
  return ::client::PET_MODE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_STATUS_E>() {
  return ::client::PET_STATUS_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_LINGERING_STATUS_E>() {
  return ::client::PET_LINGERING_STATUS_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::RECRUIT_TYPE>() {
  return ::client::RECRUIT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_OPERATE_E>() {
  return ::client::PET_OPERATE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_REST_OR_FIGHT_E>() {
  return ::client::PET_REST_OR_FIGHT_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_RESURGENCE_TYPE_E>() {
  return ::client::PET_RESURGENCE_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_RESURGENCE_E>() {
  return ::client::PET_RESURGENCE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E>() {
  return ::client::PET_FIGHT_MODE_CHANGE_RESULT_TYPE_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::PET_ATTR_CHANGE_TYPE_E>() {
  return ::client::PET_ATTR_CHANGE_TYPE_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2epets_2eproto__INCLUDED
