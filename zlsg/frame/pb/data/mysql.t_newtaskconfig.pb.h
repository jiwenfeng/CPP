// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.t_newtaskconfig.proto

#ifndef PROTOBUF_mysql_2et_5fnewtaskconfig_2eproto__INCLUDED
#define PROTOBUF_mysql_2et_5fnewtaskconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2et_5fnewtaskconfig_2eproto();
void protobuf_AssignDesc_mysql_2et_5fnewtaskconfig_2eproto();
void protobuf_ShutdownFile_mysql_2et_5fnewtaskconfig_2eproto();

class t_newtaskconfig;

// ===================================================================

class t_newtaskconfig : public ::google::protobuf::Message {
 public:
  t_newtaskconfig();
  virtual ~t_newtaskconfig();

  t_newtaskconfig(const t_newtaskconfig& from);

  inline t_newtaskconfig& operator=(const t_newtaskconfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_newtaskconfig& default_instance();

  void Swap(t_newtaskconfig* other);

  // implements Message ----------------------------------------------

  t_newtaskconfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_newtaskconfig& from);
  void MergeFrom(const t_newtaskconfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 taskid = 2;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskidFieldNumber = 2;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // required string taskname = 3;
  inline bool has_taskname() const;
  inline void clear_taskname();
  static const int kTasknameFieldNumber = 3;
  inline const ::std::string& taskname() const;
  inline void set_taskname(const ::std::string& value);
  inline void set_taskname(const char* value);
  inline void set_taskname(const char* value, size_t size);
  inline ::std::string* mutable_taskname();
  inline ::std::string* release_taskname();
  inline void set_allocated_taskname(::std::string* taskname);

  // required uint32 taskOrder = 4;
  inline bool has_taskorder() const;
  inline void clear_taskorder();
  static const int kTaskOrderFieldNumber = 4;
  inline ::google::protobuf::uint32 taskorder() const;
  inline void set_taskorder(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.t_newtaskconfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_taskname();
  inline void clear_has_taskname();
  inline void set_has_taskorder();
  inline void clear_has_taskorder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 taskid_;
  ::std::string* taskname_;
  ::google::protobuf::uint32 taskorder_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2et_5fnewtaskconfig_2eproto();
  friend void protobuf_AssignDesc_mysql_2et_5fnewtaskconfig_2eproto();
  friend void protobuf_ShutdownFile_mysql_2et_5fnewtaskconfig_2eproto();

  void InitAsDefaultInstance();
  static t_newtaskconfig* default_instance_;
};
// ===================================================================


// ===================================================================

// t_newtaskconfig

// required uint32 id = 1;
inline bool t_newtaskconfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_newtaskconfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_newtaskconfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_newtaskconfig::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 t_newtaskconfig::id() const {
  return id_;
}
inline void t_newtaskconfig::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 taskid = 2;
inline bool t_newtaskconfig::has_taskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_newtaskconfig::set_has_taskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_newtaskconfig::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_newtaskconfig::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 t_newtaskconfig::taskid() const {
  return taskid_;
}
inline void t_newtaskconfig::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// required string taskname = 3;
inline bool t_newtaskconfig::has_taskname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_newtaskconfig::set_has_taskname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_newtaskconfig::clear_has_taskname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_newtaskconfig::clear_taskname() {
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    taskname_->clear();
  }
  clear_has_taskname();
}
inline const ::std::string& t_newtaskconfig::taskname() const {
  return *taskname_;
}
inline void t_newtaskconfig::set_taskname(const ::std::string& value) {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  taskname_->assign(value);
}
inline void t_newtaskconfig::set_taskname(const char* value) {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  taskname_->assign(value);
}
inline void t_newtaskconfig::set_taskname(const char* value, size_t size) {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  taskname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_newtaskconfig::mutable_taskname() {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  return taskname_;
}
inline ::std::string* t_newtaskconfig::release_taskname() {
  clear_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskname_;
    taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_newtaskconfig::set_allocated_taskname(::std::string* taskname) {
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    delete taskname_;
  }
  if (taskname) {
    set_has_taskname();
    taskname_ = taskname;
  } else {
    clear_has_taskname();
    taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 taskOrder = 4;
inline bool t_newtaskconfig::has_taskorder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_newtaskconfig::set_has_taskorder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_newtaskconfig::clear_has_taskorder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_newtaskconfig::clear_taskorder() {
  taskorder_ = 0u;
  clear_has_taskorder();
}
inline ::google::protobuf::uint32 t_newtaskconfig::taskorder() const {
  return taskorder_;
}
inline void t_newtaskconfig::set_taskorder(::google::protobuf::uint32 value) {
  set_has_taskorder();
  taskorder_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2et_5fnewtaskconfig_2eproto__INCLUDED
