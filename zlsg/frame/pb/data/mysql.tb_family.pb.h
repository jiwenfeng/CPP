// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_family.proto

#ifndef PROTOBUF_mysql_2etb_5ffamily_2eproto__INCLUDED
#define PROTOBUF_mysql_2etb_5ffamily_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2etb_5ffamily_2eproto();
void protobuf_AssignDesc_mysql_2etb_5ffamily_2eproto();
void protobuf_ShutdownFile_mysql_2etb_5ffamily_2eproto();

class tb_family;

// ===================================================================

class tb_family : public ::google::protobuf::Message {
 public:
  tb_family();
  virtual ~tb_family();

  tb_family(const tb_family& from);

  inline tb_family& operator=(const tb_family& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_family& default_instance();

  void Swap(tb_family* other);

  // implements Message ----------------------------------------------

  tb_family* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tb_family& from);
  void MergeFrom(const tb_family& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 flag_id = 3;
  inline bool has_flag_id() const;
  inline void clear_flag_id();
  static const int kFlagIdFieldNumber = 3;
  inline ::google::protobuf::uint32 flag_id() const;
  inline void set_flag_id(::google::protobuf::uint32 value);

  // required string flag_name = 4;
  inline bool has_flag_name() const;
  inline void clear_flag_name();
  static const int kFlagNameFieldNumber = 4;
  inline const ::std::string& flag_name() const;
  inline void set_flag_name(const ::std::string& value);
  inline void set_flag_name(const char* value);
  inline void set_flag_name(const char* value, size_t size);
  inline ::std::string* mutable_flag_name();
  inline ::std::string* release_flag_name();
  inline void set_allocated_flag_name(::std::string* flag_name);

  // required uint32 lvl = 5;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 5;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);

  // required uint32 chief_id = 6;
  inline bool has_chief_id() const;
  inline void clear_chief_id();
  static const int kChiefIdFieldNumber = 6;
  inline ::google::protobuf::uint32 chief_id() const;
  inline void set_chief_id(::google::protobuf::uint32 value);

  // required string chief_name = 7;
  inline bool has_chief_name() const;
  inline void clear_chief_name();
  static const int kChiefNameFieldNumber = 7;
  inline const ::std::string& chief_name() const;
  inline void set_chief_name(const ::std::string& value);
  inline void set_chief_name(const char* value);
  inline void set_chief_name(const char* value, size_t size);
  inline ::std::string* mutable_chief_name();
  inline ::std::string* release_chief_name();
  inline void set_allocated_chief_name(::std::string* chief_name);

  // required uint32 deputy_id = 8;
  inline bool has_deputy_id() const;
  inline void clear_deputy_id();
  static const int kDeputyIdFieldNumber = 8;
  inline ::google::protobuf::uint32 deputy_id() const;
  inline void set_deputy_id(::google::protobuf::uint32 value);

  // required string post = 9;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 9;
  inline const ::std::string& post() const;
  inline void set_post(const ::std::string& value);
  inline void set_post(const char* value);
  inline void set_post(const char* value, size_t size);
  inline ::std::string* mutable_post();
  inline ::std::string* release_post();
  inline void set_allocated_post(::std::string* post);

  // required uint32 money = 10;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 10;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // required uint32 power = 11;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 11;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // required uint32 domain = 12;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 12;
  inline ::google::protobuf::uint32 domain() const;
  inline void set_domain(::google::protobuf::uint32 value);

  // required int32 king = 13;
  inline bool has_king() const;
  inline void clear_king();
  static const int kKingFieldNumber = 13;
  inline ::google::protobuf::int32 king() const;
  inline void set_king(::google::protobuf::int32 value);

  // required int32 emperor = 14;
  inline bool has_emperor() const;
  inline void clear_emperor();
  static const int kEmperorFieldNumber = 14;
  inline ::google::protobuf::int32 emperor() const;
  inline void set_emperor(::google::protobuf::int32 value);

  // required uint32 cur_member_num = 15;
  inline bool has_cur_member_num() const;
  inline void clear_cur_member_num();
  static const int kCurMemberNumFieldNumber = 15;
  inline ::google::protobuf::uint32 cur_member_num() const;
  inline void set_cur_member_num(::google::protobuf::uint32 value);

  // required int32 approval = 16;
  inline bool has_approval() const;
  inline void clear_approval();
  static const int kApprovalFieldNumber = 16;
  inline ::google::protobuf::int32 approval() const;
  inline void set_approval(::google::protobuf::int32 value);

  // required uint32 activity = 17;
  inline bool has_activity() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 17;
  inline ::google::protobuf::uint32 activity() const;
  inline void set_activity(::google::protobuf::uint32 value);

  // required uint32 qq = 18;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQqFieldNumber = 18;
  inline ::google::protobuf::uint32 qq() const;
  inline void set_qq(::google::protobuf::uint32 value);

  // required uint32 yy = 19;
  inline bool has_yy() const;
  inline void clear_yy();
  static const int kYyFieldNumber = 19;
  inline ::google::protobuf::uint32 yy() const;
  inline void set_yy(::google::protobuf::uint32 value);

  // required uint32 boss_time = 20;
  inline bool has_boss_time() const;
  inline void clear_boss_time();
  static const int kBossTimeFieldNumber = 20;
  inline ::google::protobuf::uint32 boss_time() const;
  inline void set_boss_time(::google::protobuf::uint32 value);

  // required uint32 call_boss_time = 21;
  inline bool has_call_boss_time() const;
  inline void clear_call_boss_time();
  static const int kCallBossTimeFieldNumber = 21;
  inline ::google::protobuf::uint32 call_boss_time() const;
  inline void set_call_boss_time(::google::protobuf::uint32 value);

  // required uint32 op_tag = 22;
  inline bool has_op_tag() const;
  inline void clear_op_tag();
  static const int kOpTagFieldNumber = 22;
  inline ::google::protobuf::uint32 op_tag() const;
  inline void set_op_tag(::google::protobuf::uint32 value);

  // required uint32 op_tag_time = 23;
  inline bool has_op_tag_time() const;
  inline void clear_op_tag_time();
  static const int kOpTagTimeFieldNumber = 23;
  inline ::google::protobuf::uint32 op_tag_time() const;
  inline void set_op_tag_time(::google::protobuf::uint32 value);

  // required uint32 status = 24;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 24;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required uint32 belong_sect = 25;
  inline bool has_belong_sect() const;
  inline void clear_belong_sect();
  static const int kBelongSectFieldNumber = 25;
  inline ::google::protobuf::uint32 belong_sect() const;
  inline void set_belong_sect(::google::protobuf::uint32 value);

  // required uint32 create_time = 26;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 26;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // required uint32 dragon_count = 27;
  inline bool has_dragon_count() const;
  inline void clear_dragon_count();
  static const int kDragonCountFieldNumber = 27;
  inline ::google::protobuf::uint32 dragon_count() const;
  inline void set_dragon_count(::google::protobuf::uint32 value);

  // required uint32 tiger_count = 28;
  inline bool has_tiger_count() const;
  inline void clear_tiger_count();
  static const int kTigerCountFieldNumber = 28;
  inline ::google::protobuf::uint32 tiger_count() const;
  inline void set_tiger_count(::google::protobuf::uint32 value);

  // required uint32 rosefinch_count = 29;
  inline bool has_rosefinch_count() const;
  inline void clear_rosefinch_count();
  static const int kRosefinchCountFieldNumber = 29;
  inline ::google::protobuf::uint32 rosefinch_count() const;
  inline void set_rosefinch_count(::google::protobuf::uint32 value);

  // required uint32 tortoise_count = 30;
  inline bool has_tortoise_count() const;
  inline void clear_tortoise_count();
  static const int kTortoiseCountFieldNumber = 30;
  inline ::google::protobuf::uint32 tortoise_count() const;
  inline void set_tortoise_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.tb_family)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_flag_id();
  inline void clear_has_flag_id();
  inline void set_has_flag_name();
  inline void clear_has_flag_name();
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_chief_id();
  inline void clear_has_chief_id();
  inline void set_has_chief_name();
  inline void clear_has_chief_name();
  inline void set_has_deputy_id();
  inline void clear_has_deputy_id();
  inline void set_has_post();
  inline void clear_has_post();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_king();
  inline void clear_has_king();
  inline void set_has_emperor();
  inline void clear_has_emperor();
  inline void set_has_cur_member_num();
  inline void clear_has_cur_member_num();
  inline void set_has_approval();
  inline void clear_has_approval();
  inline void set_has_activity();
  inline void clear_has_activity();
  inline void set_has_qq();
  inline void clear_has_qq();
  inline void set_has_yy();
  inline void clear_has_yy();
  inline void set_has_boss_time();
  inline void clear_has_boss_time();
  inline void set_has_call_boss_time();
  inline void clear_has_call_boss_time();
  inline void set_has_op_tag();
  inline void clear_has_op_tag();
  inline void set_has_op_tag_time();
  inline void clear_has_op_tag_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_belong_sect();
  inline void clear_has_belong_sect();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_dragon_count();
  inline void clear_has_dragon_count();
  inline void set_has_tiger_count();
  inline void clear_has_tiger_count();
  inline void set_has_rosefinch_count();
  inline void clear_has_rosefinch_count();
  inline void set_has_tortoise_count();
  inline void clear_has_tortoise_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 flag_id_;
  ::std::string* name_;
  ::std::string* flag_name_;
  ::google::protobuf::uint32 lvl_;
  ::google::protobuf::uint32 chief_id_;
  ::std::string* chief_name_;
  ::std::string* post_;
  ::google::protobuf::uint32 deputy_id_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint32 power_;
  ::google::protobuf::uint32 domain_;
  ::google::protobuf::int32 king_;
  ::google::protobuf::int32 emperor_;
  ::google::protobuf::uint32 cur_member_num_;
  ::google::protobuf::int32 approval_;
  ::google::protobuf::uint32 activity_;
  ::google::protobuf::uint32 qq_;
  ::google::protobuf::uint32 yy_;
  ::google::protobuf::uint32 boss_time_;
  ::google::protobuf::uint32 call_boss_time_;
  ::google::protobuf::uint32 op_tag_;
  ::google::protobuf::uint32 op_tag_time_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 belong_sect_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 dragon_count_;
  ::google::protobuf::uint32 tiger_count_;
  ::google::protobuf::uint32 rosefinch_count_;
  ::google::protobuf::uint32 tortoise_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(30 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2etb_5ffamily_2eproto();
  friend void protobuf_AssignDesc_mysql_2etb_5ffamily_2eproto();
  friend void protobuf_ShutdownFile_mysql_2etb_5ffamily_2eproto();

  void InitAsDefaultInstance();
  static tb_family* default_instance_;
};
// ===================================================================


// ===================================================================

// tb_family

// required uint32 id = 1;
inline bool tb_family::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_family::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_family::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_family::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 tb_family::id() const {
  return id_;
}
inline void tb_family::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool tb_family::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_family::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_family::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_family::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& tb_family::name() const {
  return *name_;
}
inline void tb_family::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void tb_family::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void tb_family::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_family::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* tb_family::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_family::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 flag_id = 3;
inline bool tb_family::has_flag_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_family::set_has_flag_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_family::clear_has_flag_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_family::clear_flag_id() {
  flag_id_ = 0u;
  clear_has_flag_id();
}
inline ::google::protobuf::uint32 tb_family::flag_id() const {
  return flag_id_;
}
inline void tb_family::set_flag_id(::google::protobuf::uint32 value) {
  set_has_flag_id();
  flag_id_ = value;
}

// required string flag_name = 4;
inline bool tb_family::has_flag_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tb_family::set_has_flag_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tb_family::clear_has_flag_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tb_family::clear_flag_name() {
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    flag_name_->clear();
  }
  clear_has_flag_name();
}
inline const ::std::string& tb_family::flag_name() const {
  return *flag_name_;
}
inline void tb_family::set_flag_name(const ::std::string& value) {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  flag_name_->assign(value);
}
inline void tb_family::set_flag_name(const char* value) {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  flag_name_->assign(value);
}
inline void tb_family::set_flag_name(const char* value, size_t size) {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  flag_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_family::mutable_flag_name() {
  set_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    flag_name_ = new ::std::string;
  }
  return flag_name_;
}
inline ::std::string* tb_family::release_flag_name() {
  clear_has_flag_name();
  if (flag_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flag_name_;
    flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_family::set_allocated_flag_name(::std::string* flag_name) {
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_name_;
  }
  if (flag_name) {
    set_has_flag_name();
    flag_name_ = flag_name;
  } else {
    clear_has_flag_name();
    flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 lvl = 5;
inline bool tb_family::has_lvl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tb_family::set_has_lvl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tb_family::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tb_family::clear_lvl() {
  lvl_ = 0u;
  clear_has_lvl();
}
inline ::google::protobuf::uint32 tb_family::lvl() const {
  return lvl_;
}
inline void tb_family::set_lvl(::google::protobuf::uint32 value) {
  set_has_lvl();
  lvl_ = value;
}

// required uint32 chief_id = 6;
inline bool tb_family::has_chief_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tb_family::set_has_chief_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tb_family::clear_has_chief_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tb_family::clear_chief_id() {
  chief_id_ = 0u;
  clear_has_chief_id();
}
inline ::google::protobuf::uint32 tb_family::chief_id() const {
  return chief_id_;
}
inline void tb_family::set_chief_id(::google::protobuf::uint32 value) {
  set_has_chief_id();
  chief_id_ = value;
}

// required string chief_name = 7;
inline bool tb_family::has_chief_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tb_family::set_has_chief_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tb_family::clear_has_chief_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tb_family::clear_chief_name() {
  if (chief_name_ != &::google::protobuf::internal::kEmptyString) {
    chief_name_->clear();
  }
  clear_has_chief_name();
}
inline const ::std::string& tb_family::chief_name() const {
  return *chief_name_;
}
inline void tb_family::set_chief_name(const ::std::string& value) {
  set_has_chief_name();
  if (chief_name_ == &::google::protobuf::internal::kEmptyString) {
    chief_name_ = new ::std::string;
  }
  chief_name_->assign(value);
}
inline void tb_family::set_chief_name(const char* value) {
  set_has_chief_name();
  if (chief_name_ == &::google::protobuf::internal::kEmptyString) {
    chief_name_ = new ::std::string;
  }
  chief_name_->assign(value);
}
inline void tb_family::set_chief_name(const char* value, size_t size) {
  set_has_chief_name();
  if (chief_name_ == &::google::protobuf::internal::kEmptyString) {
    chief_name_ = new ::std::string;
  }
  chief_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_family::mutable_chief_name() {
  set_has_chief_name();
  if (chief_name_ == &::google::protobuf::internal::kEmptyString) {
    chief_name_ = new ::std::string;
  }
  return chief_name_;
}
inline ::std::string* tb_family::release_chief_name() {
  clear_has_chief_name();
  if (chief_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chief_name_;
    chief_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_family::set_allocated_chief_name(::std::string* chief_name) {
  if (chief_name_ != &::google::protobuf::internal::kEmptyString) {
    delete chief_name_;
  }
  if (chief_name) {
    set_has_chief_name();
    chief_name_ = chief_name;
  } else {
    clear_has_chief_name();
    chief_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 deputy_id = 8;
inline bool tb_family::has_deputy_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tb_family::set_has_deputy_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tb_family::clear_has_deputy_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tb_family::clear_deputy_id() {
  deputy_id_ = 0u;
  clear_has_deputy_id();
}
inline ::google::protobuf::uint32 tb_family::deputy_id() const {
  return deputy_id_;
}
inline void tb_family::set_deputy_id(::google::protobuf::uint32 value) {
  set_has_deputy_id();
  deputy_id_ = value;
}

// required string post = 9;
inline bool tb_family::has_post() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tb_family::set_has_post() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tb_family::clear_has_post() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tb_family::clear_post() {
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    post_->clear();
  }
  clear_has_post();
}
inline const ::std::string& tb_family::post() const {
  return *post_;
}
inline void tb_family::set_post(const ::std::string& value) {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  post_->assign(value);
}
inline void tb_family::set_post(const char* value) {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  post_->assign(value);
}
inline void tb_family::set_post(const char* value, size_t size) {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  post_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_family::mutable_post() {
  set_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    post_ = new ::std::string;
  }
  return post_;
}
inline ::std::string* tb_family::release_post() {
  clear_has_post();
  if (post_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = post_;
    post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_family::set_allocated_post(::std::string* post) {
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    delete post_;
  }
  if (post) {
    set_has_post();
    post_ = post;
  } else {
    clear_has_post();
    post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 money = 10;
inline bool tb_family::has_money() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tb_family::set_has_money() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tb_family::clear_has_money() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tb_family::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 tb_family::money() const {
  return money_;
}
inline void tb_family::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// required uint32 power = 11;
inline bool tb_family::has_power() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tb_family::set_has_power() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tb_family::clear_has_power() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tb_family::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 tb_family::power() const {
  return power_;
}
inline void tb_family::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// required uint32 domain = 12;
inline bool tb_family::has_domain() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tb_family::set_has_domain() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tb_family::clear_has_domain() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tb_family::clear_domain() {
  domain_ = 0u;
  clear_has_domain();
}
inline ::google::protobuf::uint32 tb_family::domain() const {
  return domain_;
}
inline void tb_family::set_domain(::google::protobuf::uint32 value) {
  set_has_domain();
  domain_ = value;
}

// required int32 king = 13;
inline bool tb_family::has_king() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tb_family::set_has_king() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tb_family::clear_has_king() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tb_family::clear_king() {
  king_ = 0;
  clear_has_king();
}
inline ::google::protobuf::int32 tb_family::king() const {
  return king_;
}
inline void tb_family::set_king(::google::protobuf::int32 value) {
  set_has_king();
  king_ = value;
}

// required int32 emperor = 14;
inline bool tb_family::has_emperor() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tb_family::set_has_emperor() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tb_family::clear_has_emperor() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tb_family::clear_emperor() {
  emperor_ = 0;
  clear_has_emperor();
}
inline ::google::protobuf::int32 tb_family::emperor() const {
  return emperor_;
}
inline void tb_family::set_emperor(::google::protobuf::int32 value) {
  set_has_emperor();
  emperor_ = value;
}

// required uint32 cur_member_num = 15;
inline bool tb_family::has_cur_member_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void tb_family::set_has_cur_member_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void tb_family::clear_has_cur_member_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void tb_family::clear_cur_member_num() {
  cur_member_num_ = 0u;
  clear_has_cur_member_num();
}
inline ::google::protobuf::uint32 tb_family::cur_member_num() const {
  return cur_member_num_;
}
inline void tb_family::set_cur_member_num(::google::protobuf::uint32 value) {
  set_has_cur_member_num();
  cur_member_num_ = value;
}

// required int32 approval = 16;
inline bool tb_family::has_approval() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void tb_family::set_has_approval() {
  _has_bits_[0] |= 0x00008000u;
}
inline void tb_family::clear_has_approval() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void tb_family::clear_approval() {
  approval_ = 0;
  clear_has_approval();
}
inline ::google::protobuf::int32 tb_family::approval() const {
  return approval_;
}
inline void tb_family::set_approval(::google::protobuf::int32 value) {
  set_has_approval();
  approval_ = value;
}

// required uint32 activity = 17;
inline bool tb_family::has_activity() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void tb_family::set_has_activity() {
  _has_bits_[0] |= 0x00010000u;
}
inline void tb_family::clear_has_activity() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void tb_family::clear_activity() {
  activity_ = 0u;
  clear_has_activity();
}
inline ::google::protobuf::uint32 tb_family::activity() const {
  return activity_;
}
inline void tb_family::set_activity(::google::protobuf::uint32 value) {
  set_has_activity();
  activity_ = value;
}

// required uint32 qq = 18;
inline bool tb_family::has_qq() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void tb_family::set_has_qq() {
  _has_bits_[0] |= 0x00020000u;
}
inline void tb_family::clear_has_qq() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void tb_family::clear_qq() {
  qq_ = 0u;
  clear_has_qq();
}
inline ::google::protobuf::uint32 tb_family::qq() const {
  return qq_;
}
inline void tb_family::set_qq(::google::protobuf::uint32 value) {
  set_has_qq();
  qq_ = value;
}

// required uint32 yy = 19;
inline bool tb_family::has_yy() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void tb_family::set_has_yy() {
  _has_bits_[0] |= 0x00040000u;
}
inline void tb_family::clear_has_yy() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void tb_family::clear_yy() {
  yy_ = 0u;
  clear_has_yy();
}
inline ::google::protobuf::uint32 tb_family::yy() const {
  return yy_;
}
inline void tb_family::set_yy(::google::protobuf::uint32 value) {
  set_has_yy();
  yy_ = value;
}

// required uint32 boss_time = 20;
inline bool tb_family::has_boss_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void tb_family::set_has_boss_time() {
  _has_bits_[0] |= 0x00080000u;
}
inline void tb_family::clear_has_boss_time() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void tb_family::clear_boss_time() {
  boss_time_ = 0u;
  clear_has_boss_time();
}
inline ::google::protobuf::uint32 tb_family::boss_time() const {
  return boss_time_;
}
inline void tb_family::set_boss_time(::google::protobuf::uint32 value) {
  set_has_boss_time();
  boss_time_ = value;
}

// required uint32 call_boss_time = 21;
inline bool tb_family::has_call_boss_time() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void tb_family::set_has_call_boss_time() {
  _has_bits_[0] |= 0x00100000u;
}
inline void tb_family::clear_has_call_boss_time() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void tb_family::clear_call_boss_time() {
  call_boss_time_ = 0u;
  clear_has_call_boss_time();
}
inline ::google::protobuf::uint32 tb_family::call_boss_time() const {
  return call_boss_time_;
}
inline void tb_family::set_call_boss_time(::google::protobuf::uint32 value) {
  set_has_call_boss_time();
  call_boss_time_ = value;
}

// required uint32 op_tag = 22;
inline bool tb_family::has_op_tag() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void tb_family::set_has_op_tag() {
  _has_bits_[0] |= 0x00200000u;
}
inline void tb_family::clear_has_op_tag() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void tb_family::clear_op_tag() {
  op_tag_ = 0u;
  clear_has_op_tag();
}
inline ::google::protobuf::uint32 tb_family::op_tag() const {
  return op_tag_;
}
inline void tb_family::set_op_tag(::google::protobuf::uint32 value) {
  set_has_op_tag();
  op_tag_ = value;
}

// required uint32 op_tag_time = 23;
inline bool tb_family::has_op_tag_time() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void tb_family::set_has_op_tag_time() {
  _has_bits_[0] |= 0x00400000u;
}
inline void tb_family::clear_has_op_tag_time() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void tb_family::clear_op_tag_time() {
  op_tag_time_ = 0u;
  clear_has_op_tag_time();
}
inline ::google::protobuf::uint32 tb_family::op_tag_time() const {
  return op_tag_time_;
}
inline void tb_family::set_op_tag_time(::google::protobuf::uint32 value) {
  set_has_op_tag_time();
  op_tag_time_ = value;
}

// required uint32 status = 24;
inline bool tb_family::has_status() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void tb_family::set_has_status() {
  _has_bits_[0] |= 0x00800000u;
}
inline void tb_family::clear_has_status() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void tb_family::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 tb_family::status() const {
  return status_;
}
inline void tb_family::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 belong_sect = 25;
inline bool tb_family::has_belong_sect() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void tb_family::set_has_belong_sect() {
  _has_bits_[0] |= 0x01000000u;
}
inline void tb_family::clear_has_belong_sect() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void tb_family::clear_belong_sect() {
  belong_sect_ = 0u;
  clear_has_belong_sect();
}
inline ::google::protobuf::uint32 tb_family::belong_sect() const {
  return belong_sect_;
}
inline void tb_family::set_belong_sect(::google::protobuf::uint32 value) {
  set_has_belong_sect();
  belong_sect_ = value;
}

// required uint32 create_time = 26;
inline bool tb_family::has_create_time() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void tb_family::set_has_create_time() {
  _has_bits_[0] |= 0x02000000u;
}
inline void tb_family::clear_has_create_time() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void tb_family::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 tb_family::create_time() const {
  return create_time_;
}
inline void tb_family::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// required uint32 dragon_count = 27;
inline bool tb_family::has_dragon_count() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void tb_family::set_has_dragon_count() {
  _has_bits_[0] |= 0x04000000u;
}
inline void tb_family::clear_has_dragon_count() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void tb_family::clear_dragon_count() {
  dragon_count_ = 0u;
  clear_has_dragon_count();
}
inline ::google::protobuf::uint32 tb_family::dragon_count() const {
  return dragon_count_;
}
inline void tb_family::set_dragon_count(::google::protobuf::uint32 value) {
  set_has_dragon_count();
  dragon_count_ = value;
}

// required uint32 tiger_count = 28;
inline bool tb_family::has_tiger_count() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void tb_family::set_has_tiger_count() {
  _has_bits_[0] |= 0x08000000u;
}
inline void tb_family::clear_has_tiger_count() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void tb_family::clear_tiger_count() {
  tiger_count_ = 0u;
  clear_has_tiger_count();
}
inline ::google::protobuf::uint32 tb_family::tiger_count() const {
  return tiger_count_;
}
inline void tb_family::set_tiger_count(::google::protobuf::uint32 value) {
  set_has_tiger_count();
  tiger_count_ = value;
}

// required uint32 rosefinch_count = 29;
inline bool tb_family::has_rosefinch_count() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void tb_family::set_has_rosefinch_count() {
  _has_bits_[0] |= 0x10000000u;
}
inline void tb_family::clear_has_rosefinch_count() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void tb_family::clear_rosefinch_count() {
  rosefinch_count_ = 0u;
  clear_has_rosefinch_count();
}
inline ::google::protobuf::uint32 tb_family::rosefinch_count() const {
  return rosefinch_count_;
}
inline void tb_family::set_rosefinch_count(::google::protobuf::uint32 value) {
  set_has_rosefinch_count();
  rosefinch_count_ = value;
}

// required uint32 tortoise_count = 30;
inline bool tb_family::has_tortoise_count() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void tb_family::set_has_tortoise_count() {
  _has_bits_[0] |= 0x20000000u;
}
inline void tb_family::clear_has_tortoise_count() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void tb_family::clear_tortoise_count() {
  tortoise_count_ = 0u;
  clear_has_tortoise_count();
}
inline ::google::protobuf::uint32 tb_family::tortoise_count() const {
  return tortoise_count_;
}
inline void tb_family::set_tortoise_count(::google::protobuf::uint32 value) {
  set_has_tortoise_count();
  tortoise_count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2etb_5ffamily_2eproto__INCLUDED
