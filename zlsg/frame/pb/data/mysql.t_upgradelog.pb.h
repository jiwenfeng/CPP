// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.t_upgradelog.proto

#ifndef PROTOBUF_mysql_2et_5fupgradelog_2eproto__INCLUDED
#define PROTOBUF_mysql_2et_5fupgradelog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2et_5fupgradelog_2eproto();
void protobuf_AssignDesc_mysql_2et_5fupgradelog_2eproto();
void protobuf_ShutdownFile_mysql_2et_5fupgradelog_2eproto();

class t_upgradelog;

// ===================================================================

class t_upgradelog : public ::google::protobuf::Message {
 public:
  t_upgradelog();
  virtual ~t_upgradelog();

  t_upgradelog(const t_upgradelog& from);

  inline t_upgradelog& operator=(const t_upgradelog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_upgradelog& default_instance();

  void Swap(t_upgradelog* other);

  // implements Message ----------------------------------------------

  t_upgradelog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_upgradelog& from);
  void MergeFrom(const t_upgradelog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // required string did = 3;
  inline bool has_did() const;
  inline void clear_did();
  static const int kDidFieldNumber = 3;
  inline const ::std::string& did() const;
  inline void set_did(const ::std::string& value);
  inline void set_did(const char* value);
  inline void set_did(const char* value, size_t size);
  inline ::std::string* mutable_did();
  inline ::std::string* release_did();
  inline void set_allocated_did(::std::string* did);

  // required string accountName = 4;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 4;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // required string playerName = 5;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 5;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required uint32 oldLevel = 6;
  inline bool has_oldlevel() const;
  inline void clear_oldlevel();
  static const int kOldLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 oldlevel() const;
  inline void set_oldlevel(::google::protobuf::uint32 value);

  // required uint32 newLevel = 7;
  inline bool has_newlevel() const;
  inline void clear_newlevel();
  static const int kNewLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 newlevel() const;
  inline void set_newlevel(::google::protobuf::uint32 value);

  // required uint32 sucess = 8;
  inline bool has_sucess() const;
  inline void clear_sucess();
  static const int kSucessFieldNumber = 8;
  inline ::google::protobuf::uint32 sucess() const;
  inline void set_sucess(::google::protobuf::uint32 value);

  // required uint32 upgradeType = 9;
  inline bool has_upgradetype() const;
  inline void clear_upgradetype();
  static const int kUpgradeTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 upgradetype() const;
  inline void set_upgradetype(::google::protobuf::uint32 value);

  // required string params = 10;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 10;
  inline const ::std::string& params() const;
  inline void set_params(const ::std::string& value);
  inline void set_params(const char* value);
  inline void set_params(const char* value, size_t size);
  inline ::std::string* mutable_params();
  inline ::std::string* release_params();
  inline void set_allocated_params(::std::string* params);

  // required uint32 createDate = 11;
  inline bool has_createdate() const;
  inline void clear_createdate();
  static const int kCreateDateFieldNumber = 11;
  inline ::google::protobuf::uint32 createdate() const;
  inline void set_createdate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.t_upgradelog)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_did();
  inline void clear_has_did();
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_oldlevel();
  inline void clear_has_oldlevel();
  inline void set_has_newlevel();
  inline void clear_has_newlevel();
  inline void set_has_sucess();
  inline void clear_has_sucess();
  inline void set_has_upgradetype();
  inline void clear_has_upgradetype();
  inline void set_has_params();
  inline void clear_has_params();
  inline void set_has_createdate();
  inline void clear_has_createdate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sid_;
  ::std::string* did_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 oldlevel_;
  ::std::string* accountname_;
  ::std::string* playername_;
  ::google::protobuf::uint32 newlevel_;
  ::google::protobuf::uint32 sucess_;
  ::std::string* params_;
  ::google::protobuf::uint32 upgradetype_;
  ::google::protobuf::uint32 createdate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2et_5fupgradelog_2eproto();
  friend void protobuf_AssignDesc_mysql_2et_5fupgradelog_2eproto();
  friend void protobuf_ShutdownFile_mysql_2et_5fupgradelog_2eproto();

  void InitAsDefaultInstance();
  static t_upgradelog* default_instance_;
};
// ===================================================================


// ===================================================================

// t_upgradelog

// required uint32 id = 1;
inline bool t_upgradelog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_upgradelog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_upgradelog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_upgradelog::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 t_upgradelog::id() const {
  return id_;
}
inline void t_upgradelog::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string sid = 2;
inline bool t_upgradelog::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_upgradelog::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_upgradelog::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_upgradelog::clear_sid() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& t_upgradelog::sid() const {
  return *sid_;
}
inline void t_upgradelog::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void t_upgradelog::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void t_upgradelog::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_upgradelog::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  return sid_;
}
inline ::std::string* t_upgradelog::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_upgradelog::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string did = 3;
inline bool t_upgradelog::has_did() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_upgradelog::set_has_did() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_upgradelog::clear_has_did() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_upgradelog::clear_did() {
  if (did_ != &::google::protobuf::internal::kEmptyString) {
    did_->clear();
  }
  clear_has_did();
}
inline const ::std::string& t_upgradelog::did() const {
  return *did_;
}
inline void t_upgradelog::set_did(const ::std::string& value) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  did_->assign(value);
}
inline void t_upgradelog::set_did(const char* value) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  did_->assign(value);
}
inline void t_upgradelog::set_did(const char* value, size_t size) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  did_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_upgradelog::mutable_did() {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  return did_;
}
inline ::std::string* t_upgradelog::release_did() {
  clear_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = did_;
    did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_upgradelog::set_allocated_did(::std::string* did) {
  if (did_ != &::google::protobuf::internal::kEmptyString) {
    delete did_;
  }
  if (did) {
    set_has_did();
    did_ = did;
  } else {
    clear_has_did();
    did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string accountName = 4;
inline bool t_upgradelog::has_accountname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_upgradelog::set_has_accountname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_upgradelog::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_upgradelog::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& t_upgradelog::accountname() const {
  return *accountname_;
}
inline void t_upgradelog::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void t_upgradelog::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void t_upgradelog::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_upgradelog::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* t_upgradelog::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_upgradelog::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string playerName = 5;
inline bool t_upgradelog::has_playername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void t_upgradelog::set_has_playername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void t_upgradelog::clear_has_playername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void t_upgradelog::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& t_upgradelog::playername() const {
  return *playername_;
}
inline void t_upgradelog::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void t_upgradelog::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void t_upgradelog::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_upgradelog::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* t_upgradelog::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_upgradelog::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 oldLevel = 6;
inline bool t_upgradelog::has_oldlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void t_upgradelog::set_has_oldlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void t_upgradelog::clear_has_oldlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void t_upgradelog::clear_oldlevel() {
  oldlevel_ = 0u;
  clear_has_oldlevel();
}
inline ::google::protobuf::uint32 t_upgradelog::oldlevel() const {
  return oldlevel_;
}
inline void t_upgradelog::set_oldlevel(::google::protobuf::uint32 value) {
  set_has_oldlevel();
  oldlevel_ = value;
}

// required uint32 newLevel = 7;
inline bool t_upgradelog::has_newlevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void t_upgradelog::set_has_newlevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void t_upgradelog::clear_has_newlevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void t_upgradelog::clear_newlevel() {
  newlevel_ = 0u;
  clear_has_newlevel();
}
inline ::google::protobuf::uint32 t_upgradelog::newlevel() const {
  return newlevel_;
}
inline void t_upgradelog::set_newlevel(::google::protobuf::uint32 value) {
  set_has_newlevel();
  newlevel_ = value;
}

// required uint32 sucess = 8;
inline bool t_upgradelog::has_sucess() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void t_upgradelog::set_has_sucess() {
  _has_bits_[0] |= 0x00000080u;
}
inline void t_upgradelog::clear_has_sucess() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void t_upgradelog::clear_sucess() {
  sucess_ = 0u;
  clear_has_sucess();
}
inline ::google::protobuf::uint32 t_upgradelog::sucess() const {
  return sucess_;
}
inline void t_upgradelog::set_sucess(::google::protobuf::uint32 value) {
  set_has_sucess();
  sucess_ = value;
}

// required uint32 upgradeType = 9;
inline bool t_upgradelog::has_upgradetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void t_upgradelog::set_has_upgradetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void t_upgradelog::clear_has_upgradetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void t_upgradelog::clear_upgradetype() {
  upgradetype_ = 0u;
  clear_has_upgradetype();
}
inline ::google::protobuf::uint32 t_upgradelog::upgradetype() const {
  return upgradetype_;
}
inline void t_upgradelog::set_upgradetype(::google::protobuf::uint32 value) {
  set_has_upgradetype();
  upgradetype_ = value;
}

// required string params = 10;
inline bool t_upgradelog::has_params() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void t_upgradelog::set_has_params() {
  _has_bits_[0] |= 0x00000200u;
}
inline void t_upgradelog::clear_has_params() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void t_upgradelog::clear_params() {
  if (params_ != &::google::protobuf::internal::kEmptyString) {
    params_->clear();
  }
  clear_has_params();
}
inline const ::std::string& t_upgradelog::params() const {
  return *params_;
}
inline void t_upgradelog::set_params(const ::std::string& value) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    params_ = new ::std::string;
  }
  params_->assign(value);
}
inline void t_upgradelog::set_params(const char* value) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    params_ = new ::std::string;
  }
  params_->assign(value);
}
inline void t_upgradelog::set_params(const char* value, size_t size) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    params_ = new ::std::string;
  }
  params_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_upgradelog::mutable_params() {
  set_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    params_ = new ::std::string;
  }
  return params_;
}
inline ::std::string* t_upgradelog::release_params() {
  clear_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = params_;
    params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_upgradelog::set_allocated_params(::std::string* params) {
  if (params_ != &::google::protobuf::internal::kEmptyString) {
    delete params_;
  }
  if (params) {
    set_has_params();
    params_ = params;
  } else {
    clear_has_params();
    params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 createDate = 11;
inline bool t_upgradelog::has_createdate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void t_upgradelog::set_has_createdate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void t_upgradelog::clear_has_createdate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void t_upgradelog::clear_createdate() {
  createdate_ = 0u;
  clear_has_createdate();
}
inline ::google::protobuf::uint32 t_upgradelog::createdate() const {
  return createdate_;
}
inline void t_upgradelog::set_createdate(::google::protobuf::uint32 value) {
  set_has_createdate();
  createdate_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2et_5fupgradelog_2eproto__INCLUDED
