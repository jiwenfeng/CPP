// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_role_cycle.proto

#ifndef PROTOBUF_mysql_2etb_5frole_5fcycle_2eproto__INCLUDED
#define PROTOBUF_mysql_2etb_5frole_5fcycle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2etb_5frole_5fcycle_2eproto();
void protobuf_AssignDesc_mysql_2etb_5frole_5fcycle_2eproto();
void protobuf_ShutdownFile_mysql_2etb_5frole_5fcycle_2eproto();

class tb_role_cycle;

// ===================================================================

class tb_role_cycle : public ::google::protobuf::Message {
 public:
  tb_role_cycle();
  virtual ~tb_role_cycle();

  tb_role_cycle(const tb_role_cycle& from);

  inline tb_role_cycle& operator=(const tb_role_cycle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_role_cycle& default_instance();

  void Swap(tb_role_cycle* other);

  // implements Message ----------------------------------------------

  tb_role_cycle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tb_role_cycle& from);
  void MergeFrom(const tb_role_cycle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 reset_time = 2;
  inline bool has_reset_time() const;
  inline void clear_reset_time();
  static const int kResetTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 reset_time() const;
  inline void set_reset_time(::google::protobuf::uint32 value);

  // required uint32 cur_level = 3;
  inline bool has_cur_level() const;
  inline void clear_cur_level();
  static const int kCurLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_level() const;
  inline void set_cur_level(::google::protobuf::uint32 value);

  // required uint32 top_level = 4;
  inline bool has_top_level() const;
  inline void clear_top_level();
  static const int kTopLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 top_level() const;
  inline void set_top_level(::google::protobuf::uint32 value);

  // required bytes passed_levels = 5;
  inline bool has_passed_levels() const;
  inline void clear_passed_levels();
  static const int kPassedLevelsFieldNumber = 5;
  inline const ::std::string& passed_levels() const;
  inline void set_passed_levels(const ::std::string& value);
  inline void set_passed_levels(const char* value);
  inline void set_passed_levels(const void* value, size_t size);
  inline ::std::string* mutable_passed_levels();
  inline ::std::string* release_passed_levels();
  inline void set_allocated_passed_levels(::std::string* passed_levels);

  // required bytes helpers = 6;
  inline bool has_helpers() const;
  inline void clear_helpers();
  static const int kHelpersFieldNumber = 6;
  inline const ::std::string& helpers() const;
  inline void set_helpers(const ::std::string& value);
  inline void set_helpers(const char* value);
  inline void set_helpers(const void* value, size_t size);
  inline ::std::string* mutable_helpers();
  inline ::std::string* release_helpers();
  inline void set_allocated_helpers(::std::string* helpers);

  // @@protoc_insertion_point(class_scope:mysql.tb_role_cycle)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_reset_time();
  inline void clear_has_reset_time();
  inline void set_has_cur_level();
  inline void clear_has_cur_level();
  inline void set_has_top_level();
  inline void clear_has_top_level();
  inline void set_has_passed_levels();
  inline void clear_has_passed_levels();
  inline void set_has_helpers();
  inline void clear_has_helpers();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 reset_time_;
  ::google::protobuf::uint32 cur_level_;
  ::google::protobuf::uint32 top_level_;
  ::std::string* passed_levels_;
  ::std::string* helpers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2etb_5frole_5fcycle_2eproto();
  friend void protobuf_AssignDesc_mysql_2etb_5frole_5fcycle_2eproto();
  friend void protobuf_ShutdownFile_mysql_2etb_5frole_5fcycle_2eproto();

  void InitAsDefaultInstance();
  static tb_role_cycle* default_instance_;
};
// ===================================================================


// ===================================================================

// tb_role_cycle

// required uint32 role_id = 1;
inline bool tb_role_cycle::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_role_cycle::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_role_cycle::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_role_cycle::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 tb_role_cycle::role_id() const {
  return role_id_;
}
inline void tb_role_cycle::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 reset_time = 2;
inline bool tb_role_cycle::has_reset_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_role_cycle::set_has_reset_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_role_cycle::clear_has_reset_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_role_cycle::clear_reset_time() {
  reset_time_ = 0u;
  clear_has_reset_time();
}
inline ::google::protobuf::uint32 tb_role_cycle::reset_time() const {
  return reset_time_;
}
inline void tb_role_cycle::set_reset_time(::google::protobuf::uint32 value) {
  set_has_reset_time();
  reset_time_ = value;
}

// required uint32 cur_level = 3;
inline bool tb_role_cycle::has_cur_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_role_cycle::set_has_cur_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_role_cycle::clear_has_cur_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_role_cycle::clear_cur_level() {
  cur_level_ = 0u;
  clear_has_cur_level();
}
inline ::google::protobuf::uint32 tb_role_cycle::cur_level() const {
  return cur_level_;
}
inline void tb_role_cycle::set_cur_level(::google::protobuf::uint32 value) {
  set_has_cur_level();
  cur_level_ = value;
}

// required uint32 top_level = 4;
inline bool tb_role_cycle::has_top_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tb_role_cycle::set_has_top_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tb_role_cycle::clear_has_top_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tb_role_cycle::clear_top_level() {
  top_level_ = 0u;
  clear_has_top_level();
}
inline ::google::protobuf::uint32 tb_role_cycle::top_level() const {
  return top_level_;
}
inline void tb_role_cycle::set_top_level(::google::protobuf::uint32 value) {
  set_has_top_level();
  top_level_ = value;
}

// required bytes passed_levels = 5;
inline bool tb_role_cycle::has_passed_levels() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tb_role_cycle::set_has_passed_levels() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tb_role_cycle::clear_has_passed_levels() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tb_role_cycle::clear_passed_levels() {
  if (passed_levels_ != &::google::protobuf::internal::kEmptyString) {
    passed_levels_->clear();
  }
  clear_has_passed_levels();
}
inline const ::std::string& tb_role_cycle::passed_levels() const {
  return *passed_levels_;
}
inline void tb_role_cycle::set_passed_levels(const ::std::string& value) {
  set_has_passed_levels();
  if (passed_levels_ == &::google::protobuf::internal::kEmptyString) {
    passed_levels_ = new ::std::string;
  }
  passed_levels_->assign(value);
}
inline void tb_role_cycle::set_passed_levels(const char* value) {
  set_has_passed_levels();
  if (passed_levels_ == &::google::protobuf::internal::kEmptyString) {
    passed_levels_ = new ::std::string;
  }
  passed_levels_->assign(value);
}
inline void tb_role_cycle::set_passed_levels(const void* value, size_t size) {
  set_has_passed_levels();
  if (passed_levels_ == &::google::protobuf::internal::kEmptyString) {
    passed_levels_ = new ::std::string;
  }
  passed_levels_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_cycle::mutable_passed_levels() {
  set_has_passed_levels();
  if (passed_levels_ == &::google::protobuf::internal::kEmptyString) {
    passed_levels_ = new ::std::string;
  }
  return passed_levels_;
}
inline ::std::string* tb_role_cycle::release_passed_levels() {
  clear_has_passed_levels();
  if (passed_levels_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passed_levels_;
    passed_levels_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_cycle::set_allocated_passed_levels(::std::string* passed_levels) {
  if (passed_levels_ != &::google::protobuf::internal::kEmptyString) {
    delete passed_levels_;
  }
  if (passed_levels) {
    set_has_passed_levels();
    passed_levels_ = passed_levels;
  } else {
    clear_has_passed_levels();
    passed_levels_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes helpers = 6;
inline bool tb_role_cycle::has_helpers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tb_role_cycle::set_has_helpers() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tb_role_cycle::clear_has_helpers() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tb_role_cycle::clear_helpers() {
  if (helpers_ != &::google::protobuf::internal::kEmptyString) {
    helpers_->clear();
  }
  clear_has_helpers();
}
inline const ::std::string& tb_role_cycle::helpers() const {
  return *helpers_;
}
inline void tb_role_cycle::set_helpers(const ::std::string& value) {
  set_has_helpers();
  if (helpers_ == &::google::protobuf::internal::kEmptyString) {
    helpers_ = new ::std::string;
  }
  helpers_->assign(value);
}
inline void tb_role_cycle::set_helpers(const char* value) {
  set_has_helpers();
  if (helpers_ == &::google::protobuf::internal::kEmptyString) {
    helpers_ = new ::std::string;
  }
  helpers_->assign(value);
}
inline void tb_role_cycle::set_helpers(const void* value, size_t size) {
  set_has_helpers();
  if (helpers_ == &::google::protobuf::internal::kEmptyString) {
    helpers_ = new ::std::string;
  }
  helpers_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_cycle::mutable_helpers() {
  set_has_helpers();
  if (helpers_ == &::google::protobuf::internal::kEmptyString) {
    helpers_ = new ::std::string;
  }
  return helpers_;
}
inline ::std::string* tb_role_cycle::release_helpers() {
  clear_has_helpers();
  if (helpers_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = helpers_;
    helpers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_cycle::set_allocated_helpers(::std::string* helpers) {
  if (helpers_ != &::google::protobuf::internal::kEmptyString) {
    delete helpers_;
  }
  if (helpers) {
    set_has_helpers();
    helpers_ = helpers;
  } else {
    clear_has_helpers();
    helpers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2etb_5frole_5fcycle_2eproto__INCLUDED
