// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_role_props.proto

#ifndef PROTOBUF_mysql_2etb_5frole_5fprops_2eproto__INCLUDED
#define PROTOBUF_mysql_2etb_5frole_5fprops_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2etb_5frole_5fprops_2eproto();
void protobuf_AssignDesc_mysql_2etb_5frole_5fprops_2eproto();
void protobuf_ShutdownFile_mysql_2etb_5frole_5fprops_2eproto();

class tb_role_props;

// ===================================================================

class tb_role_props : public ::google::protobuf::Message {
 public:
  tb_role_props();
  virtual ~tb_role_props();

  tb_role_props(const tb_role_props& from);

  inline tb_role_props& operator=(const tb_role_props& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_role_props& default_instance();

  void Swap(tb_role_props* other);

  // implements Message ----------------------------------------------

  tb_role_props* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tb_role_props& from);
  void MergeFrom(const tb_role_props& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required bytes pack = 2;
  inline bool has_pack() const;
  inline void clear_pack();
  static const int kPackFieldNumber = 2;
  inline const ::std::string& pack() const;
  inline void set_pack(const ::std::string& value);
  inline void set_pack(const char* value);
  inline void set_pack(const void* value, size_t size);
  inline ::std::string* mutable_pack();
  inline ::std::string* release_pack();
  inline void set_allocated_pack(::std::string* pack);

  // required bytes depot = 3;
  inline bool has_depot() const;
  inline void clear_depot();
  static const int kDepotFieldNumber = 3;
  inline const ::std::string& depot() const;
  inline void set_depot(const ::std::string& value);
  inline void set_depot(const char* value);
  inline void set_depot(const void* value, size_t size);
  inline ::std::string* mutable_depot();
  inline ::std::string* release_depot();
  inline void set_allocated_depot(::std::string* depot);

  // required bytes equip = 4;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 4;
  inline const ::std::string& equip() const;
  inline void set_equip(const ::std::string& value);
  inline void set_equip(const char* value);
  inline void set_equip(const void* value, size_t size);
  inline ::std::string* mutable_equip();
  inline ::std::string* release_equip();
  inline void set_allocated_equip(::std::string* equip);

  // required bytes explore = 5;
  inline bool has_explore() const;
  inline void clear_explore();
  static const int kExploreFieldNumber = 5;
  inline const ::std::string& explore() const;
  inline void set_explore(const ::std::string& value);
  inline void set_explore(const char* value);
  inline void set_explore(const void* value, size_t size);
  inline ::std::string* mutable_explore();
  inline ::std::string* release_explore();
  inline void set_allocated_explore(::std::string* explore);

  // required bytes task = 6;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 6;
  inline const ::std::string& task() const;
  inline void set_task(const ::std::string& value);
  inline void set_task(const char* value);
  inline void set_task(const void* value, size_t size);
  inline ::std::string* mutable_task();
  inline ::std::string* release_task();
  inline void set_allocated_task(::std::string* task);

  // required uint32 created_date = 7;
  inline bool has_created_date() const;
  inline void clear_created_date();
  static const int kCreatedDateFieldNumber = 7;
  inline ::google::protobuf::uint32 created_date() const;
  inline void set_created_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.tb_role_props)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_pack();
  inline void clear_has_pack();
  inline void set_has_depot();
  inline void clear_has_depot();
  inline void set_has_equip();
  inline void clear_has_equip();
  inline void set_has_explore();
  inline void clear_has_explore();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_created_date();
  inline void clear_has_created_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pack_;
  ::std::string* depot_;
  ::std::string* equip_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 created_date_;
  ::std::string* explore_;
  ::std::string* task_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2etb_5frole_5fprops_2eproto();
  friend void protobuf_AssignDesc_mysql_2etb_5frole_5fprops_2eproto();
  friend void protobuf_ShutdownFile_mysql_2etb_5frole_5fprops_2eproto();

  void InitAsDefaultInstance();
  static tb_role_props* default_instance_;
};
// ===================================================================


// ===================================================================

// tb_role_props

// required uint32 role_id = 1;
inline bool tb_role_props::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_role_props::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_role_props::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_role_props::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 tb_role_props::role_id() const {
  return role_id_;
}
inline void tb_role_props::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required bytes pack = 2;
inline bool tb_role_props::has_pack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_role_props::set_has_pack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_role_props::clear_has_pack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_role_props::clear_pack() {
  if (pack_ != &::google::protobuf::internal::kEmptyString) {
    pack_->clear();
  }
  clear_has_pack();
}
inline const ::std::string& tb_role_props::pack() const {
  return *pack_;
}
inline void tb_role_props::set_pack(const ::std::string& value) {
  set_has_pack();
  if (pack_ == &::google::protobuf::internal::kEmptyString) {
    pack_ = new ::std::string;
  }
  pack_->assign(value);
}
inline void tb_role_props::set_pack(const char* value) {
  set_has_pack();
  if (pack_ == &::google::protobuf::internal::kEmptyString) {
    pack_ = new ::std::string;
  }
  pack_->assign(value);
}
inline void tb_role_props::set_pack(const void* value, size_t size) {
  set_has_pack();
  if (pack_ == &::google::protobuf::internal::kEmptyString) {
    pack_ = new ::std::string;
  }
  pack_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_props::mutable_pack() {
  set_has_pack();
  if (pack_ == &::google::protobuf::internal::kEmptyString) {
    pack_ = new ::std::string;
  }
  return pack_;
}
inline ::std::string* tb_role_props::release_pack() {
  clear_has_pack();
  if (pack_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pack_;
    pack_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_props::set_allocated_pack(::std::string* pack) {
  if (pack_ != &::google::protobuf::internal::kEmptyString) {
    delete pack_;
  }
  if (pack) {
    set_has_pack();
    pack_ = pack;
  } else {
    clear_has_pack();
    pack_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes depot = 3;
inline bool tb_role_props::has_depot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_role_props::set_has_depot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_role_props::clear_has_depot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_role_props::clear_depot() {
  if (depot_ != &::google::protobuf::internal::kEmptyString) {
    depot_->clear();
  }
  clear_has_depot();
}
inline const ::std::string& tb_role_props::depot() const {
  return *depot_;
}
inline void tb_role_props::set_depot(const ::std::string& value) {
  set_has_depot();
  if (depot_ == &::google::protobuf::internal::kEmptyString) {
    depot_ = new ::std::string;
  }
  depot_->assign(value);
}
inline void tb_role_props::set_depot(const char* value) {
  set_has_depot();
  if (depot_ == &::google::protobuf::internal::kEmptyString) {
    depot_ = new ::std::string;
  }
  depot_->assign(value);
}
inline void tb_role_props::set_depot(const void* value, size_t size) {
  set_has_depot();
  if (depot_ == &::google::protobuf::internal::kEmptyString) {
    depot_ = new ::std::string;
  }
  depot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_props::mutable_depot() {
  set_has_depot();
  if (depot_ == &::google::protobuf::internal::kEmptyString) {
    depot_ = new ::std::string;
  }
  return depot_;
}
inline ::std::string* tb_role_props::release_depot() {
  clear_has_depot();
  if (depot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = depot_;
    depot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_props::set_allocated_depot(::std::string* depot) {
  if (depot_ != &::google::protobuf::internal::kEmptyString) {
    delete depot_;
  }
  if (depot) {
    set_has_depot();
    depot_ = depot;
  } else {
    clear_has_depot();
    depot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes equip = 4;
inline bool tb_role_props::has_equip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tb_role_props::set_has_equip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tb_role_props::clear_has_equip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tb_role_props::clear_equip() {
  if (equip_ != &::google::protobuf::internal::kEmptyString) {
    equip_->clear();
  }
  clear_has_equip();
}
inline const ::std::string& tb_role_props::equip() const {
  return *equip_;
}
inline void tb_role_props::set_equip(const ::std::string& value) {
  set_has_equip();
  if (equip_ == &::google::protobuf::internal::kEmptyString) {
    equip_ = new ::std::string;
  }
  equip_->assign(value);
}
inline void tb_role_props::set_equip(const char* value) {
  set_has_equip();
  if (equip_ == &::google::protobuf::internal::kEmptyString) {
    equip_ = new ::std::string;
  }
  equip_->assign(value);
}
inline void tb_role_props::set_equip(const void* value, size_t size) {
  set_has_equip();
  if (equip_ == &::google::protobuf::internal::kEmptyString) {
    equip_ = new ::std::string;
  }
  equip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_props::mutable_equip() {
  set_has_equip();
  if (equip_ == &::google::protobuf::internal::kEmptyString) {
    equip_ = new ::std::string;
  }
  return equip_;
}
inline ::std::string* tb_role_props::release_equip() {
  clear_has_equip();
  if (equip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_;
    equip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_props::set_allocated_equip(::std::string* equip) {
  if (equip_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_;
  }
  if (equip) {
    set_has_equip();
    equip_ = equip;
  } else {
    clear_has_equip();
    equip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes explore = 5;
inline bool tb_role_props::has_explore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tb_role_props::set_has_explore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tb_role_props::clear_has_explore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tb_role_props::clear_explore() {
  if (explore_ != &::google::protobuf::internal::kEmptyString) {
    explore_->clear();
  }
  clear_has_explore();
}
inline const ::std::string& tb_role_props::explore() const {
  return *explore_;
}
inline void tb_role_props::set_explore(const ::std::string& value) {
  set_has_explore();
  if (explore_ == &::google::protobuf::internal::kEmptyString) {
    explore_ = new ::std::string;
  }
  explore_->assign(value);
}
inline void tb_role_props::set_explore(const char* value) {
  set_has_explore();
  if (explore_ == &::google::protobuf::internal::kEmptyString) {
    explore_ = new ::std::string;
  }
  explore_->assign(value);
}
inline void tb_role_props::set_explore(const void* value, size_t size) {
  set_has_explore();
  if (explore_ == &::google::protobuf::internal::kEmptyString) {
    explore_ = new ::std::string;
  }
  explore_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_props::mutable_explore() {
  set_has_explore();
  if (explore_ == &::google::protobuf::internal::kEmptyString) {
    explore_ = new ::std::string;
  }
  return explore_;
}
inline ::std::string* tb_role_props::release_explore() {
  clear_has_explore();
  if (explore_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = explore_;
    explore_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_props::set_allocated_explore(::std::string* explore) {
  if (explore_ != &::google::protobuf::internal::kEmptyString) {
    delete explore_;
  }
  if (explore) {
    set_has_explore();
    explore_ = explore;
  } else {
    clear_has_explore();
    explore_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes task = 6;
inline bool tb_role_props::has_task() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tb_role_props::set_has_task() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tb_role_props::clear_has_task() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tb_role_props::clear_task() {
  if (task_ != &::google::protobuf::internal::kEmptyString) {
    task_->clear();
  }
  clear_has_task();
}
inline const ::std::string& tb_role_props::task() const {
  return *task_;
}
inline void tb_role_props::set_task(const ::std::string& value) {
  set_has_task();
  if (task_ == &::google::protobuf::internal::kEmptyString) {
    task_ = new ::std::string;
  }
  task_->assign(value);
}
inline void tb_role_props::set_task(const char* value) {
  set_has_task();
  if (task_ == &::google::protobuf::internal::kEmptyString) {
    task_ = new ::std::string;
  }
  task_->assign(value);
}
inline void tb_role_props::set_task(const void* value, size_t size) {
  set_has_task();
  if (task_ == &::google::protobuf::internal::kEmptyString) {
    task_ = new ::std::string;
  }
  task_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_props::mutable_task() {
  set_has_task();
  if (task_ == &::google::protobuf::internal::kEmptyString) {
    task_ = new ::std::string;
  }
  return task_;
}
inline ::std::string* tb_role_props::release_task() {
  clear_has_task();
  if (task_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = task_;
    task_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_props::set_allocated_task(::std::string* task) {
  if (task_ != &::google::protobuf::internal::kEmptyString) {
    delete task_;
  }
  if (task) {
    set_has_task();
    task_ = task;
  } else {
    clear_has_task();
    task_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 created_date = 7;
inline bool tb_role_props::has_created_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tb_role_props::set_has_created_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tb_role_props::clear_has_created_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tb_role_props::clear_created_date() {
  created_date_ = 0u;
  clear_has_created_date();
}
inline ::google::protobuf::uint32 tb_role_props::created_date() const {
  return created_date_;
}
inline void tb_role_props::set_created_date(::google::protobuf::uint32 value) {
  set_has_created_date();
  created_date_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2etb_5frole_5fprops_2eproto__INCLUDED
