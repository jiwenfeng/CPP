// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_arena_robot.proto

#ifndef PROTOBUF_mysql_2etb_5farena_5frobot_2eproto__INCLUDED
#define PROTOBUF_mysql_2etb_5farena_5frobot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2etb_5farena_5frobot_2eproto();
void protobuf_AssignDesc_mysql_2etb_5farena_5frobot_2eproto();
void protobuf_ShutdownFile_mysql_2etb_5farena_5frobot_2eproto();

class tb_arena_robot;

// ===================================================================

class tb_arena_robot : public ::google::protobuf::Message {
 public:
  tb_arena_robot();
  virtual ~tb_arena_robot();

  tb_arena_robot(const tb_arena_robot& from);

  inline tb_arena_robot& operator=(const tb_arena_robot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_arena_robot& default_instance();

  void Swap(tb_arena_robot* other);

  // implements Message ----------------------------------------------

  tb_arena_robot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tb_arena_robot& from);
  void MergeFrom(const tb_arena_robot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 config_id = 3;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 3;
  inline ::google::protobuf::uint32 config_id() const;
  inline void set_config_id(::google::protobuf::uint32 value);

  // required uint32 fighting_power = 4;
  inline bool has_fighting_power() const;
  inline void clear_fighting_power();
  static const int kFightingPowerFieldNumber = 4;
  inline ::google::protobuf::uint32 fighting_power() const;
  inline void set_fighting_power(::google::protobuf::uint32 value);

  // required bytes attr = 5;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 5;
  inline const ::std::string& attr() const;
  inline void set_attr(const ::std::string& value);
  inline void set_attr(const char* value);
  inline void set_attr(const void* value, size_t size);
  inline ::std::string* mutable_attr();
  inline ::std::string* release_attr();
  inline void set_allocated_attr(::std::string* attr);

  // required uint32 pet_id = 6;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 6;
  inline ::google::protobuf::uint32 pet_id() const;
  inline void set_pet_id(::google::protobuf::uint32 value);

  // required bytes g_attr = 7;
  inline bool has_g_attr() const;
  inline void clear_g_attr();
  static const int kGAttrFieldNumber = 7;
  inline const ::std::string& g_attr() const;
  inline void set_g_attr(const ::std::string& value);
  inline void set_g_attr(const char* value);
  inline void set_g_attr(const void* value, size_t size);
  inline ::std::string* mutable_g_attr();
  inline ::std::string* release_g_attr();
  inline void set_allocated_g_attr(::std::string* g_attr);

  // required uint32 standby = 8;
  inline bool has_standby() const;
  inline void clear_standby();
  static const int kStandbyFieldNumber = 8;
  inline ::google::protobuf::uint32 standby() const;
  inline void set_standby(::google::protobuf::uint32 value);

  // required bytes b_attr = 9;
  inline bool has_b_attr() const;
  inline void clear_b_attr();
  static const int kBAttrFieldNumber = 9;
  inline const ::std::string& b_attr() const;
  inline void set_b_attr(const ::std::string& value);
  inline void set_b_attr(const char* value);
  inline void set_b_attr(const void* value, size_t size);
  inline ::std::string* mutable_b_attr();
  inline ::std::string* release_b_attr();
  inline void set_allocated_b_attr(::std::string* b_attr);

  // @@protoc_insertion_point(class_scope:mysql.tb_arena_robot)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_fighting_power();
  inline void clear_has_fighting_power();
  inline void set_has_attr();
  inline void clear_has_attr();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_g_attr();
  inline void clear_has_g_attr();
  inline void set_has_standby();
  inline void clear_has_standby();
  inline void set_has_b_attr();
  inline void clear_has_b_attr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 config_id_;
  ::std::string* attr_;
  ::google::protobuf::uint32 fighting_power_;
  ::google::protobuf::uint32 pet_id_;
  ::std::string* g_attr_;
  ::std::string* b_attr_;
  ::google::protobuf::uint32 standby_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2etb_5farena_5frobot_2eproto();
  friend void protobuf_AssignDesc_mysql_2etb_5farena_5frobot_2eproto();
  friend void protobuf_ShutdownFile_mysql_2etb_5farena_5frobot_2eproto();

  void InitAsDefaultInstance();
  static tb_arena_robot* default_instance_;
};
// ===================================================================


// ===================================================================

// tb_arena_robot

// required uint32 id = 1;
inline bool tb_arena_robot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_arena_robot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_arena_robot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_arena_robot::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 tb_arena_robot::id() const {
  return id_;
}
inline void tb_arena_robot::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool tb_arena_robot::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_arena_robot::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_arena_robot::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_arena_robot::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& tb_arena_robot::name() const {
  return *name_;
}
inline void tb_arena_robot::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void tb_arena_robot::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void tb_arena_robot::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_arena_robot::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* tb_arena_robot::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_arena_robot::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 config_id = 3;
inline bool tb_arena_robot::has_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_arena_robot::set_has_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_arena_robot::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_arena_robot::clear_config_id() {
  config_id_ = 0u;
  clear_has_config_id();
}
inline ::google::protobuf::uint32 tb_arena_robot::config_id() const {
  return config_id_;
}
inline void tb_arena_robot::set_config_id(::google::protobuf::uint32 value) {
  set_has_config_id();
  config_id_ = value;
}

// required uint32 fighting_power = 4;
inline bool tb_arena_robot::has_fighting_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tb_arena_robot::set_has_fighting_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tb_arena_robot::clear_has_fighting_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tb_arena_robot::clear_fighting_power() {
  fighting_power_ = 0u;
  clear_has_fighting_power();
}
inline ::google::protobuf::uint32 tb_arena_robot::fighting_power() const {
  return fighting_power_;
}
inline void tb_arena_robot::set_fighting_power(::google::protobuf::uint32 value) {
  set_has_fighting_power();
  fighting_power_ = value;
}

// required bytes attr = 5;
inline bool tb_arena_robot::has_attr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tb_arena_robot::set_has_attr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tb_arena_robot::clear_has_attr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tb_arena_robot::clear_attr() {
  if (attr_ != &::google::protobuf::internal::kEmptyString) {
    attr_->clear();
  }
  clear_has_attr();
}
inline const ::std::string& tb_arena_robot::attr() const {
  return *attr_;
}
inline void tb_arena_robot::set_attr(const ::std::string& value) {
  set_has_attr();
  if (attr_ == &::google::protobuf::internal::kEmptyString) {
    attr_ = new ::std::string;
  }
  attr_->assign(value);
}
inline void tb_arena_robot::set_attr(const char* value) {
  set_has_attr();
  if (attr_ == &::google::protobuf::internal::kEmptyString) {
    attr_ = new ::std::string;
  }
  attr_->assign(value);
}
inline void tb_arena_robot::set_attr(const void* value, size_t size) {
  set_has_attr();
  if (attr_ == &::google::protobuf::internal::kEmptyString) {
    attr_ = new ::std::string;
  }
  attr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_arena_robot::mutable_attr() {
  set_has_attr();
  if (attr_ == &::google::protobuf::internal::kEmptyString) {
    attr_ = new ::std::string;
  }
  return attr_;
}
inline ::std::string* tb_arena_robot::release_attr() {
  clear_has_attr();
  if (attr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attr_;
    attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_arena_robot::set_allocated_attr(::std::string* attr) {
  if (attr_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_;
  }
  if (attr) {
    set_has_attr();
    attr_ = attr;
  } else {
    clear_has_attr();
    attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 pet_id = 6;
inline bool tb_arena_robot::has_pet_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tb_arena_robot::set_has_pet_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tb_arena_robot::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tb_arena_robot::clear_pet_id() {
  pet_id_ = 0u;
  clear_has_pet_id();
}
inline ::google::protobuf::uint32 tb_arena_robot::pet_id() const {
  return pet_id_;
}
inline void tb_arena_robot::set_pet_id(::google::protobuf::uint32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// required bytes g_attr = 7;
inline bool tb_arena_robot::has_g_attr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tb_arena_robot::set_has_g_attr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tb_arena_robot::clear_has_g_attr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tb_arena_robot::clear_g_attr() {
  if (g_attr_ != &::google::protobuf::internal::kEmptyString) {
    g_attr_->clear();
  }
  clear_has_g_attr();
}
inline const ::std::string& tb_arena_robot::g_attr() const {
  return *g_attr_;
}
inline void tb_arena_robot::set_g_attr(const ::std::string& value) {
  set_has_g_attr();
  if (g_attr_ == &::google::protobuf::internal::kEmptyString) {
    g_attr_ = new ::std::string;
  }
  g_attr_->assign(value);
}
inline void tb_arena_robot::set_g_attr(const char* value) {
  set_has_g_attr();
  if (g_attr_ == &::google::protobuf::internal::kEmptyString) {
    g_attr_ = new ::std::string;
  }
  g_attr_->assign(value);
}
inline void tb_arena_robot::set_g_attr(const void* value, size_t size) {
  set_has_g_attr();
  if (g_attr_ == &::google::protobuf::internal::kEmptyString) {
    g_attr_ = new ::std::string;
  }
  g_attr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_arena_robot::mutable_g_attr() {
  set_has_g_attr();
  if (g_attr_ == &::google::protobuf::internal::kEmptyString) {
    g_attr_ = new ::std::string;
  }
  return g_attr_;
}
inline ::std::string* tb_arena_robot::release_g_attr() {
  clear_has_g_attr();
  if (g_attr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = g_attr_;
    g_attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_arena_robot::set_allocated_g_attr(::std::string* g_attr) {
  if (g_attr_ != &::google::protobuf::internal::kEmptyString) {
    delete g_attr_;
  }
  if (g_attr) {
    set_has_g_attr();
    g_attr_ = g_attr;
  } else {
    clear_has_g_attr();
    g_attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 standby = 8;
inline bool tb_arena_robot::has_standby() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tb_arena_robot::set_has_standby() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tb_arena_robot::clear_has_standby() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tb_arena_robot::clear_standby() {
  standby_ = 0u;
  clear_has_standby();
}
inline ::google::protobuf::uint32 tb_arena_robot::standby() const {
  return standby_;
}
inline void tb_arena_robot::set_standby(::google::protobuf::uint32 value) {
  set_has_standby();
  standby_ = value;
}

// required bytes b_attr = 9;
inline bool tb_arena_robot::has_b_attr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tb_arena_robot::set_has_b_attr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tb_arena_robot::clear_has_b_attr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tb_arena_robot::clear_b_attr() {
  if (b_attr_ != &::google::protobuf::internal::kEmptyString) {
    b_attr_->clear();
  }
  clear_has_b_attr();
}
inline const ::std::string& tb_arena_robot::b_attr() const {
  return *b_attr_;
}
inline void tb_arena_robot::set_b_attr(const ::std::string& value) {
  set_has_b_attr();
  if (b_attr_ == &::google::protobuf::internal::kEmptyString) {
    b_attr_ = new ::std::string;
  }
  b_attr_->assign(value);
}
inline void tb_arena_robot::set_b_attr(const char* value) {
  set_has_b_attr();
  if (b_attr_ == &::google::protobuf::internal::kEmptyString) {
    b_attr_ = new ::std::string;
  }
  b_attr_->assign(value);
}
inline void tb_arena_robot::set_b_attr(const void* value, size_t size) {
  set_has_b_attr();
  if (b_attr_ == &::google::protobuf::internal::kEmptyString) {
    b_attr_ = new ::std::string;
  }
  b_attr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_arena_robot::mutable_b_attr() {
  set_has_b_attr();
  if (b_attr_ == &::google::protobuf::internal::kEmptyString) {
    b_attr_ = new ::std::string;
  }
  return b_attr_;
}
inline ::std::string* tb_arena_robot::release_b_attr() {
  clear_has_b_attr();
  if (b_attr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = b_attr_;
    b_attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_arena_robot::set_allocated_b_attr(::std::string* b_attr) {
  if (b_attr_ != &::google::protobuf::internal::kEmptyString) {
    delete b_attr_;
  }
  if (b_attr) {
    set_has_b_attr();
    b_attr_ = b_attr;
  } else {
    clear_has_b_attr();
    b_attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2etb_5farena_5frobot_2eproto__INCLUDED
