// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.t_login.proto

#ifndef PROTOBUF_mysql_2et_5flogin_2eproto__INCLUDED
#define PROTOBUF_mysql_2et_5flogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2et_5flogin_2eproto();
void protobuf_AssignDesc_mysql_2et_5flogin_2eproto();
void protobuf_ShutdownFile_mysql_2et_5flogin_2eproto();

class t_login;

// ===================================================================

class t_login : public ::google::protobuf::Message {
 public:
  t_login();
  virtual ~t_login();

  t_login(const t_login& from);

  inline t_login& operator=(const t_login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_login& default_instance();

  void Swap(t_login* other);

  // implements Message ----------------------------------------------

  t_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_login& from);
  void MergeFrom(const t_login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // required string did = 3;
  inline bool has_did() const;
  inline void clear_did();
  static const int kDidFieldNumber = 3;
  inline const ::std::string& did() const;
  inline void set_did(const ::std::string& value);
  inline void set_did(const char* value);
  inline void set_did(const char* value, size_t size);
  inline ::std::string* mutable_did();
  inline ::std::string* release_did();
  inline void set_allocated_did(::std::string* did);

  // required string accountName = 4;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 4;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // required string platform = 5;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 5;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // required string channel_id = 6;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 6;
  inline const ::std::string& channel_id() const;
  inline void set_channel_id(const ::std::string& value);
  inline void set_channel_id(const char* value);
  inline void set_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_id();
  inline ::std::string* release_channel_id();
  inline void set_allocated_channel_id(::std::string* channel_id);

  // required string appVersion = 7;
  inline bool has_appversion() const;
  inline void clear_appversion();
  static const int kAppVersionFieldNumber = 7;
  inline const ::std::string& appversion() const;
  inline void set_appversion(const ::std::string& value);
  inline void set_appversion(const char* value);
  inline void set_appversion(const char* value, size_t size);
  inline ::std::string* mutable_appversion();
  inline ::std::string* release_appversion();
  inline void set_allocated_appversion(::std::string* appversion);

  // required string appType = 8;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kAppTypeFieldNumber = 8;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required string device = 9;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 9;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // required string nm = 10;
  inline bool has_nm() const;
  inline void clear_nm();
  static const int kNmFieldNumber = 10;
  inline const ::std::string& nm() const;
  inline void set_nm(const ::std::string& value);
  inline void set_nm(const char* value);
  inline void set_nm(const char* value, size_t size);
  inline ::std::string* mutable_nm();
  inline ::std::string* release_nm();
  inline void set_allocated_nm(::std::string* nm);

  // required string mno = 11;
  inline bool has_mno() const;
  inline void clear_mno();
  static const int kMnoFieldNumber = 11;
  inline const ::std::string& mno() const;
  inline void set_mno(const ::std::string& value);
  inline void set_mno(const char* value);
  inline void set_mno(const char* value, size_t size);
  inline ::std::string* mutable_mno();
  inline ::std::string* release_mno();
  inline void set_allocated_mno(::std::string* mno);

  // required string screen = 12;
  inline bool has_screen() const;
  inline void clear_screen();
  static const int kScreenFieldNumber = 12;
  inline const ::std::string& screen() const;
  inline void set_screen(const ::std::string& value);
  inline void set_screen(const char* value);
  inline void set_screen(const char* value, size_t size);
  inline ::std::string* mutable_screen();
  inline ::std::string* release_screen();
  inline void set_allocated_screen(::std::string* screen);

  // required string os = 13;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 13;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // required string mac = 14;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 14;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  inline void set_allocated_mac(::std::string* mac);

  // required string ip = 15;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 15;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 Createtime = 16;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 16;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.t_login)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_did();
  inline void clear_has_did();
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_appversion();
  inline void clear_has_appversion();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_nm();
  inline void clear_has_nm();
  inline void set_has_mno();
  inline void clear_has_mno();
  inline void set_has_screen();
  inline void clear_has_screen();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sid_;
  ::std::string* did_;
  ::std::string* accountname_;
  ::std::string* platform_;
  ::std::string* channel_id_;
  ::std::string* appversion_;
  ::std::string* apptype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 createtime_;
  ::std::string* device_;
  ::std::string* nm_;
  ::std::string* mno_;
  ::std::string* screen_;
  ::std::string* os_;
  ::std::string* mac_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2et_5flogin_2eproto();
  friend void protobuf_AssignDesc_mysql_2et_5flogin_2eproto();
  friend void protobuf_ShutdownFile_mysql_2et_5flogin_2eproto();

  void InitAsDefaultInstance();
  static t_login* default_instance_;
};
// ===================================================================


// ===================================================================

// t_login

// required uint32 id = 1;
inline bool t_login::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_login::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_login::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_login::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 t_login::id() const {
  return id_;
}
inline void t_login::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string sid = 2;
inline bool t_login::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_login::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_login::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_login::clear_sid() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& t_login::sid() const {
  return *sid_;
}
inline void t_login::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void t_login::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void t_login::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  return sid_;
}
inline ::std::string* t_login::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string did = 3;
inline bool t_login::has_did() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_login::set_has_did() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_login::clear_has_did() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_login::clear_did() {
  if (did_ != &::google::protobuf::internal::kEmptyString) {
    did_->clear();
  }
  clear_has_did();
}
inline const ::std::string& t_login::did() const {
  return *did_;
}
inline void t_login::set_did(const ::std::string& value) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  did_->assign(value);
}
inline void t_login::set_did(const char* value) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  did_->assign(value);
}
inline void t_login::set_did(const char* value, size_t size) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  did_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_did() {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  return did_;
}
inline ::std::string* t_login::release_did() {
  clear_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = did_;
    did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_did(::std::string* did) {
  if (did_ != &::google::protobuf::internal::kEmptyString) {
    delete did_;
  }
  if (did) {
    set_has_did();
    did_ = did;
  } else {
    clear_has_did();
    did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string accountName = 4;
inline bool t_login::has_accountname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_login::set_has_accountname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_login::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_login::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& t_login::accountname() const {
  return *accountname_;
}
inline void t_login::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void t_login::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void t_login::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* t_login::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string platform = 5;
inline bool t_login::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void t_login::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
inline void t_login::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void t_login::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& t_login::platform() const {
  return *platform_;
}
inline void t_login::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void t_login::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void t_login::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* t_login::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string channel_id = 6;
inline bool t_login::has_channel_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void t_login::set_has_channel_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void t_login::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void t_login::clear_channel_id() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_id_->clear();
  }
  clear_has_channel_id();
}
inline const ::std::string& t_login::channel_id() const {
  return *channel_id_;
}
inline void t_login::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void t_login::set_channel_id(const char* value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void t_login::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_channel_id() {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  return channel_id_;
}
inline ::std::string* t_login::release_channel_id() {
  clear_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_id_;
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (channel_id) {
    set_has_channel_id();
    channel_id_ = channel_id;
  } else {
    clear_has_channel_id();
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string appVersion = 7;
inline bool t_login::has_appversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void t_login::set_has_appversion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void t_login::clear_has_appversion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void t_login::clear_appversion() {
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    appversion_->clear();
  }
  clear_has_appversion();
}
inline const ::std::string& t_login::appversion() const {
  return *appversion_;
}
inline void t_login::set_appversion(const ::std::string& value) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(value);
}
inline void t_login::set_appversion(const char* value) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(value);
}
inline void t_login::set_appversion(const char* value, size_t size) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_appversion() {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  return appversion_;
}
inline ::std::string* t_login::release_appversion() {
  clear_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appversion_;
    appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_appversion(::std::string* appversion) {
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    delete appversion_;
  }
  if (appversion) {
    set_has_appversion();
    appversion_ = appversion;
  } else {
    clear_has_appversion();
    appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string appType = 8;
inline bool t_login::has_apptype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void t_login::set_has_apptype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void t_login::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void t_login::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& t_login::apptype() const {
  return *apptype_;
}
inline void t_login::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void t_login::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void t_login::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* t_login::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string device = 9;
inline bool t_login::has_device() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void t_login::set_has_device() {
  _has_bits_[0] |= 0x00000100u;
}
inline void t_login::clear_has_device() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void t_login::clear_device() {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& t_login::device() const {
  return *device_;
}
inline void t_login::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void t_login::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void t_login::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  return device_;
}
inline ::std::string* t_login::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string nm = 10;
inline bool t_login::has_nm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void t_login::set_has_nm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void t_login::clear_has_nm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void t_login::clear_nm() {
  if (nm_ != &::google::protobuf::internal::kEmptyString) {
    nm_->clear();
  }
  clear_has_nm();
}
inline const ::std::string& t_login::nm() const {
  return *nm_;
}
inline void t_login::set_nm(const ::std::string& value) {
  set_has_nm();
  if (nm_ == &::google::protobuf::internal::kEmptyString) {
    nm_ = new ::std::string;
  }
  nm_->assign(value);
}
inline void t_login::set_nm(const char* value) {
  set_has_nm();
  if (nm_ == &::google::protobuf::internal::kEmptyString) {
    nm_ = new ::std::string;
  }
  nm_->assign(value);
}
inline void t_login::set_nm(const char* value, size_t size) {
  set_has_nm();
  if (nm_ == &::google::protobuf::internal::kEmptyString) {
    nm_ = new ::std::string;
  }
  nm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_nm() {
  set_has_nm();
  if (nm_ == &::google::protobuf::internal::kEmptyString) {
    nm_ = new ::std::string;
  }
  return nm_;
}
inline ::std::string* t_login::release_nm() {
  clear_has_nm();
  if (nm_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nm_;
    nm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_nm(::std::string* nm) {
  if (nm_ != &::google::protobuf::internal::kEmptyString) {
    delete nm_;
  }
  if (nm) {
    set_has_nm();
    nm_ = nm;
  } else {
    clear_has_nm();
    nm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string mno = 11;
inline bool t_login::has_mno() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void t_login::set_has_mno() {
  _has_bits_[0] |= 0x00000400u;
}
inline void t_login::clear_has_mno() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void t_login::clear_mno() {
  if (mno_ != &::google::protobuf::internal::kEmptyString) {
    mno_->clear();
  }
  clear_has_mno();
}
inline const ::std::string& t_login::mno() const {
  return *mno_;
}
inline void t_login::set_mno(const ::std::string& value) {
  set_has_mno();
  if (mno_ == &::google::protobuf::internal::kEmptyString) {
    mno_ = new ::std::string;
  }
  mno_->assign(value);
}
inline void t_login::set_mno(const char* value) {
  set_has_mno();
  if (mno_ == &::google::protobuf::internal::kEmptyString) {
    mno_ = new ::std::string;
  }
  mno_->assign(value);
}
inline void t_login::set_mno(const char* value, size_t size) {
  set_has_mno();
  if (mno_ == &::google::protobuf::internal::kEmptyString) {
    mno_ = new ::std::string;
  }
  mno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_mno() {
  set_has_mno();
  if (mno_ == &::google::protobuf::internal::kEmptyString) {
    mno_ = new ::std::string;
  }
  return mno_;
}
inline ::std::string* t_login::release_mno() {
  clear_has_mno();
  if (mno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mno_;
    mno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_mno(::std::string* mno) {
  if (mno_ != &::google::protobuf::internal::kEmptyString) {
    delete mno_;
  }
  if (mno) {
    set_has_mno();
    mno_ = mno;
  } else {
    clear_has_mno();
    mno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string screen = 12;
inline bool t_login::has_screen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void t_login::set_has_screen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void t_login::clear_has_screen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void t_login::clear_screen() {
  if (screen_ != &::google::protobuf::internal::kEmptyString) {
    screen_->clear();
  }
  clear_has_screen();
}
inline const ::std::string& t_login::screen() const {
  return *screen_;
}
inline void t_login::set_screen(const ::std::string& value) {
  set_has_screen();
  if (screen_ == &::google::protobuf::internal::kEmptyString) {
    screen_ = new ::std::string;
  }
  screen_->assign(value);
}
inline void t_login::set_screen(const char* value) {
  set_has_screen();
  if (screen_ == &::google::protobuf::internal::kEmptyString) {
    screen_ = new ::std::string;
  }
  screen_->assign(value);
}
inline void t_login::set_screen(const char* value, size_t size) {
  set_has_screen();
  if (screen_ == &::google::protobuf::internal::kEmptyString) {
    screen_ = new ::std::string;
  }
  screen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_screen() {
  set_has_screen();
  if (screen_ == &::google::protobuf::internal::kEmptyString) {
    screen_ = new ::std::string;
  }
  return screen_;
}
inline ::std::string* t_login::release_screen() {
  clear_has_screen();
  if (screen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = screen_;
    screen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_screen(::std::string* screen) {
  if (screen_ != &::google::protobuf::internal::kEmptyString) {
    delete screen_;
  }
  if (screen) {
    set_has_screen();
    screen_ = screen;
  } else {
    clear_has_screen();
    screen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string os = 13;
inline bool t_login::has_os() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void t_login::set_has_os() {
  _has_bits_[0] |= 0x00001000u;
}
inline void t_login::clear_has_os() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void t_login::clear_os() {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& t_login::os() const {
  return *os_;
}
inline void t_login::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void t_login::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void t_login::set_os(const char* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  return os_;
}
inline ::std::string* t_login::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string mac = 14;
inline bool t_login::has_mac() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void t_login::set_has_mac() {
  _has_bits_[0] |= 0x00002000u;
}
inline void t_login::clear_has_mac() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void t_login::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& t_login::mac() const {
  return *mac_;
}
inline void t_login::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void t_login::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void t_login::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* t_login::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_mac(::std::string* mac) {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (mac) {
    set_has_mac();
    mac_ = mac;
  } else {
    clear_has_mac();
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 15;
inline bool t_login::has_ip() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void t_login::set_has_ip() {
  _has_bits_[0] |= 0x00004000u;
}
inline void t_login::clear_has_ip() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void t_login::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& t_login::ip() const {
  return *ip_;
}
inline void t_login::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void t_login::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void t_login::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_login::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* t_login::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_login::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 Createtime = 16;
inline bool t_login::has_createtime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void t_login::set_has_createtime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void t_login::clear_has_createtime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void t_login::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 t_login::createtime() const {
  return createtime_;
}
inline void t_login::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2et_5flogin_2eproto__INCLUDED
