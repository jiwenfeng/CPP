// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.sp_login_auth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.sp_login_auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* sp_login_auth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sp_login_auth_reflection_ = NULL;
const ::google::protobuf::Descriptor* sp_login_auths_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sp_login_auths_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2esp_5flogin_5fauth_2eproto() {
  protobuf_AddDesc_mysql_2esp_5flogin_5fauth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.sp_login_auth.proto");
  GOOGLE_CHECK(file != NULL);
  sp_login_auth_descriptor_ = file->message_type(0);
  static const int sp_login_auth_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, v_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, v_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, v_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, v_prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, v_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, p_openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, p_yel_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, p_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, p_agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, p_client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, v_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, v_fighting_power_),
  };
  sp_login_auth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sp_login_auth_descriptor_,
      sp_login_auth::default_instance_,
      sp_login_auth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sp_login_auth));
  sp_login_auths_descriptor_ = file->message_type(1);
  static const int sp_login_auths_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auths, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auths, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auths, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auths, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auths, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auths, fighting_power_),
  };
  sp_login_auths_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sp_login_auths_descriptor_,
      sp_login_auths::default_instance_,
      sp_login_auths_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auths, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_login_auths, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sp_login_auths));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2esp_5flogin_5fauth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sp_login_auth_descriptor_, &sp_login_auth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sp_login_auths_descriptor_, &sp_login_auths::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2esp_5flogin_5fauth_2eproto() {
  delete sp_login_auth::default_instance_;
  delete sp_login_auth_reflection_;
  delete sp_login_auths::default_instance_;
  delete sp_login_auths_reflection_;
}

void protobuf_AddDesc_mysql_2esp_5flogin_5fauth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031mysql.sp_login_auth.proto\022\005mysql\"\362\001\n\rs"
    "p_login_auth\022\021\n\tv_user_id\030\001 \002(\r\022\021\n\tv_rol"
    "e_id\030\002 \002(\r\022\r\n\005v_sex\030\003 \002(\r\022\016\n\006v_prof\030\004 \002("
    "\r\022\016\n\006v_name\030\005 \002(\t\022\020\n\010p_openid\030\006 \002(\t\022\021\n\tp"
    "_yel_vip\030\007 \002(\r\022\023\n\013p_server_id\030\010 \002(\r\022\022\n\np"
    "_agent_id\030\t \002(\r\022\023\n\013p_client_id\030\n \002(\r\022\017\n\007"
    "v_level\030\013 \002(\r\022\030\n\020v_fighting_power\030\014 \002(\r\""
    "|\n\016sp_login_auths\022\017\n\007role_id\030\001 \002(\t\022\021\n\tro"
    "le_name\030\002 \002(\t\022\013\n\003sex\030\003 \002(\t\022\022\n\nprofession"
    "\030\004 \002(\t\022\r\n\005level\030\005 \002(\t\022\026\n\016fighting_power\030"
    "\006 \002(\t", 405);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.sp_login_auth.proto", &protobuf_RegisterTypes);
  sp_login_auth::default_instance_ = new sp_login_auth();
  sp_login_auths::default_instance_ = new sp_login_auths();
  sp_login_auth::default_instance_->InitAsDefaultInstance();
  sp_login_auths::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2esp_5flogin_5fauth_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2esp_5flogin_5fauth_2eproto {
  StaticDescriptorInitializer_mysql_2esp_5flogin_5fauth_2eproto() {
    protobuf_AddDesc_mysql_2esp_5flogin_5fauth_2eproto();
  }
} static_descriptor_initializer_mysql_2esp_5flogin_5fauth_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int sp_login_auth::kVUserIdFieldNumber;
const int sp_login_auth::kVRoleIdFieldNumber;
const int sp_login_auth::kVSexFieldNumber;
const int sp_login_auth::kVProfFieldNumber;
const int sp_login_auth::kVNameFieldNumber;
const int sp_login_auth::kPOpenidFieldNumber;
const int sp_login_auth::kPYelVipFieldNumber;
const int sp_login_auth::kPServerIdFieldNumber;
const int sp_login_auth::kPAgentIdFieldNumber;
const int sp_login_auth::kPClientIdFieldNumber;
const int sp_login_auth::kVLevelFieldNumber;
const int sp_login_auth::kVFightingPowerFieldNumber;
#endif  // !_MSC_VER

sp_login_auth::sp_login_auth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sp_login_auth::InitAsDefaultInstance() {
}

sp_login_auth::sp_login_auth(const sp_login_auth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sp_login_auth::SharedCtor() {
  _cached_size_ = 0;
  v_user_id_ = 0u;
  v_role_id_ = 0u;
  v_sex_ = 0u;
  v_prof_ = 0u;
  v_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  p_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  p_yel_vip_ = 0u;
  p_server_id_ = 0u;
  p_agent_id_ = 0u;
  p_client_id_ = 0u;
  v_level_ = 0u;
  v_fighting_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sp_login_auth::~sp_login_auth() {
  SharedDtor();
}

void sp_login_auth::SharedDtor() {
  if (v_name_ != &::google::protobuf::internal::kEmptyString) {
    delete v_name_;
  }
  if (p_openid_ != &::google::protobuf::internal::kEmptyString) {
    delete p_openid_;
  }
  if (this != default_instance_) {
  }
}

void sp_login_auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sp_login_auth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sp_login_auth_descriptor_;
}

const sp_login_auth& sp_login_auth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2esp_5flogin_5fauth_2eproto();
  return *default_instance_;
}

sp_login_auth* sp_login_auth::default_instance_ = NULL;

sp_login_auth* sp_login_auth::New() const {
  return new sp_login_auth;
}

void sp_login_auth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v_user_id_ = 0u;
    v_role_id_ = 0u;
    v_sex_ = 0u;
    v_prof_ = 0u;
    if (has_v_name()) {
      if (v_name_ != &::google::protobuf::internal::kEmptyString) {
        v_name_->clear();
      }
    }
    if (has_p_openid()) {
      if (p_openid_ != &::google::protobuf::internal::kEmptyString) {
        p_openid_->clear();
      }
    }
    p_yel_vip_ = 0u;
    p_server_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    p_agent_id_ = 0u;
    p_client_id_ = 0u;
    v_level_ = 0u;
    v_fighting_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sp_login_auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 v_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_user_id_)));
          set_has_v_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_v_role_id;
        break;
      }

      // required uint32 v_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_role_id_)));
          set_has_v_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_v_sex;
        break;
      }

      // required uint32 v_sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_sex_)));
          set_has_v_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_v_prof;
        break;
      }

      // required uint32 v_prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_prof_)));
          set_has_v_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_v_name;
        break;
      }

      // required string v_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_name().data(), this->v_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_p_openid;
        break;
      }

      // required string p_openid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_p_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->p_openid().data(), this->p_openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_p_yel_vip;
        break;
      }

      // required uint32 p_yel_vip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p_yel_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p_yel_vip_)));
          set_has_p_yel_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_p_server_id;
        break;
      }

      // required uint32 p_server_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p_server_id_)));
          set_has_p_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_p_agent_id;
        break;
      }

      // required uint32 p_agent_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p_agent_id_)));
          set_has_p_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_p_client_id;
        break;
      }

      // required uint32 p_client_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p_client_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p_client_id_)));
          set_has_p_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_v_level;
        break;
      }

      // required uint32 v_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_level_)));
          set_has_v_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_v_fighting_power;
        break;
      }

      // required uint32 v_fighting_power = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_fighting_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_fighting_power_)));
          set_has_v_fighting_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sp_login_auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 v_user_id = 1;
  if (has_v_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->v_user_id(), output);
  }

  // required uint32 v_role_id = 2;
  if (has_v_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->v_role_id(), output);
  }

  // required uint32 v_sex = 3;
  if (has_v_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->v_sex(), output);
  }

  // required uint32 v_prof = 4;
  if (has_v_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->v_prof(), output);
  }

  // required string v_name = 5;
  if (has_v_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_name().data(), this->v_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->v_name(), output);
  }

  // required string p_openid = 6;
  if (has_p_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->p_openid().data(), this->p_openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->p_openid(), output);
  }

  // required uint32 p_yel_vip = 7;
  if (has_p_yel_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->p_yel_vip(), output);
  }

  // required uint32 p_server_id = 8;
  if (has_p_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->p_server_id(), output);
  }

  // required uint32 p_agent_id = 9;
  if (has_p_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->p_agent_id(), output);
  }

  // required uint32 p_client_id = 10;
  if (has_p_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->p_client_id(), output);
  }

  // required uint32 v_level = 11;
  if (has_v_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->v_level(), output);
  }

  // required uint32 v_fighting_power = 12;
  if (has_v_fighting_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->v_fighting_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sp_login_auth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 v_user_id = 1;
  if (has_v_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->v_user_id(), target);
  }

  // required uint32 v_role_id = 2;
  if (has_v_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->v_role_id(), target);
  }

  // required uint32 v_sex = 3;
  if (has_v_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->v_sex(), target);
  }

  // required uint32 v_prof = 4;
  if (has_v_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->v_prof(), target);
  }

  // required string v_name = 5;
  if (has_v_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_name().data(), this->v_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->v_name(), target);
  }

  // required string p_openid = 6;
  if (has_p_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->p_openid().data(), this->p_openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->p_openid(), target);
  }

  // required uint32 p_yel_vip = 7;
  if (has_p_yel_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->p_yel_vip(), target);
  }

  // required uint32 p_server_id = 8;
  if (has_p_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->p_server_id(), target);
  }

  // required uint32 p_agent_id = 9;
  if (has_p_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->p_agent_id(), target);
  }

  // required uint32 p_client_id = 10;
  if (has_p_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->p_client_id(), target);
  }

  // required uint32 v_level = 11;
  if (has_v_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->v_level(), target);
  }

  // required uint32 v_fighting_power = 12;
  if (has_v_fighting_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->v_fighting_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sp_login_auth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 v_user_id = 1;
    if (has_v_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_user_id());
    }

    // required uint32 v_role_id = 2;
    if (has_v_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_role_id());
    }

    // required uint32 v_sex = 3;
    if (has_v_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_sex());
    }

    // required uint32 v_prof = 4;
    if (has_v_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_prof());
    }

    // required string v_name = 5;
    if (has_v_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_name());
    }

    // required string p_openid = 6;
    if (has_p_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->p_openid());
    }

    // required uint32 p_yel_vip = 7;
    if (has_p_yel_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p_yel_vip());
    }

    // required uint32 p_server_id = 8;
    if (has_p_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p_server_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 p_agent_id = 9;
    if (has_p_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p_agent_id());
    }

    // required uint32 p_client_id = 10;
    if (has_p_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p_client_id());
    }

    // required uint32 v_level = 11;
    if (has_v_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_level());
    }

    // required uint32 v_fighting_power = 12;
    if (has_v_fighting_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_fighting_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sp_login_auth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sp_login_auth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sp_login_auth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sp_login_auth::MergeFrom(const sp_login_auth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v_user_id()) {
      set_v_user_id(from.v_user_id());
    }
    if (from.has_v_role_id()) {
      set_v_role_id(from.v_role_id());
    }
    if (from.has_v_sex()) {
      set_v_sex(from.v_sex());
    }
    if (from.has_v_prof()) {
      set_v_prof(from.v_prof());
    }
    if (from.has_v_name()) {
      set_v_name(from.v_name());
    }
    if (from.has_p_openid()) {
      set_p_openid(from.p_openid());
    }
    if (from.has_p_yel_vip()) {
      set_p_yel_vip(from.p_yel_vip());
    }
    if (from.has_p_server_id()) {
      set_p_server_id(from.p_server_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_p_agent_id()) {
      set_p_agent_id(from.p_agent_id());
    }
    if (from.has_p_client_id()) {
      set_p_client_id(from.p_client_id());
    }
    if (from.has_v_level()) {
      set_v_level(from.v_level());
    }
    if (from.has_v_fighting_power()) {
      set_v_fighting_power(from.v_fighting_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sp_login_auth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sp_login_auth::CopyFrom(const sp_login_auth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sp_login_auth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void sp_login_auth::Swap(sp_login_auth* other) {
  if (other != this) {
    std::swap(v_user_id_, other->v_user_id_);
    std::swap(v_role_id_, other->v_role_id_);
    std::swap(v_sex_, other->v_sex_);
    std::swap(v_prof_, other->v_prof_);
    std::swap(v_name_, other->v_name_);
    std::swap(p_openid_, other->p_openid_);
    std::swap(p_yel_vip_, other->p_yel_vip_);
    std::swap(p_server_id_, other->p_server_id_);
    std::swap(p_agent_id_, other->p_agent_id_);
    std::swap(p_client_id_, other->p_client_id_);
    std::swap(v_level_, other->v_level_);
    std::swap(v_fighting_power_, other->v_fighting_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sp_login_auth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sp_login_auth_descriptor_;
  metadata.reflection = sp_login_auth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sp_login_auths::kRoleIdFieldNumber;
const int sp_login_auths::kRoleNameFieldNumber;
const int sp_login_auths::kSexFieldNumber;
const int sp_login_auths::kProfessionFieldNumber;
const int sp_login_auths::kLevelFieldNumber;
const int sp_login_auths::kFightingPowerFieldNumber;
#endif  // !_MSC_VER

sp_login_auths::sp_login_auths()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sp_login_auths::InitAsDefaultInstance() {
}

sp_login_auths::sp_login_auths(const sp_login_auths& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sp_login_auths::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fighting_power_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sp_login_auths::~sp_login_auths() {
  SharedDtor();
}

void sp_login_auths::SharedDtor() {
  if (role_id_ != &::google::protobuf::internal::kEmptyString) {
    delete role_id_;
  }
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    delete profession_;
  }
  if (level_ != &::google::protobuf::internal::kEmptyString) {
    delete level_;
  }
  if (fighting_power_ != &::google::protobuf::internal::kEmptyString) {
    delete fighting_power_;
  }
  if (this != default_instance_) {
  }
}

void sp_login_auths::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sp_login_auths::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sp_login_auths_descriptor_;
}

const sp_login_auths& sp_login_auths::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2esp_5flogin_5fauth_2eproto();
  return *default_instance_;
}

sp_login_auths* sp_login_auths::default_instance_ = NULL;

sp_login_auths* sp_login_auths::New() const {
  return new sp_login_auths;
}

void sp_login_auths::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_id()) {
      if (role_id_ != &::google::protobuf::internal::kEmptyString) {
        role_id_->clear();
      }
    }
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_sex()) {
      if (sex_ != &::google::protobuf::internal::kEmptyString) {
        sex_->clear();
      }
    }
    if (has_profession()) {
      if (profession_ != &::google::protobuf::internal::kEmptyString) {
        profession_->clear();
      }
    }
    if (has_level()) {
      if (level_ != &::google::protobuf::internal::kEmptyString) {
        level_->clear();
      }
    }
    if (has_fighting_power()) {
      if (fighting_power_ != &::google::protobuf::internal::kEmptyString) {
        fighting_power_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sp_login_auths::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_id().data(), this->role_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // required string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sex;
        break;
      }

      // required string sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sex().data(), this->sex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_profession;
        break;
      }

      // required string profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profession().data(), this->profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_level;
        break;
      }

      // required string level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->level().data(), this->level().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fighting_power;
        break;
      }

      // required string fighting_power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fighting_power:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fighting_power()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fighting_power().data(), this->fighting_power().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sp_login_auths::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_id().data(), this->role_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->role_id(), output);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // required string sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sex(), output);
  }

  // required string profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->profession(), output);
  }

  // required string level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->level().data(), this->level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->level(), output);
  }

  // required string fighting_power = 6;
  if (has_fighting_power()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fighting_power().data(), this->fighting_power().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fighting_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sp_login_auths::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_id().data(), this->role_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role_id(), target);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // required string sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sex(), target);
  }

  // required string profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->profession(), target);
  }

  // required string level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->level().data(), this->level().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->level(), target);
  }

  // required string fighting_power = 6;
  if (has_fighting_power()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fighting_power().data(), this->fighting_power().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fighting_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sp_login_auths::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_id());
    }

    // required string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // required string sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sex());
    }

    // required string profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profession());
    }

    // required string level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->level());
    }

    // required string fighting_power = 6;
    if (has_fighting_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fighting_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sp_login_auths::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sp_login_auths* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sp_login_auths*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sp_login_auths::MergeFrom(const sp_login_auths& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fighting_power()) {
      set_fighting_power(from.fighting_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sp_login_auths::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sp_login_auths::CopyFrom(const sp_login_auths& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sp_login_auths::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void sp_login_auths::Swap(sp_login_auths* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(sex_, other->sex_);
    std::swap(profession_, other->profession_);
    std::swap(level_, other->level_);
    std::swap(fighting_power_, other->fighting_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sp_login_auths::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sp_login_auths_descriptor_;
  metadata.reflection = sp_login_auths_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
