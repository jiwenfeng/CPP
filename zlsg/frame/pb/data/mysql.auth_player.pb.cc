// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.auth_player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.auth_player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* auth_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auth_player_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2eauth_5fplayer_2eproto() {
  protobuf_AddDesc_mysql_2eauth_5fplayer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.auth_player.proto");
  GOOGLE_CHECK(file != NULL);
  auth_player_descriptor_ = file->message_type(0);
  static const int auth_player_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_player, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_player, pr_),
  };
  auth_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auth_player_descriptor_,
      auth_player::default_instance_,
      auth_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auth_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auth_player));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2eauth_5fplayer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auth_player_descriptor_, &auth_player::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2eauth_5fplayer_2eproto() {
  delete auth_player::default_instance_;
  delete auth_player_reflection_;
}

void protobuf_AddDesc_mysql_2eauth_5fplayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mysql::protobuf_AddDesc_mysql_2etb_5fplayer_2eproto();
  ::mysql::protobuf_AddDesc_mysql_2etb_5fplayer_5frole_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027mysql.auth_player.proto\022\005mysql\032\025mysql."
    "tb_player.proto\032\032mysql.tb_player_role.pr"
    "oto\"M\n\013auth_player\022\033\n\001p\030\001 \002(\0132\020.mysql.tb"
    "_player\022!\n\002pr\030\002 \001(\0132\025.mysql.tb_player_ro"
    "le", 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.auth_player.proto", &protobuf_RegisterTypes);
  auth_player::default_instance_ = new auth_player();
  auth_player::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2eauth_5fplayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2eauth_5fplayer_2eproto {
  StaticDescriptorInitializer_mysql_2eauth_5fplayer_2eproto() {
    protobuf_AddDesc_mysql_2eauth_5fplayer_2eproto();
  }
} static_descriptor_initializer_mysql_2eauth_5fplayer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int auth_player::kPFieldNumber;
const int auth_player::kPrFieldNumber;
#endif  // !_MSC_VER

auth_player::auth_player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void auth_player::InitAsDefaultInstance() {
  p_ = const_cast< ::mysql::tb_player*>(&::mysql::tb_player::default_instance());
  pr_ = const_cast< ::mysql::tb_player_role*>(&::mysql::tb_player_role::default_instance());
}

auth_player::auth_player(const auth_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void auth_player::SharedCtor() {
  _cached_size_ = 0;
  p_ = NULL;
  pr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auth_player::~auth_player() {
  SharedDtor();
}

void auth_player::SharedDtor() {
  if (this != default_instance_) {
    delete p_;
    delete pr_;
  }
}

void auth_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auth_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auth_player_descriptor_;
}

const auth_player& auth_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2eauth_5fplayer_2eproto();
  return *default_instance_;
}

auth_player* auth_player::default_instance_ = NULL;

auth_player* auth_player::New() const {
  return new auth_player;
}

void auth_player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_p()) {
      if (p_ != NULL) p_->::mysql::tb_player::Clear();
    }
    if (has_pr()) {
      if (pr_ != NULL) pr_->::mysql::tb_player_role::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auth_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mysql.tb_player p = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pr;
        break;
      }

      // optional .mysql.tb_player_role pr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void auth_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mysql.tb_player p = 1;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->p(), output);
  }

  // optional .mysql.tb_player_role pr = 2;
  if (has_pr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* auth_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mysql.tb_player p = 1;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->p(), target);
  }

  // optional .mysql.tb_player_role pr = 2;
  if (has_pr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int auth_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mysql.tb_player p = 1;
    if (has_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p());
    }

    // optional .mysql.tb_player_role pr = 2;
    if (has_pr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auth_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auth_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auth_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auth_player::MergeFrom(const auth_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_p()) {
      mutable_p()->::mysql::tb_player::MergeFrom(from.p());
    }
    if (from.has_pr()) {
      mutable_pr()->::mysql::tb_player_role::MergeFrom(from.pr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auth_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auth_player::CopyFrom(const auth_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auth_player::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_p()) {
    if (!this->p().IsInitialized()) return false;
  }
  if (has_pr()) {
    if (!this->pr().IsInitialized()) return false;
  }
  return true;
}

void auth_player::Swap(auth_player* other) {
  if (other != this) {
    std::swap(p_, other->p_);
    std::swap(pr_, other->pr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auth_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auth_player_descriptor_;
  metadata.reflection = auth_player_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
