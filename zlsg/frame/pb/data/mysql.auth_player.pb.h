// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.auth_player.proto

#ifndef PROTOBUF_mysql_2eauth_5fplayer_2eproto__INCLUDED
#define PROTOBUF_mysql_2eauth_5fplayer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "mysql.tb_player.pb.h"
#include "mysql.tb_player_role.pb.h"
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2eauth_5fplayer_2eproto();
void protobuf_AssignDesc_mysql_2eauth_5fplayer_2eproto();
void protobuf_ShutdownFile_mysql_2eauth_5fplayer_2eproto();

class auth_player;

// ===================================================================

class auth_player : public ::google::protobuf::Message {
 public:
  auth_player();
  virtual ~auth_player();

  auth_player(const auth_player& from);

  inline auth_player& operator=(const auth_player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const auth_player& default_instance();

  void Swap(auth_player* other);

  // implements Message ----------------------------------------------

  auth_player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const auth_player& from);
  void MergeFrom(const auth_player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mysql.tb_player p = 1;
  inline bool has_p() const;
  inline void clear_p();
  static const int kPFieldNumber = 1;
  inline const ::mysql::tb_player& p() const;
  inline ::mysql::tb_player* mutable_p();
  inline ::mysql::tb_player* release_p();
  inline void set_allocated_p(::mysql::tb_player* p);

  // optional .mysql.tb_player_role pr = 2;
  inline bool has_pr() const;
  inline void clear_pr();
  static const int kPrFieldNumber = 2;
  inline const ::mysql::tb_player_role& pr() const;
  inline ::mysql::tb_player_role* mutable_pr();
  inline ::mysql::tb_player_role* release_pr();
  inline void set_allocated_pr(::mysql::tb_player_role* pr);

  // @@protoc_insertion_point(class_scope:mysql.auth_player)
 private:
  inline void set_has_p();
  inline void clear_has_p();
  inline void set_has_pr();
  inline void clear_has_pr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mysql::tb_player* p_;
  ::mysql::tb_player_role* pr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2eauth_5fplayer_2eproto();
  friend void protobuf_AssignDesc_mysql_2eauth_5fplayer_2eproto();
  friend void protobuf_ShutdownFile_mysql_2eauth_5fplayer_2eproto();

  void InitAsDefaultInstance();
  static auth_player* default_instance_;
};
// ===================================================================


// ===================================================================

// auth_player

// required .mysql.tb_player p = 1;
inline bool auth_player::has_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void auth_player::set_has_p() {
  _has_bits_[0] |= 0x00000001u;
}
inline void auth_player::clear_has_p() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void auth_player::clear_p() {
  if (p_ != NULL) p_->::mysql::tb_player::Clear();
  clear_has_p();
}
inline const ::mysql::tb_player& auth_player::p() const {
  return p_ != NULL ? *p_ : *default_instance_->p_;
}
inline ::mysql::tb_player* auth_player::mutable_p() {
  set_has_p();
  if (p_ == NULL) p_ = new ::mysql::tb_player;
  return p_;
}
inline ::mysql::tb_player* auth_player::release_p() {
  clear_has_p();
  ::mysql::tb_player* temp = p_;
  p_ = NULL;
  return temp;
}
inline void auth_player::set_allocated_p(::mysql::tb_player* p) {
  delete p_;
  p_ = p;
  if (p) {
    set_has_p();
  } else {
    clear_has_p();
  }
}

// optional .mysql.tb_player_role pr = 2;
inline bool auth_player::has_pr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void auth_player::set_has_pr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void auth_player::clear_has_pr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void auth_player::clear_pr() {
  if (pr_ != NULL) pr_->::mysql::tb_player_role::Clear();
  clear_has_pr();
}
inline const ::mysql::tb_player_role& auth_player::pr() const {
  return pr_ != NULL ? *pr_ : *default_instance_->pr_;
}
inline ::mysql::tb_player_role* auth_player::mutable_pr() {
  set_has_pr();
  if (pr_ == NULL) pr_ = new ::mysql::tb_player_role;
  return pr_;
}
inline ::mysql::tb_player_role* auth_player::release_pr() {
  clear_has_pr();
  ::mysql::tb_player_role* temp = pr_;
  pr_ = NULL;
  return temp;
}
inline void auth_player::set_allocated_pr(::mysql::tb_player_role* pr) {
  delete pr_;
  pr_ = pr;
  if (pr) {
    set_has_pr();
  } else {
    clear_has_pr();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2eauth_5fplayer_2eproto__INCLUDED
