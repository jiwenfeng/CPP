// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_family_skill.proto

#ifndef PROTOBUF_mysql_2etb_5ffamily_5fskill_2eproto__INCLUDED
#define PROTOBUF_mysql_2etb_5ffamily_5fskill_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2etb_5ffamily_5fskill_2eproto();
void protobuf_AssignDesc_mysql_2etb_5ffamily_5fskill_2eproto();
void protobuf_ShutdownFile_mysql_2etb_5ffamily_5fskill_2eproto();

class tb_family_skill;

// ===================================================================

class tb_family_skill : public ::google::protobuf::Message {
 public:
  tb_family_skill();
  virtual ~tb_family_skill();

  tb_family_skill(const tb_family_skill& from);

  inline tb_family_skill& operator=(const tb_family_skill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_family_skill& default_instance();

  void Swap(tb_family_skill* other);

  // implements Message ----------------------------------------------

  tb_family_skill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tb_family_skill& from);
  void MergeFrom(const tb_family_skill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 family_id = 1;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 1;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required bytes skills = 2;
  inline bool has_skills() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 2;
  inline const ::std::string& skills() const;
  inline void set_skills(const ::std::string& value);
  inline void set_skills(const char* value);
  inline void set_skills(const void* value, size_t size);
  inline ::std::string* mutable_skills();
  inline ::std::string* release_skills();
  inline void set_allocated_skills(::std::string* skills);

  // @@protoc_insertion_point(class_scope:mysql.tb_family_skill)
 private:
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_skills();
  inline void clear_has_skills();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* skills_;
  ::google::protobuf::uint32 family_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2etb_5ffamily_5fskill_2eproto();
  friend void protobuf_AssignDesc_mysql_2etb_5ffamily_5fskill_2eproto();
  friend void protobuf_ShutdownFile_mysql_2etb_5ffamily_5fskill_2eproto();

  void InitAsDefaultInstance();
  static tb_family_skill* default_instance_;
};
// ===================================================================


// ===================================================================

// tb_family_skill

// required uint32 family_id = 1;
inline bool tb_family_skill::has_family_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_family_skill::set_has_family_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_family_skill::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_family_skill::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 tb_family_skill::family_id() const {
  return family_id_;
}
inline void tb_family_skill::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required bytes skills = 2;
inline bool tb_family_skill::has_skills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_family_skill::set_has_skills() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_family_skill::clear_has_skills() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_family_skill::clear_skills() {
  if (skills_ != &::google::protobuf::internal::kEmptyString) {
    skills_->clear();
  }
  clear_has_skills();
}
inline const ::std::string& tb_family_skill::skills() const {
  return *skills_;
}
inline void tb_family_skill::set_skills(const ::std::string& value) {
  set_has_skills();
  if (skills_ == &::google::protobuf::internal::kEmptyString) {
    skills_ = new ::std::string;
  }
  skills_->assign(value);
}
inline void tb_family_skill::set_skills(const char* value) {
  set_has_skills();
  if (skills_ == &::google::protobuf::internal::kEmptyString) {
    skills_ = new ::std::string;
  }
  skills_->assign(value);
}
inline void tb_family_skill::set_skills(const void* value, size_t size) {
  set_has_skills();
  if (skills_ == &::google::protobuf::internal::kEmptyString) {
    skills_ = new ::std::string;
  }
  skills_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_family_skill::mutable_skills() {
  set_has_skills();
  if (skills_ == &::google::protobuf::internal::kEmptyString) {
    skills_ = new ::std::string;
  }
  return skills_;
}
inline ::std::string* tb_family_skill::release_skills() {
  clear_has_skills();
  if (skills_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skills_;
    skills_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_family_skill::set_allocated_skills(::std::string* skills) {
  if (skills_ != &::google::protobuf::internal::kEmptyString) {
    delete skills_;
  }
  if (skills) {
    set_has_skills();
    skills_ = skills;
  } else {
    clear_has_skills();
    skills_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2etb_5ffamily_5fskill_2eproto__INCLUDED
