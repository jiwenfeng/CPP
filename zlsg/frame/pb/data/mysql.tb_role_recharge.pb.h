// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_role_recharge.proto

#ifndef PROTOBUF_mysql_2etb_5frole_5frecharge_2eproto__INCLUDED
#define PROTOBUF_mysql_2etb_5frole_5frecharge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2etb_5frole_5frecharge_2eproto();
void protobuf_AssignDesc_mysql_2etb_5frole_5frecharge_2eproto();
void protobuf_ShutdownFile_mysql_2etb_5frole_5frecharge_2eproto();

class tb_role_recharge;

// ===================================================================

class tb_role_recharge : public ::google::protobuf::Message {
 public:
  tb_role_recharge();
  virtual ~tb_role_recharge();

  tb_role_recharge(const tb_role_recharge& from);

  inline tb_role_recharge& operator=(const tb_role_recharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_role_recharge& default_instance();

  void Swap(tb_role_recharge* other);

  // implements Message ----------------------------------------------

  tb_role_recharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tb_role_recharge& from);
  void MergeFrom(const tb_role_recharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string openid = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required string openkey = 3;
  inline bool has_openkey() const;
  inline void clear_openkey();
  static const int kOpenkeyFieldNumber = 3;
  inline const ::std::string& openkey() const;
  inline void set_openkey(const ::std::string& value);
  inline void set_openkey(const char* value);
  inline void set_openkey(const char* value, size_t size);
  inline ::std::string* mutable_openkey();
  inline ::std::string* release_openkey();
  inline void set_allocated_openkey(::std::string* openkey);

  // required string pf = 4;
  inline bool has_pf() const;
  inline void clear_pf();
  static const int kPfFieldNumber = 4;
  inline const ::std::string& pf() const;
  inline void set_pf(const ::std::string& value);
  inline void set_pf(const char* value);
  inline void set_pf(const char* value, size_t size);
  inline ::std::string* mutable_pf();
  inline ::std::string* release_pf();
  inline void set_allocated_pf(::std::string* pf);

  // required uint32 ts = 5;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 5;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // required string payitem = 6;
  inline bool has_payitem() const;
  inline void clear_payitem();
  static const int kPayitemFieldNumber = 6;
  inline const ::std::string& payitem() const;
  inline void set_payitem(const ::std::string& value);
  inline void set_payitem(const char* value);
  inline void set_payitem(const char* value, size_t size);
  inline ::std::string* mutable_payitem();
  inline ::std::string* release_payitem();
  inline void set_allocated_payitem(::std::string* payitem);

  // required string token = 7;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 7;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required string billno = 8;
  inline bool has_billno() const;
  inline void clear_billno();
  static const int kBillnoFieldNumber = 8;
  inline const ::std::string& billno() const;
  inline void set_billno(const ::std::string& value);
  inline void set_billno(const char* value);
  inline void set_billno(const char* value, size_t size);
  inline ::std::string* mutable_billno();
  inline ::std::string* release_billno();
  inline void set_allocated_billno(::std::string* billno);

  // required uint32 zoneid = 9;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 9;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 providetype = 10;
  inline bool has_providetype() const;
  inline void clear_providetype();
  static const int kProvidetypeFieldNumber = 10;
  inline ::google::protobuf::uint32 providetype() const;
  inline void set_providetype(::google::protobuf::uint32 value);

  // required uint32 amt = 11;
  inline bool has_amt() const;
  inline void clear_amt();
  static const int kAmtFieldNumber = 11;
  inline ::google::protobuf::uint32 amt() const;
  inline void set_amt(::google::protobuf::uint32 value);

  // required uint32 payamt_coins = 12;
  inline bool has_payamt_coins() const;
  inline void clear_payamt_coins();
  static const int kPayamtCoinsFieldNumber = 12;
  inline ::google::protobuf::uint32 payamt_coins() const;
  inline void set_payamt_coins(::google::protobuf::uint32 value);

  // required uint32 pubacct_payamt_coins = 13;
  inline bool has_pubacct_payamt_coins() const;
  inline void clear_pubacct_payamt_coins();
  static const int kPubacctPayamtCoinsFieldNumber = 13;
  inline ::google::protobuf::uint32 pubacct_payamt_coins() const;
  inline void set_pubacct_payamt_coins(::google::protobuf::uint32 value);

  // required uint32 state = 14;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 14;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.tb_role_recharge)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_openkey();
  inline void clear_has_openkey();
  inline void set_has_pf();
  inline void clear_has_pf();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_payitem();
  inline void clear_has_payitem();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_billno();
  inline void clear_has_billno();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_providetype();
  inline void clear_has_providetype();
  inline void set_has_amt();
  inline void clear_has_amt();
  inline void set_has_payamt_coins();
  inline void clear_has_payamt_coins();
  inline void set_has_pubacct_payamt_coins();
  inline void clear_has_pubacct_payamt_coins();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::std::string* openkey_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 ts_;
  ::std::string* pf_;
  ::std::string* payitem_;
  ::std::string* token_;
  ::std::string* billno_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 providetype_;
  ::google::protobuf::uint32 amt_;
  ::google::protobuf::uint32 payamt_coins_;
  ::google::protobuf::uint32 pubacct_payamt_coins_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2etb_5frole_5frecharge_2eproto();
  friend void protobuf_AssignDesc_mysql_2etb_5frole_5frecharge_2eproto();
  friend void protobuf_ShutdownFile_mysql_2etb_5frole_5frecharge_2eproto();

  void InitAsDefaultInstance();
  static tb_role_recharge* default_instance_;
};
// ===================================================================


// ===================================================================

// tb_role_recharge

// required uint32 id = 1;
inline bool tb_role_recharge::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_role_recharge::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_role_recharge::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_role_recharge::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 tb_role_recharge::id() const {
  return id_;
}
inline void tb_role_recharge::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string openid = 2;
inline bool tb_role_recharge::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_role_recharge::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_role_recharge::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_role_recharge::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& tb_role_recharge::openid() const {
  return *openid_;
}
inline void tb_role_recharge::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void tb_role_recharge::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void tb_role_recharge::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_recharge::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* tb_role_recharge::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_recharge::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string openkey = 3;
inline bool tb_role_recharge::has_openkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_role_recharge::set_has_openkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_role_recharge::clear_has_openkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_role_recharge::clear_openkey() {
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    openkey_->clear();
  }
  clear_has_openkey();
}
inline const ::std::string& tb_role_recharge::openkey() const {
  return *openkey_;
}
inline void tb_role_recharge::set_openkey(const ::std::string& value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
}
inline void tb_role_recharge::set_openkey(const char* value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
}
inline void tb_role_recharge::set_openkey(const char* value, size_t size) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_recharge::mutable_openkey() {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  return openkey_;
}
inline ::std::string* tb_role_recharge::release_openkey() {
  clear_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openkey_;
    openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_recharge::set_allocated_openkey(::std::string* openkey) {
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete openkey_;
  }
  if (openkey) {
    set_has_openkey();
    openkey_ = openkey;
  } else {
    clear_has_openkey();
    openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pf = 4;
inline bool tb_role_recharge::has_pf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tb_role_recharge::set_has_pf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tb_role_recharge::clear_has_pf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tb_role_recharge::clear_pf() {
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    pf_->clear();
  }
  clear_has_pf();
}
inline const ::std::string& tb_role_recharge::pf() const {
  return *pf_;
}
inline void tb_role_recharge::set_pf(const ::std::string& value) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(value);
}
inline void tb_role_recharge::set_pf(const char* value) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(value);
}
inline void tb_role_recharge::set_pf(const char* value, size_t size) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_recharge::mutable_pf() {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  return pf_;
}
inline ::std::string* tb_role_recharge::release_pf() {
  clear_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pf_;
    pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_recharge::set_allocated_pf(::std::string* pf) {
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    delete pf_;
  }
  if (pf) {
    set_has_pf();
    pf_ = pf;
  } else {
    clear_has_pf();
    pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 ts = 5;
inline bool tb_role_recharge::has_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tb_role_recharge::set_has_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tb_role_recharge::clear_has_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tb_role_recharge::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 tb_role_recharge::ts() const {
  return ts_;
}
inline void tb_role_recharge::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
}

// required string payitem = 6;
inline bool tb_role_recharge::has_payitem() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tb_role_recharge::set_has_payitem() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tb_role_recharge::clear_has_payitem() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tb_role_recharge::clear_payitem() {
  if (payitem_ != &::google::protobuf::internal::kEmptyString) {
    payitem_->clear();
  }
  clear_has_payitem();
}
inline const ::std::string& tb_role_recharge::payitem() const {
  return *payitem_;
}
inline void tb_role_recharge::set_payitem(const ::std::string& value) {
  set_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    payitem_ = new ::std::string;
  }
  payitem_->assign(value);
}
inline void tb_role_recharge::set_payitem(const char* value) {
  set_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    payitem_ = new ::std::string;
  }
  payitem_->assign(value);
}
inline void tb_role_recharge::set_payitem(const char* value, size_t size) {
  set_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    payitem_ = new ::std::string;
  }
  payitem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_recharge::mutable_payitem() {
  set_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    payitem_ = new ::std::string;
  }
  return payitem_;
}
inline ::std::string* tb_role_recharge::release_payitem() {
  clear_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payitem_;
    payitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_recharge::set_allocated_payitem(::std::string* payitem) {
  if (payitem_ != &::google::protobuf::internal::kEmptyString) {
    delete payitem_;
  }
  if (payitem) {
    set_has_payitem();
    payitem_ = payitem;
  } else {
    clear_has_payitem();
    payitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string token = 7;
inline bool tb_role_recharge::has_token() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tb_role_recharge::set_has_token() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tb_role_recharge::clear_has_token() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tb_role_recharge::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& tb_role_recharge::token() const {
  return *token_;
}
inline void tb_role_recharge::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void tb_role_recharge::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void tb_role_recharge::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_recharge::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* tb_role_recharge::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_recharge::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string billno = 8;
inline bool tb_role_recharge::has_billno() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tb_role_recharge::set_has_billno() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tb_role_recharge::clear_has_billno() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tb_role_recharge::clear_billno() {
  if (billno_ != &::google::protobuf::internal::kEmptyString) {
    billno_->clear();
  }
  clear_has_billno();
}
inline const ::std::string& tb_role_recharge::billno() const {
  return *billno_;
}
inline void tb_role_recharge::set_billno(const ::std::string& value) {
  set_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    billno_ = new ::std::string;
  }
  billno_->assign(value);
}
inline void tb_role_recharge::set_billno(const char* value) {
  set_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    billno_ = new ::std::string;
  }
  billno_->assign(value);
}
inline void tb_role_recharge::set_billno(const char* value, size_t size) {
  set_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    billno_ = new ::std::string;
  }
  billno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_recharge::mutable_billno() {
  set_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    billno_ = new ::std::string;
  }
  return billno_;
}
inline ::std::string* tb_role_recharge::release_billno() {
  clear_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = billno_;
    billno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_recharge::set_allocated_billno(::std::string* billno) {
  if (billno_ != &::google::protobuf::internal::kEmptyString) {
    delete billno_;
  }
  if (billno) {
    set_has_billno();
    billno_ = billno;
  } else {
    clear_has_billno();
    billno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 zoneid = 9;
inline bool tb_role_recharge::has_zoneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tb_role_recharge::set_has_zoneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tb_role_recharge::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tb_role_recharge::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 tb_role_recharge::zoneid() const {
  return zoneid_;
}
inline void tb_role_recharge::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 providetype = 10;
inline bool tb_role_recharge::has_providetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tb_role_recharge::set_has_providetype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tb_role_recharge::clear_has_providetype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tb_role_recharge::clear_providetype() {
  providetype_ = 0u;
  clear_has_providetype();
}
inline ::google::protobuf::uint32 tb_role_recharge::providetype() const {
  return providetype_;
}
inline void tb_role_recharge::set_providetype(::google::protobuf::uint32 value) {
  set_has_providetype();
  providetype_ = value;
}

// required uint32 amt = 11;
inline bool tb_role_recharge::has_amt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tb_role_recharge::set_has_amt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tb_role_recharge::clear_has_amt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tb_role_recharge::clear_amt() {
  amt_ = 0u;
  clear_has_amt();
}
inline ::google::protobuf::uint32 tb_role_recharge::amt() const {
  return amt_;
}
inline void tb_role_recharge::set_amt(::google::protobuf::uint32 value) {
  set_has_amt();
  amt_ = value;
}

// required uint32 payamt_coins = 12;
inline bool tb_role_recharge::has_payamt_coins() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tb_role_recharge::set_has_payamt_coins() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tb_role_recharge::clear_has_payamt_coins() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tb_role_recharge::clear_payamt_coins() {
  payamt_coins_ = 0u;
  clear_has_payamt_coins();
}
inline ::google::protobuf::uint32 tb_role_recharge::payamt_coins() const {
  return payamt_coins_;
}
inline void tb_role_recharge::set_payamt_coins(::google::protobuf::uint32 value) {
  set_has_payamt_coins();
  payamt_coins_ = value;
}

// required uint32 pubacct_payamt_coins = 13;
inline bool tb_role_recharge::has_pubacct_payamt_coins() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tb_role_recharge::set_has_pubacct_payamt_coins() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tb_role_recharge::clear_has_pubacct_payamt_coins() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tb_role_recharge::clear_pubacct_payamt_coins() {
  pubacct_payamt_coins_ = 0u;
  clear_has_pubacct_payamt_coins();
}
inline ::google::protobuf::uint32 tb_role_recharge::pubacct_payamt_coins() const {
  return pubacct_payamt_coins_;
}
inline void tb_role_recharge::set_pubacct_payamt_coins(::google::protobuf::uint32 value) {
  set_has_pubacct_payamt_coins();
  pubacct_payamt_coins_ = value;
}

// required uint32 state = 14;
inline bool tb_role_recharge::has_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tb_role_recharge::set_has_state() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tb_role_recharge::clear_has_state() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tb_role_recharge::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 tb_role_recharge::state() const {
  return state_;
}
inline void tb_role_recharge::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2etb_5frole_5frecharge_2eproto__INCLUDED
