// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_role_skill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.tb_role_skill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* tb_role_skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tb_role_skill_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2etb_5frole_5fskill_2eproto() {
  protobuf_AddDesc_mysql_2etb_5frole_5fskill_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.tb_role_skill.proto");
  GOOGLE_CHECK(file != NULL);
  tb_role_skill_descriptor_ = file->message_type(0);
  static const int tb_role_skill_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, skill_grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, skillful_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, studied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, end_cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, created_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, smy_id_),
  };
  tb_role_skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tb_role_skill_descriptor_,
      tb_role_skill::default_instance_,
      tb_role_skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tb_role_skill));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2etb_5frole_5fskill_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tb_role_skill_descriptor_, &tb_role_skill::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2etb_5frole_5fskill_2eproto() {
  delete tb_role_skill::default_instance_;
  delete tb_role_skill_reflection_;
}

void protobuf_AddDesc_mysql_2etb_5frole_5fskill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031mysql.tb_role_skill.proto\022\005mysql\"\342\001\n\rt"
    "b_role_skill\022\017\n\007role_id\030\001 \002(\r\022\020\n\010skill_i"
    "d\030\002 \002(\r\022\023\n\013skill_level\030\003 \002(\r\022\030\n\020skill_gr"
    "id_index\030\004 \002(\r\022\020\n\010skillful\030\005 \002(\r\022\017\n\007stud"
    "ied\030\006 \002(\r\022\023\n\013end_cd_time\030\007 \002(\r\022\024\n\014create"
    "d_date\030\010 \002(\r\022\016\n\006status\030\t \002(\r\022\021\n\teffect_i"
    "d\030\n \002(\r\022\016\n\006smy_id\030\013 \002(\r", 263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.tb_role_skill.proto", &protobuf_RegisterTypes);
  tb_role_skill::default_instance_ = new tb_role_skill();
  tb_role_skill::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2etb_5frole_5fskill_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2etb_5frole_5fskill_2eproto {
  StaticDescriptorInitializer_mysql_2etb_5frole_5fskill_2eproto() {
    protobuf_AddDesc_mysql_2etb_5frole_5fskill_2eproto();
  }
} static_descriptor_initializer_mysql_2etb_5frole_5fskill_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tb_role_skill::kRoleIdFieldNumber;
const int tb_role_skill::kSkillIdFieldNumber;
const int tb_role_skill::kSkillLevelFieldNumber;
const int tb_role_skill::kSkillGridIndexFieldNumber;
const int tb_role_skill::kSkillfulFieldNumber;
const int tb_role_skill::kStudiedFieldNumber;
const int tb_role_skill::kEndCdTimeFieldNumber;
const int tb_role_skill::kCreatedDateFieldNumber;
const int tb_role_skill::kStatusFieldNumber;
const int tb_role_skill::kEffectIdFieldNumber;
const int tb_role_skill::kSmyIdFieldNumber;
#endif  // !_MSC_VER

tb_role_skill::tb_role_skill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tb_role_skill::InitAsDefaultInstance() {
}

tb_role_skill::tb_role_skill(const tb_role_skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tb_role_skill::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  skill_id_ = 0u;
  skill_level_ = 0u;
  skill_grid_index_ = 0u;
  skillful_ = 0u;
  studied_ = 0u;
  end_cd_time_ = 0u;
  created_date_ = 0u;
  status_ = 0u;
  effect_id_ = 0u;
  smy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tb_role_skill::~tb_role_skill() {
  SharedDtor();
}

void tb_role_skill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tb_role_skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tb_role_skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tb_role_skill_descriptor_;
}

const tb_role_skill& tb_role_skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2etb_5frole_5fskill_2eproto();
  return *default_instance_;
}

tb_role_skill* tb_role_skill::default_instance_ = NULL;

tb_role_skill* tb_role_skill::New() const {
  return new tb_role_skill;
}

void tb_role_skill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    skill_id_ = 0u;
    skill_level_ = 0u;
    skill_grid_index_ = 0u;
    skillful_ = 0u;
    studied_ = 0u;
    end_cd_time_ = 0u;
    created_date_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    status_ = 0u;
    effect_id_ = 0u;
    smy_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tb_role_skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required uint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_level;
        break;
      }

      // required uint32 skill_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_grid_index;
        break;
      }

      // required uint32 skill_grid_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_grid_index_)));
          set_has_skill_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skillful;
        break;
      }

      // required uint32 skillful = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillful:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillful_)));
          set_has_skillful();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_studied;
        break;
      }

      // required uint32 studied = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_studied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &studied_)));
          set_has_studied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_cd_time;
        break;
      }

      // required uint32 end_cd_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_cd_time_)));
          set_has_end_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_created_date;
        break;
      }

      // required uint32 created_date = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_created_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_date_)));
          set_has_created_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_status;
        break;
      }

      // required uint32 status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_effect_id;
        break;
      }

      // required uint32 effect_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_smy_id;
        break;
      }

      // required uint32 smy_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smy_id_)));
          set_has_smy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tb_role_skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_id(), output);
  }

  // required uint32 skill_level = 3;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_level(), output);
  }

  // required uint32 skill_grid_index = 4;
  if (has_skill_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_grid_index(), output);
  }

  // required uint32 skillful = 5;
  if (has_skillful()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skillful(), output);
  }

  // required uint32 studied = 6;
  if (has_studied()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->studied(), output);
  }

  // required uint32 end_cd_time = 7;
  if (has_end_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->end_cd_time(), output);
  }

  // required uint32 created_date = 8;
  if (has_created_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->created_date(), output);
  }

  // required uint32 status = 9;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->status(), output);
  }

  // required uint32 effect_id = 10;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->effect_id(), output);
  }

  // required uint32 smy_id = 11;
  if (has_smy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->smy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tb_role_skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_id(), target);
  }

  // required uint32 skill_level = 3;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_level(), target);
  }

  // required uint32 skill_grid_index = 4;
  if (has_skill_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_grid_index(), target);
  }

  // required uint32 skillful = 5;
  if (has_skillful()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skillful(), target);
  }

  // required uint32 studied = 6;
  if (has_studied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->studied(), target);
  }

  // required uint32 end_cd_time = 7;
  if (has_end_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->end_cd_time(), target);
  }

  // required uint32 created_date = 8;
  if (has_created_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->created_date(), target);
  }

  // required uint32 status = 9;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->status(), target);
  }

  // required uint32 effect_id = 10;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->effect_id(), target);
  }

  // required uint32 smy_id = 11;
  if (has_smy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->smy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tb_role_skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 skill_level = 3;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // required uint32 skill_grid_index = 4;
    if (has_skill_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_grid_index());
    }

    // required uint32 skillful = 5;
    if (has_skillful()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillful());
    }

    // required uint32 studied = 6;
    if (has_studied()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->studied());
    }

    // required uint32 end_cd_time = 7;
    if (has_end_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_cd_time());
    }

    // required uint32 created_date = 8;
    if (has_created_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->created_date());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 effect_id = 10;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }

    // required uint32 smy_id = 11;
    if (has_smy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->smy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tb_role_skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tb_role_skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tb_role_skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tb_role_skill::MergeFrom(const tb_role_skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_skill_grid_index()) {
      set_skill_grid_index(from.skill_grid_index());
    }
    if (from.has_skillful()) {
      set_skillful(from.skillful());
    }
    if (from.has_studied()) {
      set_studied(from.studied());
    }
    if (from.has_end_cd_time()) {
      set_end_cd_time(from.end_cd_time());
    }
    if (from.has_created_date()) {
      set_created_date(from.created_date());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_smy_id()) {
      set_smy_id(from.smy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tb_role_skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tb_role_skill::CopyFrom(const tb_role_skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tb_role_skill::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void tb_role_skill::Swap(tb_role_skill* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(skill_grid_index_, other->skill_grid_index_);
    std::swap(skillful_, other->skillful_);
    std::swap(studied_, other->studied_);
    std::swap(end_cd_time_, other->end_cd_time_);
    std::swap(created_date_, other->created_date_);
    std::swap(status_, other->status_);
    std::swap(effect_id_, other->effect_id_);
    std::swap(smy_id_, other->smy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tb_role_skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tb_role_skill_descriptor_;
  metadata.reflection = tb_role_skill_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
