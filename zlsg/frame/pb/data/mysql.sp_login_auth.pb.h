// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.sp_login_auth.proto

#ifndef PROTOBUF_mysql_2esp_5flogin_5fauth_2eproto__INCLUDED
#define PROTOBUF_mysql_2esp_5flogin_5fauth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2esp_5flogin_5fauth_2eproto();
void protobuf_AssignDesc_mysql_2esp_5flogin_5fauth_2eproto();
void protobuf_ShutdownFile_mysql_2esp_5flogin_5fauth_2eproto();

class sp_login_auth;
class sp_login_auths;

// ===================================================================

class sp_login_auth : public ::google::protobuf::Message {
 public:
  sp_login_auth();
  virtual ~sp_login_auth();

  sp_login_auth(const sp_login_auth& from);

  inline sp_login_auth& operator=(const sp_login_auth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sp_login_auth& default_instance();

  void Swap(sp_login_auth* other);

  // implements Message ----------------------------------------------

  sp_login_auth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sp_login_auth& from);
  void MergeFrom(const sp_login_auth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 v_user_id = 1;
  inline bool has_v_user_id() const;
  inline void clear_v_user_id();
  static const int kVUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 v_user_id() const;
  inline void set_v_user_id(::google::protobuf::uint32 value);

  // required uint32 v_role_id = 2;
  inline bool has_v_role_id() const;
  inline void clear_v_role_id();
  static const int kVRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 v_role_id() const;
  inline void set_v_role_id(::google::protobuf::uint32 value);

  // required uint32 v_sex = 3;
  inline bool has_v_sex() const;
  inline void clear_v_sex();
  static const int kVSexFieldNumber = 3;
  inline ::google::protobuf::uint32 v_sex() const;
  inline void set_v_sex(::google::protobuf::uint32 value);

  // required uint32 v_prof = 4;
  inline bool has_v_prof() const;
  inline void clear_v_prof();
  static const int kVProfFieldNumber = 4;
  inline ::google::protobuf::uint32 v_prof() const;
  inline void set_v_prof(::google::protobuf::uint32 value);

  // required string v_name = 5;
  inline bool has_v_name() const;
  inline void clear_v_name();
  static const int kVNameFieldNumber = 5;
  inline const ::std::string& v_name() const;
  inline void set_v_name(const ::std::string& value);
  inline void set_v_name(const char* value);
  inline void set_v_name(const char* value, size_t size);
  inline ::std::string* mutable_v_name();
  inline ::std::string* release_v_name();
  inline void set_allocated_v_name(::std::string* v_name);

  // required string p_openid = 6;
  inline bool has_p_openid() const;
  inline void clear_p_openid();
  static const int kPOpenidFieldNumber = 6;
  inline const ::std::string& p_openid() const;
  inline void set_p_openid(const ::std::string& value);
  inline void set_p_openid(const char* value);
  inline void set_p_openid(const char* value, size_t size);
  inline ::std::string* mutable_p_openid();
  inline ::std::string* release_p_openid();
  inline void set_allocated_p_openid(::std::string* p_openid);

  // required uint32 p_yel_vip = 7;
  inline bool has_p_yel_vip() const;
  inline void clear_p_yel_vip();
  static const int kPYelVipFieldNumber = 7;
  inline ::google::protobuf::uint32 p_yel_vip() const;
  inline void set_p_yel_vip(::google::protobuf::uint32 value);

  // required uint32 p_server_id = 8;
  inline bool has_p_server_id() const;
  inline void clear_p_server_id();
  static const int kPServerIdFieldNumber = 8;
  inline ::google::protobuf::uint32 p_server_id() const;
  inline void set_p_server_id(::google::protobuf::uint32 value);

  // required uint32 p_agent_id = 9;
  inline bool has_p_agent_id() const;
  inline void clear_p_agent_id();
  static const int kPAgentIdFieldNumber = 9;
  inline ::google::protobuf::uint32 p_agent_id() const;
  inline void set_p_agent_id(::google::protobuf::uint32 value);

  // required uint32 p_client_id = 10;
  inline bool has_p_client_id() const;
  inline void clear_p_client_id();
  static const int kPClientIdFieldNumber = 10;
  inline ::google::protobuf::uint32 p_client_id() const;
  inline void set_p_client_id(::google::protobuf::uint32 value);

  // required uint32 v_level = 11;
  inline bool has_v_level() const;
  inline void clear_v_level();
  static const int kVLevelFieldNumber = 11;
  inline ::google::protobuf::uint32 v_level() const;
  inline void set_v_level(::google::protobuf::uint32 value);

  // required uint32 v_fighting_power = 12;
  inline bool has_v_fighting_power() const;
  inline void clear_v_fighting_power();
  static const int kVFightingPowerFieldNumber = 12;
  inline ::google::protobuf::uint32 v_fighting_power() const;
  inline void set_v_fighting_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.sp_login_auth)
 private:
  inline void set_has_v_user_id();
  inline void clear_has_v_user_id();
  inline void set_has_v_role_id();
  inline void clear_has_v_role_id();
  inline void set_has_v_sex();
  inline void clear_has_v_sex();
  inline void set_has_v_prof();
  inline void clear_has_v_prof();
  inline void set_has_v_name();
  inline void clear_has_v_name();
  inline void set_has_p_openid();
  inline void clear_has_p_openid();
  inline void set_has_p_yel_vip();
  inline void clear_has_p_yel_vip();
  inline void set_has_p_server_id();
  inline void clear_has_p_server_id();
  inline void set_has_p_agent_id();
  inline void clear_has_p_agent_id();
  inline void set_has_p_client_id();
  inline void clear_has_p_client_id();
  inline void set_has_v_level();
  inline void clear_has_v_level();
  inline void set_has_v_fighting_power();
  inline void clear_has_v_fighting_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 v_user_id_;
  ::google::protobuf::uint32 v_role_id_;
  ::google::protobuf::uint32 v_sex_;
  ::google::protobuf::uint32 v_prof_;
  ::std::string* v_name_;
  ::std::string* p_openid_;
  ::google::protobuf::uint32 p_yel_vip_;
  ::google::protobuf::uint32 p_server_id_;
  ::google::protobuf::uint32 p_agent_id_;
  ::google::protobuf::uint32 p_client_id_;
  ::google::protobuf::uint32 v_level_;
  ::google::protobuf::uint32 v_fighting_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2esp_5flogin_5fauth_2eproto();
  friend void protobuf_AssignDesc_mysql_2esp_5flogin_5fauth_2eproto();
  friend void protobuf_ShutdownFile_mysql_2esp_5flogin_5fauth_2eproto();

  void InitAsDefaultInstance();
  static sp_login_auth* default_instance_;
};
// -------------------------------------------------------------------

class sp_login_auths : public ::google::protobuf::Message {
 public:
  sp_login_auths();
  virtual ~sp_login_auths();

  sp_login_auths(const sp_login_auths& from);

  inline sp_login_auths& operator=(const sp_login_auths& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sp_login_auths& default_instance();

  void Swap(sp_login_auths* other);

  // implements Message ----------------------------------------------

  sp_login_auths* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sp_login_auths& from);
  void MergeFrom(const sp_login_auths& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline const ::std::string& role_id() const;
  inline void set_role_id(const ::std::string& value);
  inline void set_role_id(const char* value);
  inline void set_role_id(const char* value, size_t size);
  inline ::std::string* mutable_role_id();
  inline ::std::string* release_role_id();
  inline void set_allocated_role_id(::std::string* role_id);

  // required string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // required string sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline const ::std::string& sex() const;
  inline void set_sex(const ::std::string& value);
  inline void set_sex(const char* value);
  inline void set_sex(const char* value, size_t size);
  inline ::std::string* mutable_sex();
  inline ::std::string* release_sex();
  inline void set_allocated_sex(::std::string* sex);

  // required string profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline const ::std::string& profession() const;
  inline void set_profession(const ::std::string& value);
  inline void set_profession(const char* value);
  inline void set_profession(const char* value, size_t size);
  inline ::std::string* mutable_profession();
  inline ::std::string* release_profession();
  inline void set_allocated_profession(::std::string* profession);

  // required string level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline const ::std::string& level() const;
  inline void set_level(const ::std::string& value);
  inline void set_level(const char* value);
  inline void set_level(const char* value, size_t size);
  inline ::std::string* mutable_level();
  inline ::std::string* release_level();
  inline void set_allocated_level(::std::string* level);

  // required string fighting_power = 6;
  inline bool has_fighting_power() const;
  inline void clear_fighting_power();
  static const int kFightingPowerFieldNumber = 6;
  inline const ::std::string& fighting_power() const;
  inline void set_fighting_power(const ::std::string& value);
  inline void set_fighting_power(const char* value);
  inline void set_fighting_power(const char* value, size_t size);
  inline ::std::string* mutable_fighting_power();
  inline ::std::string* release_fighting_power();
  inline void set_allocated_fighting_power(::std::string* fighting_power);

  // @@protoc_insertion_point(class_scope:mysql.sp_login_auths)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fighting_power();
  inline void clear_has_fighting_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_id_;
  ::std::string* role_name_;
  ::std::string* sex_;
  ::std::string* profession_;
  ::std::string* level_;
  ::std::string* fighting_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2esp_5flogin_5fauth_2eproto();
  friend void protobuf_AssignDesc_mysql_2esp_5flogin_5fauth_2eproto();
  friend void protobuf_ShutdownFile_mysql_2esp_5flogin_5fauth_2eproto();

  void InitAsDefaultInstance();
  static sp_login_auths* default_instance_;
};
// ===================================================================


// ===================================================================

// sp_login_auth

// required uint32 v_user_id = 1;
inline bool sp_login_auth::has_v_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sp_login_auth::set_has_v_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sp_login_auth::clear_has_v_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sp_login_auth::clear_v_user_id() {
  v_user_id_ = 0u;
  clear_has_v_user_id();
}
inline ::google::protobuf::uint32 sp_login_auth::v_user_id() const {
  return v_user_id_;
}
inline void sp_login_auth::set_v_user_id(::google::protobuf::uint32 value) {
  set_has_v_user_id();
  v_user_id_ = value;
}

// required uint32 v_role_id = 2;
inline bool sp_login_auth::has_v_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sp_login_auth::set_has_v_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sp_login_auth::clear_has_v_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sp_login_auth::clear_v_role_id() {
  v_role_id_ = 0u;
  clear_has_v_role_id();
}
inline ::google::protobuf::uint32 sp_login_auth::v_role_id() const {
  return v_role_id_;
}
inline void sp_login_auth::set_v_role_id(::google::protobuf::uint32 value) {
  set_has_v_role_id();
  v_role_id_ = value;
}

// required uint32 v_sex = 3;
inline bool sp_login_auth::has_v_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sp_login_auth::set_has_v_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sp_login_auth::clear_has_v_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sp_login_auth::clear_v_sex() {
  v_sex_ = 0u;
  clear_has_v_sex();
}
inline ::google::protobuf::uint32 sp_login_auth::v_sex() const {
  return v_sex_;
}
inline void sp_login_auth::set_v_sex(::google::protobuf::uint32 value) {
  set_has_v_sex();
  v_sex_ = value;
}

// required uint32 v_prof = 4;
inline bool sp_login_auth::has_v_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sp_login_auth::set_has_v_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sp_login_auth::clear_has_v_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sp_login_auth::clear_v_prof() {
  v_prof_ = 0u;
  clear_has_v_prof();
}
inline ::google::protobuf::uint32 sp_login_auth::v_prof() const {
  return v_prof_;
}
inline void sp_login_auth::set_v_prof(::google::protobuf::uint32 value) {
  set_has_v_prof();
  v_prof_ = value;
}

// required string v_name = 5;
inline bool sp_login_auth::has_v_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sp_login_auth::set_has_v_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sp_login_auth::clear_has_v_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sp_login_auth::clear_v_name() {
  if (v_name_ != &::google::protobuf::internal::kEmptyString) {
    v_name_->clear();
  }
  clear_has_v_name();
}
inline const ::std::string& sp_login_auth::v_name() const {
  return *v_name_;
}
inline void sp_login_auth::set_v_name(const ::std::string& value) {
  set_has_v_name();
  if (v_name_ == &::google::protobuf::internal::kEmptyString) {
    v_name_ = new ::std::string;
  }
  v_name_->assign(value);
}
inline void sp_login_auth::set_v_name(const char* value) {
  set_has_v_name();
  if (v_name_ == &::google::protobuf::internal::kEmptyString) {
    v_name_ = new ::std::string;
  }
  v_name_->assign(value);
}
inline void sp_login_auth::set_v_name(const char* value, size_t size) {
  set_has_v_name();
  if (v_name_ == &::google::protobuf::internal::kEmptyString) {
    v_name_ = new ::std::string;
  }
  v_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sp_login_auth::mutable_v_name() {
  set_has_v_name();
  if (v_name_ == &::google::protobuf::internal::kEmptyString) {
    v_name_ = new ::std::string;
  }
  return v_name_;
}
inline ::std::string* sp_login_auth::release_v_name() {
  clear_has_v_name();
  if (v_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = v_name_;
    v_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sp_login_auth::set_allocated_v_name(::std::string* v_name) {
  if (v_name_ != &::google::protobuf::internal::kEmptyString) {
    delete v_name_;
  }
  if (v_name) {
    set_has_v_name();
    v_name_ = v_name;
  } else {
    clear_has_v_name();
    v_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string p_openid = 6;
inline bool sp_login_auth::has_p_openid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sp_login_auth::set_has_p_openid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sp_login_auth::clear_has_p_openid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sp_login_auth::clear_p_openid() {
  if (p_openid_ != &::google::protobuf::internal::kEmptyString) {
    p_openid_->clear();
  }
  clear_has_p_openid();
}
inline const ::std::string& sp_login_auth::p_openid() const {
  return *p_openid_;
}
inline void sp_login_auth::set_p_openid(const ::std::string& value) {
  set_has_p_openid();
  if (p_openid_ == &::google::protobuf::internal::kEmptyString) {
    p_openid_ = new ::std::string;
  }
  p_openid_->assign(value);
}
inline void sp_login_auth::set_p_openid(const char* value) {
  set_has_p_openid();
  if (p_openid_ == &::google::protobuf::internal::kEmptyString) {
    p_openid_ = new ::std::string;
  }
  p_openid_->assign(value);
}
inline void sp_login_auth::set_p_openid(const char* value, size_t size) {
  set_has_p_openid();
  if (p_openid_ == &::google::protobuf::internal::kEmptyString) {
    p_openid_ = new ::std::string;
  }
  p_openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sp_login_auth::mutable_p_openid() {
  set_has_p_openid();
  if (p_openid_ == &::google::protobuf::internal::kEmptyString) {
    p_openid_ = new ::std::string;
  }
  return p_openid_;
}
inline ::std::string* sp_login_auth::release_p_openid() {
  clear_has_p_openid();
  if (p_openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = p_openid_;
    p_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sp_login_auth::set_allocated_p_openid(::std::string* p_openid) {
  if (p_openid_ != &::google::protobuf::internal::kEmptyString) {
    delete p_openid_;
  }
  if (p_openid) {
    set_has_p_openid();
    p_openid_ = p_openid;
  } else {
    clear_has_p_openid();
    p_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 p_yel_vip = 7;
inline bool sp_login_auth::has_p_yel_vip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sp_login_auth::set_has_p_yel_vip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sp_login_auth::clear_has_p_yel_vip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sp_login_auth::clear_p_yel_vip() {
  p_yel_vip_ = 0u;
  clear_has_p_yel_vip();
}
inline ::google::protobuf::uint32 sp_login_auth::p_yel_vip() const {
  return p_yel_vip_;
}
inline void sp_login_auth::set_p_yel_vip(::google::protobuf::uint32 value) {
  set_has_p_yel_vip();
  p_yel_vip_ = value;
}

// required uint32 p_server_id = 8;
inline bool sp_login_auth::has_p_server_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sp_login_auth::set_has_p_server_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sp_login_auth::clear_has_p_server_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sp_login_auth::clear_p_server_id() {
  p_server_id_ = 0u;
  clear_has_p_server_id();
}
inline ::google::protobuf::uint32 sp_login_auth::p_server_id() const {
  return p_server_id_;
}
inline void sp_login_auth::set_p_server_id(::google::protobuf::uint32 value) {
  set_has_p_server_id();
  p_server_id_ = value;
}

// required uint32 p_agent_id = 9;
inline bool sp_login_auth::has_p_agent_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sp_login_auth::set_has_p_agent_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sp_login_auth::clear_has_p_agent_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sp_login_auth::clear_p_agent_id() {
  p_agent_id_ = 0u;
  clear_has_p_agent_id();
}
inline ::google::protobuf::uint32 sp_login_auth::p_agent_id() const {
  return p_agent_id_;
}
inline void sp_login_auth::set_p_agent_id(::google::protobuf::uint32 value) {
  set_has_p_agent_id();
  p_agent_id_ = value;
}

// required uint32 p_client_id = 10;
inline bool sp_login_auth::has_p_client_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sp_login_auth::set_has_p_client_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sp_login_auth::clear_has_p_client_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sp_login_auth::clear_p_client_id() {
  p_client_id_ = 0u;
  clear_has_p_client_id();
}
inline ::google::protobuf::uint32 sp_login_auth::p_client_id() const {
  return p_client_id_;
}
inline void sp_login_auth::set_p_client_id(::google::protobuf::uint32 value) {
  set_has_p_client_id();
  p_client_id_ = value;
}

// required uint32 v_level = 11;
inline bool sp_login_auth::has_v_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sp_login_auth::set_has_v_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sp_login_auth::clear_has_v_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sp_login_auth::clear_v_level() {
  v_level_ = 0u;
  clear_has_v_level();
}
inline ::google::protobuf::uint32 sp_login_auth::v_level() const {
  return v_level_;
}
inline void sp_login_auth::set_v_level(::google::protobuf::uint32 value) {
  set_has_v_level();
  v_level_ = value;
}

// required uint32 v_fighting_power = 12;
inline bool sp_login_auth::has_v_fighting_power() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sp_login_auth::set_has_v_fighting_power() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sp_login_auth::clear_has_v_fighting_power() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sp_login_auth::clear_v_fighting_power() {
  v_fighting_power_ = 0u;
  clear_has_v_fighting_power();
}
inline ::google::protobuf::uint32 sp_login_auth::v_fighting_power() const {
  return v_fighting_power_;
}
inline void sp_login_auth::set_v_fighting_power(::google::protobuf::uint32 value) {
  set_has_v_fighting_power();
  v_fighting_power_ = value;
}

// -------------------------------------------------------------------

// sp_login_auths

// required string role_id = 1;
inline bool sp_login_auths::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sp_login_auths::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sp_login_auths::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sp_login_auths::clear_role_id() {
  if (role_id_ != &::google::protobuf::internal::kEmptyString) {
    role_id_->clear();
  }
  clear_has_role_id();
}
inline const ::std::string& sp_login_auths::role_id() const {
  return *role_id_;
}
inline void sp_login_auths::set_role_id(const ::std::string& value) {
  set_has_role_id();
  if (role_id_ == &::google::protobuf::internal::kEmptyString) {
    role_id_ = new ::std::string;
  }
  role_id_->assign(value);
}
inline void sp_login_auths::set_role_id(const char* value) {
  set_has_role_id();
  if (role_id_ == &::google::protobuf::internal::kEmptyString) {
    role_id_ = new ::std::string;
  }
  role_id_->assign(value);
}
inline void sp_login_auths::set_role_id(const char* value, size_t size) {
  set_has_role_id();
  if (role_id_ == &::google::protobuf::internal::kEmptyString) {
    role_id_ = new ::std::string;
  }
  role_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sp_login_auths::mutable_role_id() {
  set_has_role_id();
  if (role_id_ == &::google::protobuf::internal::kEmptyString) {
    role_id_ = new ::std::string;
  }
  return role_id_;
}
inline ::std::string* sp_login_auths::release_role_id() {
  clear_has_role_id();
  if (role_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_id_;
    role_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sp_login_auths::set_allocated_role_id(::std::string* role_id) {
  if (role_id_ != &::google::protobuf::internal::kEmptyString) {
    delete role_id_;
  }
  if (role_id) {
    set_has_role_id();
    role_id_ = role_id;
  } else {
    clear_has_role_id();
    role_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string role_name = 2;
inline bool sp_login_auths::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sp_login_auths::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sp_login_auths::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sp_login_auths::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& sp_login_auths::role_name() const {
  return *role_name_;
}
inline void sp_login_auths::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void sp_login_auths::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void sp_login_auths::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sp_login_auths::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* sp_login_auths::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sp_login_auths::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sex = 3;
inline bool sp_login_auths::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sp_login_auths::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sp_login_auths::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sp_login_auths::clear_sex() {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    sex_->clear();
  }
  clear_has_sex();
}
inline const ::std::string& sp_login_auths::sex() const {
  return *sex_;
}
inline void sp_login_auths::set_sex(const ::std::string& value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sp_login_auths::set_sex(const char* value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void sp_login_auths::set_sex(const char* value, size_t size) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sp_login_auths::mutable_sex() {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  return sex_;
}
inline ::std::string* sp_login_auths::release_sex() {
  clear_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sex_;
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sp_login_auths::set_allocated_sex(::std::string* sex) {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (sex) {
    set_has_sex();
    sex_ = sex;
  } else {
    clear_has_sex();
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string profession = 4;
inline bool sp_login_auths::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sp_login_auths::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sp_login_auths::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sp_login_auths::clear_profession() {
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    profession_->clear();
  }
  clear_has_profession();
}
inline const ::std::string& sp_login_auths::profession() const {
  return *profession_;
}
inline void sp_login_auths::set_profession(const ::std::string& value) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(value);
}
inline void sp_login_auths::set_profession(const char* value) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(value);
}
inline void sp_login_auths::set_profession(const char* value, size_t size) {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  profession_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sp_login_auths::mutable_profession() {
  set_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    profession_ = new ::std::string;
  }
  return profession_;
}
inline ::std::string* sp_login_auths::release_profession() {
  clear_has_profession();
  if (profession_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = profession_;
    profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sp_login_auths::set_allocated_profession(::std::string* profession) {
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    delete profession_;
  }
  if (profession) {
    set_has_profession();
    profession_ = profession;
  } else {
    clear_has_profession();
    profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string level = 5;
inline bool sp_login_auths::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sp_login_auths::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sp_login_auths::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sp_login_auths::clear_level() {
  if (level_ != &::google::protobuf::internal::kEmptyString) {
    level_->clear();
  }
  clear_has_level();
}
inline const ::std::string& sp_login_auths::level() const {
  return *level_;
}
inline void sp_login_auths::set_level(const ::std::string& value) {
  set_has_level();
  if (level_ == &::google::protobuf::internal::kEmptyString) {
    level_ = new ::std::string;
  }
  level_->assign(value);
}
inline void sp_login_auths::set_level(const char* value) {
  set_has_level();
  if (level_ == &::google::protobuf::internal::kEmptyString) {
    level_ = new ::std::string;
  }
  level_->assign(value);
}
inline void sp_login_auths::set_level(const char* value, size_t size) {
  set_has_level();
  if (level_ == &::google::protobuf::internal::kEmptyString) {
    level_ = new ::std::string;
  }
  level_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sp_login_auths::mutable_level() {
  set_has_level();
  if (level_ == &::google::protobuf::internal::kEmptyString) {
    level_ = new ::std::string;
  }
  return level_;
}
inline ::std::string* sp_login_auths::release_level() {
  clear_has_level();
  if (level_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = level_;
    level_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sp_login_auths::set_allocated_level(::std::string* level) {
  if (level_ != &::google::protobuf::internal::kEmptyString) {
    delete level_;
  }
  if (level) {
    set_has_level();
    level_ = level;
  } else {
    clear_has_level();
    level_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string fighting_power = 6;
inline bool sp_login_auths::has_fighting_power() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sp_login_auths::set_has_fighting_power() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sp_login_auths::clear_has_fighting_power() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sp_login_auths::clear_fighting_power() {
  if (fighting_power_ != &::google::protobuf::internal::kEmptyString) {
    fighting_power_->clear();
  }
  clear_has_fighting_power();
}
inline const ::std::string& sp_login_auths::fighting_power() const {
  return *fighting_power_;
}
inline void sp_login_auths::set_fighting_power(const ::std::string& value) {
  set_has_fighting_power();
  if (fighting_power_ == &::google::protobuf::internal::kEmptyString) {
    fighting_power_ = new ::std::string;
  }
  fighting_power_->assign(value);
}
inline void sp_login_auths::set_fighting_power(const char* value) {
  set_has_fighting_power();
  if (fighting_power_ == &::google::protobuf::internal::kEmptyString) {
    fighting_power_ = new ::std::string;
  }
  fighting_power_->assign(value);
}
inline void sp_login_auths::set_fighting_power(const char* value, size_t size) {
  set_has_fighting_power();
  if (fighting_power_ == &::google::protobuf::internal::kEmptyString) {
    fighting_power_ = new ::std::string;
  }
  fighting_power_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sp_login_auths::mutable_fighting_power() {
  set_has_fighting_power();
  if (fighting_power_ == &::google::protobuf::internal::kEmptyString) {
    fighting_power_ = new ::std::string;
  }
  return fighting_power_;
}
inline ::std::string* sp_login_auths::release_fighting_power() {
  clear_has_fighting_power();
  if (fighting_power_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fighting_power_;
    fighting_power_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sp_login_auths::set_allocated_fighting_power(::std::string* fighting_power) {
  if (fighting_power_ != &::google::protobuf::internal::kEmptyString) {
    delete fighting_power_;
  }
  if (fighting_power) {
    set_has_fighting_power();
    fighting_power_ = fighting_power;
  } else {
    clear_has_fighting_power();
    fighting_power_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2esp_5flogin_5fauth_2eproto__INCLUDED
