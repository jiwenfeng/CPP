// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.tb_player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* tb_player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tb_player_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2etb_5fplayer_2eproto() {
  protobuf_AddDesc_mysql_2etb_5fplayer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.tb_player.proto");
  GOOGLE_CHECK(file != NULL);
  tb_player_descriptor_ = file->message_type(0);
  static const int tb_player_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, did_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, appversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, nm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, mno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, mac_),
  };
  tb_player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tb_player_descriptor_,
      tb_player::default_instance_,
      tb_player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tb_player));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2etb_5fplayer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tb_player_descriptor_, &tb_player::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2etb_5fplayer_2eproto() {
  delete tb_player::default_instance_;
  delete tb_player_reflection_;
}

void protobuf_AddDesc_mysql_2etb_5fplayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025mysql.tb_player.proto\022\005mysql\"\261\002\n\ttb_pl"
    "ayer\022\n\n\002id\030\001 \002(\r\022\016\n\006svr_id\030\002 \002(\r\022\016\n\006open"
    "id\030\003 \002(\t\022\027\n\017last_login_time\030\004 \002(\r\022\023\n\013cre"
    "ate_time\030\005 \002(\r\022\023\n\013platform_id\030\006 \002(\r\022\013\n\003s"
    "id\030\007 \002(\t\022\013\n\003did\030\010 \002(\t\022\020\n\010platform\030\t \002(\t\022"
    "\022\n\nchannel_id\030\n \002(\t\022\022\n\nappVersion\030\013 \002(\t\022"
    "\017\n\007appType\030\014 \002(\t\022\016\n\006device\030\r \002(\t\022\n\n\002nm\030\016"
    " \002(\t\022\013\n\003mno\030\017 \002(\t\022\016\n\006screen\030\020 \002(\t\022\n\n\002os\030"
    "\021 \002(\t\022\013\n\003mac\030\022 \002(\t", 338);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.tb_player.proto", &protobuf_RegisterTypes);
  tb_player::default_instance_ = new tb_player();
  tb_player::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2etb_5fplayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2etb_5fplayer_2eproto {
  StaticDescriptorInitializer_mysql_2etb_5fplayer_2eproto() {
    protobuf_AddDesc_mysql_2etb_5fplayer_2eproto();
  }
} static_descriptor_initializer_mysql_2etb_5fplayer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tb_player::kIdFieldNumber;
const int tb_player::kSvrIdFieldNumber;
const int tb_player::kOpenidFieldNumber;
const int tb_player::kLastLoginTimeFieldNumber;
const int tb_player::kCreateTimeFieldNumber;
const int tb_player::kPlatformIdFieldNumber;
const int tb_player::kSidFieldNumber;
const int tb_player::kDidFieldNumber;
const int tb_player::kPlatformFieldNumber;
const int tb_player::kChannelIdFieldNumber;
const int tb_player::kAppVersionFieldNumber;
const int tb_player::kAppTypeFieldNumber;
const int tb_player::kDeviceFieldNumber;
const int tb_player::kNmFieldNumber;
const int tb_player::kMnoFieldNumber;
const int tb_player::kScreenFieldNumber;
const int tb_player::kOsFieldNumber;
const int tb_player::kMacFieldNumber;
#endif  // !_MSC_VER

tb_player::tb_player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tb_player::InitAsDefaultInstance() {
}

tb_player::tb_player(const tb_player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tb_player::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  svr_id_ = 0u;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_login_time_ = 0u;
  create_time_ = 0u;
  platform_id_ = 0u;
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tb_player::~tb_player() {
  SharedDtor();
}

void tb_player::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (did_ != &::google::protobuf::internal::kEmptyString) {
    delete did_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    delete appversion_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (nm_ != &::google::protobuf::internal::kEmptyString) {
    delete nm_;
  }
  if (mno_ != &::google::protobuf::internal::kEmptyString) {
    delete mno_;
  }
  if (screen_ != &::google::protobuf::internal::kEmptyString) {
    delete screen_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

void tb_player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tb_player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tb_player_descriptor_;
}

const tb_player& tb_player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2etb_5fplayer_2eproto();
  return *default_instance_;
}

tb_player* tb_player::default_instance_ = NULL;

tb_player* tb_player::New() const {
  return new tb_player;
}

void tb_player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    svr_id_ = 0u;
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    last_login_time_ = 0u;
    create_time_ = 0u;
    platform_id_ = 0u;
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
    if (has_did()) {
      if (did_ != &::google::protobuf::internal::kEmptyString) {
        did_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
    if (has_appversion()) {
      if (appversion_ != &::google::protobuf::internal::kEmptyString) {
        appversion_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    if (has_nm()) {
      if (nm_ != &::google::protobuf::internal::kEmptyString) {
        nm_->clear();
      }
    }
    if (has_mno()) {
      if (mno_ != &::google::protobuf::internal::kEmptyString) {
        mno_->clear();
      }
    }
    if (has_screen()) {
      if (screen_ != &::google::protobuf::internal::kEmptyString) {
        screen_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tb_player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svr_id;
        break;
      }

      // required uint32 svr_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_id_)));
          set_has_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_openid;
        break;
      }

      // required string openid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_login_time;
        break;
      }

      // required uint32 last_login_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_platform_id;
        break;
      }

      // required uint32 platform_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_id_)));
          set_has_platform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sid;
        break;
      }

      // required string sid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_did;
        break;
      }

      // required string did = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_did:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_did()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->did().data(), this->did().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_platform;
        break;
      }

      // required string platform = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_channel_id;
        break;
      }

      // required string channel_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_appVersion;
        break;
      }

      // required string appVersion = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appversion().data(), this->appversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_appType;
        break;
      }

      // required string appType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_device;
        break;
      }

      // required string device = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_nm;
        break;
      }

      // required string nm = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nm().data(), this->nm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_mno;
        break;
      }

      // required string mno = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mno().data(), this->mno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_screen;
        break;
      }

      // required string screen = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_screen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->screen().data(), this->screen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_os;
        break;
      }

      // required string os = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_mac;
        break;
      }

      // required string mac = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tb_player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 svr_id = 2;
  if (has_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svr_id(), output);
  }

  // required string openid = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->openid(), output);
  }

  // required uint32 last_login_time = 4;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_login_time(), output);
  }

  // required uint32 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->create_time(), output);
  }

  // required uint32 platform_id = 6;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->platform_id(), output);
  }

  // required string sid = 7;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sid(), output);
  }

  // required string did = 8;
  if (has_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->did().data(), this->did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->did(), output);
  }

  // required string platform = 9;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->platform(), output);
  }

  // required string channel_id = 10;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->channel_id(), output);
  }

  // required string appVersion = 11;
  if (has_appversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->appversion(), output);
  }

  // required string appType = 12;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->apptype(), output);
  }

  // required string device = 13;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->device(), output);
  }

  // required string nm = 14;
  if (has_nm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nm().data(), this->nm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->nm(), output);
  }

  // required string mno = 15;
  if (has_mno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mno().data(), this->mno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->mno(), output);
  }

  // required string screen = 16;
  if (has_screen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->screen().data(), this->screen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->screen(), output);
  }

  // required string os = 17;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->os(), output);
  }

  // required string mac = 18;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->mac(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tb_player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 svr_id = 2;
  if (has_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svr_id(), target);
  }

  // required string openid = 3;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->openid(), target);
  }

  // required uint32 last_login_time = 4;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_login_time(), target);
  }

  // required uint32 create_time = 5;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->create_time(), target);
  }

  // required uint32 platform_id = 6;
  if (has_platform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->platform_id(), target);
  }

  // required string sid = 7;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sid(), target);
  }

  // required string did = 8;
  if (has_did()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->did().data(), this->did().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->did(), target);
  }

  // required string platform = 9;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->platform(), target);
  }

  // required string channel_id = 10;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->channel_id(), target);
  }

  // required string appVersion = 11;
  if (has_appversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->appversion(), target);
  }

  // required string appType = 12;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->apptype(), target);
  }

  // required string device = 13;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->device(), target);
  }

  // required string nm = 14;
  if (has_nm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nm().data(), this->nm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->nm(), target);
  }

  // required string mno = 15;
  if (has_mno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mno().data(), this->mno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->mno(), target);
  }

  // required string screen = 16;
  if (has_screen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->screen().data(), this->screen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->screen(), target);
  }

  // required string os = 17;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->os(), target);
  }

  // required string mac = 18;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->mac(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tb_player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 svr_id = 2;
    if (has_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_id());
    }

    // required string openid = 3;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required uint32 last_login_time = 4;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_time());
    }

    // required uint32 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 platform_id = 6;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_id());
    }

    // required string sid = 7;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // required string did = 8;
    if (has_did()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->did());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string platform = 9;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // required string channel_id = 10;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // required string appVersion = 11;
    if (has_appversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appversion());
    }

    // required string appType = 12;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required string device = 13;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // required string nm = 14;
    if (has_nm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nm());
    }

    // required string mno = 15;
    if (has_mno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mno());
    }

    // required string screen = 16;
    if (has_screen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->screen());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string os = 17;
    if (has_os()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // required string mac = 18;
    if (has_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tb_player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tb_player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tb_player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tb_player::MergeFrom(const tb_player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_svr_id()) {
      set_svr_id(from.svr_id());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_did()) {
      set_did(from.did());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_appversion()) {
      set_appversion(from.appversion());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_nm()) {
      set_nm(from.nm());
    }
    if (from.has_mno()) {
      set_mno(from.mno());
    }
    if (from.has_screen()) {
      set_screen(from.screen());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tb_player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tb_player::CopyFrom(const tb_player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tb_player::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;

  return true;
}

void tb_player::Swap(tb_player* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(svr_id_, other->svr_id_);
    std::swap(openid_, other->openid_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(create_time_, other->create_time_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(sid_, other->sid_);
    std::swap(did_, other->did_);
    std::swap(platform_, other->platform_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(appversion_, other->appversion_);
    std::swap(apptype_, other->apptype_);
    std::swap(device_, other->device_);
    std::swap(nm_, other->nm_);
    std::swap(mno_, other->mno_);
    std::swap(screen_, other->screen_);
    std::swap(os_, other->os_);
    std::swap(mac_, other->mac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tb_player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tb_player_descriptor_;
  metadata.reflection = tb_player_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
