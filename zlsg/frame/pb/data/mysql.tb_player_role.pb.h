// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_player_role.proto

#ifndef PROTOBUF_mysql_2etb_5fplayer_5frole_2eproto__INCLUDED
#define PROTOBUF_mysql_2etb_5fplayer_5frole_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2etb_5fplayer_5frole_2eproto();
void protobuf_AssignDesc_mysql_2etb_5fplayer_5frole_2eproto();
void protobuf_ShutdownFile_mysql_2etb_5fplayer_5frole_2eproto();

class tb_player_role;

// ===================================================================

class tb_player_role : public ::google::protobuf::Message {
 public:
  tb_player_role();
  virtual ~tb_player_role();

  tb_player_role(const tb_player_role& from);

  inline tb_player_role& operator=(const tb_player_role& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_player_role& default_instance();

  void Swap(tb_player_role* other);

  // implements Message ----------------------------------------------

  tb_player_role* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tb_player_role& from);
  void MergeFrom(const tb_player_role& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 system_id = 2;
  inline bool has_system_id() const;
  inline void clear_system_id();
  static const int kSystemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 system_id() const;
  inline void set_system_id(::google::protobuf::uint32 value);

  // required uint32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // required string role_name = 4;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 4;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // required uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // required uint32 profession = 7;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 7;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // required uint64 experience = 8;
  inline bool has_experience() const;
  inline void clear_experience();
  static const int kExperienceFieldNumber = 8;
  inline ::google::protobuf::uint64 experience() const;
  inline void set_experience(::google::protobuf::uint64 value);

  // required uint32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 tael = 10;
  inline bool has_tael() const;
  inline void clear_tael();
  static const int kTaelFieldNumber = 10;
  inline ::google::protobuf::uint32 tael() const;
  inline void set_tael(::google::protobuf::uint32 value);

  // required uint32 ingot = 11;
  inline bool has_ingot() const;
  inline void clear_ingot();
  static const int kIngotFieldNumber = 11;
  inline ::google::protobuf::uint32 ingot() const;
  inline void set_ingot(::google::protobuf::uint32 value);

  // required uint32 gift_money = 12;
  inline bool has_gift_money() const;
  inline void clear_gift_money();
  static const int kGiftMoneyFieldNumber = 12;
  inline ::google::protobuf::uint32 gift_money() const;
  inline void set_gift_money(::google::protobuf::uint32 value);

  // required uint32 is_suspended_account = 13;
  inline bool has_is_suspended_account() const;
  inline void clear_is_suspended_account();
  static const int kIsSuspendedAccountFieldNumber = 13;
  inline ::google::protobuf::uint32 is_suspended_account() const;
  inline void set_is_suspended_account(::google::protobuf::uint32 value);

  // required uint32 partner_id = 14;
  inline bool has_partner_id() const;
  inline void clear_partner_id();
  static const int kPartnerIdFieldNumber = 14;
  inline ::google::protobuf::uint32 partner_id() const;
  inline void set_partner_id(::google::protobuf::uint32 value);

  // required uint32 family_id = 15;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 15;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 family_position = 16;
  inline bool has_family_position() const;
  inline void clear_family_position();
  static const int kFamilyPositionFieldNumber = 16;
  inline ::google::protobuf::uint32 family_position() const;
  inline void set_family_position(::google::protobuf::uint32 value);

  // required uint32 can_be_raised = 17;
  inline bool has_can_be_raised() const;
  inline void clear_can_be_raised();
  static const int kCanBeRaisedFieldNumber = 17;
  inline ::google::protobuf::uint32 can_be_raised() const;
  inline void set_can_be_raised(::google::protobuf::uint32 value);

  // required uint32 family_level = 18;
  inline bool has_family_level() const;
  inline void clear_family_level();
  static const int kFamilyLevelFieldNumber = 18;
  inline ::google::protobuf::uint32 family_level() const;
  inline void set_family_level(::google::protobuf::uint32 value);

  // required uint32 can_join_family = 19;
  inline bool has_can_join_family() const;
  inline void clear_can_join_family();
  static const int kCanJoinFamilyFieldNumber = 19;
  inline ::google::protobuf::uint32 can_join_family() const;
  inline void set_can_join_family(::google::protobuf::uint32 value);

  // required uint32 can_be_transmit = 20;
  inline bool has_can_be_transmit() const;
  inline void clear_can_be_transmit();
  static const int kCanBeTransmitFieldNumber = 20;
  inline ::google::protobuf::uint32 can_be_transmit() const;
  inline void set_can_be_transmit(::google::protobuf::uint32 value);

  // required uint32 pk_model = 21;
  inline bool has_pk_model() const;
  inline void clear_pk_model();
  static const int kPkModelFieldNumber = 21;
  inline ::google::protobuf::uint32 pk_model() const;
  inline void set_pk_model(::google::protobuf::uint32 value);

  // required uint32 pk_value = 22;
  inline bool has_pk_value() const;
  inline void clear_pk_value();
  static const int kPkValueFieldNumber = 22;
  inline ::google::protobuf::uint32 pk_value() const;
  inline void set_pk_value(::google::protobuf::uint32 value);

  // required uint32 military_strategy = 23;
  inline bool has_military_strategy() const;
  inline void clear_military_strategy();
  static const int kMilitaryStrategyFieldNumber = 23;
  inline ::google::protobuf::uint32 military_strategy() const;
  inline void set_military_strategy(::google::protobuf::uint32 value);

  // required uint32 map_id = 24;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 24;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // required uint32 x_pos = 25;
  inline bool has_x_pos() const;
  inline void clear_x_pos();
  static const int kXPosFieldNumber = 25;
  inline ::google::protobuf::uint32 x_pos() const;
  inline void set_x_pos(::google::protobuf::uint32 value);

  // required uint32 y_pos = 26;
  inline bool has_y_pos() const;
  inline void clear_y_pos();
  static const int kYPosFieldNumber = 26;
  inline ::google::protobuf::uint32 y_pos() const;
  inline void set_y_pos(::google::protobuf::uint32 value);

  // required uint32 siege_reputation = 27;
  inline bool has_siege_reputation() const;
  inline void clear_siege_reputation();
  static const int kSiegeReputationFieldNumber = 27;
  inline ::google::protobuf::uint32 siege_reputation() const;
  inline void set_siege_reputation(::google::protobuf::uint32 value);

  // required uint32 cross_svr_war_reputation = 28;
  inline bool has_cross_svr_war_reputation() const;
  inline void clear_cross_svr_war_reputation();
  static const int kCrossSvrWarReputationFieldNumber = 28;
  inline ::google::protobuf::uint32 cross_svr_war_reputation() const;
  inline void set_cross_svr_war_reputation(::google::protobuf::uint32 value);

  // required uint32 max_hp = 29;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 29;
  inline ::google::protobuf::uint32 max_hp() const;
  inline void set_max_hp(::google::protobuf::uint32 value);

  // required uint32 cur_hp = 30;
  inline bool has_cur_hp() const;
  inline void clear_cur_hp();
  static const int kCurHpFieldNumber = 30;
  inline ::google::protobuf::uint32 cur_hp() const;
  inline void set_cur_hp(::google::protobuf::uint32 value);

  // required uint32 absorb_hp = 31;
  inline bool has_absorb_hp() const;
  inline void clear_absorb_hp();
  static const int kAbsorbHpFieldNumber = 31;
  inline ::google::protobuf::uint32 absorb_hp() const;
  inline void set_absorb_hp(::google::protobuf::uint32 value);

  // required uint32 max_mp = 32;
  inline bool has_max_mp() const;
  inline void clear_max_mp();
  static const int kMaxMpFieldNumber = 32;
  inline ::google::protobuf::uint32 max_mp() const;
  inline void set_max_mp(::google::protobuf::uint32 value);

  // required uint32 cur_mp = 33;
  inline bool has_cur_mp() const;
  inline void clear_cur_mp();
  static const int kCurMpFieldNumber = 33;
  inline ::google::protobuf::uint32 cur_mp() const;
  inline void set_cur_mp(::google::protobuf::uint32 value);

  // required uint32 absorb_mp = 34;
  inline bool has_absorb_mp() const;
  inline void clear_absorb_mp();
  static const int kAbsorbMpFieldNumber = 34;
  inline ::google::protobuf::uint32 absorb_mp() const;
  inline void set_absorb_mp(::google::protobuf::uint32 value);

  // required uint32 attack_min = 35;
  inline bool has_attack_min() const;
  inline void clear_attack_min();
  static const int kAttackMinFieldNumber = 35;
  inline ::google::protobuf::uint32 attack_min() const;
  inline void set_attack_min(::google::protobuf::uint32 value);

  // required uint32 attack_max = 36;
  inline bool has_attack_max() const;
  inline void clear_attack_max();
  static const int kAttackMaxFieldNumber = 36;
  inline ::google::protobuf::uint32 attack_max() const;
  inline void set_attack_max(::google::protobuf::uint32 value);

  // required uint32 defense_min = 37;
  inline bool has_defense_min() const;
  inline void clear_defense_min();
  static const int kDefenseMinFieldNumber = 37;
  inline ::google::protobuf::uint32 defense_min() const;
  inline void set_defense_min(::google::protobuf::uint32 value);

  // required uint32 defense_max = 38;
  inline bool has_defense_max() const;
  inline void clear_defense_max();
  static const int kDefenseMaxFieldNumber = 38;
  inline ::google::protobuf::uint32 defense_max() const;
  inline void set_defense_max(::google::protobuf::uint32 value);

  // required uint32 hit_point = 39;
  inline bool has_hit_point() const;
  inline void clear_hit_point();
  static const int kHitPointFieldNumber = 39;
  inline ::google::protobuf::uint32 hit_point() const;
  inline void set_hit_point(::google::protobuf::uint32 value);

  // required uint32 dodge = 40;
  inline bool has_dodge() const;
  inline void clear_dodge();
  static const int kDodgeFieldNumber = 40;
  inline ::google::protobuf::uint32 dodge() const;
  inline void set_dodge(::google::protobuf::uint32 value);

  // required uint32 stability = 41;
  inline bool has_stability() const;
  inline void clear_stability();
  static const int kStabilityFieldNumber = 41;
  inline ::google::protobuf::uint32 stability() const;
  inline void set_stability(::google::protobuf::uint32 value);

  // required uint32 recover = 42;
  inline bool has_recover() const;
  inline void clear_recover();
  static const int kRecoverFieldNumber = 42;
  inline ::google::protobuf::uint32 recover() const;
  inline void set_recover(::google::protobuf::uint32 value);

  // required uint32 attack_speed = 43;
  inline bool has_attack_speed() const;
  inline void clear_attack_speed();
  static const int kAttackSpeedFieldNumber = 43;
  inline ::google::protobuf::uint32 attack_speed() const;
  inline void set_attack_speed(::google::protobuf::uint32 value);

  // required uint32 frozen_addition_ratio = 44;
  inline bool has_frozen_addition_ratio() const;
  inline void clear_frozen_addition_ratio();
  static const int kFrozenAdditionRatioFieldNumber = 44;
  inline ::google::protobuf::uint32 frozen_addition_ratio() const;
  inline void set_frozen_addition_ratio(::google::protobuf::uint32 value);

  // required uint32 poisoning_addition_ratio = 45;
  inline bool has_poisoning_addition_ratio() const;
  inline void clear_poisoning_addition_ratio();
  static const int kPoisoningAdditionRatioFieldNumber = 45;
  inline ::google::protobuf::uint32 poisoning_addition_ratio() const;
  inline void set_poisoning_addition_ratio(::google::protobuf::uint32 value);

  // required uint32 palsy_addition_ratio = 46;
  inline bool has_palsy_addition_ratio() const;
  inline void clear_palsy_addition_ratio();
  static const int kPalsyAdditionRatioFieldNumber = 46;
  inline ::google::protobuf::uint32 palsy_addition_ratio() const;
  inline void set_palsy_addition_ratio(::google::protobuf::uint32 value);

  // required uint32 dizziness_addition_ratio = 47;
  inline bool has_dizziness_addition_ratio() const;
  inline void clear_dizziness_addition_ratio();
  static const int kDizzinessAdditionRatioFieldNumber = 47;
  inline ::google::protobuf::uint32 dizziness_addition_ratio() const;
  inline void set_dizziness_addition_ratio(::google::protobuf::uint32 value);

  // required uint32 frozen_resistance_ratio = 48;
  inline bool has_frozen_resistance_ratio() const;
  inline void clear_frozen_resistance_ratio();
  static const int kFrozenResistanceRatioFieldNumber = 48;
  inline ::google::protobuf::uint32 frozen_resistance_ratio() const;
  inline void set_frozen_resistance_ratio(::google::protobuf::uint32 value);

  // required uint32 poisoning_resistance_ratio = 49;
  inline bool has_poisoning_resistance_ratio() const;
  inline void clear_poisoning_resistance_ratio();
  static const int kPoisoningResistanceRatioFieldNumber = 49;
  inline ::google::protobuf::uint32 poisoning_resistance_ratio() const;
  inline void set_poisoning_resistance_ratio(::google::protobuf::uint32 value);

  // required uint32 palsy_resistance_ratio = 50;
  inline bool has_palsy_resistance_ratio() const;
  inline void clear_palsy_resistance_ratio();
  static const int kPalsyResistanceRatioFieldNumber = 50;
  inline ::google::protobuf::uint32 palsy_resistance_ratio() const;
  inline void set_palsy_resistance_ratio(::google::protobuf::uint32 value);

  // required uint32 dizziness_resistance_ratio = 51;
  inline bool has_dizziness_resistance_ratio() const;
  inline void clear_dizziness_resistance_ratio();
  static const int kDizzinessResistanceRatioFieldNumber = 51;
  inline ::google::protobuf::uint32 dizziness_resistance_ratio() const;
  inline void set_dizziness_resistance_ratio(::google::protobuf::uint32 value);

  // required uint32 output_hurt_promote_ratio = 52;
  inline bool has_output_hurt_promote_ratio() const;
  inline void clear_output_hurt_promote_ratio();
  static const int kOutputHurtPromoteRatioFieldNumber = 52;
  inline ::google::protobuf::uint32 output_hurt_promote_ratio() const;
  inline void set_output_hurt_promote_ratio(::google::protobuf::uint32 value);

  // required uint32 suffer_hurt_reduce_ratio = 53;
  inline bool has_suffer_hurt_reduce_ratio() const;
  inline void clear_suffer_hurt_reduce_ratio();
  static const int kSufferHurtReduceRatioFieldNumber = 53;
  inline ::google::protobuf::uint32 suffer_hurt_reduce_ratio() const;
  inline void set_suffer_hurt_reduce_ratio(::google::protobuf::uint32 value);

  // required uint32 ignore_defense_ratio = 54;
  inline bool has_ignore_defense_ratio() const;
  inline void clear_ignore_defense_ratio();
  static const int kIgnoreDefenseRatioFieldNumber = 54;
  inline ::google::protobuf::uint32 ignore_defense_ratio() const;
  inline void set_ignore_defense_ratio(::google::protobuf::uint32 value);

  // required uint32 rebound_hurt_ratio = 55;
  inline bool has_rebound_hurt_ratio() const;
  inline void clear_rebound_hurt_ratio();
  static const int kReboundHurtRatioFieldNumber = 55;
  inline ::google::protobuf::uint32 rebound_hurt_ratio() const;
  inline void set_rebound_hurt_ratio(::google::protobuf::uint32 value);

  // required uint32 exp_coefficient = 56;
  inline bool has_exp_coefficient() const;
  inline void clear_exp_coefficient();
  static const int kExpCoefficientFieldNumber = 56;
  inline ::google::protobuf::uint32 exp_coefficient() const;
  inline void set_exp_coefficient(::google::protobuf::uint32 value);

  // required uint32 move_speed = 57;
  inline bool has_move_speed() const;
  inline void clear_move_speed();
  static const int kMoveSpeedFieldNumber = 57;
  inline ::google::protobuf::uint32 move_speed() const;
  inline void set_move_speed(::google::protobuf::uint32 value);

  // required uint32 armor_id = 58;
  inline bool has_armor_id() const;
  inline void clear_armor_id();
  static const int kArmorIdFieldNumber = 58;
  inline ::google::protobuf::uint32 armor_id() const;
  inline void set_armor_id(::google::protobuf::uint32 value);

  // required uint32 weapon_id = 59;
  inline bool has_weapon_id() const;
  inline void clear_weapon_id();
  static const int kWeaponIdFieldNumber = 59;
  inline ::google::protobuf::uint32 weapon_id() const;
  inline void set_weapon_id(::google::protobuf::uint32 value);

  // required uint32 mounts_id = 60;
  inline bool has_mounts_id() const;
  inline void clear_mounts_id();
  static const int kMountsIdFieldNumber = 60;
  inline ::google::protobuf::uint32 mounts_id() const;
  inline void set_mounts_id(::google::protobuf::uint32 value);

  // required uint32 backpack_size = 61;
  inline bool has_backpack_size() const;
  inline void clear_backpack_size();
  static const int kBackpackSizeFieldNumber = 61;
  inline ::google::protobuf::uint32 backpack_size() const;
  inline void set_backpack_size(::google::protobuf::uint32 value);

  // required uint32 warehouse_size = 62;
  inline bool has_warehouse_size() const;
  inline void clear_warehouse_size();
  static const int kWarehouseSizeFieldNumber = 62;
  inline ::google::protobuf::uint32 warehouse_size() const;
  inline void set_warehouse_size(::google::protobuf::uint32 value);

  // required uint32 physical_power = 63;
  inline bool has_physical_power() const;
  inline void clear_physical_power();
  static const int kPhysicalPowerFieldNumber = 63;
  inline ::google::protobuf::uint32 physical_power() const;
  inline void set_physical_power(::google::protobuf::uint32 value);

  // required uint32 fighting_power = 64;
  inline bool has_fighting_power() const;
  inline void clear_fighting_power();
  static const int kFightingPowerFieldNumber = 64;
  inline ::google::protobuf::uint32 fighting_power() const;
  inline void set_fighting_power(::google::protobuf::uint32 value);

  // required uint32 anger = 65;
  inline bool has_anger() const;
  inline void clear_anger();
  static const int kAngerFieldNumber = 65;
  inline ::google::protobuf::uint32 anger() const;
  inline void set_anger(::google::protobuf::uint32 value);

  // required uint32 create_time = 66;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 66;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // required uint32 online_time = 67;
  inline bool has_online_time() const;
  inline void clear_online_time();
  static const int kOnlineTimeFieldNumber = 67;
  inline ::google::protobuf::uint32 online_time() const;
  inline void set_online_time(::google::protobuf::uint32 value);

  // required uint32 offline_time = 68;
  inline bool has_offline_time() const;
  inline void clear_offline_time();
  static const int kOfflineTimeFieldNumber = 68;
  inline ::google::protobuf::uint32 offline_time() const;
  inline void set_offline_time(::google::protobuf::uint32 value);

  // required uint32 update_time = 69;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 69;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // required uint32 history_online = 70;
  inline bool has_history_online() const;
  inline void clear_history_online();
  static const int kHistoryOnlineFieldNumber = 70;
  inline ::google::protobuf::uint32 history_online() const;
  inline void set_history_online(::google::protobuf::uint32 value);

  // required uint32 melting = 71;
  inline bool has_melting() const;
  inline void clear_melting();
  static const int kMeltingFieldNumber = 71;
  inline ::google::protobuf::uint32 melting() const;
  inline void set_melting(::google::protobuf::uint32 value);

  // required uint32 potential_share_max = 72;
  inline bool has_potential_share_max() const;
  inline void clear_potential_share_max();
  static const int kPotentialShareMaxFieldNumber = 72;
  inline ::google::protobuf::uint32 potential_share_max() const;
  inline void set_potential_share_max(::google::protobuf::uint32 value);

  // required uint32 potential_accumulation = 73;
  inline bool has_potential_accumulation() const;
  inline void clear_potential_accumulation();
  static const int kPotentialAccumulationFieldNumber = 73;
  inline ::google::protobuf::uint32 potential_accumulation() const;
  inline void set_potential_accumulation(::google::protobuf::uint32 value);

  // required uint32 skill_point = 74;
  inline bool has_skill_point() const;
  inline void clear_skill_point();
  static const int kSkillPointFieldNumber = 74;
  inline ::google::protobuf::uint32 skill_point() const;
  inline void set_skill_point(::google::protobuf::uint32 value);

  // required uint32 popularity = 75;
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 75;
  inline ::google::protobuf::uint32 popularity() const;
  inline void set_popularity(::google::protobuf::uint32 value);

  // required uint32 skill_point_time = 76;
  inline bool has_skill_point_time() const;
  inline void clear_skill_point_time();
  static const int kSkillPointTimeFieldNumber = 76;
  inline ::google::protobuf::uint32 skill_point_time() const;
  inline void set_skill_point_time(::google::protobuf::uint32 value);

  // required uint32 vip_level = 77;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 77;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // required uint32 team_id = 78;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 78;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);

  // required uint32 camp_id = 79;
  inline bool has_camp_id() const;
  inline void clear_camp_id();
  static const int kCampIdFieldNumber = 79;
  inline ::google::protobuf::uint32 camp_id() const;
  inline void set_camp_id(::google::protobuf::uint32 value);

  // required uint32 strategy = 80;
  inline bool has_strategy() const;
  inline void clear_strategy();
  static const int kStrategyFieldNumber = 80;
  inline ::google::protobuf::uint32 strategy() const;
  inline void set_strategy(::google::protobuf::uint32 value);

  // required uint32 store_weapon = 81;
  inline bool has_store_weapon() const;
  inline void clear_store_weapon();
  static const int kStoreWeaponFieldNumber = 81;
  inline ::google::protobuf::uint32 store_weapon() const;
  inline void set_store_weapon(::google::protobuf::uint32 value);

  // required uint32 bow_id = 82;
  inline bool has_bow_id() const;
  inline void clear_bow_id();
  static const int kBowIdFieldNumber = 82;
  inline ::google::protobuf::uint32 bow_id() const;
  inline void set_bow_id(::google::protobuf::uint32 value);

  // required uint32 bow_index = 83;
  inline bool has_bow_index() const;
  inline void clear_bow_index();
  static const int kBowIndexFieldNumber = 83;
  inline ::google::protobuf::uint32 bow_index() const;
  inline void set_bow_index(::google::protobuf::uint32 value);

  // required uint32 cavalry_index = 84;
  inline bool has_cavalry_index() const;
  inline void clear_cavalry_index();
  static const int kCavalryIndexFieldNumber = 84;
  inline ::google::protobuf::uint32 cavalry_index() const;
  inline void set_cavalry_index(::google::protobuf::uint32 value);

  // required uint32 bow_speed = 85;
  inline bool has_bow_speed() const;
  inline void clear_bow_speed();
  static const int kBowSpeedFieldNumber = 85;
  inline ::google::protobuf::uint32 bow_speed() const;
  inline void set_bow_speed(::google::protobuf::uint32 value);

  // required uint32 equip_power = 86;
  inline bool has_equip_power() const;
  inline void clear_equip_power();
  static const int kEquipPowerFieldNumber = 86;
  inline ::google::protobuf::uint32 equip_power() const;
  inline void set_equip_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.tb_player_role)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_system_id();
  inline void clear_has_system_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_experience();
  inline void clear_has_experience();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_tael();
  inline void clear_has_tael();
  inline void set_has_ingot();
  inline void clear_has_ingot();
  inline void set_has_gift_money();
  inline void clear_has_gift_money();
  inline void set_has_is_suspended_account();
  inline void clear_has_is_suspended_account();
  inline void set_has_partner_id();
  inline void clear_has_partner_id();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_family_position();
  inline void clear_has_family_position();
  inline void set_has_can_be_raised();
  inline void clear_has_can_be_raised();
  inline void set_has_family_level();
  inline void clear_has_family_level();
  inline void set_has_can_join_family();
  inline void clear_has_can_join_family();
  inline void set_has_can_be_transmit();
  inline void clear_has_can_be_transmit();
  inline void set_has_pk_model();
  inline void clear_has_pk_model();
  inline void set_has_pk_value();
  inline void clear_has_pk_value();
  inline void set_has_military_strategy();
  inline void clear_has_military_strategy();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_x_pos();
  inline void clear_has_x_pos();
  inline void set_has_y_pos();
  inline void clear_has_y_pos();
  inline void set_has_siege_reputation();
  inline void clear_has_siege_reputation();
  inline void set_has_cross_svr_war_reputation();
  inline void clear_has_cross_svr_war_reputation();
  inline void set_has_max_hp();
  inline void clear_has_max_hp();
  inline void set_has_cur_hp();
  inline void clear_has_cur_hp();
  inline void set_has_absorb_hp();
  inline void clear_has_absorb_hp();
  inline void set_has_max_mp();
  inline void clear_has_max_mp();
  inline void set_has_cur_mp();
  inline void clear_has_cur_mp();
  inline void set_has_absorb_mp();
  inline void clear_has_absorb_mp();
  inline void set_has_attack_min();
  inline void clear_has_attack_min();
  inline void set_has_attack_max();
  inline void clear_has_attack_max();
  inline void set_has_defense_min();
  inline void clear_has_defense_min();
  inline void set_has_defense_max();
  inline void clear_has_defense_max();
  inline void set_has_hit_point();
  inline void clear_has_hit_point();
  inline void set_has_dodge();
  inline void clear_has_dodge();
  inline void set_has_stability();
  inline void clear_has_stability();
  inline void set_has_recover();
  inline void clear_has_recover();
  inline void set_has_attack_speed();
  inline void clear_has_attack_speed();
  inline void set_has_frozen_addition_ratio();
  inline void clear_has_frozen_addition_ratio();
  inline void set_has_poisoning_addition_ratio();
  inline void clear_has_poisoning_addition_ratio();
  inline void set_has_palsy_addition_ratio();
  inline void clear_has_palsy_addition_ratio();
  inline void set_has_dizziness_addition_ratio();
  inline void clear_has_dizziness_addition_ratio();
  inline void set_has_frozen_resistance_ratio();
  inline void clear_has_frozen_resistance_ratio();
  inline void set_has_poisoning_resistance_ratio();
  inline void clear_has_poisoning_resistance_ratio();
  inline void set_has_palsy_resistance_ratio();
  inline void clear_has_palsy_resistance_ratio();
  inline void set_has_dizziness_resistance_ratio();
  inline void clear_has_dizziness_resistance_ratio();
  inline void set_has_output_hurt_promote_ratio();
  inline void clear_has_output_hurt_promote_ratio();
  inline void set_has_suffer_hurt_reduce_ratio();
  inline void clear_has_suffer_hurt_reduce_ratio();
  inline void set_has_ignore_defense_ratio();
  inline void clear_has_ignore_defense_ratio();
  inline void set_has_rebound_hurt_ratio();
  inline void clear_has_rebound_hurt_ratio();
  inline void set_has_exp_coefficient();
  inline void clear_has_exp_coefficient();
  inline void set_has_move_speed();
  inline void clear_has_move_speed();
  inline void set_has_armor_id();
  inline void clear_has_armor_id();
  inline void set_has_weapon_id();
  inline void clear_has_weapon_id();
  inline void set_has_mounts_id();
  inline void clear_has_mounts_id();
  inline void set_has_backpack_size();
  inline void clear_has_backpack_size();
  inline void set_has_warehouse_size();
  inline void clear_has_warehouse_size();
  inline void set_has_physical_power();
  inline void clear_has_physical_power();
  inline void set_has_fighting_power();
  inline void clear_has_fighting_power();
  inline void set_has_anger();
  inline void clear_has_anger();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_online_time();
  inline void clear_has_online_time();
  inline void set_has_offline_time();
  inline void clear_has_offline_time();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_history_online();
  inline void clear_has_history_online();
  inline void set_has_melting();
  inline void clear_has_melting();
  inline void set_has_potential_share_max();
  inline void clear_has_potential_share_max();
  inline void set_has_potential_accumulation();
  inline void clear_has_potential_accumulation();
  inline void set_has_skill_point();
  inline void clear_has_skill_point();
  inline void set_has_popularity();
  inline void clear_has_popularity();
  inline void set_has_skill_point_time();
  inline void clear_has_skill_point_time();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_camp_id();
  inline void clear_has_camp_id();
  inline void set_has_strategy();
  inline void clear_has_strategy();
  inline void set_has_store_weapon();
  inline void clear_has_store_weapon();
  inline void set_has_bow_id();
  inline void clear_has_bow_id();
  inline void set_has_bow_index();
  inline void clear_has_bow_index();
  inline void set_has_cavalry_index();
  inline void clear_has_cavalry_index();
  inline void set_has_bow_speed();
  inline void clear_has_bow_speed();
  inline void set_has_equip_power();
  inline void clear_has_equip_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 system_id_;
  ::google::protobuf::uint32 player_id_;
  ::google::protobuf::uint32 status_;
  ::std::string* role_name_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 profession_;
  ::google::protobuf::uint64 experience_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 tael_;
  ::google::protobuf::uint32 ingot_;
  ::google::protobuf::uint32 gift_money_;
  ::google::protobuf::uint32 is_suspended_account_;
  ::google::protobuf::uint32 partner_id_;
  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 family_position_;
  ::google::protobuf::uint32 can_be_raised_;
  ::google::protobuf::uint32 family_level_;
  ::google::protobuf::uint32 can_join_family_;
  ::google::protobuf::uint32 can_be_transmit_;
  ::google::protobuf::uint32 pk_model_;
  ::google::protobuf::uint32 pk_value_;
  ::google::protobuf::uint32 military_strategy_;
  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 x_pos_;
  ::google::protobuf::uint32 y_pos_;
  ::google::protobuf::uint32 siege_reputation_;
  ::google::protobuf::uint32 cross_svr_war_reputation_;
  ::google::protobuf::uint32 max_hp_;
  ::google::protobuf::uint32 cur_hp_;
  ::google::protobuf::uint32 absorb_hp_;
  ::google::protobuf::uint32 max_mp_;
  ::google::protobuf::uint32 cur_mp_;
  ::google::protobuf::uint32 absorb_mp_;
  ::google::protobuf::uint32 attack_min_;
  ::google::protobuf::uint32 attack_max_;
  ::google::protobuf::uint32 defense_min_;
  ::google::protobuf::uint32 defense_max_;
  ::google::protobuf::uint32 hit_point_;
  ::google::protobuf::uint32 dodge_;
  ::google::protobuf::uint32 stability_;
  ::google::protobuf::uint32 recover_;
  ::google::protobuf::uint32 attack_speed_;
  ::google::protobuf::uint32 frozen_addition_ratio_;
  ::google::protobuf::uint32 poisoning_addition_ratio_;
  ::google::protobuf::uint32 palsy_addition_ratio_;
  ::google::protobuf::uint32 dizziness_addition_ratio_;
  ::google::protobuf::uint32 frozen_resistance_ratio_;
  ::google::protobuf::uint32 poisoning_resistance_ratio_;
  ::google::protobuf::uint32 palsy_resistance_ratio_;
  ::google::protobuf::uint32 dizziness_resistance_ratio_;
  ::google::protobuf::uint32 output_hurt_promote_ratio_;
  ::google::protobuf::uint32 suffer_hurt_reduce_ratio_;
  ::google::protobuf::uint32 ignore_defense_ratio_;
  ::google::protobuf::uint32 rebound_hurt_ratio_;
  ::google::protobuf::uint32 exp_coefficient_;
  ::google::protobuf::uint32 move_speed_;
  ::google::protobuf::uint32 armor_id_;
  ::google::protobuf::uint32 weapon_id_;
  ::google::protobuf::uint32 mounts_id_;
  ::google::protobuf::uint32 backpack_size_;
  ::google::protobuf::uint32 warehouse_size_;
  ::google::protobuf::uint32 physical_power_;
  ::google::protobuf::uint32 fighting_power_;
  ::google::protobuf::uint32 anger_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 online_time_;
  ::google::protobuf::uint32 offline_time_;
  ::google::protobuf::uint32 update_time_;
  ::google::protobuf::uint32 history_online_;
  ::google::protobuf::uint32 melting_;
  ::google::protobuf::uint32 potential_share_max_;
  ::google::protobuf::uint32 potential_accumulation_;
  ::google::protobuf::uint32 skill_point_;
  ::google::protobuf::uint32 popularity_;
  ::google::protobuf::uint32 skill_point_time_;
  ::google::protobuf::uint32 vip_level_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 camp_id_;
  ::google::protobuf::uint32 strategy_;
  ::google::protobuf::uint32 store_weapon_;
  ::google::protobuf::uint32 bow_id_;
  ::google::protobuf::uint32 bow_index_;
  ::google::protobuf::uint32 cavalry_index_;
  ::google::protobuf::uint32 bow_speed_;
  ::google::protobuf::uint32 equip_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(86 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2etb_5fplayer_5frole_2eproto();
  friend void protobuf_AssignDesc_mysql_2etb_5fplayer_5frole_2eproto();
  friend void protobuf_ShutdownFile_mysql_2etb_5fplayer_5frole_2eproto();

  void InitAsDefaultInstance();
  static tb_player_role* default_instance_;
};
// ===================================================================


// ===================================================================

// tb_player_role

// required uint32 role_id = 1;
inline bool tb_player_role::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_player_role::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_player_role::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_player_role::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 tb_player_role::role_id() const {
  return role_id_;
}
inline void tb_player_role::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 system_id = 2;
inline bool tb_player_role::has_system_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_player_role::set_has_system_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_player_role::clear_has_system_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_player_role::clear_system_id() {
  system_id_ = 0u;
  clear_has_system_id();
}
inline ::google::protobuf::uint32 tb_player_role::system_id() const {
  return system_id_;
}
inline void tb_player_role::set_system_id(::google::protobuf::uint32 value) {
  set_has_system_id();
  system_id_ = value;
}

// required uint32 player_id = 3;
inline bool tb_player_role::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_player_role::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_player_role::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_player_role::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 tb_player_role::player_id() const {
  return player_id_;
}
inline void tb_player_role::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required string role_name = 4;
inline bool tb_player_role::has_role_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tb_player_role::set_has_role_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tb_player_role::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tb_player_role::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& tb_player_role::role_name() const {
  return *role_name_;
}
inline void tb_player_role::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void tb_player_role::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void tb_player_role::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_player_role::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* tb_player_role::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_player_role::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 status = 5;
inline bool tb_player_role::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tb_player_role::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tb_player_role::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tb_player_role::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 tb_player_role::status() const {
  return status_;
}
inline void tb_player_role::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 sex = 6;
inline bool tb_player_role::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tb_player_role::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tb_player_role::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tb_player_role::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 tb_player_role::sex() const {
  return sex_;
}
inline void tb_player_role::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// required uint32 profession = 7;
inline bool tb_player_role::has_profession() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tb_player_role::set_has_profession() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tb_player_role::clear_has_profession() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tb_player_role::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 tb_player_role::profession() const {
  return profession_;
}
inline void tb_player_role::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
}

// required uint64 experience = 8;
inline bool tb_player_role::has_experience() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tb_player_role::set_has_experience() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tb_player_role::clear_has_experience() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tb_player_role::clear_experience() {
  experience_ = GOOGLE_ULONGLONG(0);
  clear_has_experience();
}
inline ::google::protobuf::uint64 tb_player_role::experience() const {
  return experience_;
}
inline void tb_player_role::set_experience(::google::protobuf::uint64 value) {
  set_has_experience();
  experience_ = value;
}

// required uint32 level = 9;
inline bool tb_player_role::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tb_player_role::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tb_player_role::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tb_player_role::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 tb_player_role::level() const {
  return level_;
}
inline void tb_player_role::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 tael = 10;
inline bool tb_player_role::has_tael() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tb_player_role::set_has_tael() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tb_player_role::clear_has_tael() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tb_player_role::clear_tael() {
  tael_ = 0u;
  clear_has_tael();
}
inline ::google::protobuf::uint32 tb_player_role::tael() const {
  return tael_;
}
inline void tb_player_role::set_tael(::google::protobuf::uint32 value) {
  set_has_tael();
  tael_ = value;
}

// required uint32 ingot = 11;
inline bool tb_player_role::has_ingot() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tb_player_role::set_has_ingot() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tb_player_role::clear_has_ingot() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tb_player_role::clear_ingot() {
  ingot_ = 0u;
  clear_has_ingot();
}
inline ::google::protobuf::uint32 tb_player_role::ingot() const {
  return ingot_;
}
inline void tb_player_role::set_ingot(::google::protobuf::uint32 value) {
  set_has_ingot();
  ingot_ = value;
}

// required uint32 gift_money = 12;
inline bool tb_player_role::has_gift_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tb_player_role::set_has_gift_money() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tb_player_role::clear_has_gift_money() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tb_player_role::clear_gift_money() {
  gift_money_ = 0u;
  clear_has_gift_money();
}
inline ::google::protobuf::uint32 tb_player_role::gift_money() const {
  return gift_money_;
}
inline void tb_player_role::set_gift_money(::google::protobuf::uint32 value) {
  set_has_gift_money();
  gift_money_ = value;
}

// required uint32 is_suspended_account = 13;
inline bool tb_player_role::has_is_suspended_account() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tb_player_role::set_has_is_suspended_account() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tb_player_role::clear_has_is_suspended_account() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tb_player_role::clear_is_suspended_account() {
  is_suspended_account_ = 0u;
  clear_has_is_suspended_account();
}
inline ::google::protobuf::uint32 tb_player_role::is_suspended_account() const {
  return is_suspended_account_;
}
inline void tb_player_role::set_is_suspended_account(::google::protobuf::uint32 value) {
  set_has_is_suspended_account();
  is_suspended_account_ = value;
}

// required uint32 partner_id = 14;
inline bool tb_player_role::has_partner_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tb_player_role::set_has_partner_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tb_player_role::clear_has_partner_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tb_player_role::clear_partner_id() {
  partner_id_ = 0u;
  clear_has_partner_id();
}
inline ::google::protobuf::uint32 tb_player_role::partner_id() const {
  return partner_id_;
}
inline void tb_player_role::set_partner_id(::google::protobuf::uint32 value) {
  set_has_partner_id();
  partner_id_ = value;
}

// required uint32 family_id = 15;
inline bool tb_player_role::has_family_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void tb_player_role::set_has_family_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void tb_player_role::clear_has_family_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void tb_player_role::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 tb_player_role::family_id() const {
  return family_id_;
}
inline void tb_player_role::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 family_position = 16;
inline bool tb_player_role::has_family_position() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void tb_player_role::set_has_family_position() {
  _has_bits_[0] |= 0x00008000u;
}
inline void tb_player_role::clear_has_family_position() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void tb_player_role::clear_family_position() {
  family_position_ = 0u;
  clear_has_family_position();
}
inline ::google::protobuf::uint32 tb_player_role::family_position() const {
  return family_position_;
}
inline void tb_player_role::set_family_position(::google::protobuf::uint32 value) {
  set_has_family_position();
  family_position_ = value;
}

// required uint32 can_be_raised = 17;
inline bool tb_player_role::has_can_be_raised() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void tb_player_role::set_has_can_be_raised() {
  _has_bits_[0] |= 0x00010000u;
}
inline void tb_player_role::clear_has_can_be_raised() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void tb_player_role::clear_can_be_raised() {
  can_be_raised_ = 0u;
  clear_has_can_be_raised();
}
inline ::google::protobuf::uint32 tb_player_role::can_be_raised() const {
  return can_be_raised_;
}
inline void tb_player_role::set_can_be_raised(::google::protobuf::uint32 value) {
  set_has_can_be_raised();
  can_be_raised_ = value;
}

// required uint32 family_level = 18;
inline bool tb_player_role::has_family_level() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void tb_player_role::set_has_family_level() {
  _has_bits_[0] |= 0x00020000u;
}
inline void tb_player_role::clear_has_family_level() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void tb_player_role::clear_family_level() {
  family_level_ = 0u;
  clear_has_family_level();
}
inline ::google::protobuf::uint32 tb_player_role::family_level() const {
  return family_level_;
}
inline void tb_player_role::set_family_level(::google::protobuf::uint32 value) {
  set_has_family_level();
  family_level_ = value;
}

// required uint32 can_join_family = 19;
inline bool tb_player_role::has_can_join_family() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void tb_player_role::set_has_can_join_family() {
  _has_bits_[0] |= 0x00040000u;
}
inline void tb_player_role::clear_has_can_join_family() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void tb_player_role::clear_can_join_family() {
  can_join_family_ = 0u;
  clear_has_can_join_family();
}
inline ::google::protobuf::uint32 tb_player_role::can_join_family() const {
  return can_join_family_;
}
inline void tb_player_role::set_can_join_family(::google::protobuf::uint32 value) {
  set_has_can_join_family();
  can_join_family_ = value;
}

// required uint32 can_be_transmit = 20;
inline bool tb_player_role::has_can_be_transmit() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void tb_player_role::set_has_can_be_transmit() {
  _has_bits_[0] |= 0x00080000u;
}
inline void tb_player_role::clear_has_can_be_transmit() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void tb_player_role::clear_can_be_transmit() {
  can_be_transmit_ = 0u;
  clear_has_can_be_transmit();
}
inline ::google::protobuf::uint32 tb_player_role::can_be_transmit() const {
  return can_be_transmit_;
}
inline void tb_player_role::set_can_be_transmit(::google::protobuf::uint32 value) {
  set_has_can_be_transmit();
  can_be_transmit_ = value;
}

// required uint32 pk_model = 21;
inline bool tb_player_role::has_pk_model() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void tb_player_role::set_has_pk_model() {
  _has_bits_[0] |= 0x00100000u;
}
inline void tb_player_role::clear_has_pk_model() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void tb_player_role::clear_pk_model() {
  pk_model_ = 0u;
  clear_has_pk_model();
}
inline ::google::protobuf::uint32 tb_player_role::pk_model() const {
  return pk_model_;
}
inline void tb_player_role::set_pk_model(::google::protobuf::uint32 value) {
  set_has_pk_model();
  pk_model_ = value;
}

// required uint32 pk_value = 22;
inline bool tb_player_role::has_pk_value() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void tb_player_role::set_has_pk_value() {
  _has_bits_[0] |= 0x00200000u;
}
inline void tb_player_role::clear_has_pk_value() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void tb_player_role::clear_pk_value() {
  pk_value_ = 0u;
  clear_has_pk_value();
}
inline ::google::protobuf::uint32 tb_player_role::pk_value() const {
  return pk_value_;
}
inline void tb_player_role::set_pk_value(::google::protobuf::uint32 value) {
  set_has_pk_value();
  pk_value_ = value;
}

// required uint32 military_strategy = 23;
inline bool tb_player_role::has_military_strategy() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void tb_player_role::set_has_military_strategy() {
  _has_bits_[0] |= 0x00400000u;
}
inline void tb_player_role::clear_has_military_strategy() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void tb_player_role::clear_military_strategy() {
  military_strategy_ = 0u;
  clear_has_military_strategy();
}
inline ::google::protobuf::uint32 tb_player_role::military_strategy() const {
  return military_strategy_;
}
inline void tb_player_role::set_military_strategy(::google::protobuf::uint32 value) {
  set_has_military_strategy();
  military_strategy_ = value;
}

// required uint32 map_id = 24;
inline bool tb_player_role::has_map_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void tb_player_role::set_has_map_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void tb_player_role::clear_has_map_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void tb_player_role::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 tb_player_role::map_id() const {
  return map_id_;
}
inline void tb_player_role::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// required uint32 x_pos = 25;
inline bool tb_player_role::has_x_pos() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void tb_player_role::set_has_x_pos() {
  _has_bits_[0] |= 0x01000000u;
}
inline void tb_player_role::clear_has_x_pos() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void tb_player_role::clear_x_pos() {
  x_pos_ = 0u;
  clear_has_x_pos();
}
inline ::google::protobuf::uint32 tb_player_role::x_pos() const {
  return x_pos_;
}
inline void tb_player_role::set_x_pos(::google::protobuf::uint32 value) {
  set_has_x_pos();
  x_pos_ = value;
}

// required uint32 y_pos = 26;
inline bool tb_player_role::has_y_pos() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void tb_player_role::set_has_y_pos() {
  _has_bits_[0] |= 0x02000000u;
}
inline void tb_player_role::clear_has_y_pos() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void tb_player_role::clear_y_pos() {
  y_pos_ = 0u;
  clear_has_y_pos();
}
inline ::google::protobuf::uint32 tb_player_role::y_pos() const {
  return y_pos_;
}
inline void tb_player_role::set_y_pos(::google::protobuf::uint32 value) {
  set_has_y_pos();
  y_pos_ = value;
}

// required uint32 siege_reputation = 27;
inline bool tb_player_role::has_siege_reputation() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void tb_player_role::set_has_siege_reputation() {
  _has_bits_[0] |= 0x04000000u;
}
inline void tb_player_role::clear_has_siege_reputation() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void tb_player_role::clear_siege_reputation() {
  siege_reputation_ = 0u;
  clear_has_siege_reputation();
}
inline ::google::protobuf::uint32 tb_player_role::siege_reputation() const {
  return siege_reputation_;
}
inline void tb_player_role::set_siege_reputation(::google::protobuf::uint32 value) {
  set_has_siege_reputation();
  siege_reputation_ = value;
}

// required uint32 cross_svr_war_reputation = 28;
inline bool tb_player_role::has_cross_svr_war_reputation() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void tb_player_role::set_has_cross_svr_war_reputation() {
  _has_bits_[0] |= 0x08000000u;
}
inline void tb_player_role::clear_has_cross_svr_war_reputation() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void tb_player_role::clear_cross_svr_war_reputation() {
  cross_svr_war_reputation_ = 0u;
  clear_has_cross_svr_war_reputation();
}
inline ::google::protobuf::uint32 tb_player_role::cross_svr_war_reputation() const {
  return cross_svr_war_reputation_;
}
inline void tb_player_role::set_cross_svr_war_reputation(::google::protobuf::uint32 value) {
  set_has_cross_svr_war_reputation();
  cross_svr_war_reputation_ = value;
}

// required uint32 max_hp = 29;
inline bool tb_player_role::has_max_hp() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void tb_player_role::set_has_max_hp() {
  _has_bits_[0] |= 0x10000000u;
}
inline void tb_player_role::clear_has_max_hp() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void tb_player_role::clear_max_hp() {
  max_hp_ = 0u;
  clear_has_max_hp();
}
inline ::google::protobuf::uint32 tb_player_role::max_hp() const {
  return max_hp_;
}
inline void tb_player_role::set_max_hp(::google::protobuf::uint32 value) {
  set_has_max_hp();
  max_hp_ = value;
}

// required uint32 cur_hp = 30;
inline bool tb_player_role::has_cur_hp() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void tb_player_role::set_has_cur_hp() {
  _has_bits_[0] |= 0x20000000u;
}
inline void tb_player_role::clear_has_cur_hp() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void tb_player_role::clear_cur_hp() {
  cur_hp_ = 0u;
  clear_has_cur_hp();
}
inline ::google::protobuf::uint32 tb_player_role::cur_hp() const {
  return cur_hp_;
}
inline void tb_player_role::set_cur_hp(::google::protobuf::uint32 value) {
  set_has_cur_hp();
  cur_hp_ = value;
}

// required uint32 absorb_hp = 31;
inline bool tb_player_role::has_absorb_hp() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void tb_player_role::set_has_absorb_hp() {
  _has_bits_[0] |= 0x40000000u;
}
inline void tb_player_role::clear_has_absorb_hp() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void tb_player_role::clear_absorb_hp() {
  absorb_hp_ = 0u;
  clear_has_absorb_hp();
}
inline ::google::protobuf::uint32 tb_player_role::absorb_hp() const {
  return absorb_hp_;
}
inline void tb_player_role::set_absorb_hp(::google::protobuf::uint32 value) {
  set_has_absorb_hp();
  absorb_hp_ = value;
}

// required uint32 max_mp = 32;
inline bool tb_player_role::has_max_mp() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void tb_player_role::set_has_max_mp() {
  _has_bits_[0] |= 0x80000000u;
}
inline void tb_player_role::clear_has_max_mp() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void tb_player_role::clear_max_mp() {
  max_mp_ = 0u;
  clear_has_max_mp();
}
inline ::google::protobuf::uint32 tb_player_role::max_mp() const {
  return max_mp_;
}
inline void tb_player_role::set_max_mp(::google::protobuf::uint32 value) {
  set_has_max_mp();
  max_mp_ = value;
}

// required uint32 cur_mp = 33;
inline bool tb_player_role::has_cur_mp() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void tb_player_role::set_has_cur_mp() {
  _has_bits_[1] |= 0x00000001u;
}
inline void tb_player_role::clear_has_cur_mp() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void tb_player_role::clear_cur_mp() {
  cur_mp_ = 0u;
  clear_has_cur_mp();
}
inline ::google::protobuf::uint32 tb_player_role::cur_mp() const {
  return cur_mp_;
}
inline void tb_player_role::set_cur_mp(::google::protobuf::uint32 value) {
  set_has_cur_mp();
  cur_mp_ = value;
}

// required uint32 absorb_mp = 34;
inline bool tb_player_role::has_absorb_mp() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void tb_player_role::set_has_absorb_mp() {
  _has_bits_[1] |= 0x00000002u;
}
inline void tb_player_role::clear_has_absorb_mp() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void tb_player_role::clear_absorb_mp() {
  absorb_mp_ = 0u;
  clear_has_absorb_mp();
}
inline ::google::protobuf::uint32 tb_player_role::absorb_mp() const {
  return absorb_mp_;
}
inline void tb_player_role::set_absorb_mp(::google::protobuf::uint32 value) {
  set_has_absorb_mp();
  absorb_mp_ = value;
}

// required uint32 attack_min = 35;
inline bool tb_player_role::has_attack_min() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void tb_player_role::set_has_attack_min() {
  _has_bits_[1] |= 0x00000004u;
}
inline void tb_player_role::clear_has_attack_min() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void tb_player_role::clear_attack_min() {
  attack_min_ = 0u;
  clear_has_attack_min();
}
inline ::google::protobuf::uint32 tb_player_role::attack_min() const {
  return attack_min_;
}
inline void tb_player_role::set_attack_min(::google::protobuf::uint32 value) {
  set_has_attack_min();
  attack_min_ = value;
}

// required uint32 attack_max = 36;
inline bool tb_player_role::has_attack_max() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void tb_player_role::set_has_attack_max() {
  _has_bits_[1] |= 0x00000008u;
}
inline void tb_player_role::clear_has_attack_max() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void tb_player_role::clear_attack_max() {
  attack_max_ = 0u;
  clear_has_attack_max();
}
inline ::google::protobuf::uint32 tb_player_role::attack_max() const {
  return attack_max_;
}
inline void tb_player_role::set_attack_max(::google::protobuf::uint32 value) {
  set_has_attack_max();
  attack_max_ = value;
}

// required uint32 defense_min = 37;
inline bool tb_player_role::has_defense_min() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void tb_player_role::set_has_defense_min() {
  _has_bits_[1] |= 0x00000010u;
}
inline void tb_player_role::clear_has_defense_min() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void tb_player_role::clear_defense_min() {
  defense_min_ = 0u;
  clear_has_defense_min();
}
inline ::google::protobuf::uint32 tb_player_role::defense_min() const {
  return defense_min_;
}
inline void tb_player_role::set_defense_min(::google::protobuf::uint32 value) {
  set_has_defense_min();
  defense_min_ = value;
}

// required uint32 defense_max = 38;
inline bool tb_player_role::has_defense_max() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void tb_player_role::set_has_defense_max() {
  _has_bits_[1] |= 0x00000020u;
}
inline void tb_player_role::clear_has_defense_max() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void tb_player_role::clear_defense_max() {
  defense_max_ = 0u;
  clear_has_defense_max();
}
inline ::google::protobuf::uint32 tb_player_role::defense_max() const {
  return defense_max_;
}
inline void tb_player_role::set_defense_max(::google::protobuf::uint32 value) {
  set_has_defense_max();
  defense_max_ = value;
}

// required uint32 hit_point = 39;
inline bool tb_player_role::has_hit_point() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void tb_player_role::set_has_hit_point() {
  _has_bits_[1] |= 0x00000040u;
}
inline void tb_player_role::clear_has_hit_point() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void tb_player_role::clear_hit_point() {
  hit_point_ = 0u;
  clear_has_hit_point();
}
inline ::google::protobuf::uint32 tb_player_role::hit_point() const {
  return hit_point_;
}
inline void tb_player_role::set_hit_point(::google::protobuf::uint32 value) {
  set_has_hit_point();
  hit_point_ = value;
}

// required uint32 dodge = 40;
inline bool tb_player_role::has_dodge() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void tb_player_role::set_has_dodge() {
  _has_bits_[1] |= 0x00000080u;
}
inline void tb_player_role::clear_has_dodge() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void tb_player_role::clear_dodge() {
  dodge_ = 0u;
  clear_has_dodge();
}
inline ::google::protobuf::uint32 tb_player_role::dodge() const {
  return dodge_;
}
inline void tb_player_role::set_dodge(::google::protobuf::uint32 value) {
  set_has_dodge();
  dodge_ = value;
}

// required uint32 stability = 41;
inline bool tb_player_role::has_stability() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void tb_player_role::set_has_stability() {
  _has_bits_[1] |= 0x00000100u;
}
inline void tb_player_role::clear_has_stability() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void tb_player_role::clear_stability() {
  stability_ = 0u;
  clear_has_stability();
}
inline ::google::protobuf::uint32 tb_player_role::stability() const {
  return stability_;
}
inline void tb_player_role::set_stability(::google::protobuf::uint32 value) {
  set_has_stability();
  stability_ = value;
}

// required uint32 recover = 42;
inline bool tb_player_role::has_recover() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void tb_player_role::set_has_recover() {
  _has_bits_[1] |= 0x00000200u;
}
inline void tb_player_role::clear_has_recover() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void tb_player_role::clear_recover() {
  recover_ = 0u;
  clear_has_recover();
}
inline ::google::protobuf::uint32 tb_player_role::recover() const {
  return recover_;
}
inline void tb_player_role::set_recover(::google::protobuf::uint32 value) {
  set_has_recover();
  recover_ = value;
}

// required uint32 attack_speed = 43;
inline bool tb_player_role::has_attack_speed() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void tb_player_role::set_has_attack_speed() {
  _has_bits_[1] |= 0x00000400u;
}
inline void tb_player_role::clear_has_attack_speed() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void tb_player_role::clear_attack_speed() {
  attack_speed_ = 0u;
  clear_has_attack_speed();
}
inline ::google::protobuf::uint32 tb_player_role::attack_speed() const {
  return attack_speed_;
}
inline void tb_player_role::set_attack_speed(::google::protobuf::uint32 value) {
  set_has_attack_speed();
  attack_speed_ = value;
}

// required uint32 frozen_addition_ratio = 44;
inline bool tb_player_role::has_frozen_addition_ratio() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void tb_player_role::set_has_frozen_addition_ratio() {
  _has_bits_[1] |= 0x00000800u;
}
inline void tb_player_role::clear_has_frozen_addition_ratio() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void tb_player_role::clear_frozen_addition_ratio() {
  frozen_addition_ratio_ = 0u;
  clear_has_frozen_addition_ratio();
}
inline ::google::protobuf::uint32 tb_player_role::frozen_addition_ratio() const {
  return frozen_addition_ratio_;
}
inline void tb_player_role::set_frozen_addition_ratio(::google::protobuf::uint32 value) {
  set_has_frozen_addition_ratio();
  frozen_addition_ratio_ = value;
}

// required uint32 poisoning_addition_ratio = 45;
inline bool tb_player_role::has_poisoning_addition_ratio() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void tb_player_role::set_has_poisoning_addition_ratio() {
  _has_bits_[1] |= 0x00001000u;
}
inline void tb_player_role::clear_has_poisoning_addition_ratio() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void tb_player_role::clear_poisoning_addition_ratio() {
  poisoning_addition_ratio_ = 0u;
  clear_has_poisoning_addition_ratio();
}
inline ::google::protobuf::uint32 tb_player_role::poisoning_addition_ratio() const {
  return poisoning_addition_ratio_;
}
inline void tb_player_role::set_poisoning_addition_ratio(::google::protobuf::uint32 value) {
  set_has_poisoning_addition_ratio();
  poisoning_addition_ratio_ = value;
}

// required uint32 palsy_addition_ratio = 46;
inline bool tb_player_role::has_palsy_addition_ratio() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void tb_player_role::set_has_palsy_addition_ratio() {
  _has_bits_[1] |= 0x00002000u;
}
inline void tb_player_role::clear_has_palsy_addition_ratio() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void tb_player_role::clear_palsy_addition_ratio() {
  palsy_addition_ratio_ = 0u;
  clear_has_palsy_addition_ratio();
}
inline ::google::protobuf::uint32 tb_player_role::palsy_addition_ratio() const {
  return palsy_addition_ratio_;
}
inline void tb_player_role::set_palsy_addition_ratio(::google::protobuf::uint32 value) {
  set_has_palsy_addition_ratio();
  palsy_addition_ratio_ = value;
}

// required uint32 dizziness_addition_ratio = 47;
inline bool tb_player_role::has_dizziness_addition_ratio() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void tb_player_role::set_has_dizziness_addition_ratio() {
  _has_bits_[1] |= 0x00004000u;
}
inline void tb_player_role::clear_has_dizziness_addition_ratio() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void tb_player_role::clear_dizziness_addition_ratio() {
  dizziness_addition_ratio_ = 0u;
  clear_has_dizziness_addition_ratio();
}
inline ::google::protobuf::uint32 tb_player_role::dizziness_addition_ratio() const {
  return dizziness_addition_ratio_;
}
inline void tb_player_role::set_dizziness_addition_ratio(::google::protobuf::uint32 value) {
  set_has_dizziness_addition_ratio();
  dizziness_addition_ratio_ = value;
}

// required uint32 frozen_resistance_ratio = 48;
inline bool tb_player_role::has_frozen_resistance_ratio() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void tb_player_role::set_has_frozen_resistance_ratio() {
  _has_bits_[1] |= 0x00008000u;
}
inline void tb_player_role::clear_has_frozen_resistance_ratio() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void tb_player_role::clear_frozen_resistance_ratio() {
  frozen_resistance_ratio_ = 0u;
  clear_has_frozen_resistance_ratio();
}
inline ::google::protobuf::uint32 tb_player_role::frozen_resistance_ratio() const {
  return frozen_resistance_ratio_;
}
inline void tb_player_role::set_frozen_resistance_ratio(::google::protobuf::uint32 value) {
  set_has_frozen_resistance_ratio();
  frozen_resistance_ratio_ = value;
}

// required uint32 poisoning_resistance_ratio = 49;
inline bool tb_player_role::has_poisoning_resistance_ratio() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void tb_player_role::set_has_poisoning_resistance_ratio() {
  _has_bits_[1] |= 0x00010000u;
}
inline void tb_player_role::clear_has_poisoning_resistance_ratio() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void tb_player_role::clear_poisoning_resistance_ratio() {
  poisoning_resistance_ratio_ = 0u;
  clear_has_poisoning_resistance_ratio();
}
inline ::google::protobuf::uint32 tb_player_role::poisoning_resistance_ratio() const {
  return poisoning_resistance_ratio_;
}
inline void tb_player_role::set_poisoning_resistance_ratio(::google::protobuf::uint32 value) {
  set_has_poisoning_resistance_ratio();
  poisoning_resistance_ratio_ = value;
}

// required uint32 palsy_resistance_ratio = 50;
inline bool tb_player_role::has_palsy_resistance_ratio() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void tb_player_role::set_has_palsy_resistance_ratio() {
  _has_bits_[1] |= 0x00020000u;
}
inline void tb_player_role::clear_has_palsy_resistance_ratio() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void tb_player_role::clear_palsy_resistance_ratio() {
  palsy_resistance_ratio_ = 0u;
  clear_has_palsy_resistance_ratio();
}
inline ::google::protobuf::uint32 tb_player_role::palsy_resistance_ratio() const {
  return palsy_resistance_ratio_;
}
inline void tb_player_role::set_palsy_resistance_ratio(::google::protobuf::uint32 value) {
  set_has_palsy_resistance_ratio();
  palsy_resistance_ratio_ = value;
}

// required uint32 dizziness_resistance_ratio = 51;
inline bool tb_player_role::has_dizziness_resistance_ratio() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void tb_player_role::set_has_dizziness_resistance_ratio() {
  _has_bits_[1] |= 0x00040000u;
}
inline void tb_player_role::clear_has_dizziness_resistance_ratio() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void tb_player_role::clear_dizziness_resistance_ratio() {
  dizziness_resistance_ratio_ = 0u;
  clear_has_dizziness_resistance_ratio();
}
inline ::google::protobuf::uint32 tb_player_role::dizziness_resistance_ratio() const {
  return dizziness_resistance_ratio_;
}
inline void tb_player_role::set_dizziness_resistance_ratio(::google::protobuf::uint32 value) {
  set_has_dizziness_resistance_ratio();
  dizziness_resistance_ratio_ = value;
}

// required uint32 output_hurt_promote_ratio = 52;
inline bool tb_player_role::has_output_hurt_promote_ratio() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void tb_player_role::set_has_output_hurt_promote_ratio() {
  _has_bits_[1] |= 0x00080000u;
}
inline void tb_player_role::clear_has_output_hurt_promote_ratio() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void tb_player_role::clear_output_hurt_promote_ratio() {
  output_hurt_promote_ratio_ = 0u;
  clear_has_output_hurt_promote_ratio();
}
inline ::google::protobuf::uint32 tb_player_role::output_hurt_promote_ratio() const {
  return output_hurt_promote_ratio_;
}
inline void tb_player_role::set_output_hurt_promote_ratio(::google::protobuf::uint32 value) {
  set_has_output_hurt_promote_ratio();
  output_hurt_promote_ratio_ = value;
}

// required uint32 suffer_hurt_reduce_ratio = 53;
inline bool tb_player_role::has_suffer_hurt_reduce_ratio() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void tb_player_role::set_has_suffer_hurt_reduce_ratio() {
  _has_bits_[1] |= 0x00100000u;
}
inline void tb_player_role::clear_has_suffer_hurt_reduce_ratio() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void tb_player_role::clear_suffer_hurt_reduce_ratio() {
  suffer_hurt_reduce_ratio_ = 0u;
  clear_has_suffer_hurt_reduce_ratio();
}
inline ::google::protobuf::uint32 tb_player_role::suffer_hurt_reduce_ratio() const {
  return suffer_hurt_reduce_ratio_;
}
inline void tb_player_role::set_suffer_hurt_reduce_ratio(::google::protobuf::uint32 value) {
  set_has_suffer_hurt_reduce_ratio();
  suffer_hurt_reduce_ratio_ = value;
}

// required uint32 ignore_defense_ratio = 54;
inline bool tb_player_role::has_ignore_defense_ratio() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void tb_player_role::set_has_ignore_defense_ratio() {
  _has_bits_[1] |= 0x00200000u;
}
inline void tb_player_role::clear_has_ignore_defense_ratio() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void tb_player_role::clear_ignore_defense_ratio() {
  ignore_defense_ratio_ = 0u;
  clear_has_ignore_defense_ratio();
}
inline ::google::protobuf::uint32 tb_player_role::ignore_defense_ratio() const {
  return ignore_defense_ratio_;
}
inline void tb_player_role::set_ignore_defense_ratio(::google::protobuf::uint32 value) {
  set_has_ignore_defense_ratio();
  ignore_defense_ratio_ = value;
}

// required uint32 rebound_hurt_ratio = 55;
inline bool tb_player_role::has_rebound_hurt_ratio() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void tb_player_role::set_has_rebound_hurt_ratio() {
  _has_bits_[1] |= 0x00400000u;
}
inline void tb_player_role::clear_has_rebound_hurt_ratio() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void tb_player_role::clear_rebound_hurt_ratio() {
  rebound_hurt_ratio_ = 0u;
  clear_has_rebound_hurt_ratio();
}
inline ::google::protobuf::uint32 tb_player_role::rebound_hurt_ratio() const {
  return rebound_hurt_ratio_;
}
inline void tb_player_role::set_rebound_hurt_ratio(::google::protobuf::uint32 value) {
  set_has_rebound_hurt_ratio();
  rebound_hurt_ratio_ = value;
}

// required uint32 exp_coefficient = 56;
inline bool tb_player_role::has_exp_coefficient() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void tb_player_role::set_has_exp_coefficient() {
  _has_bits_[1] |= 0x00800000u;
}
inline void tb_player_role::clear_has_exp_coefficient() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void tb_player_role::clear_exp_coefficient() {
  exp_coefficient_ = 0u;
  clear_has_exp_coefficient();
}
inline ::google::protobuf::uint32 tb_player_role::exp_coefficient() const {
  return exp_coefficient_;
}
inline void tb_player_role::set_exp_coefficient(::google::protobuf::uint32 value) {
  set_has_exp_coefficient();
  exp_coefficient_ = value;
}

// required uint32 move_speed = 57;
inline bool tb_player_role::has_move_speed() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void tb_player_role::set_has_move_speed() {
  _has_bits_[1] |= 0x01000000u;
}
inline void tb_player_role::clear_has_move_speed() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void tb_player_role::clear_move_speed() {
  move_speed_ = 0u;
  clear_has_move_speed();
}
inline ::google::protobuf::uint32 tb_player_role::move_speed() const {
  return move_speed_;
}
inline void tb_player_role::set_move_speed(::google::protobuf::uint32 value) {
  set_has_move_speed();
  move_speed_ = value;
}

// required uint32 armor_id = 58;
inline bool tb_player_role::has_armor_id() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void tb_player_role::set_has_armor_id() {
  _has_bits_[1] |= 0x02000000u;
}
inline void tb_player_role::clear_has_armor_id() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void tb_player_role::clear_armor_id() {
  armor_id_ = 0u;
  clear_has_armor_id();
}
inline ::google::protobuf::uint32 tb_player_role::armor_id() const {
  return armor_id_;
}
inline void tb_player_role::set_armor_id(::google::protobuf::uint32 value) {
  set_has_armor_id();
  armor_id_ = value;
}

// required uint32 weapon_id = 59;
inline bool tb_player_role::has_weapon_id() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void tb_player_role::set_has_weapon_id() {
  _has_bits_[1] |= 0x04000000u;
}
inline void tb_player_role::clear_has_weapon_id() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void tb_player_role::clear_weapon_id() {
  weapon_id_ = 0u;
  clear_has_weapon_id();
}
inline ::google::protobuf::uint32 tb_player_role::weapon_id() const {
  return weapon_id_;
}
inline void tb_player_role::set_weapon_id(::google::protobuf::uint32 value) {
  set_has_weapon_id();
  weapon_id_ = value;
}

// required uint32 mounts_id = 60;
inline bool tb_player_role::has_mounts_id() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void tb_player_role::set_has_mounts_id() {
  _has_bits_[1] |= 0x08000000u;
}
inline void tb_player_role::clear_has_mounts_id() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void tb_player_role::clear_mounts_id() {
  mounts_id_ = 0u;
  clear_has_mounts_id();
}
inline ::google::protobuf::uint32 tb_player_role::mounts_id() const {
  return mounts_id_;
}
inline void tb_player_role::set_mounts_id(::google::protobuf::uint32 value) {
  set_has_mounts_id();
  mounts_id_ = value;
}

// required uint32 backpack_size = 61;
inline bool tb_player_role::has_backpack_size() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void tb_player_role::set_has_backpack_size() {
  _has_bits_[1] |= 0x10000000u;
}
inline void tb_player_role::clear_has_backpack_size() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void tb_player_role::clear_backpack_size() {
  backpack_size_ = 0u;
  clear_has_backpack_size();
}
inline ::google::protobuf::uint32 tb_player_role::backpack_size() const {
  return backpack_size_;
}
inline void tb_player_role::set_backpack_size(::google::protobuf::uint32 value) {
  set_has_backpack_size();
  backpack_size_ = value;
}

// required uint32 warehouse_size = 62;
inline bool tb_player_role::has_warehouse_size() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void tb_player_role::set_has_warehouse_size() {
  _has_bits_[1] |= 0x20000000u;
}
inline void tb_player_role::clear_has_warehouse_size() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void tb_player_role::clear_warehouse_size() {
  warehouse_size_ = 0u;
  clear_has_warehouse_size();
}
inline ::google::protobuf::uint32 tb_player_role::warehouse_size() const {
  return warehouse_size_;
}
inline void tb_player_role::set_warehouse_size(::google::protobuf::uint32 value) {
  set_has_warehouse_size();
  warehouse_size_ = value;
}

// required uint32 physical_power = 63;
inline bool tb_player_role::has_physical_power() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void tb_player_role::set_has_physical_power() {
  _has_bits_[1] |= 0x40000000u;
}
inline void tb_player_role::clear_has_physical_power() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void tb_player_role::clear_physical_power() {
  physical_power_ = 0u;
  clear_has_physical_power();
}
inline ::google::protobuf::uint32 tb_player_role::physical_power() const {
  return physical_power_;
}
inline void tb_player_role::set_physical_power(::google::protobuf::uint32 value) {
  set_has_physical_power();
  physical_power_ = value;
}

// required uint32 fighting_power = 64;
inline bool tb_player_role::has_fighting_power() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void tb_player_role::set_has_fighting_power() {
  _has_bits_[1] |= 0x80000000u;
}
inline void tb_player_role::clear_has_fighting_power() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void tb_player_role::clear_fighting_power() {
  fighting_power_ = 0u;
  clear_has_fighting_power();
}
inline ::google::protobuf::uint32 tb_player_role::fighting_power() const {
  return fighting_power_;
}
inline void tb_player_role::set_fighting_power(::google::protobuf::uint32 value) {
  set_has_fighting_power();
  fighting_power_ = value;
}

// required uint32 anger = 65;
inline bool tb_player_role::has_anger() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void tb_player_role::set_has_anger() {
  _has_bits_[2] |= 0x00000001u;
}
inline void tb_player_role::clear_has_anger() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void tb_player_role::clear_anger() {
  anger_ = 0u;
  clear_has_anger();
}
inline ::google::protobuf::uint32 tb_player_role::anger() const {
  return anger_;
}
inline void tb_player_role::set_anger(::google::protobuf::uint32 value) {
  set_has_anger();
  anger_ = value;
}

// required uint32 create_time = 66;
inline bool tb_player_role::has_create_time() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void tb_player_role::set_has_create_time() {
  _has_bits_[2] |= 0x00000002u;
}
inline void tb_player_role::clear_has_create_time() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void tb_player_role::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 tb_player_role::create_time() const {
  return create_time_;
}
inline void tb_player_role::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// required uint32 online_time = 67;
inline bool tb_player_role::has_online_time() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void tb_player_role::set_has_online_time() {
  _has_bits_[2] |= 0x00000004u;
}
inline void tb_player_role::clear_has_online_time() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void tb_player_role::clear_online_time() {
  online_time_ = 0u;
  clear_has_online_time();
}
inline ::google::protobuf::uint32 tb_player_role::online_time() const {
  return online_time_;
}
inline void tb_player_role::set_online_time(::google::protobuf::uint32 value) {
  set_has_online_time();
  online_time_ = value;
}

// required uint32 offline_time = 68;
inline bool tb_player_role::has_offline_time() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void tb_player_role::set_has_offline_time() {
  _has_bits_[2] |= 0x00000008u;
}
inline void tb_player_role::clear_has_offline_time() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void tb_player_role::clear_offline_time() {
  offline_time_ = 0u;
  clear_has_offline_time();
}
inline ::google::protobuf::uint32 tb_player_role::offline_time() const {
  return offline_time_;
}
inline void tb_player_role::set_offline_time(::google::protobuf::uint32 value) {
  set_has_offline_time();
  offline_time_ = value;
}

// required uint32 update_time = 69;
inline bool tb_player_role::has_update_time() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void tb_player_role::set_has_update_time() {
  _has_bits_[2] |= 0x00000010u;
}
inline void tb_player_role::clear_has_update_time() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void tb_player_role::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 tb_player_role::update_time() const {
  return update_time_;
}
inline void tb_player_role::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
}

// required uint32 history_online = 70;
inline bool tb_player_role::has_history_online() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void tb_player_role::set_has_history_online() {
  _has_bits_[2] |= 0x00000020u;
}
inline void tb_player_role::clear_has_history_online() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void tb_player_role::clear_history_online() {
  history_online_ = 0u;
  clear_has_history_online();
}
inline ::google::protobuf::uint32 tb_player_role::history_online() const {
  return history_online_;
}
inline void tb_player_role::set_history_online(::google::protobuf::uint32 value) {
  set_has_history_online();
  history_online_ = value;
}

// required uint32 melting = 71;
inline bool tb_player_role::has_melting() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void tb_player_role::set_has_melting() {
  _has_bits_[2] |= 0x00000040u;
}
inline void tb_player_role::clear_has_melting() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void tb_player_role::clear_melting() {
  melting_ = 0u;
  clear_has_melting();
}
inline ::google::protobuf::uint32 tb_player_role::melting() const {
  return melting_;
}
inline void tb_player_role::set_melting(::google::protobuf::uint32 value) {
  set_has_melting();
  melting_ = value;
}

// required uint32 potential_share_max = 72;
inline bool tb_player_role::has_potential_share_max() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void tb_player_role::set_has_potential_share_max() {
  _has_bits_[2] |= 0x00000080u;
}
inline void tb_player_role::clear_has_potential_share_max() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void tb_player_role::clear_potential_share_max() {
  potential_share_max_ = 0u;
  clear_has_potential_share_max();
}
inline ::google::protobuf::uint32 tb_player_role::potential_share_max() const {
  return potential_share_max_;
}
inline void tb_player_role::set_potential_share_max(::google::protobuf::uint32 value) {
  set_has_potential_share_max();
  potential_share_max_ = value;
}

// required uint32 potential_accumulation = 73;
inline bool tb_player_role::has_potential_accumulation() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void tb_player_role::set_has_potential_accumulation() {
  _has_bits_[2] |= 0x00000100u;
}
inline void tb_player_role::clear_has_potential_accumulation() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void tb_player_role::clear_potential_accumulation() {
  potential_accumulation_ = 0u;
  clear_has_potential_accumulation();
}
inline ::google::protobuf::uint32 tb_player_role::potential_accumulation() const {
  return potential_accumulation_;
}
inline void tb_player_role::set_potential_accumulation(::google::protobuf::uint32 value) {
  set_has_potential_accumulation();
  potential_accumulation_ = value;
}

// required uint32 skill_point = 74;
inline bool tb_player_role::has_skill_point() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void tb_player_role::set_has_skill_point() {
  _has_bits_[2] |= 0x00000200u;
}
inline void tb_player_role::clear_has_skill_point() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void tb_player_role::clear_skill_point() {
  skill_point_ = 0u;
  clear_has_skill_point();
}
inline ::google::protobuf::uint32 tb_player_role::skill_point() const {
  return skill_point_;
}
inline void tb_player_role::set_skill_point(::google::protobuf::uint32 value) {
  set_has_skill_point();
  skill_point_ = value;
}

// required uint32 popularity = 75;
inline bool tb_player_role::has_popularity() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void tb_player_role::set_has_popularity() {
  _has_bits_[2] |= 0x00000400u;
}
inline void tb_player_role::clear_has_popularity() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void tb_player_role::clear_popularity() {
  popularity_ = 0u;
  clear_has_popularity();
}
inline ::google::protobuf::uint32 tb_player_role::popularity() const {
  return popularity_;
}
inline void tb_player_role::set_popularity(::google::protobuf::uint32 value) {
  set_has_popularity();
  popularity_ = value;
}

// required uint32 skill_point_time = 76;
inline bool tb_player_role::has_skill_point_time() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void tb_player_role::set_has_skill_point_time() {
  _has_bits_[2] |= 0x00000800u;
}
inline void tb_player_role::clear_has_skill_point_time() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void tb_player_role::clear_skill_point_time() {
  skill_point_time_ = 0u;
  clear_has_skill_point_time();
}
inline ::google::protobuf::uint32 tb_player_role::skill_point_time() const {
  return skill_point_time_;
}
inline void tb_player_role::set_skill_point_time(::google::protobuf::uint32 value) {
  set_has_skill_point_time();
  skill_point_time_ = value;
}

// required uint32 vip_level = 77;
inline bool tb_player_role::has_vip_level() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void tb_player_role::set_has_vip_level() {
  _has_bits_[2] |= 0x00001000u;
}
inline void tb_player_role::clear_has_vip_level() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void tb_player_role::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 tb_player_role::vip_level() const {
  return vip_level_;
}
inline void tb_player_role::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// required uint32 team_id = 78;
inline bool tb_player_role::has_team_id() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void tb_player_role::set_has_team_id() {
  _has_bits_[2] |= 0x00002000u;
}
inline void tb_player_role::clear_has_team_id() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void tb_player_role::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 tb_player_role::team_id() const {
  return team_id_;
}
inline void tb_player_role::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// required uint32 camp_id = 79;
inline bool tb_player_role::has_camp_id() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void tb_player_role::set_has_camp_id() {
  _has_bits_[2] |= 0x00004000u;
}
inline void tb_player_role::clear_has_camp_id() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void tb_player_role::clear_camp_id() {
  camp_id_ = 0u;
  clear_has_camp_id();
}
inline ::google::protobuf::uint32 tb_player_role::camp_id() const {
  return camp_id_;
}
inline void tb_player_role::set_camp_id(::google::protobuf::uint32 value) {
  set_has_camp_id();
  camp_id_ = value;
}

// required uint32 strategy = 80;
inline bool tb_player_role::has_strategy() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void tb_player_role::set_has_strategy() {
  _has_bits_[2] |= 0x00008000u;
}
inline void tb_player_role::clear_has_strategy() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void tb_player_role::clear_strategy() {
  strategy_ = 0u;
  clear_has_strategy();
}
inline ::google::protobuf::uint32 tb_player_role::strategy() const {
  return strategy_;
}
inline void tb_player_role::set_strategy(::google::protobuf::uint32 value) {
  set_has_strategy();
  strategy_ = value;
}

// required uint32 store_weapon = 81;
inline bool tb_player_role::has_store_weapon() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void tb_player_role::set_has_store_weapon() {
  _has_bits_[2] |= 0x00010000u;
}
inline void tb_player_role::clear_has_store_weapon() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void tb_player_role::clear_store_weapon() {
  store_weapon_ = 0u;
  clear_has_store_weapon();
}
inline ::google::protobuf::uint32 tb_player_role::store_weapon() const {
  return store_weapon_;
}
inline void tb_player_role::set_store_weapon(::google::protobuf::uint32 value) {
  set_has_store_weapon();
  store_weapon_ = value;
}

// required uint32 bow_id = 82;
inline bool tb_player_role::has_bow_id() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void tb_player_role::set_has_bow_id() {
  _has_bits_[2] |= 0x00020000u;
}
inline void tb_player_role::clear_has_bow_id() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void tb_player_role::clear_bow_id() {
  bow_id_ = 0u;
  clear_has_bow_id();
}
inline ::google::protobuf::uint32 tb_player_role::bow_id() const {
  return bow_id_;
}
inline void tb_player_role::set_bow_id(::google::protobuf::uint32 value) {
  set_has_bow_id();
  bow_id_ = value;
}

// required uint32 bow_index = 83;
inline bool tb_player_role::has_bow_index() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void tb_player_role::set_has_bow_index() {
  _has_bits_[2] |= 0x00040000u;
}
inline void tb_player_role::clear_has_bow_index() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void tb_player_role::clear_bow_index() {
  bow_index_ = 0u;
  clear_has_bow_index();
}
inline ::google::protobuf::uint32 tb_player_role::bow_index() const {
  return bow_index_;
}
inline void tb_player_role::set_bow_index(::google::protobuf::uint32 value) {
  set_has_bow_index();
  bow_index_ = value;
}

// required uint32 cavalry_index = 84;
inline bool tb_player_role::has_cavalry_index() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void tb_player_role::set_has_cavalry_index() {
  _has_bits_[2] |= 0x00080000u;
}
inline void tb_player_role::clear_has_cavalry_index() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void tb_player_role::clear_cavalry_index() {
  cavalry_index_ = 0u;
  clear_has_cavalry_index();
}
inline ::google::protobuf::uint32 tb_player_role::cavalry_index() const {
  return cavalry_index_;
}
inline void tb_player_role::set_cavalry_index(::google::protobuf::uint32 value) {
  set_has_cavalry_index();
  cavalry_index_ = value;
}

// required uint32 bow_speed = 85;
inline bool tb_player_role::has_bow_speed() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void tb_player_role::set_has_bow_speed() {
  _has_bits_[2] |= 0x00100000u;
}
inline void tb_player_role::clear_has_bow_speed() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void tb_player_role::clear_bow_speed() {
  bow_speed_ = 0u;
  clear_has_bow_speed();
}
inline ::google::protobuf::uint32 tb_player_role::bow_speed() const {
  return bow_speed_;
}
inline void tb_player_role::set_bow_speed(::google::protobuf::uint32 value) {
  set_has_bow_speed();
  bow_speed_ = value;
}

// required uint32 equip_power = 86;
inline bool tb_player_role::has_equip_power() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void tb_player_role::set_has_equip_power() {
  _has_bits_[2] |= 0x00200000u;
}
inline void tb_player_role::clear_has_equip_power() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void tb_player_role::clear_equip_power() {
  equip_power_ = 0u;
  clear_has_equip_power();
}
inline ::google::protobuf::uint32 tb_player_role::equip_power() const {
  return equip_power_;
}
inline void tb_player_role::set_equip_power(::google::protobuf::uint32 value) {
  set_has_equip_power();
  equip_power_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2etb_5fplayer_5frole_2eproto__INCLUDED
