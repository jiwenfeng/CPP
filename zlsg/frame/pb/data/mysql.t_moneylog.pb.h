// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.t_moneylog.proto

#ifndef PROTOBUF_mysql_2et_5fmoneylog_2eproto__INCLUDED
#define PROTOBUF_mysql_2et_5fmoneylog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2et_5fmoneylog_2eproto();
void protobuf_AssignDesc_mysql_2et_5fmoneylog_2eproto();
void protobuf_ShutdownFile_mysql_2et_5fmoneylog_2eproto();

class t_moneylog;

// ===================================================================

class t_moneylog : public ::google::protobuf::Message {
 public:
  t_moneylog();
  virtual ~t_moneylog();

  t_moneylog(const t_moneylog& from);

  inline t_moneylog& operator=(const t_moneylog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_moneylog& default_instance();

  void Swap(t_moneylog* other);

  // implements Message ----------------------------------------------

  t_moneylog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_moneylog& from);
  void MergeFrom(const t_moneylog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // required string did = 3;
  inline bool has_did() const;
  inline void clear_did();
  static const int kDidFieldNumber = 3;
  inline const ::std::string& did() const;
  inline void set_did(const ::std::string& value);
  inline void set_did(const char* value);
  inline void set_did(const char* value, size_t size);
  inline ::std::string* mutable_did();
  inline ::std::string* release_did();
  inline void set_allocated_did(::std::string* did);

  // required string accountName = 4;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 4;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // required string playerName = 5;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 5;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required uint32 rootId = 6;
  inline bool has_rootid() const;
  inline void clear_rootid();
  static const int kRootIdFieldNumber = 6;
  inline ::google::protobuf::uint32 rootid() const;
  inline void set_rootid(::google::protobuf::uint32 value);

  // required uint32 typeId = 7;
  inline bool has_typeid_() const;
  inline void clear_typeid_();
  static const int kTypeIdFieldNumber = 7;
  inline ::google::protobuf::uint32 typeid_() const;
  inline void set_typeid_(::google::protobuf::uint32 value);

  // required uint32 oldValue = 8;
  inline bool has_oldvalue() const;
  inline void clear_oldvalue();
  static const int kOldValueFieldNumber = 8;
  inline ::google::protobuf::uint32 oldvalue() const;
  inline void set_oldvalue(::google::protobuf::uint32 value);

  // required uint32 newValue = 9;
  inline bool has_newvalue() const;
  inline void clear_newvalue();
  static const int kNewValueFieldNumber = 9;
  inline ::google::protobuf::uint32 newvalue() const;
  inline void set_newvalue(::google::protobuf::uint32 value);

  // required uint32 gold = 10;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 10;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // required uint32 goldTicke = 11;
  inline bool has_goldticke() const;
  inline void clear_goldticke();
  static const int kGoldTickeFieldNumber = 11;
  inline ::google::protobuf::uint32 goldticke() const;
  inline void set_goldticke(::google::protobuf::uint32 value);

  // required uint32 goodsId = 12;
  inline bool has_goodsid() const;
  inline void clear_goodsid();
  static const int kGoodsIdFieldNumber = 12;
  inline ::google::protobuf::uint32 goodsid() const;
  inline void set_goodsid(::google::protobuf::uint32 value);

  // required uint32 num = 13;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 13;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // required uint32 createDate = 14;
  inline bool has_createdate() const;
  inline void clear_createdate();
  static const int kCreateDateFieldNumber = 14;
  inline ::google::protobuf::uint32 createdate() const;
  inline void set_createdate(::google::protobuf::uint32 value);

  // required uint32 roleId = 15;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 15;
  inline ::google::protobuf::uint32 roleid() const;
  inline void set_roleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.t_moneylog)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_did();
  inline void clear_has_did();
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_rootid();
  inline void clear_has_rootid();
  inline void set_has_typeid_();
  inline void clear_has_typeid_();
  inline void set_has_oldvalue();
  inline void clear_has_oldvalue();
  inline void set_has_newvalue();
  inline void clear_has_newvalue();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_goldticke();
  inline void clear_has_goldticke();
  inline void set_has_goodsid();
  inline void clear_has_goodsid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_createdate();
  inline void clear_has_createdate();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sid_;
  ::std::string* did_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 rootid_;
  ::std::string* accountname_;
  ::std::string* playername_;
  ::google::protobuf::uint32 typeid__;
  ::google::protobuf::uint32 oldvalue_;
  ::google::protobuf::uint32 newvalue_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 goldticke_;
  ::google::protobuf::uint32 goodsid_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 createdate_;
  ::google::protobuf::uint32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2et_5fmoneylog_2eproto();
  friend void protobuf_AssignDesc_mysql_2et_5fmoneylog_2eproto();
  friend void protobuf_ShutdownFile_mysql_2et_5fmoneylog_2eproto();

  void InitAsDefaultInstance();
  static t_moneylog* default_instance_;
};
// ===================================================================


// ===================================================================

// t_moneylog

// required uint32 id = 1;
inline bool t_moneylog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_moneylog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_moneylog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_moneylog::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 t_moneylog::id() const {
  return id_;
}
inline void t_moneylog::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string sid = 2;
inline bool t_moneylog::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_moneylog::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_moneylog::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_moneylog::clear_sid() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& t_moneylog::sid() const {
  return *sid_;
}
inline void t_moneylog::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void t_moneylog::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void t_moneylog::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_moneylog::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  return sid_;
}
inline ::std::string* t_moneylog::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_moneylog::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string did = 3;
inline bool t_moneylog::has_did() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_moneylog::set_has_did() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_moneylog::clear_has_did() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_moneylog::clear_did() {
  if (did_ != &::google::protobuf::internal::kEmptyString) {
    did_->clear();
  }
  clear_has_did();
}
inline const ::std::string& t_moneylog::did() const {
  return *did_;
}
inline void t_moneylog::set_did(const ::std::string& value) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  did_->assign(value);
}
inline void t_moneylog::set_did(const char* value) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  did_->assign(value);
}
inline void t_moneylog::set_did(const char* value, size_t size) {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  did_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_moneylog::mutable_did() {
  set_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    did_ = new ::std::string;
  }
  return did_;
}
inline ::std::string* t_moneylog::release_did() {
  clear_has_did();
  if (did_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = did_;
    did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_moneylog::set_allocated_did(::std::string* did) {
  if (did_ != &::google::protobuf::internal::kEmptyString) {
    delete did_;
  }
  if (did) {
    set_has_did();
    did_ = did;
  } else {
    clear_has_did();
    did_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string accountName = 4;
inline bool t_moneylog::has_accountname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_moneylog::set_has_accountname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_moneylog::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_moneylog::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& t_moneylog::accountname() const {
  return *accountname_;
}
inline void t_moneylog::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void t_moneylog::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void t_moneylog::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_moneylog::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* t_moneylog::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_moneylog::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string playerName = 5;
inline bool t_moneylog::has_playername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void t_moneylog::set_has_playername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void t_moneylog::clear_has_playername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void t_moneylog::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& t_moneylog::playername() const {
  return *playername_;
}
inline void t_moneylog::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void t_moneylog::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void t_moneylog::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_moneylog::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* t_moneylog::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_moneylog::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 rootId = 6;
inline bool t_moneylog::has_rootid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void t_moneylog::set_has_rootid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void t_moneylog::clear_has_rootid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void t_moneylog::clear_rootid() {
  rootid_ = 0u;
  clear_has_rootid();
}
inline ::google::protobuf::uint32 t_moneylog::rootid() const {
  return rootid_;
}
inline void t_moneylog::set_rootid(::google::protobuf::uint32 value) {
  set_has_rootid();
  rootid_ = value;
}

// required uint32 typeId = 7;
inline bool t_moneylog::has_typeid_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void t_moneylog::set_has_typeid_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void t_moneylog::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void t_moneylog::clear_typeid_() {
  typeid__ = 0u;
  clear_has_typeid_();
}
inline ::google::protobuf::uint32 t_moneylog::typeid_() const {
  return typeid__;
}
inline void t_moneylog::set_typeid_(::google::protobuf::uint32 value) {
  set_has_typeid_();
  typeid__ = value;
}

// required uint32 oldValue = 8;
inline bool t_moneylog::has_oldvalue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void t_moneylog::set_has_oldvalue() {
  _has_bits_[0] |= 0x00000080u;
}
inline void t_moneylog::clear_has_oldvalue() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void t_moneylog::clear_oldvalue() {
  oldvalue_ = 0u;
  clear_has_oldvalue();
}
inline ::google::protobuf::uint32 t_moneylog::oldvalue() const {
  return oldvalue_;
}
inline void t_moneylog::set_oldvalue(::google::protobuf::uint32 value) {
  set_has_oldvalue();
  oldvalue_ = value;
}

// required uint32 newValue = 9;
inline bool t_moneylog::has_newvalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void t_moneylog::set_has_newvalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void t_moneylog::clear_has_newvalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void t_moneylog::clear_newvalue() {
  newvalue_ = 0u;
  clear_has_newvalue();
}
inline ::google::protobuf::uint32 t_moneylog::newvalue() const {
  return newvalue_;
}
inline void t_moneylog::set_newvalue(::google::protobuf::uint32 value) {
  set_has_newvalue();
  newvalue_ = value;
}

// required uint32 gold = 10;
inline bool t_moneylog::has_gold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void t_moneylog::set_has_gold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void t_moneylog::clear_has_gold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void t_moneylog::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 t_moneylog::gold() const {
  return gold_;
}
inline void t_moneylog::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// required uint32 goldTicke = 11;
inline bool t_moneylog::has_goldticke() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void t_moneylog::set_has_goldticke() {
  _has_bits_[0] |= 0x00000400u;
}
inline void t_moneylog::clear_has_goldticke() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void t_moneylog::clear_goldticke() {
  goldticke_ = 0u;
  clear_has_goldticke();
}
inline ::google::protobuf::uint32 t_moneylog::goldticke() const {
  return goldticke_;
}
inline void t_moneylog::set_goldticke(::google::protobuf::uint32 value) {
  set_has_goldticke();
  goldticke_ = value;
}

// required uint32 goodsId = 12;
inline bool t_moneylog::has_goodsid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void t_moneylog::set_has_goodsid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void t_moneylog::clear_has_goodsid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void t_moneylog::clear_goodsid() {
  goodsid_ = 0u;
  clear_has_goodsid();
}
inline ::google::protobuf::uint32 t_moneylog::goodsid() const {
  return goodsid_;
}
inline void t_moneylog::set_goodsid(::google::protobuf::uint32 value) {
  set_has_goodsid();
  goodsid_ = value;
}

// required uint32 num = 13;
inline bool t_moneylog::has_num() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void t_moneylog::set_has_num() {
  _has_bits_[0] |= 0x00001000u;
}
inline void t_moneylog::clear_has_num() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void t_moneylog::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 t_moneylog::num() const {
  return num_;
}
inline void t_moneylog::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// required uint32 createDate = 14;
inline bool t_moneylog::has_createdate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void t_moneylog::set_has_createdate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void t_moneylog::clear_has_createdate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void t_moneylog::clear_createdate() {
  createdate_ = 0u;
  clear_has_createdate();
}
inline ::google::protobuf::uint32 t_moneylog::createdate() const {
  return createdate_;
}
inline void t_moneylog::set_createdate(::google::protobuf::uint32 value) {
  set_has_createdate();
  createdate_ = value;
}

// required uint32 roleId = 15;
inline bool t_moneylog::has_roleid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void t_moneylog::set_has_roleid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void t_moneylog::clear_has_roleid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void t_moneylog::clear_roleid() {
  roleid_ = 0u;
  clear_has_roleid();
}
inline ::google::protobuf::uint32 t_moneylog::roleid() const {
  return roleid_;
}
inline void t_moneylog::set_roleid(::google::protobuf::uint32 value) {
  set_has_roleid();
  roleid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2et_5fmoneylog_2eproto__INCLUDED
