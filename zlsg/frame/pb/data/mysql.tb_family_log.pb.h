// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_family_log.proto

#ifndef PROTOBUF_mysql_2etb_5ffamily_5flog_2eproto__INCLUDED
#define PROTOBUF_mysql_2etb_5ffamily_5flog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2etb_5ffamily_5flog_2eproto();
void protobuf_AssignDesc_mysql_2etb_5ffamily_5flog_2eproto();
void protobuf_ShutdownFile_mysql_2etb_5ffamily_5flog_2eproto();

class tb_family_log;

// ===================================================================

class tb_family_log : public ::google::protobuf::Message {
 public:
  tb_family_log();
  virtual ~tb_family_log();

  tb_family_log(const tb_family_log& from);

  inline tb_family_log& operator=(const tb_family_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_family_log& default_instance();

  void Swap(tb_family_log* other);

  // implements Message ----------------------------------------------

  tb_family_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tb_family_log& from);
  void MergeFrom(const tb_family_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 family_id = 2;
  inline bool has_family_id() const;
  inline void clear_family_id();
  static const int kFamilyIdFieldNumber = 2;
  inline ::google::protobuf::uint32 family_id() const;
  inline void set_family_id(::google::protobuf::uint32 value);

  // required uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 key = 5;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 5;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);

  // required uint32 value = 6;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 6;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // required string family_name = 7;
  inline bool has_family_name() const;
  inline void clear_family_name();
  static const int kFamilyNameFieldNumber = 7;
  inline const ::std::string& family_name() const;
  inline void set_family_name(const ::std::string& value);
  inline void set_family_name(const char* value);
  inline void set_family_name(const char* value, size_t size);
  inline ::std::string* mutable_family_name();
  inline ::std::string* release_family_name();
  inline void set_allocated_family_name(::std::string* family_name);

  // @@protoc_insertion_point(class_scope:mysql.tb_family_log)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_family_id();
  inline void clear_has_family_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_family_name();
  inline void clear_has_family_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 family_id_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 key_;
  ::google::protobuf::uint32 value_;
  ::std::string* family_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2etb_5ffamily_5flog_2eproto();
  friend void protobuf_AssignDesc_mysql_2etb_5ffamily_5flog_2eproto();
  friend void protobuf_ShutdownFile_mysql_2etb_5ffamily_5flog_2eproto();

  void InitAsDefaultInstance();
  static tb_family_log* default_instance_;
};
// ===================================================================


// ===================================================================

// tb_family_log

// required uint32 id = 1;
inline bool tb_family_log::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_family_log::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_family_log::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_family_log::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 tb_family_log::id() const {
  return id_;
}
inline void tb_family_log::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 family_id = 2;
inline bool tb_family_log::has_family_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_family_log::set_has_family_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_family_log::clear_has_family_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_family_log::clear_family_id() {
  family_id_ = 0u;
  clear_has_family_id();
}
inline ::google::protobuf::uint32 tb_family_log::family_id() const {
  return family_id_;
}
inline void tb_family_log::set_family_id(::google::protobuf::uint32 value) {
  set_has_family_id();
  family_id_ = value;
}

// required uint32 time = 3;
inline bool tb_family_log::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_family_log::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_family_log::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_family_log::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 tb_family_log::time() const {
  return time_;
}
inline void tb_family_log::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 type = 4;
inline bool tb_family_log::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tb_family_log::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tb_family_log::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tb_family_log::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 tb_family_log::type() const {
  return type_;
}
inline void tb_family_log::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 key = 5;
inline bool tb_family_log::has_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tb_family_log::set_has_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tb_family_log::clear_has_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tb_family_log::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 tb_family_log::key() const {
  return key_;
}
inline void tb_family_log::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}

// required uint32 value = 6;
inline bool tb_family_log::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tb_family_log::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tb_family_log::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tb_family_log::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 tb_family_log::value() const {
  return value_;
}
inline void tb_family_log::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// required string family_name = 7;
inline bool tb_family_log::has_family_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tb_family_log::set_has_family_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tb_family_log::clear_has_family_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tb_family_log::clear_family_name() {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    family_name_->clear();
  }
  clear_has_family_name();
}
inline const ::std::string& tb_family_log::family_name() const {
  return *family_name_;
}
inline void tb_family_log::set_family_name(const ::std::string& value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void tb_family_log::set_family_name(const char* value) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(value);
}
inline void tb_family_log::set_family_name(const char* value, size_t size) {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  family_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_family_log::mutable_family_name() {
  set_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    family_name_ = new ::std::string;
  }
  return family_name_;
}
inline ::std::string* tb_family_log::release_family_name() {
  clear_has_family_name();
  if (family_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = family_name_;
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_family_log::set_allocated_family_name(::std::string* family_name) {
  if (family_name_ != &::google::protobuf::internal::kEmptyString) {
    delete family_name_;
  }
  if (family_name) {
    set_has_family_name();
    family_name_ = family_name;
  } else {
    clear_has_family_name();
    family_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2etb_5ffamily_5flog_2eproto__INCLUDED
