// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_city_welfare.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.tb_city_welfare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* tb_city_welfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tb_city_welfare_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2etb_5fcity_5fwelfare_2eproto() {
  protobuf_AddDesc_mysql_2etb_5fcity_5fwelfare_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.tb_city_welfare.proto");
  GOOGLE_CHECK(file != NULL);
  tb_city_welfare_descriptor_ = file->message_type(0);
  static const int tb_city_welfare_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_welfare, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_welfare, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_welfare, official_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_welfare, official_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_welfare, official_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_welfare, official_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_welfare, official_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_welfare, official_6_),
  };
  tb_city_welfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tb_city_welfare_descriptor_,
      tb_city_welfare::default_instance_,
      tb_city_welfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_welfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_welfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tb_city_welfare));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2etb_5fcity_5fwelfare_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tb_city_welfare_descriptor_, &tb_city_welfare::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2etb_5fcity_5fwelfare_2eproto() {
  delete tb_city_welfare::default_instance_;
  delete tb_city_welfare_reflection_;
}

void protobuf_AddDesc_mysql_2etb_5fcity_5fwelfare_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033mysql.tb_city_welfare.proto\022\005mysql\"\250\001\n"
    "\017tb_city_welfare\022\n\n\002id\030\001 \002(\r\022\021\n\tfamily_i"
    "d\030\002 \002(\r\022\022\n\nofficial_1\030\003 \002(\r\022\022\n\nofficial_"
    "2\030\004 \002(\r\022\022\n\nofficial_3\030\005 \002(\r\022\022\n\nofficial_"
    "4\030\006 \002(\r\022\022\n\nofficial_5\030\007 \002(\r\022\022\n\nofficial_"
    "6\030\010 \002(\r", 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.tb_city_welfare.proto", &protobuf_RegisterTypes);
  tb_city_welfare::default_instance_ = new tb_city_welfare();
  tb_city_welfare::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2etb_5fcity_5fwelfare_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2etb_5fcity_5fwelfare_2eproto {
  StaticDescriptorInitializer_mysql_2etb_5fcity_5fwelfare_2eproto() {
    protobuf_AddDesc_mysql_2etb_5fcity_5fwelfare_2eproto();
  }
} static_descriptor_initializer_mysql_2etb_5fcity_5fwelfare_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tb_city_welfare::kIdFieldNumber;
const int tb_city_welfare::kFamilyIdFieldNumber;
const int tb_city_welfare::kOfficial1FieldNumber;
const int tb_city_welfare::kOfficial2FieldNumber;
const int tb_city_welfare::kOfficial3FieldNumber;
const int tb_city_welfare::kOfficial4FieldNumber;
const int tb_city_welfare::kOfficial5FieldNumber;
const int tb_city_welfare::kOfficial6FieldNumber;
#endif  // !_MSC_VER

tb_city_welfare::tb_city_welfare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tb_city_welfare::InitAsDefaultInstance() {
}

tb_city_welfare::tb_city_welfare(const tb_city_welfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tb_city_welfare::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  family_id_ = 0u;
  official_1_ = 0u;
  official_2_ = 0u;
  official_3_ = 0u;
  official_4_ = 0u;
  official_5_ = 0u;
  official_6_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tb_city_welfare::~tb_city_welfare() {
  SharedDtor();
}

void tb_city_welfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tb_city_welfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tb_city_welfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tb_city_welfare_descriptor_;
}

const tb_city_welfare& tb_city_welfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2etb_5fcity_5fwelfare_2eproto();
  return *default_instance_;
}

tb_city_welfare* tb_city_welfare::default_instance_ = NULL;

tb_city_welfare* tb_city_welfare::New() const {
  return new tb_city_welfare;
}

void tb_city_welfare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    family_id_ = 0u;
    official_1_ = 0u;
    official_2_ = 0u;
    official_3_ = 0u;
    official_4_ = 0u;
    official_5_ = 0u;
    official_6_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tb_city_welfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_official_1;
        break;
      }

      // required uint32 official_1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_1_)));
          set_has_official_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_official_2;
        break;
      }

      // required uint32 official_2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_2_)));
          set_has_official_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_official_3;
        break;
      }

      // required uint32 official_3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_3_)));
          set_has_official_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_official_4;
        break;
      }

      // required uint32 official_4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_4_)));
          set_has_official_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_official_5;
        break;
      }

      // required uint32 official_5 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_5_)));
          set_has_official_5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_official_6;
        break;
      }

      // required uint32 official_6 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &official_6_)));
          set_has_official_6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tb_city_welfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  // required uint32 official_1 = 3;
  if (has_official_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->official_1(), output);
  }

  // required uint32 official_2 = 4;
  if (has_official_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->official_2(), output);
  }

  // required uint32 official_3 = 5;
  if (has_official_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->official_3(), output);
  }

  // required uint32 official_4 = 6;
  if (has_official_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->official_4(), output);
  }

  // required uint32 official_5 = 7;
  if (has_official_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->official_5(), output);
  }

  // required uint32 official_6 = 8;
  if (has_official_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->official_6(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tb_city_welfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  // required uint32 official_1 = 3;
  if (has_official_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->official_1(), target);
  }

  // required uint32 official_2 = 4;
  if (has_official_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->official_2(), target);
  }

  // required uint32 official_3 = 5;
  if (has_official_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->official_3(), target);
  }

  // required uint32 official_4 = 6;
  if (has_official_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->official_4(), target);
  }

  // required uint32 official_5 = 7;
  if (has_official_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->official_5(), target);
  }

  // required uint32 official_6 = 8;
  if (has_official_6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->official_6(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tb_city_welfare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 official_1 = 3;
    if (has_official_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official_1());
    }

    // required uint32 official_2 = 4;
    if (has_official_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official_2());
    }

    // required uint32 official_3 = 5;
    if (has_official_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official_3());
    }

    // required uint32 official_4 = 6;
    if (has_official_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official_4());
    }

    // required uint32 official_5 = 7;
    if (has_official_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official_5());
    }

    // required uint32 official_6 = 8;
    if (has_official_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->official_6());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tb_city_welfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tb_city_welfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tb_city_welfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tb_city_welfare::MergeFrom(const tb_city_welfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_official_1()) {
      set_official_1(from.official_1());
    }
    if (from.has_official_2()) {
      set_official_2(from.official_2());
    }
    if (from.has_official_3()) {
      set_official_3(from.official_3());
    }
    if (from.has_official_4()) {
      set_official_4(from.official_4());
    }
    if (from.has_official_5()) {
      set_official_5(from.official_5());
    }
    if (from.has_official_6()) {
      set_official_6(from.official_6());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tb_city_welfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tb_city_welfare::CopyFrom(const tb_city_welfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tb_city_welfare::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void tb_city_welfare::Swap(tb_city_welfare* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(family_id_, other->family_id_);
    std::swap(official_1_, other->official_1_);
    std::swap(official_2_, other->official_2_);
    std::swap(official_3_, other->official_3_);
    std::swap(official_4_, other->official_4_);
    std::swap(official_5_, other->official_5_);
    std::swap(official_6_, other->official_6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tb_city_welfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tb_city_welfare_descriptor_;
  metadata.reflection = tb_city_welfare_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
