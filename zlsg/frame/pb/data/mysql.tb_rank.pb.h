// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_rank.proto

#ifndef PROTOBUF_mysql_2etb_5frank_2eproto__INCLUDED
#define PROTOBUF_mysql_2etb_5frank_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2etb_5frank_2eproto();
void protobuf_AssignDesc_mysql_2etb_5frank_2eproto();
void protobuf_ShutdownFile_mysql_2etb_5frank_2eproto();

class tb_rank;

// ===================================================================

class tb_rank : public ::google::protobuf::Message {
 public:
  tb_rank();
  virtual ~tb_rank();

  tb_rank(const tb_rank& from);

  inline tb_rank& operator=(const tb_rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_rank& default_instance();

  void Swap(tb_rank* other);

  // implements Message ----------------------------------------------

  tb_rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tb_rank& from);
  void MergeFrom(const tb_rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rank_type = 1;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 rank_type() const;
  inline void set_rank_type(::google::protobuf::uint32 value);

  // required uint32 update_time = 2;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // required bytes rank_list = 3;
  inline bool has_rank_list() const;
  inline void clear_rank_list();
  static const int kRankListFieldNumber = 3;
  inline const ::std::string& rank_list() const;
  inline void set_rank_list(const ::std::string& value);
  inline void set_rank_list(const char* value);
  inline void set_rank_list(const void* value, size_t size);
  inline ::std::string* mutable_rank_list();
  inline ::std::string* release_rank_list();
  inline void set_allocated_rank_list(::std::string* rank_list);

  // @@protoc_insertion_point(class_scope:mysql.tb_rank)
 private:
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_rank_list();
  inline void clear_has_rank_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_type_;
  ::google::protobuf::uint32 update_time_;
  ::std::string* rank_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2etb_5frank_2eproto();
  friend void protobuf_AssignDesc_mysql_2etb_5frank_2eproto();
  friend void protobuf_ShutdownFile_mysql_2etb_5frank_2eproto();

  void InitAsDefaultInstance();
  static tb_rank* default_instance_;
};
// ===================================================================


// ===================================================================

// tb_rank

// required uint32 rank_type = 1;
inline bool tb_rank::has_rank_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_rank::set_has_rank_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_rank::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_rank::clear_rank_type() {
  rank_type_ = 0u;
  clear_has_rank_type();
}
inline ::google::protobuf::uint32 tb_rank::rank_type() const {
  return rank_type_;
}
inline void tb_rank::set_rank_type(::google::protobuf::uint32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// required uint32 update_time = 2;
inline bool tb_rank::has_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_rank::set_has_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_rank::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_rank::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 tb_rank::update_time() const {
  return update_time_;
}
inline void tb_rank::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
}

// required bytes rank_list = 3;
inline bool tb_rank::has_rank_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_rank::set_has_rank_list() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_rank::clear_has_rank_list() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_rank::clear_rank_list() {
  if (rank_list_ != &::google::protobuf::internal::kEmptyString) {
    rank_list_->clear();
  }
  clear_has_rank_list();
}
inline const ::std::string& tb_rank::rank_list() const {
  return *rank_list_;
}
inline void tb_rank::set_rank_list(const ::std::string& value) {
  set_has_rank_list();
  if (rank_list_ == &::google::protobuf::internal::kEmptyString) {
    rank_list_ = new ::std::string;
  }
  rank_list_->assign(value);
}
inline void tb_rank::set_rank_list(const char* value) {
  set_has_rank_list();
  if (rank_list_ == &::google::protobuf::internal::kEmptyString) {
    rank_list_ = new ::std::string;
  }
  rank_list_->assign(value);
}
inline void tb_rank::set_rank_list(const void* value, size_t size) {
  set_has_rank_list();
  if (rank_list_ == &::google::protobuf::internal::kEmptyString) {
    rank_list_ = new ::std::string;
  }
  rank_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_rank::mutable_rank_list() {
  set_has_rank_list();
  if (rank_list_ == &::google::protobuf::internal::kEmptyString) {
    rank_list_ = new ::std::string;
  }
  return rank_list_;
}
inline ::std::string* tb_rank::release_rank_list() {
  clear_has_rank_list();
  if (rank_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rank_list_;
    rank_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_rank::set_allocated_rank_list(::std::string* rank_list) {
  if (rank_list_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_list_;
  }
  if (rank_list) {
    set_has_rank_list();
    rank_list_ = rank_list;
  } else {
    clear_has_rank_list();
    rank_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2etb_5frank_2eproto__INCLUDED
