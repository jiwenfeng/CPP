// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_role_raid.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.tb_role_raid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* tb_role_raid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tb_role_raid_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2etb_5frole_5fraid_2eproto() {
  protobuf_AddDesc_mysql_2etb_5frole_5fraid_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.tb_role_raid.proto");
  GOOGLE_CHECK(file != NULL);
  tb_role_raid_descriptor_ = file->message_type(0);
  static const int tb_role_raid_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, raid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, star_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, fast_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, last_complete_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, complete_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, auto_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, elite_star_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, elite_fast_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, elite_last_complete_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, elite_complete_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, elite_create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, elite_auto_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, elite_enter_count_),
  };
  tb_role_raid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tb_role_raid_descriptor_,
      tb_role_raid::default_instance_,
      tb_role_raid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_role_raid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tb_role_raid));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2etb_5frole_5fraid_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tb_role_raid_descriptor_, &tb_role_raid::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2etb_5frole_5fraid_2eproto() {
  delete tb_role_raid::default_instance_;
  delete tb_role_raid_reflection_;
}

void protobuf_AddDesc_mysql_2etb_5frole_5fraid_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030mysql.tb_role_raid.proto\022\005mysql\"\361\002\n\014tb"
    "_role_raid\022\017\n\007role_id\030\001 \002(\r\022\017\n\007raid_id\030\002"
    " \002(\r\022\020\n\010star_num\030\003 \002(\r\022\021\n\tfast_tick\030\004 \002("
    "\r\022\032\n\022last_complete_time\030\005 \002(\r\022\026\n\016complet"
    "e_count\030\006 \002(\r\022\023\n\013create_time\030\007 \002(\r\022\021\n\tau"
    "to_time\030\010 \002(\r\022\026\n\016elite_star_num\030\t \002(\r\022\027\n"
    "\017elite_fast_tick\030\n \002(\r\022 \n\030elite_last_com"
    "plete_time\030\013 \002(\r\022\034\n\024elite_complete_count"
    "\030\014 \002(\r\022\031\n\021elite_create_time\030\r \002(\r\022\027\n\017eli"
    "te_auto_time\030\016 \002(\r\022\031\n\021elite_enter_count\030"
    "\017 \002(\r", 405);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.tb_role_raid.proto", &protobuf_RegisterTypes);
  tb_role_raid::default_instance_ = new tb_role_raid();
  tb_role_raid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2etb_5frole_5fraid_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2etb_5frole_5fraid_2eproto {
  StaticDescriptorInitializer_mysql_2etb_5frole_5fraid_2eproto() {
    protobuf_AddDesc_mysql_2etb_5frole_5fraid_2eproto();
  }
} static_descriptor_initializer_mysql_2etb_5frole_5fraid_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tb_role_raid::kRoleIdFieldNumber;
const int tb_role_raid::kRaidIdFieldNumber;
const int tb_role_raid::kStarNumFieldNumber;
const int tb_role_raid::kFastTickFieldNumber;
const int tb_role_raid::kLastCompleteTimeFieldNumber;
const int tb_role_raid::kCompleteCountFieldNumber;
const int tb_role_raid::kCreateTimeFieldNumber;
const int tb_role_raid::kAutoTimeFieldNumber;
const int tb_role_raid::kEliteStarNumFieldNumber;
const int tb_role_raid::kEliteFastTickFieldNumber;
const int tb_role_raid::kEliteLastCompleteTimeFieldNumber;
const int tb_role_raid::kEliteCompleteCountFieldNumber;
const int tb_role_raid::kEliteCreateTimeFieldNumber;
const int tb_role_raid::kEliteAutoTimeFieldNumber;
const int tb_role_raid::kEliteEnterCountFieldNumber;
#endif  // !_MSC_VER

tb_role_raid::tb_role_raid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tb_role_raid::InitAsDefaultInstance() {
}

tb_role_raid::tb_role_raid(const tb_role_raid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tb_role_raid::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  raid_id_ = 0u;
  star_num_ = 0u;
  fast_tick_ = 0u;
  last_complete_time_ = 0u;
  complete_count_ = 0u;
  create_time_ = 0u;
  auto_time_ = 0u;
  elite_star_num_ = 0u;
  elite_fast_tick_ = 0u;
  elite_last_complete_time_ = 0u;
  elite_complete_count_ = 0u;
  elite_create_time_ = 0u;
  elite_auto_time_ = 0u;
  elite_enter_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tb_role_raid::~tb_role_raid() {
  SharedDtor();
}

void tb_role_raid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tb_role_raid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tb_role_raid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tb_role_raid_descriptor_;
}

const tb_role_raid& tb_role_raid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2etb_5frole_5fraid_2eproto();
  return *default_instance_;
}

tb_role_raid* tb_role_raid::default_instance_ = NULL;

tb_role_raid* tb_role_raid::New() const {
  return new tb_role_raid;
}

void tb_role_raid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    raid_id_ = 0u;
    star_num_ = 0u;
    fast_tick_ = 0u;
    last_complete_time_ = 0u;
    complete_count_ = 0u;
    create_time_ = 0u;
    auto_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    elite_star_num_ = 0u;
    elite_fast_tick_ = 0u;
    elite_last_complete_time_ = 0u;
    elite_complete_count_ = 0u;
    elite_create_time_ = 0u;
    elite_auto_time_ = 0u;
    elite_enter_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tb_role_raid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_raid_id;
        break;
      }

      // required uint32 raid_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_id_)));
          set_has_raid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star_num;
        break;
      }

      // required uint32 star_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_num_)));
          set_has_star_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fast_tick;
        break;
      }

      // required uint32 fast_tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fast_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fast_tick_)));
          set_has_fast_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_complete_time;
        break;
      }

      // required uint32 last_complete_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_complete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_complete_time_)));
          set_has_last_complete_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_complete_count;
        break;
      }

      // required uint32 complete_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_complete_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_count_)));
          set_has_complete_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_auto_time;
        break;
      }

      // required uint32 auto_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_time_)));
          set_has_auto_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_elite_star_num;
        break;
      }

      // required uint32 elite_star_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_star_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_star_num_)));
          set_has_elite_star_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_elite_fast_tick;
        break;
      }

      // required uint32 elite_fast_tick = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_fast_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_fast_tick_)));
          set_has_elite_fast_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_elite_last_complete_time;
        break;
      }

      // required uint32 elite_last_complete_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_last_complete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_last_complete_time_)));
          set_has_elite_last_complete_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_elite_complete_count;
        break;
      }

      // required uint32 elite_complete_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_complete_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_complete_count_)));
          set_has_elite_complete_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_elite_create_time;
        break;
      }

      // required uint32 elite_create_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_create_time_)));
          set_has_elite_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_elite_auto_time;
        break;
      }

      // required uint32 elite_auto_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_auto_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_auto_time_)));
          set_has_elite_auto_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_elite_enter_count;
        break;
      }

      // required uint32 elite_enter_count = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_enter_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_enter_count_)));
          set_has_elite_enter_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tb_role_raid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raid_id(), output);
  }

  // required uint32 star_num = 3;
  if (has_star_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star_num(), output);
  }

  // required uint32 fast_tick = 4;
  if (has_fast_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fast_tick(), output);
  }

  // required uint32 last_complete_time = 5;
  if (has_last_complete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_complete_time(), output);
  }

  // required uint32 complete_count = 6;
  if (has_complete_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->complete_count(), output);
  }

  // required uint32 create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->create_time(), output);
  }

  // required uint32 auto_time = 8;
  if (has_auto_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->auto_time(), output);
  }

  // required uint32 elite_star_num = 9;
  if (has_elite_star_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->elite_star_num(), output);
  }

  // required uint32 elite_fast_tick = 10;
  if (has_elite_fast_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->elite_fast_tick(), output);
  }

  // required uint32 elite_last_complete_time = 11;
  if (has_elite_last_complete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->elite_last_complete_time(), output);
  }

  // required uint32 elite_complete_count = 12;
  if (has_elite_complete_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->elite_complete_count(), output);
  }

  // required uint32 elite_create_time = 13;
  if (has_elite_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->elite_create_time(), output);
  }

  // required uint32 elite_auto_time = 14;
  if (has_elite_auto_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->elite_auto_time(), output);
  }

  // required uint32 elite_enter_count = 15;
  if (has_elite_enter_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->elite_enter_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tb_role_raid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 raid_id = 2;
  if (has_raid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raid_id(), target);
  }

  // required uint32 star_num = 3;
  if (has_star_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star_num(), target);
  }

  // required uint32 fast_tick = 4;
  if (has_fast_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fast_tick(), target);
  }

  // required uint32 last_complete_time = 5;
  if (has_last_complete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_complete_time(), target);
  }

  // required uint32 complete_count = 6;
  if (has_complete_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->complete_count(), target);
  }

  // required uint32 create_time = 7;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->create_time(), target);
  }

  // required uint32 auto_time = 8;
  if (has_auto_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->auto_time(), target);
  }

  // required uint32 elite_star_num = 9;
  if (has_elite_star_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->elite_star_num(), target);
  }

  // required uint32 elite_fast_tick = 10;
  if (has_elite_fast_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->elite_fast_tick(), target);
  }

  // required uint32 elite_last_complete_time = 11;
  if (has_elite_last_complete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->elite_last_complete_time(), target);
  }

  // required uint32 elite_complete_count = 12;
  if (has_elite_complete_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->elite_complete_count(), target);
  }

  // required uint32 elite_create_time = 13;
  if (has_elite_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->elite_create_time(), target);
  }

  // required uint32 elite_auto_time = 14;
  if (has_elite_auto_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->elite_auto_time(), target);
  }

  // required uint32 elite_enter_count = 15;
  if (has_elite_enter_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->elite_enter_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tb_role_raid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 raid_id = 2;
    if (has_raid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_id());
    }

    // required uint32 star_num = 3;
    if (has_star_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_num());
    }

    // required uint32 fast_tick = 4;
    if (has_fast_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fast_tick());
    }

    // required uint32 last_complete_time = 5;
    if (has_last_complete_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_complete_time());
    }

    // required uint32 complete_count = 6;
    if (has_complete_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->complete_count());
    }

    // required uint32 create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 auto_time = 8;
    if (has_auto_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 elite_star_num = 9;
    if (has_elite_star_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_star_num());
    }

    // required uint32 elite_fast_tick = 10;
    if (has_elite_fast_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_fast_tick());
    }

    // required uint32 elite_last_complete_time = 11;
    if (has_elite_last_complete_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_last_complete_time());
    }

    // required uint32 elite_complete_count = 12;
    if (has_elite_complete_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_complete_count());
    }

    // required uint32 elite_create_time = 13;
    if (has_elite_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_create_time());
    }

    // required uint32 elite_auto_time = 14;
    if (has_elite_auto_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_auto_time());
    }

    // required uint32 elite_enter_count = 15;
    if (has_elite_enter_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_enter_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tb_role_raid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tb_role_raid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tb_role_raid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tb_role_raid::MergeFrom(const tb_role_raid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_raid_id()) {
      set_raid_id(from.raid_id());
    }
    if (from.has_star_num()) {
      set_star_num(from.star_num());
    }
    if (from.has_fast_tick()) {
      set_fast_tick(from.fast_tick());
    }
    if (from.has_last_complete_time()) {
      set_last_complete_time(from.last_complete_time());
    }
    if (from.has_complete_count()) {
      set_complete_count(from.complete_count());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_auto_time()) {
      set_auto_time(from.auto_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_elite_star_num()) {
      set_elite_star_num(from.elite_star_num());
    }
    if (from.has_elite_fast_tick()) {
      set_elite_fast_tick(from.elite_fast_tick());
    }
    if (from.has_elite_last_complete_time()) {
      set_elite_last_complete_time(from.elite_last_complete_time());
    }
    if (from.has_elite_complete_count()) {
      set_elite_complete_count(from.elite_complete_count());
    }
    if (from.has_elite_create_time()) {
      set_elite_create_time(from.elite_create_time());
    }
    if (from.has_elite_auto_time()) {
      set_elite_auto_time(from.elite_auto_time());
    }
    if (from.has_elite_enter_count()) {
      set_elite_enter_count(from.elite_enter_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tb_role_raid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tb_role_raid::CopyFrom(const tb_role_raid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tb_role_raid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void tb_role_raid::Swap(tb_role_raid* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(raid_id_, other->raid_id_);
    std::swap(star_num_, other->star_num_);
    std::swap(fast_tick_, other->fast_tick_);
    std::swap(last_complete_time_, other->last_complete_time_);
    std::swap(complete_count_, other->complete_count_);
    std::swap(create_time_, other->create_time_);
    std::swap(auto_time_, other->auto_time_);
    std::swap(elite_star_num_, other->elite_star_num_);
    std::swap(elite_fast_tick_, other->elite_fast_tick_);
    std::swap(elite_last_complete_time_, other->elite_last_complete_time_);
    std::swap(elite_complete_count_, other->elite_complete_count_);
    std::swap(elite_create_time_, other->elite_create_time_);
    std::swap(elite_auto_time_, other->elite_auto_time_);
    std::swap(elite_enter_count_, other->elite_enter_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tb_role_raid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tb_role_raid_descriptor_;
  metadata.reflection = tb_role_raid_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
