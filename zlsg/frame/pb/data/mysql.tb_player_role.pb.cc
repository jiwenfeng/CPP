// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_player_role.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.tb_player_role.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* tb_player_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tb_player_role_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2etb_5fplayer_5frole_2eproto() {
  protobuf_AddDesc_mysql_2etb_5fplayer_5frole_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.tb_player_role.proto");
  GOOGLE_CHECK(file != NULL);
  tb_player_role_descriptor_ = file->message_type(0);
  static const int tb_player_role_offsets_[86] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, tael_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, ingot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, gift_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, is_suspended_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, family_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, can_be_raised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, family_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, can_join_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, can_be_transmit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, pk_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, pk_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, military_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, y_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, siege_reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, cross_svr_war_reputation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, cur_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, absorb_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, max_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, cur_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, absorb_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, attack_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, attack_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, defense_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, defense_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, hit_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, stability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, recover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, attack_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, frozen_addition_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, poisoning_addition_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, palsy_addition_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, dizziness_addition_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, frozen_resistance_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, poisoning_resistance_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, palsy_resistance_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, dizziness_resistance_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, output_hurt_promote_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, suffer_hurt_reduce_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, ignore_defense_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, rebound_hurt_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, exp_coefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, armor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, mounts_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, backpack_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, warehouse_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, physical_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, fighting_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, anger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, offline_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, history_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, melting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, potential_share_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, potential_accumulation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, skill_point_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, store_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, bow_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, bow_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, cavalry_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, bow_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, equip_power_),
  };
  tb_player_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tb_player_role_descriptor_,
      tb_player_role::default_instance_,
      tb_player_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_player_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tb_player_role));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2etb_5fplayer_5frole_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tb_player_role_descriptor_, &tb_player_role::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2etb_5fplayer_5frole_2eproto() {
  delete tb_player_role::default_instance_;
  delete tb_player_role_reflection_;
}

void protobuf_AddDesc_mysql_2etb_5fplayer_5frole_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032mysql.tb_player_role.proto\022\005mysql\"\362\016\n\016"
    "tb_player_role\022\017\n\007role_id\030\001 \002(\r\022\021\n\tsyste"
    "m_id\030\002 \002(\r\022\021\n\tplayer_id\030\003 \002(\r\022\021\n\trole_na"
    "me\030\004 \002(\t\022\016\n\006status\030\005 \002(\r\022\013\n\003sex\030\006 \002(\r\022\022\n"
    "\nprofession\030\007 \002(\r\022\022\n\nexperience\030\010 \002(\004\022\r\n"
    "\005level\030\t \002(\r\022\014\n\004tael\030\n \002(\r\022\r\n\005ingot\030\013 \002("
    "\r\022\022\n\ngift_money\030\014 \002(\r\022\034\n\024is_suspended_ac"
    "count\030\r \002(\r\022\022\n\npartner_id\030\016 \002(\r\022\021\n\tfamil"
    "y_id\030\017 \002(\r\022\027\n\017family_position\030\020 \002(\r\022\025\n\rc"
    "an_be_raised\030\021 \002(\r\022\024\n\014family_level\030\022 \002(\r"
    "\022\027\n\017can_join_family\030\023 \002(\r\022\027\n\017can_be_tran"
    "smit\030\024 \002(\r\022\020\n\010pk_model\030\025 \002(\r\022\020\n\010pk_value"
    "\030\026 \002(\r\022\031\n\021military_strategy\030\027 \002(\r\022\016\n\006map"
    "_id\030\030 \002(\r\022\r\n\005x_pos\030\031 \002(\r\022\r\n\005y_pos\030\032 \002(\r\022"
    "\030\n\020siege_reputation\030\033 \002(\r\022 \n\030cross_svr_w"
    "ar_reputation\030\034 \002(\r\022\016\n\006max_hp\030\035 \002(\r\022\016\n\006c"
    "ur_hp\030\036 \002(\r\022\021\n\tabsorb_hp\030\037 \002(\r\022\016\n\006max_mp"
    "\030  \002(\r\022\016\n\006cur_mp\030! \002(\r\022\021\n\tabsorb_mp\030\" \002("
    "\r\022\022\n\nattack_min\030# \002(\r\022\022\n\nattack_max\030$ \002("
    "\r\022\023\n\013defense_min\030% \002(\r\022\023\n\013defense_max\030& "
    "\002(\r\022\021\n\thit_point\030\' \002(\r\022\r\n\005dodge\030( \002(\r\022\021\n"
    "\tstability\030) \002(\r\022\017\n\007recover\030* \002(\r\022\024\n\014att"
    "ack_speed\030+ \002(\r\022\035\n\025frozen_addition_ratio"
    "\030, \002(\r\022 \n\030poisoning_addition_ratio\030- \002(\r"
    "\022\034\n\024palsy_addition_ratio\030. \002(\r\022 \n\030dizzin"
    "ess_addition_ratio\030/ \002(\r\022\037\n\027frozen_resis"
    "tance_ratio\0300 \002(\r\022\"\n\032poisoning_resistanc"
    "e_ratio\0301 \002(\r\022\036\n\026palsy_resistance_ratio\030"
    "2 \002(\r\022\"\n\032dizziness_resistance_ratio\0303 \002("
    "\r\022!\n\031output_hurt_promote_ratio\0304 \002(\r\022 \n\030"
    "suffer_hurt_reduce_ratio\0305 \002(\r\022\034\n\024ignore"
    "_defense_ratio\0306 \002(\r\022\032\n\022rebound_hurt_rat"
    "io\0307 \002(\r\022\027\n\017exp_coefficient\0308 \002(\r\022\022\n\nmov"
    "e_speed\0309 \002(\r\022\020\n\010armor_id\030: \002(\r\022\021\n\tweapo"
    "n_id\030; \002(\r\022\021\n\tmounts_id\030< \002(\r\022\025\n\rbackpac"
    "k_size\030= \002(\r\022\026\n\016warehouse_size\030> \002(\r\022\026\n\016"
    "physical_power\030\? \002(\r\022\026\n\016fighting_power\030@"
    " \002(\r\022\r\n\005anger\030A \002(\r\022\023\n\013create_time\030B \002(\r"
    "\022\023\n\013online_time\030C \002(\r\022\024\n\014offline_time\030D "
    "\002(\r\022\023\n\013update_time\030E \002(\r\022\026\n\016history_onli"
    "ne\030F \002(\r\022\017\n\007melting\030G \002(\r\022\033\n\023potential_s"
    "hare_max\030H \002(\r\022\036\n\026potential_accumulation"
    "\030I \002(\r\022\023\n\013skill_point\030J \002(\r\022\022\n\npopularit"
    "y\030K \002(\r\022\030\n\020skill_point_time\030L \002(\r\022\021\n\tvip"
    "_level\030M \002(\r\022\017\n\007team_id\030N \002(\r\022\017\n\007camp_id"
    "\030O \002(\r\022\020\n\010strategy\030P \002(\r\022\024\n\014store_weapon"
    "\030Q \002(\r\022\016\n\006bow_id\030R \002(\r\022\021\n\tbow_index\030S \002("
    "\r\022\025\n\rcavalry_index\030T \002(\r\022\021\n\tbow_speed\030U "
    "\002(\r\022\023\n\013equip_power\030V \002(\r", 1944);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.tb_player_role.proto", &protobuf_RegisterTypes);
  tb_player_role::default_instance_ = new tb_player_role();
  tb_player_role::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2etb_5fplayer_5frole_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2etb_5fplayer_5frole_2eproto {
  StaticDescriptorInitializer_mysql_2etb_5fplayer_5frole_2eproto() {
    protobuf_AddDesc_mysql_2etb_5fplayer_5frole_2eproto();
  }
} static_descriptor_initializer_mysql_2etb_5fplayer_5frole_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tb_player_role::kRoleIdFieldNumber;
const int tb_player_role::kSystemIdFieldNumber;
const int tb_player_role::kPlayerIdFieldNumber;
const int tb_player_role::kRoleNameFieldNumber;
const int tb_player_role::kStatusFieldNumber;
const int tb_player_role::kSexFieldNumber;
const int tb_player_role::kProfessionFieldNumber;
const int tb_player_role::kExperienceFieldNumber;
const int tb_player_role::kLevelFieldNumber;
const int tb_player_role::kTaelFieldNumber;
const int tb_player_role::kIngotFieldNumber;
const int tb_player_role::kGiftMoneyFieldNumber;
const int tb_player_role::kIsSuspendedAccountFieldNumber;
const int tb_player_role::kPartnerIdFieldNumber;
const int tb_player_role::kFamilyIdFieldNumber;
const int tb_player_role::kFamilyPositionFieldNumber;
const int tb_player_role::kCanBeRaisedFieldNumber;
const int tb_player_role::kFamilyLevelFieldNumber;
const int tb_player_role::kCanJoinFamilyFieldNumber;
const int tb_player_role::kCanBeTransmitFieldNumber;
const int tb_player_role::kPkModelFieldNumber;
const int tb_player_role::kPkValueFieldNumber;
const int tb_player_role::kMilitaryStrategyFieldNumber;
const int tb_player_role::kMapIdFieldNumber;
const int tb_player_role::kXPosFieldNumber;
const int tb_player_role::kYPosFieldNumber;
const int tb_player_role::kSiegeReputationFieldNumber;
const int tb_player_role::kCrossSvrWarReputationFieldNumber;
const int tb_player_role::kMaxHpFieldNumber;
const int tb_player_role::kCurHpFieldNumber;
const int tb_player_role::kAbsorbHpFieldNumber;
const int tb_player_role::kMaxMpFieldNumber;
const int tb_player_role::kCurMpFieldNumber;
const int tb_player_role::kAbsorbMpFieldNumber;
const int tb_player_role::kAttackMinFieldNumber;
const int tb_player_role::kAttackMaxFieldNumber;
const int tb_player_role::kDefenseMinFieldNumber;
const int tb_player_role::kDefenseMaxFieldNumber;
const int tb_player_role::kHitPointFieldNumber;
const int tb_player_role::kDodgeFieldNumber;
const int tb_player_role::kStabilityFieldNumber;
const int tb_player_role::kRecoverFieldNumber;
const int tb_player_role::kAttackSpeedFieldNumber;
const int tb_player_role::kFrozenAdditionRatioFieldNumber;
const int tb_player_role::kPoisoningAdditionRatioFieldNumber;
const int tb_player_role::kPalsyAdditionRatioFieldNumber;
const int tb_player_role::kDizzinessAdditionRatioFieldNumber;
const int tb_player_role::kFrozenResistanceRatioFieldNumber;
const int tb_player_role::kPoisoningResistanceRatioFieldNumber;
const int tb_player_role::kPalsyResistanceRatioFieldNumber;
const int tb_player_role::kDizzinessResistanceRatioFieldNumber;
const int tb_player_role::kOutputHurtPromoteRatioFieldNumber;
const int tb_player_role::kSufferHurtReduceRatioFieldNumber;
const int tb_player_role::kIgnoreDefenseRatioFieldNumber;
const int tb_player_role::kReboundHurtRatioFieldNumber;
const int tb_player_role::kExpCoefficientFieldNumber;
const int tb_player_role::kMoveSpeedFieldNumber;
const int tb_player_role::kArmorIdFieldNumber;
const int tb_player_role::kWeaponIdFieldNumber;
const int tb_player_role::kMountsIdFieldNumber;
const int tb_player_role::kBackpackSizeFieldNumber;
const int tb_player_role::kWarehouseSizeFieldNumber;
const int tb_player_role::kPhysicalPowerFieldNumber;
const int tb_player_role::kFightingPowerFieldNumber;
const int tb_player_role::kAngerFieldNumber;
const int tb_player_role::kCreateTimeFieldNumber;
const int tb_player_role::kOnlineTimeFieldNumber;
const int tb_player_role::kOfflineTimeFieldNumber;
const int tb_player_role::kUpdateTimeFieldNumber;
const int tb_player_role::kHistoryOnlineFieldNumber;
const int tb_player_role::kMeltingFieldNumber;
const int tb_player_role::kPotentialShareMaxFieldNumber;
const int tb_player_role::kPotentialAccumulationFieldNumber;
const int tb_player_role::kSkillPointFieldNumber;
const int tb_player_role::kPopularityFieldNumber;
const int tb_player_role::kSkillPointTimeFieldNumber;
const int tb_player_role::kVipLevelFieldNumber;
const int tb_player_role::kTeamIdFieldNumber;
const int tb_player_role::kCampIdFieldNumber;
const int tb_player_role::kStrategyFieldNumber;
const int tb_player_role::kStoreWeaponFieldNumber;
const int tb_player_role::kBowIdFieldNumber;
const int tb_player_role::kBowIndexFieldNumber;
const int tb_player_role::kCavalryIndexFieldNumber;
const int tb_player_role::kBowSpeedFieldNumber;
const int tb_player_role::kEquipPowerFieldNumber;
#endif  // !_MSC_VER

tb_player_role::tb_player_role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tb_player_role::InitAsDefaultInstance() {
}

tb_player_role::tb_player_role(const tb_player_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tb_player_role::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  system_id_ = 0u;
  player_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0u;
  sex_ = 0u;
  profession_ = 0u;
  experience_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  tael_ = 0u;
  ingot_ = 0u;
  gift_money_ = 0u;
  is_suspended_account_ = 0u;
  partner_id_ = 0u;
  family_id_ = 0u;
  family_position_ = 0u;
  can_be_raised_ = 0u;
  family_level_ = 0u;
  can_join_family_ = 0u;
  can_be_transmit_ = 0u;
  pk_model_ = 0u;
  pk_value_ = 0u;
  military_strategy_ = 0u;
  map_id_ = 0u;
  x_pos_ = 0u;
  y_pos_ = 0u;
  siege_reputation_ = 0u;
  cross_svr_war_reputation_ = 0u;
  max_hp_ = 0u;
  cur_hp_ = 0u;
  absorb_hp_ = 0u;
  max_mp_ = 0u;
  cur_mp_ = 0u;
  absorb_mp_ = 0u;
  attack_min_ = 0u;
  attack_max_ = 0u;
  defense_min_ = 0u;
  defense_max_ = 0u;
  hit_point_ = 0u;
  dodge_ = 0u;
  stability_ = 0u;
  recover_ = 0u;
  attack_speed_ = 0u;
  frozen_addition_ratio_ = 0u;
  poisoning_addition_ratio_ = 0u;
  palsy_addition_ratio_ = 0u;
  dizziness_addition_ratio_ = 0u;
  frozen_resistance_ratio_ = 0u;
  poisoning_resistance_ratio_ = 0u;
  palsy_resistance_ratio_ = 0u;
  dizziness_resistance_ratio_ = 0u;
  output_hurt_promote_ratio_ = 0u;
  suffer_hurt_reduce_ratio_ = 0u;
  ignore_defense_ratio_ = 0u;
  rebound_hurt_ratio_ = 0u;
  exp_coefficient_ = 0u;
  move_speed_ = 0u;
  armor_id_ = 0u;
  weapon_id_ = 0u;
  mounts_id_ = 0u;
  backpack_size_ = 0u;
  warehouse_size_ = 0u;
  physical_power_ = 0u;
  fighting_power_ = 0u;
  anger_ = 0u;
  create_time_ = 0u;
  online_time_ = 0u;
  offline_time_ = 0u;
  update_time_ = 0u;
  history_online_ = 0u;
  melting_ = 0u;
  potential_share_max_ = 0u;
  potential_accumulation_ = 0u;
  skill_point_ = 0u;
  popularity_ = 0u;
  skill_point_time_ = 0u;
  vip_level_ = 0u;
  team_id_ = 0u;
  camp_id_ = 0u;
  strategy_ = 0u;
  store_weapon_ = 0u;
  bow_id_ = 0u;
  bow_index_ = 0u;
  cavalry_index_ = 0u;
  bow_speed_ = 0u;
  equip_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tb_player_role::~tb_player_role() {
  SharedDtor();
}

void tb_player_role::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void tb_player_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tb_player_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tb_player_role_descriptor_;
}

const tb_player_role& tb_player_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2etb_5fplayer_5frole_2eproto();
  return *default_instance_;
}

tb_player_role* tb_player_role::default_instance_ = NULL;

tb_player_role* tb_player_role::New() const {
  return new tb_player_role;
}

void tb_player_role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    system_id_ = 0u;
    player_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    status_ = 0u;
    sex_ = 0u;
    profession_ = 0u;
    experience_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0u;
    tael_ = 0u;
    ingot_ = 0u;
    gift_money_ = 0u;
    is_suspended_account_ = 0u;
    partner_id_ = 0u;
    family_id_ = 0u;
    family_position_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    can_be_raised_ = 0u;
    family_level_ = 0u;
    can_join_family_ = 0u;
    can_be_transmit_ = 0u;
    pk_model_ = 0u;
    pk_value_ = 0u;
    military_strategy_ = 0u;
    map_id_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    x_pos_ = 0u;
    y_pos_ = 0u;
    siege_reputation_ = 0u;
    cross_svr_war_reputation_ = 0u;
    max_hp_ = 0u;
    cur_hp_ = 0u;
    absorb_hp_ = 0u;
    max_mp_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    cur_mp_ = 0u;
    absorb_mp_ = 0u;
    attack_min_ = 0u;
    attack_max_ = 0u;
    defense_min_ = 0u;
    defense_max_ = 0u;
    hit_point_ = 0u;
    dodge_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    stability_ = 0u;
    recover_ = 0u;
    attack_speed_ = 0u;
    frozen_addition_ratio_ = 0u;
    poisoning_addition_ratio_ = 0u;
    palsy_addition_ratio_ = 0u;
    dizziness_addition_ratio_ = 0u;
    frozen_resistance_ratio_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    poisoning_resistance_ratio_ = 0u;
    palsy_resistance_ratio_ = 0u;
    dizziness_resistance_ratio_ = 0u;
    output_hurt_promote_ratio_ = 0u;
    suffer_hurt_reduce_ratio_ = 0u;
    ignore_defense_ratio_ = 0u;
    rebound_hurt_ratio_ = 0u;
    exp_coefficient_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    move_speed_ = 0u;
    armor_id_ = 0u;
    weapon_id_ = 0u;
    mounts_id_ = 0u;
    backpack_size_ = 0u;
    warehouse_size_ = 0u;
    physical_power_ = 0u;
    fighting_power_ = 0u;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    anger_ = 0u;
    create_time_ = 0u;
    online_time_ = 0u;
    offline_time_ = 0u;
    update_time_ = 0u;
    history_online_ = 0u;
    melting_ = 0u;
    potential_share_max_ = 0u;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    potential_accumulation_ = 0u;
    skill_point_ = 0u;
    popularity_ = 0u;
    skill_point_time_ = 0u;
    vip_level_ = 0u;
    team_id_ = 0u;
    camp_id_ = 0u;
    strategy_ = 0u;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    store_weapon_ = 0u;
    bow_id_ = 0u;
    bow_index_ = 0u;
    cavalry_index_ = 0u;
    bow_speed_ = 0u;
    equip_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tb_player_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_system_id;
        break;
      }

      // required uint32 system_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_system_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_id_)));
          set_has_system_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // required uint32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_name;
        break;
      }

      // required string role_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // required uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_profession;
        break;
      }

      // required uint32 profession = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_experience;
        break;
      }

      // required uint64 experience = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // required uint32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tael;
        break;
      }

      // required uint32 tael = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tael:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tael_)));
          set_has_tael();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ingot;
        break;
      }

      // required uint32 ingot = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ingot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ingot_)));
          set_has_ingot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gift_money;
        break;
      }

      // required uint32 gift_money = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gift_money_)));
          set_has_gift_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_suspended_account;
        break;
      }

      // required uint32 is_suspended_account = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_suspended_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_suspended_account_)));
          set_has_is_suspended_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_partner_id;
        break;
      }

      // required uint32 partner_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_id_)));
          set_has_partner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_family_position;
        break;
      }

      // required uint32 family_position = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_position_)));
          set_has_family_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_can_be_raised;
        break;
      }

      // required uint32 can_be_raised = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_be_raised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_be_raised_)));
          set_has_can_be_raised();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_family_level;
        break;
      }

      // required uint32 family_level = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_level_)));
          set_has_family_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_can_join_family;
        break;
      }

      // required uint32 can_join_family = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_join_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_join_family_)));
          set_has_can_join_family();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_can_be_transmit;
        break;
      }

      // required uint32 can_be_transmit = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_be_transmit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_be_transmit_)));
          set_has_can_be_transmit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_pk_model;
        break;
      }

      // required uint32 pk_model = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_model_)));
          set_has_pk_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_pk_value;
        break;
      }

      // required uint32 pk_value = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_value_)));
          set_has_pk_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_military_strategy;
        break;
      }

      // required uint32 military_strategy = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_military_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &military_strategy_)));
          set_has_military_strategy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_map_id;
        break;
      }

      // required uint32 map_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_x_pos;
        break;
      }

      // required uint32 x_pos = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_pos_)));
          set_has_x_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_y_pos;
        break;
      }

      // required uint32 y_pos = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_pos_)));
          set_has_y_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_siege_reputation;
        break;
      }

      // required uint32 siege_reputation = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_siege_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &siege_reputation_)));
          set_has_siege_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_cross_svr_war_reputation;
        break;
      }

      // required uint32 cross_svr_war_reputation = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cross_svr_war_reputation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cross_svr_war_reputation_)));
          set_has_cross_svr_war_reputation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_max_hp;
        break;
      }

      // required uint32 max_hp = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_cur_hp;
        break;
      }

      // required uint32 cur_hp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_absorb_hp;
        break;
      }

      // required uint32 absorb_hp = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_absorb_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absorb_hp_)));
          set_has_absorb_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_max_mp;
        break;
      }

      // required uint32 max_mp = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_mp_)));
          set_has_max_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_cur_mp;
        break;
      }

      // required uint32 cur_mp = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_mp_)));
          set_has_cur_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_absorb_mp;
        break;
      }

      // required uint32 absorb_mp = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_absorb_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absorb_mp_)));
          set_has_absorb_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_attack_min;
        break;
      }

      // required uint32 attack_min = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_min_)));
          set_has_attack_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_attack_max;
        break;
      }

      // required uint32 attack_max = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_max_)));
          set_has_attack_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_defense_min;
        break;
      }

      // required uint32 defense_min = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defense_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defense_min_)));
          set_has_defense_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_defense_max;
        break;
      }

      // required uint32 defense_max = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defense_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defense_max_)));
          set_has_defense_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_hit_point;
        break;
      }

      // required uint32 hit_point = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_point_)));
          set_has_hit_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_dodge;
        break;
      }

      // required uint32 dodge = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_stability;
        break;
      }

      // required uint32 stability = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stability_)));
          set_has_stability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_recover;
        break;
      }

      // required uint32 recover = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recover_)));
          set_has_recover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_attack_speed;
        break;
      }

      // required uint32 attack_speed = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_speed_)));
          set_has_attack_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_frozen_addition_ratio;
        break;
      }

      // required uint32 frozen_addition_ratio = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frozen_addition_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frozen_addition_ratio_)));
          set_has_frozen_addition_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_poisoning_addition_ratio;
        break;
      }

      // required uint32 poisoning_addition_ratio = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poisoning_addition_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poisoning_addition_ratio_)));
          set_has_poisoning_addition_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_palsy_addition_ratio;
        break;
      }

      // required uint32 palsy_addition_ratio = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_palsy_addition_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &palsy_addition_ratio_)));
          set_has_palsy_addition_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_dizziness_addition_ratio;
        break;
      }

      // required uint32 dizziness_addition_ratio = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dizziness_addition_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dizziness_addition_ratio_)));
          set_has_dizziness_addition_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_frozen_resistance_ratio;
        break;
      }

      // required uint32 frozen_resistance_ratio = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frozen_resistance_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frozen_resistance_ratio_)));
          set_has_frozen_resistance_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_poisoning_resistance_ratio;
        break;
      }

      // required uint32 poisoning_resistance_ratio = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poisoning_resistance_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poisoning_resistance_ratio_)));
          set_has_poisoning_resistance_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_palsy_resistance_ratio;
        break;
      }

      // required uint32 palsy_resistance_ratio = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_palsy_resistance_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &palsy_resistance_ratio_)));
          set_has_palsy_resistance_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_dizziness_resistance_ratio;
        break;
      }

      // required uint32 dizziness_resistance_ratio = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dizziness_resistance_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dizziness_resistance_ratio_)));
          set_has_dizziness_resistance_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_output_hurt_promote_ratio;
        break;
      }

      // required uint32 output_hurt_promote_ratio = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_output_hurt_promote_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_hurt_promote_ratio_)));
          set_has_output_hurt_promote_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_suffer_hurt_reduce_ratio;
        break;
      }

      // required uint32 suffer_hurt_reduce_ratio = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suffer_hurt_reduce_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suffer_hurt_reduce_ratio_)));
          set_has_suffer_hurt_reduce_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_ignore_defense_ratio;
        break;
      }

      // required uint32 ignore_defense_ratio = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_defense_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignore_defense_ratio_)));
          set_has_ignore_defense_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_rebound_hurt_ratio;
        break;
      }

      // required uint32 rebound_hurt_ratio = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebound_hurt_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebound_hurt_ratio_)));
          set_has_rebound_hurt_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_exp_coefficient;
        break;
      }

      // required uint32 exp_coefficient = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_coefficient_)));
          set_has_exp_coefficient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_move_speed;
        break;
      }

      // required uint32 move_speed = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_armor_id;
        break;
      }

      // required uint32 armor_id = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armor_id_)));
          set_has_armor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_weapon_id;
        break;
      }

      // required uint32 weapon_id = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_mounts_id;
        break;
      }

      // required uint32 mounts_id = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mounts_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mounts_id_)));
          set_has_mounts_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_backpack_size;
        break;
      }

      // required uint32 backpack_size = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backpack_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backpack_size_)));
          set_has_backpack_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_warehouse_size;
        break;
      }

      // required uint32 warehouse_size = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warehouse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warehouse_size_)));
          set_has_warehouse_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_physical_power;
        break;
      }

      // required uint32 physical_power = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physical_power_)));
          set_has_physical_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_fighting_power;
        break;
      }

      // required uint32 fighting_power = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fighting_power_)));
          set_has_fighting_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_anger;
        break;
      }

      // required uint32 anger = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anger_)));
          set_has_anger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_online_time;
        break;
      }

      // required uint32 online_time = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_time_)));
          set_has_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_offline_time;
        break;
      }

      // required uint32 offline_time = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_time_)));
          set_has_offline_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_history_online;
        break;
      }

      // required uint32 history_online = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_online_)));
          set_has_history_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_melting;
        break;
      }

      // required uint32 melting = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_melting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &melting_)));
          set_has_melting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_potential_share_max;
        break;
      }

      // required uint32 potential_share_max = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_potential_share_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &potential_share_max_)));
          set_has_potential_share_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_potential_accumulation;
        break;
      }

      // required uint32 potential_accumulation = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_potential_accumulation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &potential_accumulation_)));
          set_has_potential_accumulation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_skill_point;
        break;
      }

      // required uint32 skill_point = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_popularity;
        break;
      }

      // required uint32 popularity = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_skill_point_time;
        break;
      }

      // required uint32 skill_point_time = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_time_)));
          set_has_skill_point_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_vip_level;
        break;
      }

      // required uint32 vip_level = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_team_id;
        break;
      }

      // required uint32 team_id = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(632)) goto parse_camp_id;
        break;
      }

      // required uint32 camp_id = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_strategy;
        break;
      }

      // required uint32 strategy = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strategy_)));
          set_has_strategy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_store_weapon;
        break;
      }

      // required uint32 store_weapon = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_store_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_weapon_)));
          set_has_store_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_bow_id;
        break;
      }

      // required uint32 bow_id = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_id_)));
          set_has_bow_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_bow_index;
        break;
      }

      // required uint32 bow_index = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_index_)));
          set_has_bow_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(672)) goto parse_cavalry_index;
        break;
      }

      // required uint32 cavalry_index = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cavalry_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cavalry_index_)));
          set_has_cavalry_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(680)) goto parse_bow_speed;
        break;
      }

      // required uint32 bow_speed = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bow_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bow_speed_)));
          set_has_bow_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(688)) goto parse_equip_power;
        break;
      }

      // required uint32 equip_power = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_power_)));
          set_has_equip_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tb_player_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 system_id = 2;
  if (has_system_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->system_id(), output);
  }

  // required uint32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_id(), output);
  }

  // required string role_name = 4;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_name(), output);
  }

  // required uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  // required uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // required uint32 profession = 7;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->profession(), output);
  }

  // required uint64 experience = 8;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->experience(), output);
  }

  // required uint32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level(), output);
  }

  // required uint32 tael = 10;
  if (has_tael()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tael(), output);
  }

  // required uint32 ingot = 11;
  if (has_ingot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ingot(), output);
  }

  // required uint32 gift_money = 12;
  if (has_gift_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gift_money(), output);
  }

  // required uint32 is_suspended_account = 13;
  if (has_is_suspended_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->is_suspended_account(), output);
  }

  // required uint32 partner_id = 14;
  if (has_partner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->partner_id(), output);
  }

  // required uint32 family_id = 15;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->family_id(), output);
  }

  // required uint32 family_position = 16;
  if (has_family_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->family_position(), output);
  }

  // required uint32 can_be_raised = 17;
  if (has_can_be_raised()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->can_be_raised(), output);
  }

  // required uint32 family_level = 18;
  if (has_family_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->family_level(), output);
  }

  // required uint32 can_join_family = 19;
  if (has_can_join_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->can_join_family(), output);
  }

  // required uint32 can_be_transmit = 20;
  if (has_can_be_transmit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->can_be_transmit(), output);
  }

  // required uint32 pk_model = 21;
  if (has_pk_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->pk_model(), output);
  }

  // required uint32 pk_value = 22;
  if (has_pk_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->pk_value(), output);
  }

  // required uint32 military_strategy = 23;
  if (has_military_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->military_strategy(), output);
  }

  // required uint32 map_id = 24;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->map_id(), output);
  }

  // required uint32 x_pos = 25;
  if (has_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->x_pos(), output);
  }

  // required uint32 y_pos = 26;
  if (has_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->y_pos(), output);
  }

  // required uint32 siege_reputation = 27;
  if (has_siege_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->siege_reputation(), output);
  }

  // required uint32 cross_svr_war_reputation = 28;
  if (has_cross_svr_war_reputation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->cross_svr_war_reputation(), output);
  }

  // required uint32 max_hp = 29;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->max_hp(), output);
  }

  // required uint32 cur_hp = 30;
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->cur_hp(), output);
  }

  // required uint32 absorb_hp = 31;
  if (has_absorb_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->absorb_hp(), output);
  }

  // required uint32 max_mp = 32;
  if (has_max_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->max_mp(), output);
  }

  // required uint32 cur_mp = 33;
  if (has_cur_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->cur_mp(), output);
  }

  // required uint32 absorb_mp = 34;
  if (has_absorb_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->absorb_mp(), output);
  }

  // required uint32 attack_min = 35;
  if (has_attack_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->attack_min(), output);
  }

  // required uint32 attack_max = 36;
  if (has_attack_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->attack_max(), output);
  }

  // required uint32 defense_min = 37;
  if (has_defense_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->defense_min(), output);
  }

  // required uint32 defense_max = 38;
  if (has_defense_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->defense_max(), output);
  }

  // required uint32 hit_point = 39;
  if (has_hit_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->hit_point(), output);
  }

  // required uint32 dodge = 40;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->dodge(), output);
  }

  // required uint32 stability = 41;
  if (has_stability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->stability(), output);
  }

  // required uint32 recover = 42;
  if (has_recover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->recover(), output);
  }

  // required uint32 attack_speed = 43;
  if (has_attack_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->attack_speed(), output);
  }

  // required uint32 frozen_addition_ratio = 44;
  if (has_frozen_addition_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->frozen_addition_ratio(), output);
  }

  // required uint32 poisoning_addition_ratio = 45;
  if (has_poisoning_addition_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->poisoning_addition_ratio(), output);
  }

  // required uint32 palsy_addition_ratio = 46;
  if (has_palsy_addition_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->palsy_addition_ratio(), output);
  }

  // required uint32 dizziness_addition_ratio = 47;
  if (has_dizziness_addition_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->dizziness_addition_ratio(), output);
  }

  // required uint32 frozen_resistance_ratio = 48;
  if (has_frozen_resistance_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->frozen_resistance_ratio(), output);
  }

  // required uint32 poisoning_resistance_ratio = 49;
  if (has_poisoning_resistance_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->poisoning_resistance_ratio(), output);
  }

  // required uint32 palsy_resistance_ratio = 50;
  if (has_palsy_resistance_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->palsy_resistance_ratio(), output);
  }

  // required uint32 dizziness_resistance_ratio = 51;
  if (has_dizziness_resistance_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->dizziness_resistance_ratio(), output);
  }

  // required uint32 output_hurt_promote_ratio = 52;
  if (has_output_hurt_promote_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->output_hurt_promote_ratio(), output);
  }

  // required uint32 suffer_hurt_reduce_ratio = 53;
  if (has_suffer_hurt_reduce_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->suffer_hurt_reduce_ratio(), output);
  }

  // required uint32 ignore_defense_ratio = 54;
  if (has_ignore_defense_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->ignore_defense_ratio(), output);
  }

  // required uint32 rebound_hurt_ratio = 55;
  if (has_rebound_hurt_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->rebound_hurt_ratio(), output);
  }

  // required uint32 exp_coefficient = 56;
  if (has_exp_coefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->exp_coefficient(), output);
  }

  // required uint32 move_speed = 57;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->move_speed(), output);
  }

  // required uint32 armor_id = 58;
  if (has_armor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->armor_id(), output);
  }

  // required uint32 weapon_id = 59;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->weapon_id(), output);
  }

  // required uint32 mounts_id = 60;
  if (has_mounts_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->mounts_id(), output);
  }

  // required uint32 backpack_size = 61;
  if (has_backpack_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->backpack_size(), output);
  }

  // required uint32 warehouse_size = 62;
  if (has_warehouse_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->warehouse_size(), output);
  }

  // required uint32 physical_power = 63;
  if (has_physical_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->physical_power(), output);
  }

  // required uint32 fighting_power = 64;
  if (has_fighting_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->fighting_power(), output);
  }

  // required uint32 anger = 65;
  if (has_anger()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->anger(), output);
  }

  // required uint32 create_time = 66;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->create_time(), output);
  }

  // required uint32 online_time = 67;
  if (has_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->online_time(), output);
  }

  // required uint32 offline_time = 68;
  if (has_offline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->offline_time(), output);
  }

  // required uint32 update_time = 69;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(69, this->update_time(), output);
  }

  // required uint32 history_online = 70;
  if (has_history_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->history_online(), output);
  }

  // required uint32 melting = 71;
  if (has_melting()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->melting(), output);
  }

  // required uint32 potential_share_max = 72;
  if (has_potential_share_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->potential_share_max(), output);
  }

  // required uint32 potential_accumulation = 73;
  if (has_potential_accumulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(73, this->potential_accumulation(), output);
  }

  // required uint32 skill_point = 74;
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->skill_point(), output);
  }

  // required uint32 popularity = 75;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->popularity(), output);
  }

  // required uint32 skill_point_time = 76;
  if (has_skill_point_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->skill_point_time(), output);
  }

  // required uint32 vip_level = 77;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(77, this->vip_level(), output);
  }

  // required uint32 team_id = 78;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->team_id(), output);
  }

  // required uint32 camp_id = 79;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->camp_id(), output);
  }

  // required uint32 strategy = 80;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->strategy(), output);
  }

  // required uint32 store_weapon = 81;
  if (has_store_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(81, this->store_weapon(), output);
  }

  // required uint32 bow_id = 82;
  if (has_bow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->bow_id(), output);
  }

  // required uint32 bow_index = 83;
  if (has_bow_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(83, this->bow_index(), output);
  }

  // required uint32 cavalry_index = 84;
  if (has_cavalry_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(84, this->cavalry_index(), output);
  }

  // required uint32 bow_speed = 85;
  if (has_bow_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(85, this->bow_speed(), output);
  }

  // required uint32 equip_power = 86;
  if (has_equip_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->equip_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tb_player_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 system_id = 2;
  if (has_system_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->system_id(), target);
  }

  // required uint32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_id(), target);
  }

  // required string role_name = 4;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_name(), target);
  }

  // required uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  // required uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // required uint32 profession = 7;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->profession(), target);
  }

  // required uint64 experience = 8;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->experience(), target);
  }

  // required uint32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level(), target);
  }

  // required uint32 tael = 10;
  if (has_tael()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tael(), target);
  }

  // required uint32 ingot = 11;
  if (has_ingot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ingot(), target);
  }

  // required uint32 gift_money = 12;
  if (has_gift_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gift_money(), target);
  }

  // required uint32 is_suspended_account = 13;
  if (has_is_suspended_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->is_suspended_account(), target);
  }

  // required uint32 partner_id = 14;
  if (has_partner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->partner_id(), target);
  }

  // required uint32 family_id = 15;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->family_id(), target);
  }

  // required uint32 family_position = 16;
  if (has_family_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->family_position(), target);
  }

  // required uint32 can_be_raised = 17;
  if (has_can_be_raised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->can_be_raised(), target);
  }

  // required uint32 family_level = 18;
  if (has_family_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->family_level(), target);
  }

  // required uint32 can_join_family = 19;
  if (has_can_join_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->can_join_family(), target);
  }

  // required uint32 can_be_transmit = 20;
  if (has_can_be_transmit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->can_be_transmit(), target);
  }

  // required uint32 pk_model = 21;
  if (has_pk_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->pk_model(), target);
  }

  // required uint32 pk_value = 22;
  if (has_pk_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->pk_value(), target);
  }

  // required uint32 military_strategy = 23;
  if (has_military_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->military_strategy(), target);
  }

  // required uint32 map_id = 24;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->map_id(), target);
  }

  // required uint32 x_pos = 25;
  if (has_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->x_pos(), target);
  }

  // required uint32 y_pos = 26;
  if (has_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->y_pos(), target);
  }

  // required uint32 siege_reputation = 27;
  if (has_siege_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->siege_reputation(), target);
  }

  // required uint32 cross_svr_war_reputation = 28;
  if (has_cross_svr_war_reputation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->cross_svr_war_reputation(), target);
  }

  // required uint32 max_hp = 29;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->max_hp(), target);
  }

  // required uint32 cur_hp = 30;
  if (has_cur_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->cur_hp(), target);
  }

  // required uint32 absorb_hp = 31;
  if (has_absorb_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->absorb_hp(), target);
  }

  // required uint32 max_mp = 32;
  if (has_max_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->max_mp(), target);
  }

  // required uint32 cur_mp = 33;
  if (has_cur_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->cur_mp(), target);
  }

  // required uint32 absorb_mp = 34;
  if (has_absorb_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->absorb_mp(), target);
  }

  // required uint32 attack_min = 35;
  if (has_attack_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->attack_min(), target);
  }

  // required uint32 attack_max = 36;
  if (has_attack_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->attack_max(), target);
  }

  // required uint32 defense_min = 37;
  if (has_defense_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->defense_min(), target);
  }

  // required uint32 defense_max = 38;
  if (has_defense_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->defense_max(), target);
  }

  // required uint32 hit_point = 39;
  if (has_hit_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->hit_point(), target);
  }

  // required uint32 dodge = 40;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->dodge(), target);
  }

  // required uint32 stability = 41;
  if (has_stability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->stability(), target);
  }

  // required uint32 recover = 42;
  if (has_recover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->recover(), target);
  }

  // required uint32 attack_speed = 43;
  if (has_attack_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->attack_speed(), target);
  }

  // required uint32 frozen_addition_ratio = 44;
  if (has_frozen_addition_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->frozen_addition_ratio(), target);
  }

  // required uint32 poisoning_addition_ratio = 45;
  if (has_poisoning_addition_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->poisoning_addition_ratio(), target);
  }

  // required uint32 palsy_addition_ratio = 46;
  if (has_palsy_addition_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->palsy_addition_ratio(), target);
  }

  // required uint32 dizziness_addition_ratio = 47;
  if (has_dizziness_addition_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->dizziness_addition_ratio(), target);
  }

  // required uint32 frozen_resistance_ratio = 48;
  if (has_frozen_resistance_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->frozen_resistance_ratio(), target);
  }

  // required uint32 poisoning_resistance_ratio = 49;
  if (has_poisoning_resistance_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->poisoning_resistance_ratio(), target);
  }

  // required uint32 palsy_resistance_ratio = 50;
  if (has_palsy_resistance_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->palsy_resistance_ratio(), target);
  }

  // required uint32 dizziness_resistance_ratio = 51;
  if (has_dizziness_resistance_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->dizziness_resistance_ratio(), target);
  }

  // required uint32 output_hurt_promote_ratio = 52;
  if (has_output_hurt_promote_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->output_hurt_promote_ratio(), target);
  }

  // required uint32 suffer_hurt_reduce_ratio = 53;
  if (has_suffer_hurt_reduce_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->suffer_hurt_reduce_ratio(), target);
  }

  // required uint32 ignore_defense_ratio = 54;
  if (has_ignore_defense_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->ignore_defense_ratio(), target);
  }

  // required uint32 rebound_hurt_ratio = 55;
  if (has_rebound_hurt_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->rebound_hurt_ratio(), target);
  }

  // required uint32 exp_coefficient = 56;
  if (has_exp_coefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->exp_coefficient(), target);
  }

  // required uint32 move_speed = 57;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->move_speed(), target);
  }

  // required uint32 armor_id = 58;
  if (has_armor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->armor_id(), target);
  }

  // required uint32 weapon_id = 59;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->weapon_id(), target);
  }

  // required uint32 mounts_id = 60;
  if (has_mounts_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->mounts_id(), target);
  }

  // required uint32 backpack_size = 61;
  if (has_backpack_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->backpack_size(), target);
  }

  // required uint32 warehouse_size = 62;
  if (has_warehouse_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->warehouse_size(), target);
  }

  // required uint32 physical_power = 63;
  if (has_physical_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->physical_power(), target);
  }

  // required uint32 fighting_power = 64;
  if (has_fighting_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->fighting_power(), target);
  }

  // required uint32 anger = 65;
  if (has_anger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->anger(), target);
  }

  // required uint32 create_time = 66;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->create_time(), target);
  }

  // required uint32 online_time = 67;
  if (has_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->online_time(), target);
  }

  // required uint32 offline_time = 68;
  if (has_offline_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->offline_time(), target);
  }

  // required uint32 update_time = 69;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(69, this->update_time(), target);
  }

  // required uint32 history_online = 70;
  if (has_history_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->history_online(), target);
  }

  // required uint32 melting = 71;
  if (has_melting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->melting(), target);
  }

  // required uint32 potential_share_max = 72;
  if (has_potential_share_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->potential_share_max(), target);
  }

  // required uint32 potential_accumulation = 73;
  if (has_potential_accumulation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(73, this->potential_accumulation(), target);
  }

  // required uint32 skill_point = 74;
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->skill_point(), target);
  }

  // required uint32 popularity = 75;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->popularity(), target);
  }

  // required uint32 skill_point_time = 76;
  if (has_skill_point_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(76, this->skill_point_time(), target);
  }

  // required uint32 vip_level = 77;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(77, this->vip_level(), target);
  }

  // required uint32 team_id = 78;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->team_id(), target);
  }

  // required uint32 camp_id = 79;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->camp_id(), target);
  }

  // required uint32 strategy = 80;
  if (has_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->strategy(), target);
  }

  // required uint32 store_weapon = 81;
  if (has_store_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(81, this->store_weapon(), target);
  }

  // required uint32 bow_id = 82;
  if (has_bow_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(82, this->bow_id(), target);
  }

  // required uint32 bow_index = 83;
  if (has_bow_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(83, this->bow_index(), target);
  }

  // required uint32 cavalry_index = 84;
  if (has_cavalry_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(84, this->cavalry_index(), target);
  }

  // required uint32 bow_speed = 85;
  if (has_bow_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(85, this->bow_speed(), target);
  }

  // required uint32 equip_power = 86;
  if (has_equip_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(86, this->equip_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tb_player_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 system_id = 2;
    if (has_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->system_id());
    }

    // required uint32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required string role_name = 4;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // required uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // required uint32 profession = 7;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // required uint64 experience = 8;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->experience());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 tael = 10;
    if (has_tael()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tael());
    }

    // required uint32 ingot = 11;
    if (has_ingot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ingot());
    }

    // required uint32 gift_money = 12;
    if (has_gift_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gift_money());
    }

    // required uint32 is_suspended_account = 13;
    if (has_is_suspended_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_suspended_account());
    }

    // required uint32 partner_id = 14;
    if (has_partner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_id());
    }

    // required uint32 family_id = 15;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 family_position = 16;
    if (has_family_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_position());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 can_be_raised = 17;
    if (has_can_be_raised()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_be_raised());
    }

    // required uint32 family_level = 18;
    if (has_family_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_level());
    }

    // required uint32 can_join_family = 19;
    if (has_can_join_family()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_join_family());
    }

    // required uint32 can_be_transmit = 20;
    if (has_can_be_transmit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_be_transmit());
    }

    // required uint32 pk_model = 21;
    if (has_pk_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_model());
    }

    // required uint32 pk_value = 22;
    if (has_pk_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_value());
    }

    // required uint32 military_strategy = 23;
    if (has_military_strategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->military_strategy());
    }

    // required uint32 map_id = 24;
    if (has_map_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint32 x_pos = 25;
    if (has_x_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x_pos());
    }

    // required uint32 y_pos = 26;
    if (has_y_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y_pos());
    }

    // required uint32 siege_reputation = 27;
    if (has_siege_reputation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->siege_reputation());
    }

    // required uint32 cross_svr_war_reputation = 28;
    if (has_cross_svr_war_reputation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cross_svr_war_reputation());
    }

    // required uint32 max_hp = 29;
    if (has_max_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hp());
    }

    // required uint32 cur_hp = 30;
    if (has_cur_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_hp());
    }

    // required uint32 absorb_hp = 31;
    if (has_absorb_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->absorb_hp());
    }

    // required uint32 max_mp = 32;
    if (has_max_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_mp());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required uint32 cur_mp = 33;
    if (has_cur_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_mp());
    }

    // required uint32 absorb_mp = 34;
    if (has_absorb_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->absorb_mp());
    }

    // required uint32 attack_min = 35;
    if (has_attack_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_min());
    }

    // required uint32 attack_max = 36;
    if (has_attack_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_max());
    }

    // required uint32 defense_min = 37;
    if (has_defense_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defense_min());
    }

    // required uint32 defense_max = 38;
    if (has_defense_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defense_max());
    }

    // required uint32 hit_point = 39;
    if (has_hit_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit_point());
    }

    // required uint32 dodge = 40;
    if (has_dodge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required uint32 stability = 41;
    if (has_stability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stability());
    }

    // required uint32 recover = 42;
    if (has_recover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recover());
    }

    // required uint32 attack_speed = 43;
    if (has_attack_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_speed());
    }

    // required uint32 frozen_addition_ratio = 44;
    if (has_frozen_addition_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frozen_addition_ratio());
    }

    // required uint32 poisoning_addition_ratio = 45;
    if (has_poisoning_addition_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poisoning_addition_ratio());
    }

    // required uint32 palsy_addition_ratio = 46;
    if (has_palsy_addition_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->palsy_addition_ratio());
    }

    // required uint32 dizziness_addition_ratio = 47;
    if (has_dizziness_addition_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dizziness_addition_ratio());
    }

    // required uint32 frozen_resistance_ratio = 48;
    if (has_frozen_resistance_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frozen_resistance_ratio());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // required uint32 poisoning_resistance_ratio = 49;
    if (has_poisoning_resistance_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poisoning_resistance_ratio());
    }

    // required uint32 palsy_resistance_ratio = 50;
    if (has_palsy_resistance_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->palsy_resistance_ratio());
    }

    // required uint32 dizziness_resistance_ratio = 51;
    if (has_dizziness_resistance_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dizziness_resistance_ratio());
    }

    // required uint32 output_hurt_promote_ratio = 52;
    if (has_output_hurt_promote_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->output_hurt_promote_ratio());
    }

    // required uint32 suffer_hurt_reduce_ratio = 53;
    if (has_suffer_hurt_reduce_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suffer_hurt_reduce_ratio());
    }

    // required uint32 ignore_defense_ratio = 54;
    if (has_ignore_defense_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignore_defense_ratio());
    }

    // required uint32 rebound_hurt_ratio = 55;
    if (has_rebound_hurt_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebound_hurt_ratio());
    }

    // required uint32 exp_coefficient = 56;
    if (has_exp_coefficient()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp_coefficient());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // required uint32 move_speed = 57;
    if (has_move_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_speed());
    }

    // required uint32 armor_id = 58;
    if (has_armor_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armor_id());
    }

    // required uint32 weapon_id = 59;
    if (has_weapon_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon_id());
    }

    // required uint32 mounts_id = 60;
    if (has_mounts_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mounts_id());
    }

    // required uint32 backpack_size = 61;
    if (has_backpack_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backpack_size());
    }

    // required uint32 warehouse_size = 62;
    if (has_warehouse_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warehouse_size());
    }

    // required uint32 physical_power = 63;
    if (has_physical_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physical_power());
    }

    // required uint32 fighting_power = 64;
    if (has_fighting_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting_power());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // required uint32 anger = 65;
    if (has_anger()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anger());
    }

    // required uint32 create_time = 66;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 online_time = 67;
    if (has_online_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_time());
    }

    // required uint32 offline_time = 68;
    if (has_offline_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offline_time());
    }

    // required uint32 update_time = 69;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // required uint32 history_online = 70;
    if (has_history_online()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_online());
    }

    // required uint32 melting = 71;
    if (has_melting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->melting());
    }

    // required uint32 potential_share_max = 72;
    if (has_potential_share_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->potential_share_max());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // required uint32 potential_accumulation = 73;
    if (has_potential_accumulation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->potential_accumulation());
    }

    // required uint32 skill_point = 74;
    if (has_skill_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point());
    }

    // required uint32 popularity = 75;
    if (has_popularity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->popularity());
    }

    // required uint32 skill_point_time = 76;
    if (has_skill_point_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point_time());
    }

    // required uint32 vip_level = 77;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // required uint32 team_id = 78;
    if (has_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // required uint32 camp_id = 79;
    if (has_camp_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camp_id());
    }

    // required uint32 strategy = 80;
    if (has_strategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strategy());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // required uint32 store_weapon = 81;
    if (has_store_weapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_weapon());
    }

    // required uint32 bow_id = 82;
    if (has_bow_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_id());
    }

    // required uint32 bow_index = 83;
    if (has_bow_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_index());
    }

    // required uint32 cavalry_index = 84;
    if (has_cavalry_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cavalry_index());
    }

    // required uint32 bow_speed = 85;
    if (has_bow_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bow_speed());
    }

    // required uint32 equip_power = 86;
    if (has_equip_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tb_player_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tb_player_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tb_player_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tb_player_role::MergeFrom(const tb_player_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_system_id()) {
      set_system_id(from.system_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_tael()) {
      set_tael(from.tael());
    }
    if (from.has_ingot()) {
      set_ingot(from.ingot());
    }
    if (from.has_gift_money()) {
      set_gift_money(from.gift_money());
    }
    if (from.has_is_suspended_account()) {
      set_is_suspended_account(from.is_suspended_account());
    }
    if (from.has_partner_id()) {
      set_partner_id(from.partner_id());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_family_position()) {
      set_family_position(from.family_position());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_can_be_raised()) {
      set_can_be_raised(from.can_be_raised());
    }
    if (from.has_family_level()) {
      set_family_level(from.family_level());
    }
    if (from.has_can_join_family()) {
      set_can_join_family(from.can_join_family());
    }
    if (from.has_can_be_transmit()) {
      set_can_be_transmit(from.can_be_transmit());
    }
    if (from.has_pk_model()) {
      set_pk_model(from.pk_model());
    }
    if (from.has_pk_value()) {
      set_pk_value(from.pk_value());
    }
    if (from.has_military_strategy()) {
      set_military_strategy(from.military_strategy());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_x_pos()) {
      set_x_pos(from.x_pos());
    }
    if (from.has_y_pos()) {
      set_y_pos(from.y_pos());
    }
    if (from.has_siege_reputation()) {
      set_siege_reputation(from.siege_reputation());
    }
    if (from.has_cross_svr_war_reputation()) {
      set_cross_svr_war_reputation(from.cross_svr_war_reputation());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
    if (from.has_absorb_hp()) {
      set_absorb_hp(from.absorb_hp());
    }
    if (from.has_max_mp()) {
      set_max_mp(from.max_mp());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_cur_mp()) {
      set_cur_mp(from.cur_mp());
    }
    if (from.has_absorb_mp()) {
      set_absorb_mp(from.absorb_mp());
    }
    if (from.has_attack_min()) {
      set_attack_min(from.attack_min());
    }
    if (from.has_attack_max()) {
      set_attack_max(from.attack_max());
    }
    if (from.has_defense_min()) {
      set_defense_min(from.defense_min());
    }
    if (from.has_defense_max()) {
      set_defense_max(from.defense_max());
    }
    if (from.has_hit_point()) {
      set_hit_point(from.hit_point());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_stability()) {
      set_stability(from.stability());
    }
    if (from.has_recover()) {
      set_recover(from.recover());
    }
    if (from.has_attack_speed()) {
      set_attack_speed(from.attack_speed());
    }
    if (from.has_frozen_addition_ratio()) {
      set_frozen_addition_ratio(from.frozen_addition_ratio());
    }
    if (from.has_poisoning_addition_ratio()) {
      set_poisoning_addition_ratio(from.poisoning_addition_ratio());
    }
    if (from.has_palsy_addition_ratio()) {
      set_palsy_addition_ratio(from.palsy_addition_ratio());
    }
    if (from.has_dizziness_addition_ratio()) {
      set_dizziness_addition_ratio(from.dizziness_addition_ratio());
    }
    if (from.has_frozen_resistance_ratio()) {
      set_frozen_resistance_ratio(from.frozen_resistance_ratio());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_poisoning_resistance_ratio()) {
      set_poisoning_resistance_ratio(from.poisoning_resistance_ratio());
    }
    if (from.has_palsy_resistance_ratio()) {
      set_palsy_resistance_ratio(from.palsy_resistance_ratio());
    }
    if (from.has_dizziness_resistance_ratio()) {
      set_dizziness_resistance_ratio(from.dizziness_resistance_ratio());
    }
    if (from.has_output_hurt_promote_ratio()) {
      set_output_hurt_promote_ratio(from.output_hurt_promote_ratio());
    }
    if (from.has_suffer_hurt_reduce_ratio()) {
      set_suffer_hurt_reduce_ratio(from.suffer_hurt_reduce_ratio());
    }
    if (from.has_ignore_defense_ratio()) {
      set_ignore_defense_ratio(from.ignore_defense_ratio());
    }
    if (from.has_rebound_hurt_ratio()) {
      set_rebound_hurt_ratio(from.rebound_hurt_ratio());
    }
    if (from.has_exp_coefficient()) {
      set_exp_coefficient(from.exp_coefficient());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_armor_id()) {
      set_armor_id(from.armor_id());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_mounts_id()) {
      set_mounts_id(from.mounts_id());
    }
    if (from.has_backpack_size()) {
      set_backpack_size(from.backpack_size());
    }
    if (from.has_warehouse_size()) {
      set_warehouse_size(from.warehouse_size());
    }
    if (from.has_physical_power()) {
      set_physical_power(from.physical_power());
    }
    if (from.has_fighting_power()) {
      set_fighting_power(from.fighting_power());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_anger()) {
      set_anger(from.anger());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_online_time()) {
      set_online_time(from.online_time());
    }
    if (from.has_offline_time()) {
      set_offline_time(from.offline_time());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_history_online()) {
      set_history_online(from.history_online());
    }
    if (from.has_melting()) {
      set_melting(from.melting());
    }
    if (from.has_potential_share_max()) {
      set_potential_share_max(from.potential_share_max());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_potential_accumulation()) {
      set_potential_accumulation(from.potential_accumulation());
    }
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
    if (from.has_skill_point_time()) {
      set_skill_point_time(from.skill_point_time());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_strategy()) {
      set_strategy(from.strategy());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_store_weapon()) {
      set_store_weapon(from.store_weapon());
    }
    if (from.has_bow_id()) {
      set_bow_id(from.bow_id());
    }
    if (from.has_bow_index()) {
      set_bow_index(from.bow_index());
    }
    if (from.has_cavalry_index()) {
      set_cavalry_index(from.cavalry_index());
    }
    if (from.has_bow_speed()) {
      set_bow_speed(from.bow_speed());
    }
    if (from.has_equip_power()) {
      set_equip_power(from.equip_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tb_player_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tb_player_role::CopyFrom(const tb_player_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tb_player_role::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[2] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void tb_player_role::Swap(tb_player_role* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(system_id_, other->system_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(status_, other->status_);
    std::swap(sex_, other->sex_);
    std::swap(profession_, other->profession_);
    std::swap(experience_, other->experience_);
    std::swap(level_, other->level_);
    std::swap(tael_, other->tael_);
    std::swap(ingot_, other->ingot_);
    std::swap(gift_money_, other->gift_money_);
    std::swap(is_suspended_account_, other->is_suspended_account_);
    std::swap(partner_id_, other->partner_id_);
    std::swap(family_id_, other->family_id_);
    std::swap(family_position_, other->family_position_);
    std::swap(can_be_raised_, other->can_be_raised_);
    std::swap(family_level_, other->family_level_);
    std::swap(can_join_family_, other->can_join_family_);
    std::swap(can_be_transmit_, other->can_be_transmit_);
    std::swap(pk_model_, other->pk_model_);
    std::swap(pk_value_, other->pk_value_);
    std::swap(military_strategy_, other->military_strategy_);
    std::swap(map_id_, other->map_id_);
    std::swap(x_pos_, other->x_pos_);
    std::swap(y_pos_, other->y_pos_);
    std::swap(siege_reputation_, other->siege_reputation_);
    std::swap(cross_svr_war_reputation_, other->cross_svr_war_reputation_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(absorb_hp_, other->absorb_hp_);
    std::swap(max_mp_, other->max_mp_);
    std::swap(cur_mp_, other->cur_mp_);
    std::swap(absorb_mp_, other->absorb_mp_);
    std::swap(attack_min_, other->attack_min_);
    std::swap(attack_max_, other->attack_max_);
    std::swap(defense_min_, other->defense_min_);
    std::swap(defense_max_, other->defense_max_);
    std::swap(hit_point_, other->hit_point_);
    std::swap(dodge_, other->dodge_);
    std::swap(stability_, other->stability_);
    std::swap(recover_, other->recover_);
    std::swap(attack_speed_, other->attack_speed_);
    std::swap(frozen_addition_ratio_, other->frozen_addition_ratio_);
    std::swap(poisoning_addition_ratio_, other->poisoning_addition_ratio_);
    std::swap(palsy_addition_ratio_, other->palsy_addition_ratio_);
    std::swap(dizziness_addition_ratio_, other->dizziness_addition_ratio_);
    std::swap(frozen_resistance_ratio_, other->frozen_resistance_ratio_);
    std::swap(poisoning_resistance_ratio_, other->poisoning_resistance_ratio_);
    std::swap(palsy_resistance_ratio_, other->palsy_resistance_ratio_);
    std::swap(dizziness_resistance_ratio_, other->dizziness_resistance_ratio_);
    std::swap(output_hurt_promote_ratio_, other->output_hurt_promote_ratio_);
    std::swap(suffer_hurt_reduce_ratio_, other->suffer_hurt_reduce_ratio_);
    std::swap(ignore_defense_ratio_, other->ignore_defense_ratio_);
    std::swap(rebound_hurt_ratio_, other->rebound_hurt_ratio_);
    std::swap(exp_coefficient_, other->exp_coefficient_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(armor_id_, other->armor_id_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(mounts_id_, other->mounts_id_);
    std::swap(backpack_size_, other->backpack_size_);
    std::swap(warehouse_size_, other->warehouse_size_);
    std::swap(physical_power_, other->physical_power_);
    std::swap(fighting_power_, other->fighting_power_);
    std::swap(anger_, other->anger_);
    std::swap(create_time_, other->create_time_);
    std::swap(online_time_, other->online_time_);
    std::swap(offline_time_, other->offline_time_);
    std::swap(update_time_, other->update_time_);
    std::swap(history_online_, other->history_online_);
    std::swap(melting_, other->melting_);
    std::swap(potential_share_max_, other->potential_share_max_);
    std::swap(potential_accumulation_, other->potential_accumulation_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(popularity_, other->popularity_);
    std::swap(skill_point_time_, other->skill_point_time_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(team_id_, other->team_id_);
    std::swap(camp_id_, other->camp_id_);
    std::swap(strategy_, other->strategy_);
    std::swap(store_weapon_, other->store_weapon_);
    std::swap(bow_id_, other->bow_id_);
    std::swap(bow_index_, other->bow_index_);
    std::swap(cavalry_index_, other->cavalry_index_);
    std::swap(bow_speed_, other->bow_speed_);
    std::swap(equip_power_, other->equip_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tb_player_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tb_player_role_descriptor_;
  metadata.reflection = tb_player_role_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
