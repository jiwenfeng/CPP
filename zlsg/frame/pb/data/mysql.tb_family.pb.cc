// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_family.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.tb_family.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* tb_family_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tb_family_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2etb_5ffamily_2eproto() {
  protobuf_AddDesc_mysql_2etb_5ffamily_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.tb_family.proto");
  GOOGLE_CHECK(file != NULL);
  tb_family_descriptor_ = file->message_type(0);
  static const int tb_family_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, flag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, flag_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, chief_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, chief_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, deputy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, king_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, emperor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, cur_member_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, approval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, yy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, boss_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, call_boss_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, op_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, op_tag_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, belong_sect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, dragon_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, tiger_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, rosefinch_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, tortoise_count_),
  };
  tb_family_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tb_family_descriptor_,
      tb_family::default_instance_,
      tb_family_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tb_family));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2etb_5ffamily_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tb_family_descriptor_, &tb_family::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2etb_5ffamily_2eproto() {
  delete tb_family::default_instance_;
  delete tb_family_reflection_;
}

void protobuf_AddDesc_mysql_2etb_5ffamily_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025mysql.tb_family.proto\022\005mysql\"\244\004\n\ttb_fa"
    "mily\022\n\n\002id\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\017\n\007flag_i"
    "d\030\003 \002(\r\022\021\n\tflag_name\030\004 \002(\t\022\013\n\003lvl\030\005 \002(\r\022"
    "\020\n\010chief_id\030\006 \002(\r\022\022\n\nchief_name\030\007 \002(\t\022\021\n"
    "\tdeputy_id\030\010 \002(\r\022\014\n\004post\030\t \002(\t\022\r\n\005money\030"
    "\n \002(\r\022\r\n\005power\030\013 \002(\r\022\016\n\006domain\030\014 \002(\r\022\014\n\004"
    "king\030\r \002(\005\022\017\n\007emperor\030\016 \002(\005\022\026\n\016cur_membe"
    "r_num\030\017 \002(\r\022\020\n\010approval\030\020 \002(\005\022\020\n\010activit"
    "y\030\021 \002(\r\022\n\n\002qq\030\022 \002(\r\022\n\n\002yy\030\023 \002(\r\022\021\n\tboss_"
    "time\030\024 \002(\r\022\026\n\016call_boss_time\030\025 \002(\r\022\016\n\006op"
    "_tag\030\026 \002(\r\022\023\n\013op_tag_time\030\027 \002(\r\022\016\n\006statu"
    "s\030\030 \002(\r\022\023\n\013belong_sect\030\031 \002(\r\022\023\n\013create_t"
    "ime\030\032 \002(\r\022\024\n\014dragon_count\030\033 \002(\r\022\023\n\013tiger"
    "_count\030\034 \002(\r\022\027\n\017rosefinch_count\030\035 \002(\r\022\026\n"
    "\016tortoise_count\030\036 \002(\r", 581);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.tb_family.proto", &protobuf_RegisterTypes);
  tb_family::default_instance_ = new tb_family();
  tb_family::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2etb_5ffamily_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2etb_5ffamily_2eproto {
  StaticDescriptorInitializer_mysql_2etb_5ffamily_2eproto() {
    protobuf_AddDesc_mysql_2etb_5ffamily_2eproto();
  }
} static_descriptor_initializer_mysql_2etb_5ffamily_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tb_family::kIdFieldNumber;
const int tb_family::kNameFieldNumber;
const int tb_family::kFlagIdFieldNumber;
const int tb_family::kFlagNameFieldNumber;
const int tb_family::kLvlFieldNumber;
const int tb_family::kChiefIdFieldNumber;
const int tb_family::kChiefNameFieldNumber;
const int tb_family::kDeputyIdFieldNumber;
const int tb_family::kPostFieldNumber;
const int tb_family::kMoneyFieldNumber;
const int tb_family::kPowerFieldNumber;
const int tb_family::kDomainFieldNumber;
const int tb_family::kKingFieldNumber;
const int tb_family::kEmperorFieldNumber;
const int tb_family::kCurMemberNumFieldNumber;
const int tb_family::kApprovalFieldNumber;
const int tb_family::kActivityFieldNumber;
const int tb_family::kQqFieldNumber;
const int tb_family::kYyFieldNumber;
const int tb_family::kBossTimeFieldNumber;
const int tb_family::kCallBossTimeFieldNumber;
const int tb_family::kOpTagFieldNumber;
const int tb_family::kOpTagTimeFieldNumber;
const int tb_family::kStatusFieldNumber;
const int tb_family::kBelongSectFieldNumber;
const int tb_family::kCreateTimeFieldNumber;
const int tb_family::kDragonCountFieldNumber;
const int tb_family::kTigerCountFieldNumber;
const int tb_family::kRosefinchCountFieldNumber;
const int tb_family::kTortoiseCountFieldNumber;
#endif  // !_MSC_VER

tb_family::tb_family()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tb_family::InitAsDefaultInstance() {
}

tb_family::tb_family(const tb_family& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tb_family::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_id_ = 0u;
  flag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvl_ = 0u;
  chief_id_ = 0u;
  chief_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deputy_id_ = 0u;
  post_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0u;
  power_ = 0u;
  domain_ = 0u;
  king_ = 0;
  emperor_ = 0;
  cur_member_num_ = 0u;
  approval_ = 0;
  activity_ = 0u;
  qq_ = 0u;
  yy_ = 0u;
  boss_time_ = 0u;
  call_boss_time_ = 0u;
  op_tag_ = 0u;
  op_tag_time_ = 0u;
  status_ = 0u;
  belong_sect_ = 0u;
  create_time_ = 0u;
  dragon_count_ = 0u;
  tiger_count_ = 0u;
  rosefinch_count_ = 0u;
  tortoise_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tb_family::~tb_family() {
  SharedDtor();
}

void tb_family::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_name_;
  }
  if (chief_name_ != &::google::protobuf::internal::kEmptyString) {
    delete chief_name_;
  }
  if (post_ != &::google::protobuf::internal::kEmptyString) {
    delete post_;
  }
  if (this != default_instance_) {
  }
}

void tb_family::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tb_family::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tb_family_descriptor_;
}

const tb_family& tb_family::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2etb_5ffamily_2eproto();
  return *default_instance_;
}

tb_family* tb_family::default_instance_ = NULL;

tb_family* tb_family::New() const {
  return new tb_family;
}

void tb_family::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    flag_id_ = 0u;
    if (has_flag_name()) {
      if (flag_name_ != &::google::protobuf::internal::kEmptyString) {
        flag_name_->clear();
      }
    }
    lvl_ = 0u;
    chief_id_ = 0u;
    if (has_chief_name()) {
      if (chief_name_ != &::google::protobuf::internal::kEmptyString) {
        chief_name_->clear();
      }
    }
    deputy_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_post()) {
      if (post_ != &::google::protobuf::internal::kEmptyString) {
        post_->clear();
      }
    }
    money_ = 0u;
    power_ = 0u;
    domain_ = 0u;
    king_ = 0;
    emperor_ = 0;
    cur_member_num_ = 0u;
    approval_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    activity_ = 0u;
    qq_ = 0u;
    yy_ = 0u;
    boss_time_ = 0u;
    call_boss_time_ = 0u;
    op_tag_ = 0u;
    op_tag_time_ = 0u;
    status_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    belong_sect_ = 0u;
    create_time_ = 0u;
    dragon_count_ = 0u;
    tiger_count_ = 0u;
    rosefinch_count_ = 0u;
    tortoise_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tb_family::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag_id;
        break;
      }

      // required uint32 flag_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_id_)));
          set_has_flag_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_flag_name;
        break;
      }

      // required string flag_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flag_name().data(), this->flag_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lvl;
        break;
      }

      // required uint32 lvl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chief_id;
        break;
      }

      // required uint32 chief_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chief_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chief_id_)));
          set_has_chief_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chief_name;
        break;
      }

      // required string chief_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chief_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chief_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chief_name().data(), this->chief_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_deputy_id;
        break;
      }

      // required uint32 deputy_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deputy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deputy_id_)));
          set_has_deputy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_post;
        break;
      }

      // required string post = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_post()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->post().data(), this->post().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_money;
        break;
      }

      // required uint32 money = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_power;
        break;
      }

      // required uint32 power = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_domain;
        break;
      }

      // required uint32 domain = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_domain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &domain_)));
          set_has_domain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_king;
        break;
      }

      // required int32 king = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &king_)));
          set_has_king();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_emperor;
        break;
      }

      // required int32 emperor = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emperor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emperor_)));
          set_has_emperor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cur_member_num;
        break;
      }

      // required uint32 cur_member_num = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_member_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_member_num_)));
          set_has_cur_member_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_approval;
        break;
      }

      // required int32 approval = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_approval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &approval_)));
          set_has_approval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_activity;
        break;
      }

      // required uint32 activity = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_)));
          set_has_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_qq;
        break;
      }

      // required uint32 qq = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qq_)));
          set_has_qq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_yy;
        break;
      }

      // required uint32 yy = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yy_)));
          set_has_yy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_boss_time;
        break;
      }

      // required uint32 boss_time = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_time_)));
          set_has_boss_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_call_boss_time;
        break;
      }

      // required uint32 call_boss_time = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_boss_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_boss_time_)));
          set_has_call_boss_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_op_tag;
        break;
      }

      // required uint32 op_tag = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_tag_)));
          set_has_op_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_op_tag_time;
        break;
      }

      // required uint32 op_tag_time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_tag_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_tag_time_)));
          set_has_op_tag_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_status;
        break;
      }

      // required uint32 status = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_belong_sect;
        break;
      }

      // required uint32 belong_sect = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_belong_sect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &belong_sect_)));
          set_has_belong_sect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_dragon_count;
        break;
      }

      // required uint32 dragon_count = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dragon_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dragon_count_)));
          set_has_dragon_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_tiger_count;
        break;
      }

      // required uint32 tiger_count = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiger_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tiger_count_)));
          set_has_tiger_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_rosefinch_count;
        break;
      }

      // required uint32 rosefinch_count = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rosefinch_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rosefinch_count_)));
          set_has_rosefinch_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_tortoise_count;
        break;
      }

      // required uint32 tortoise_count = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tortoise_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tortoise_count_)));
          set_has_tortoise_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tb_family::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 flag_id = 3;
  if (has_flag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag_id(), output);
  }

  // required string flag_name = 4;
  if (has_flag_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag_name().data(), this->flag_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->flag_name(), output);
  }

  // required uint32 lvl = 5;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lvl(), output);
  }

  // required uint32 chief_id = 6;
  if (has_chief_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->chief_id(), output);
  }

  // required string chief_name = 7;
  if (has_chief_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chief_name().data(), this->chief_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->chief_name(), output);
  }

  // required uint32 deputy_id = 8;
  if (has_deputy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->deputy_id(), output);
  }

  // required string post = 9;
  if (has_post()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->post(), output);
  }

  // required uint32 money = 10;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->money(), output);
  }

  // required uint32 power = 11;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->power(), output);
  }

  // required uint32 domain = 12;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->domain(), output);
  }

  // required int32 king = 13;
  if (has_king()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->king(), output);
  }

  // required int32 emperor = 14;
  if (has_emperor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->emperor(), output);
  }

  // required uint32 cur_member_num = 15;
  if (has_cur_member_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->cur_member_num(), output);
  }

  // required int32 approval = 16;
  if (has_approval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->approval(), output);
  }

  // required uint32 activity = 17;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->activity(), output);
  }

  // required uint32 qq = 18;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->qq(), output);
  }

  // required uint32 yy = 19;
  if (has_yy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->yy(), output);
  }

  // required uint32 boss_time = 20;
  if (has_boss_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->boss_time(), output);
  }

  // required uint32 call_boss_time = 21;
  if (has_call_boss_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->call_boss_time(), output);
  }

  // required uint32 op_tag = 22;
  if (has_op_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->op_tag(), output);
  }

  // required uint32 op_tag_time = 23;
  if (has_op_tag_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->op_tag_time(), output);
  }

  // required uint32 status = 24;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->status(), output);
  }

  // required uint32 belong_sect = 25;
  if (has_belong_sect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->belong_sect(), output);
  }

  // required uint32 create_time = 26;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->create_time(), output);
  }

  // required uint32 dragon_count = 27;
  if (has_dragon_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->dragon_count(), output);
  }

  // required uint32 tiger_count = 28;
  if (has_tiger_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->tiger_count(), output);
  }

  // required uint32 rosefinch_count = 29;
  if (has_rosefinch_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->rosefinch_count(), output);
  }

  // required uint32 tortoise_count = 30;
  if (has_tortoise_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->tortoise_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tb_family::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 flag_id = 3;
  if (has_flag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag_id(), target);
  }

  // required string flag_name = 4;
  if (has_flag_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag_name().data(), this->flag_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->flag_name(), target);
  }

  // required uint32 lvl = 5;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lvl(), target);
  }

  // required uint32 chief_id = 6;
  if (has_chief_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->chief_id(), target);
  }

  // required string chief_name = 7;
  if (has_chief_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chief_name().data(), this->chief_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->chief_name(), target);
  }

  // required uint32 deputy_id = 8;
  if (has_deputy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->deputy_id(), target);
  }

  // required string post = 9;
  if (has_post()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post().data(), this->post().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->post(), target);
  }

  // required uint32 money = 10;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->money(), target);
  }

  // required uint32 power = 11;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->power(), target);
  }

  // required uint32 domain = 12;
  if (has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->domain(), target);
  }

  // required int32 king = 13;
  if (has_king()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->king(), target);
  }

  // required int32 emperor = 14;
  if (has_emperor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->emperor(), target);
  }

  // required uint32 cur_member_num = 15;
  if (has_cur_member_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->cur_member_num(), target);
  }

  // required int32 approval = 16;
  if (has_approval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->approval(), target);
  }

  // required uint32 activity = 17;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->activity(), target);
  }

  // required uint32 qq = 18;
  if (has_qq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->qq(), target);
  }

  // required uint32 yy = 19;
  if (has_yy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->yy(), target);
  }

  // required uint32 boss_time = 20;
  if (has_boss_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->boss_time(), target);
  }

  // required uint32 call_boss_time = 21;
  if (has_call_boss_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->call_boss_time(), target);
  }

  // required uint32 op_tag = 22;
  if (has_op_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->op_tag(), target);
  }

  // required uint32 op_tag_time = 23;
  if (has_op_tag_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->op_tag_time(), target);
  }

  // required uint32 status = 24;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->status(), target);
  }

  // required uint32 belong_sect = 25;
  if (has_belong_sect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->belong_sect(), target);
  }

  // required uint32 create_time = 26;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->create_time(), target);
  }

  // required uint32 dragon_count = 27;
  if (has_dragon_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->dragon_count(), target);
  }

  // required uint32 tiger_count = 28;
  if (has_tiger_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->tiger_count(), target);
  }

  // required uint32 rosefinch_count = 29;
  if (has_rosefinch_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->rosefinch_count(), target);
  }

  // required uint32 tortoise_count = 30;
  if (has_tortoise_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->tortoise_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tb_family::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 flag_id = 3;
    if (has_flag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag_id());
    }

    // required string flag_name = 4;
    if (has_flag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flag_name());
    }

    // required uint32 lvl = 5;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }

    // required uint32 chief_id = 6;
    if (has_chief_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chief_id());
    }

    // required string chief_name = 7;
    if (has_chief_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chief_name());
    }

    // required uint32 deputy_id = 8;
    if (has_deputy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deputy_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string post = 9;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->post());
    }

    // required uint32 money = 10;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // required uint32 power = 11;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // required uint32 domain = 12;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->domain());
    }

    // required int32 king = 13;
    if (has_king()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->king());
    }

    // required int32 emperor = 14;
    if (has_emperor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emperor());
    }

    // required uint32 cur_member_num = 15;
    if (has_cur_member_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_member_num());
    }

    // required int32 approval = 16;
    if (has_approval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->approval());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 activity = 17;
    if (has_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity());
    }

    // required uint32 qq = 18;
    if (has_qq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qq());
    }

    // required uint32 yy = 19;
    if (has_yy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yy());
    }

    // required uint32 boss_time = 20;
    if (has_boss_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_time());
    }

    // required uint32 call_boss_time = 21;
    if (has_call_boss_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->call_boss_time());
    }

    // required uint32 op_tag = 22;
    if (has_op_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_tag());
    }

    // required uint32 op_tag_time = 23;
    if (has_op_tag_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_tag_time());
    }

    // required uint32 status = 24;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint32 belong_sect = 25;
    if (has_belong_sect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->belong_sect());
    }

    // required uint32 create_time = 26;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 dragon_count = 27;
    if (has_dragon_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dragon_count());
    }

    // required uint32 tiger_count = 28;
    if (has_tiger_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tiger_count());
    }

    // required uint32 rosefinch_count = 29;
    if (has_rosefinch_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rosefinch_count());
    }

    // required uint32 tortoise_count = 30;
    if (has_tortoise_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tortoise_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tb_family::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tb_family* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tb_family*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tb_family::MergeFrom(const tb_family& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flag_id()) {
      set_flag_id(from.flag_id());
    }
    if (from.has_flag_name()) {
      set_flag_name(from.flag_name());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_chief_id()) {
      set_chief_id(from.chief_id());
    }
    if (from.has_chief_name()) {
      set_chief_name(from.chief_name());
    }
    if (from.has_deputy_id()) {
      set_deputy_id(from.deputy_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_post()) {
      set_post(from.post());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_king()) {
      set_king(from.king());
    }
    if (from.has_emperor()) {
      set_emperor(from.emperor());
    }
    if (from.has_cur_member_num()) {
      set_cur_member_num(from.cur_member_num());
    }
    if (from.has_approval()) {
      set_approval(from.approval());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
    if (from.has_yy()) {
      set_yy(from.yy());
    }
    if (from.has_boss_time()) {
      set_boss_time(from.boss_time());
    }
    if (from.has_call_boss_time()) {
      set_call_boss_time(from.call_boss_time());
    }
    if (from.has_op_tag()) {
      set_op_tag(from.op_tag());
    }
    if (from.has_op_tag_time()) {
      set_op_tag_time(from.op_tag_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_belong_sect()) {
      set_belong_sect(from.belong_sect());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_dragon_count()) {
      set_dragon_count(from.dragon_count());
    }
    if (from.has_tiger_count()) {
      set_tiger_count(from.tiger_count());
    }
    if (from.has_rosefinch_count()) {
      set_rosefinch_count(from.rosefinch_count());
    }
    if (from.has_tortoise_count()) {
      set_tortoise_count(from.tortoise_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tb_family::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tb_family::CopyFrom(const tb_family& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tb_family::IsInitialized() const {
  if ((_has_bits_[0] & 0x3fffffff) != 0x3fffffff) return false;

  return true;
}

void tb_family::Swap(tb_family* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(flag_id_, other->flag_id_);
    std::swap(flag_name_, other->flag_name_);
    std::swap(lvl_, other->lvl_);
    std::swap(chief_id_, other->chief_id_);
    std::swap(chief_name_, other->chief_name_);
    std::swap(deputy_id_, other->deputy_id_);
    std::swap(post_, other->post_);
    std::swap(money_, other->money_);
    std::swap(power_, other->power_);
    std::swap(domain_, other->domain_);
    std::swap(king_, other->king_);
    std::swap(emperor_, other->emperor_);
    std::swap(cur_member_num_, other->cur_member_num_);
    std::swap(approval_, other->approval_);
    std::swap(activity_, other->activity_);
    std::swap(qq_, other->qq_);
    std::swap(yy_, other->yy_);
    std::swap(boss_time_, other->boss_time_);
    std::swap(call_boss_time_, other->call_boss_time_);
    std::swap(op_tag_, other->op_tag_);
    std::swap(op_tag_time_, other->op_tag_time_);
    std::swap(status_, other->status_);
    std::swap(belong_sect_, other->belong_sect_);
    std::swap(create_time_, other->create_time_);
    std::swap(dragon_count_, other->dragon_count_);
    std::swap(tiger_count_, other->tiger_count_);
    std::swap(rosefinch_count_, other->rosefinch_count_);
    std::swap(tortoise_count_, other->tortoise_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tb_family::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tb_family_descriptor_;
  metadata.reflection = tb_family_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
