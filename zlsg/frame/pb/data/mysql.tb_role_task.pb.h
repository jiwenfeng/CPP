// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_role_task.proto

#ifndef PROTOBUF_mysql_2etb_5frole_5ftask_2eproto__INCLUDED
#define PROTOBUF_mysql_2etb_5frole_5ftask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2etb_5frole_5ftask_2eproto();
void protobuf_AssignDesc_mysql_2etb_5frole_5ftask_2eproto();
void protobuf_ShutdownFile_mysql_2etb_5frole_5ftask_2eproto();

class tb_role_task;

// ===================================================================

class tb_role_task : public ::google::protobuf::Message {
 public:
  tb_role_task();
  virtual ~tb_role_task();

  tb_role_task(const tb_role_task& from);

  inline tb_role_task& operator=(const tb_role_task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_role_task& default_instance();

  void Swap(tb_role_task* other);

  // implements Message ----------------------------------------------

  tb_role_task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tb_role_task& from);
  void MergeFrom(const tb_role_task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required bytes acpt_task = 2;
  inline bool has_acpt_task() const;
  inline void clear_acpt_task();
  static const int kAcptTaskFieldNumber = 2;
  inline const ::std::string& acpt_task() const;
  inline void set_acpt_task(const ::std::string& value);
  inline void set_acpt_task(const char* value);
  inline void set_acpt_task(const void* value, size_t size);
  inline ::std::string* mutable_acpt_task();
  inline ::std::string* release_acpt_task();
  inline void set_allocated_acpt_task(::std::string* acpt_task);

  // required bytes comp_task = 3;
  inline bool has_comp_task() const;
  inline void clear_comp_task();
  static const int kCompTaskFieldNumber = 3;
  inline const ::std::string& comp_task() const;
  inline void set_comp_task(const ::std::string& value);
  inline void set_comp_task(const char* value);
  inline void set_comp_task(const void* value, size_t size);
  inline ::std::string* mutable_comp_task();
  inline ::std::string* release_comp_task();
  inline void set_allocated_comp_task(::std::string* comp_task);

  // required bytes fresh_task = 4;
  inline bool has_fresh_task() const;
  inline void clear_fresh_task();
  static const int kFreshTaskFieldNumber = 4;
  inline const ::std::string& fresh_task() const;
  inline void set_fresh_task(const ::std::string& value);
  inline void set_fresh_task(const char* value);
  inline void set_fresh_task(const void* value, size_t size);
  inline ::std::string* mutable_fresh_task();
  inline ::std::string* release_fresh_task();
  inline void set_allocated_fresh_task(::std::string* fresh_task);

  // @@protoc_insertion_point(class_scope:mysql.tb_role_task)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_acpt_task();
  inline void clear_has_acpt_task();
  inline void set_has_comp_task();
  inline void clear_has_comp_task();
  inline void set_has_fresh_task();
  inline void clear_has_fresh_task();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* acpt_task_;
  ::std::string* comp_task_;
  ::std::string* fresh_task_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2etb_5frole_5ftask_2eproto();
  friend void protobuf_AssignDesc_mysql_2etb_5frole_5ftask_2eproto();
  friend void protobuf_ShutdownFile_mysql_2etb_5frole_5ftask_2eproto();

  void InitAsDefaultInstance();
  static tb_role_task* default_instance_;
};
// ===================================================================


// ===================================================================

// tb_role_task

// required uint32 role_id = 1;
inline bool tb_role_task::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_role_task::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_role_task::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_role_task::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 tb_role_task::role_id() const {
  return role_id_;
}
inline void tb_role_task::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required bytes acpt_task = 2;
inline bool tb_role_task::has_acpt_task() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_role_task::set_has_acpt_task() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_role_task::clear_has_acpt_task() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_role_task::clear_acpt_task() {
  if (acpt_task_ != &::google::protobuf::internal::kEmptyString) {
    acpt_task_->clear();
  }
  clear_has_acpt_task();
}
inline const ::std::string& tb_role_task::acpt_task() const {
  return *acpt_task_;
}
inline void tb_role_task::set_acpt_task(const ::std::string& value) {
  set_has_acpt_task();
  if (acpt_task_ == &::google::protobuf::internal::kEmptyString) {
    acpt_task_ = new ::std::string;
  }
  acpt_task_->assign(value);
}
inline void tb_role_task::set_acpt_task(const char* value) {
  set_has_acpt_task();
  if (acpt_task_ == &::google::protobuf::internal::kEmptyString) {
    acpt_task_ = new ::std::string;
  }
  acpt_task_->assign(value);
}
inline void tb_role_task::set_acpt_task(const void* value, size_t size) {
  set_has_acpt_task();
  if (acpt_task_ == &::google::protobuf::internal::kEmptyString) {
    acpt_task_ = new ::std::string;
  }
  acpt_task_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_task::mutable_acpt_task() {
  set_has_acpt_task();
  if (acpt_task_ == &::google::protobuf::internal::kEmptyString) {
    acpt_task_ = new ::std::string;
  }
  return acpt_task_;
}
inline ::std::string* tb_role_task::release_acpt_task() {
  clear_has_acpt_task();
  if (acpt_task_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = acpt_task_;
    acpt_task_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_task::set_allocated_acpt_task(::std::string* acpt_task) {
  if (acpt_task_ != &::google::protobuf::internal::kEmptyString) {
    delete acpt_task_;
  }
  if (acpt_task) {
    set_has_acpt_task();
    acpt_task_ = acpt_task;
  } else {
    clear_has_acpt_task();
    acpt_task_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes comp_task = 3;
inline bool tb_role_task::has_comp_task() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_role_task::set_has_comp_task() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_role_task::clear_has_comp_task() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_role_task::clear_comp_task() {
  if (comp_task_ != &::google::protobuf::internal::kEmptyString) {
    comp_task_->clear();
  }
  clear_has_comp_task();
}
inline const ::std::string& tb_role_task::comp_task() const {
  return *comp_task_;
}
inline void tb_role_task::set_comp_task(const ::std::string& value) {
  set_has_comp_task();
  if (comp_task_ == &::google::protobuf::internal::kEmptyString) {
    comp_task_ = new ::std::string;
  }
  comp_task_->assign(value);
}
inline void tb_role_task::set_comp_task(const char* value) {
  set_has_comp_task();
  if (comp_task_ == &::google::protobuf::internal::kEmptyString) {
    comp_task_ = new ::std::string;
  }
  comp_task_->assign(value);
}
inline void tb_role_task::set_comp_task(const void* value, size_t size) {
  set_has_comp_task();
  if (comp_task_ == &::google::protobuf::internal::kEmptyString) {
    comp_task_ = new ::std::string;
  }
  comp_task_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_task::mutable_comp_task() {
  set_has_comp_task();
  if (comp_task_ == &::google::protobuf::internal::kEmptyString) {
    comp_task_ = new ::std::string;
  }
  return comp_task_;
}
inline ::std::string* tb_role_task::release_comp_task() {
  clear_has_comp_task();
  if (comp_task_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comp_task_;
    comp_task_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_task::set_allocated_comp_task(::std::string* comp_task) {
  if (comp_task_ != &::google::protobuf::internal::kEmptyString) {
    delete comp_task_;
  }
  if (comp_task) {
    set_has_comp_task();
    comp_task_ = comp_task;
  } else {
    clear_has_comp_task();
    comp_task_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes fresh_task = 4;
inline bool tb_role_task::has_fresh_task() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tb_role_task::set_has_fresh_task() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tb_role_task::clear_has_fresh_task() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tb_role_task::clear_fresh_task() {
  if (fresh_task_ != &::google::protobuf::internal::kEmptyString) {
    fresh_task_->clear();
  }
  clear_has_fresh_task();
}
inline const ::std::string& tb_role_task::fresh_task() const {
  return *fresh_task_;
}
inline void tb_role_task::set_fresh_task(const ::std::string& value) {
  set_has_fresh_task();
  if (fresh_task_ == &::google::protobuf::internal::kEmptyString) {
    fresh_task_ = new ::std::string;
  }
  fresh_task_->assign(value);
}
inline void tb_role_task::set_fresh_task(const char* value) {
  set_has_fresh_task();
  if (fresh_task_ == &::google::protobuf::internal::kEmptyString) {
    fresh_task_ = new ::std::string;
  }
  fresh_task_->assign(value);
}
inline void tb_role_task::set_fresh_task(const void* value, size_t size) {
  set_has_fresh_task();
  if (fresh_task_ == &::google::protobuf::internal::kEmptyString) {
    fresh_task_ = new ::std::string;
  }
  fresh_task_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_role_task::mutable_fresh_task() {
  set_has_fresh_task();
  if (fresh_task_ == &::google::protobuf::internal::kEmptyString) {
    fresh_task_ = new ::std::string;
  }
  return fresh_task_;
}
inline ::std::string* tb_role_task::release_fresh_task() {
  clear_has_fresh_task();
  if (fresh_task_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fresh_task_;
    fresh_task_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_role_task::set_allocated_fresh_task(::std::string* fresh_task) {
  if (fresh_task_ != &::google::protobuf::internal::kEmptyString) {
    delete fresh_task_;
  }
  if (fresh_task) {
    set_has_fresh_task();
    fresh_task_ = fresh_task;
  } else {
    clear_has_fresh_task();
    fresh_task_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2etb_5frole_5ftask_2eproto__INCLUDED
