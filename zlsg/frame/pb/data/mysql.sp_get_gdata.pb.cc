// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.sp_get_gdata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.sp_get_gdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* sp_get_gdata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sp_get_gdata_reflection_ = NULL;
const ::google::protobuf::Descriptor* sp_get_gdata_max_role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sp_get_gdata_max_role_reflection_ = NULL;
const ::google::protobuf::Descriptor* sp_load_all_user_smy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sp_load_all_user_smy_reflection_ = NULL;
const ::google::protobuf::Descriptor* sp_load_offline_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sp_load_offline_user_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2esp_5fget_5fgdata_2eproto() {
  protobuf_AddDesc_mysql_2esp_5fget_5fgdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.sp_get_gdata.proto");
  GOOGLE_CHECK(file != NULL);
  sp_get_gdata_descriptor_ = file->message_type(0);
  static const int sp_get_gdata_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata, max_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata, spare_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata, svr_open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata, joint_active_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata, svr_merge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata, activity_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata, first_pay_flag_),
  };
  sp_get_gdata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sp_get_gdata_descriptor_,
      sp_get_gdata::default_instance_,
      sp_get_gdata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sp_get_gdata));
  sp_get_gdata_max_role_descriptor_ = file->message_type(1);
  static const int sp_get_gdata_max_role_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata_max_role, svr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata_max_role, max_role_id_),
  };
  sp_get_gdata_max_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sp_get_gdata_max_role_descriptor_,
      sp_get_gdata_max_role::default_instance_,
      sp_get_gdata_max_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata_max_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_get_gdata_max_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sp_get_gdata_max_role));
  sp_load_all_user_smy_descriptor_ = file->message_type(2);
  static const int sp_load_all_user_smy_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, fighting_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, armor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, mount_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, mount_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, mount_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, offline_time_),
  };
  sp_load_all_user_smy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sp_load_all_user_smy_descriptor_,
      sp_load_all_user_smy::default_instance_,
      sp_load_all_user_smy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_all_user_smy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sp_load_all_user_smy));
  sp_load_offline_user_descriptor_ = file->message_type(3);
  static const int sp_load_offline_user_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_offline_user, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_offline_user, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_offline_user, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_offline_user, svr_id_),
  };
  sp_load_offline_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sp_load_offline_user_descriptor_,
      sp_load_offline_user::default_instance_,
      sp_load_offline_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_offline_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sp_load_offline_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sp_load_offline_user));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2esp_5fget_5fgdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sp_get_gdata_descriptor_, &sp_get_gdata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sp_get_gdata_max_role_descriptor_, &sp_get_gdata_max_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sp_load_all_user_smy_descriptor_, &sp_load_all_user_smy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sp_load_offline_user_descriptor_, &sp_load_offline_user::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2esp_5fget_5fgdata_2eproto() {
  delete sp_get_gdata::default_instance_;
  delete sp_get_gdata_reflection_;
  delete sp_get_gdata_max_role::default_instance_;
  delete sp_get_gdata_max_role_reflection_;
  delete sp_load_all_user_smy::default_instance_;
  delete sp_load_all_user_smy_reflection_;
  delete sp_load_offline_user::default_instance_;
  delete sp_load_offline_user_reflection_;
}

void protobuf_AddDesc_mysql_2esp_5fget_5fgdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030mysql.sp_get_gdata.proto\022\005mysql\"\253\001\n\014sp"
    "_get_gdata\022\017\n\007max_lvl\030\001 \002(\r\022\021\n\tspare_num"
    "\030\002 \002(\r\022\025\n\rsvr_open_time\030\003 \002(\r\022\031\n\021joint_a"
    "ctive_flag\030\004 \002(\r\022\026\n\016svr_merge_time\030\005 \002(\r"
    "\022\025\n\ractivity_flag\030\006 \002(\r\022\026\n\016first_pay_fla"
    "g\030\007 \002(\r\"<\n\025sp_get_gdata_max_role\022\016\n\006svr_"
    "id\030\001 \002(\r\022\023\n\013max_role_id\030\002 \002(\r\"\217\002\n\024sp_loa"
    "d_all_user_smy\022\017\n\007role_id\030\001 \002(\r\022\021\n\trole_"
    "name\030\002 \002(\t\022\016\n\006status\030\003 \002(\r\022\022\n\nprofession"
    "\030\004 \002(\r\022\026\n\016fighting_power\030\005 \002(\r\022\r\n\005level\030"
    "\006 \002(\r\022\021\n\tweapon_id\030\007 \002(\r\022\020\n\010armor_id\030\010 \002"
    "(\r\022\023\n\013mount_level\030\t \002(\r\022\023\n\013mount_power\030\n"
    " \002(\r\022\020\n\010mount_id\030\013 \002(\r\022\021\n\tvip_level\030\014 \002("
    "\r\022\024\n\014offline_time\030\r \002(\r\"_\n\024sp_load_offli"
    "ne_user\022\017\n\007role_id\030\001 \002(\r\022\021\n\tplayer_id\030\002 "
    "\002(\r\022\023\n\013player_name\030\003 \002(\t\022\016\n\006svr_id\030\004 \002(\r", 640);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.sp_get_gdata.proto", &protobuf_RegisterTypes);
  sp_get_gdata::default_instance_ = new sp_get_gdata();
  sp_get_gdata_max_role::default_instance_ = new sp_get_gdata_max_role();
  sp_load_all_user_smy::default_instance_ = new sp_load_all_user_smy();
  sp_load_offline_user::default_instance_ = new sp_load_offline_user();
  sp_get_gdata::default_instance_->InitAsDefaultInstance();
  sp_get_gdata_max_role::default_instance_->InitAsDefaultInstance();
  sp_load_all_user_smy::default_instance_->InitAsDefaultInstance();
  sp_load_offline_user::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2esp_5fget_5fgdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2esp_5fget_5fgdata_2eproto {
  StaticDescriptorInitializer_mysql_2esp_5fget_5fgdata_2eproto() {
    protobuf_AddDesc_mysql_2esp_5fget_5fgdata_2eproto();
  }
} static_descriptor_initializer_mysql_2esp_5fget_5fgdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int sp_get_gdata::kMaxLvlFieldNumber;
const int sp_get_gdata::kSpareNumFieldNumber;
const int sp_get_gdata::kSvrOpenTimeFieldNumber;
const int sp_get_gdata::kJointActiveFlagFieldNumber;
const int sp_get_gdata::kSvrMergeTimeFieldNumber;
const int sp_get_gdata::kActivityFlagFieldNumber;
const int sp_get_gdata::kFirstPayFlagFieldNumber;
#endif  // !_MSC_VER

sp_get_gdata::sp_get_gdata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sp_get_gdata::InitAsDefaultInstance() {
}

sp_get_gdata::sp_get_gdata(const sp_get_gdata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sp_get_gdata::SharedCtor() {
  _cached_size_ = 0;
  max_lvl_ = 0u;
  spare_num_ = 0u;
  svr_open_time_ = 0u;
  joint_active_flag_ = 0u;
  svr_merge_time_ = 0u;
  activity_flag_ = 0u;
  first_pay_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sp_get_gdata::~sp_get_gdata() {
  SharedDtor();
}

void sp_get_gdata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sp_get_gdata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sp_get_gdata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sp_get_gdata_descriptor_;
}

const sp_get_gdata& sp_get_gdata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2esp_5fget_5fgdata_2eproto();
  return *default_instance_;
}

sp_get_gdata* sp_get_gdata::default_instance_ = NULL;

sp_get_gdata* sp_get_gdata::New() const {
  return new sp_get_gdata;
}

void sp_get_gdata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_lvl_ = 0u;
    spare_num_ = 0u;
    svr_open_time_ = 0u;
    joint_active_flag_ = 0u;
    svr_merge_time_ = 0u;
    activity_flag_ = 0u;
    first_pay_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sp_get_gdata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 max_lvl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_lvl_)));
          set_has_max_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_spare_num;
        break;
      }

      // required uint32 spare_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spare_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spare_num_)));
          set_has_spare_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_svr_open_time;
        break;
      }

      // required uint32 svr_open_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svr_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_open_time_)));
          set_has_svr_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_joint_active_flag;
        break;
      }

      // required uint32 joint_active_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joint_active_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joint_active_flag_)));
          set_has_joint_active_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_svr_merge_time;
        break;
      }

      // required uint32 svr_merge_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svr_merge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_merge_time_)));
          set_has_svr_merge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_activity_flag;
        break;
      }

      // required uint32 activity_flag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_flag_)));
          set_has_activity_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_first_pay_flag;
        break;
      }

      // required uint32 first_pay_flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_pay_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_pay_flag_)));
          set_has_first_pay_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sp_get_gdata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 max_lvl = 1;
  if (has_max_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_lvl(), output);
  }

  // required uint32 spare_num = 2;
  if (has_spare_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->spare_num(), output);
  }

  // required uint32 svr_open_time = 3;
  if (has_svr_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->svr_open_time(), output);
  }

  // required uint32 joint_active_flag = 4;
  if (has_joint_active_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->joint_active_flag(), output);
  }

  // required uint32 svr_merge_time = 5;
  if (has_svr_merge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->svr_merge_time(), output);
  }

  // required uint32 activity_flag = 6;
  if (has_activity_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->activity_flag(), output);
  }

  // required uint32 first_pay_flag = 7;
  if (has_first_pay_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->first_pay_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sp_get_gdata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 max_lvl = 1;
  if (has_max_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_lvl(), target);
  }

  // required uint32 spare_num = 2;
  if (has_spare_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->spare_num(), target);
  }

  // required uint32 svr_open_time = 3;
  if (has_svr_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->svr_open_time(), target);
  }

  // required uint32 joint_active_flag = 4;
  if (has_joint_active_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->joint_active_flag(), target);
  }

  // required uint32 svr_merge_time = 5;
  if (has_svr_merge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->svr_merge_time(), target);
  }

  // required uint32 activity_flag = 6;
  if (has_activity_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->activity_flag(), target);
  }

  // required uint32 first_pay_flag = 7;
  if (has_first_pay_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->first_pay_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sp_get_gdata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 max_lvl = 1;
    if (has_max_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_lvl());
    }

    // required uint32 spare_num = 2;
    if (has_spare_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spare_num());
    }

    // required uint32 svr_open_time = 3;
    if (has_svr_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_open_time());
    }

    // required uint32 joint_active_flag = 4;
    if (has_joint_active_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joint_active_flag());
    }

    // required uint32 svr_merge_time = 5;
    if (has_svr_merge_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_merge_time());
    }

    // required uint32 activity_flag = 6;
    if (has_activity_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_flag());
    }

    // required uint32 first_pay_flag = 7;
    if (has_first_pay_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_pay_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sp_get_gdata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sp_get_gdata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sp_get_gdata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sp_get_gdata::MergeFrom(const sp_get_gdata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_lvl()) {
      set_max_lvl(from.max_lvl());
    }
    if (from.has_spare_num()) {
      set_spare_num(from.spare_num());
    }
    if (from.has_svr_open_time()) {
      set_svr_open_time(from.svr_open_time());
    }
    if (from.has_joint_active_flag()) {
      set_joint_active_flag(from.joint_active_flag());
    }
    if (from.has_svr_merge_time()) {
      set_svr_merge_time(from.svr_merge_time());
    }
    if (from.has_activity_flag()) {
      set_activity_flag(from.activity_flag());
    }
    if (from.has_first_pay_flag()) {
      set_first_pay_flag(from.first_pay_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sp_get_gdata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sp_get_gdata::CopyFrom(const sp_get_gdata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sp_get_gdata::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void sp_get_gdata::Swap(sp_get_gdata* other) {
  if (other != this) {
    std::swap(max_lvl_, other->max_lvl_);
    std::swap(spare_num_, other->spare_num_);
    std::swap(svr_open_time_, other->svr_open_time_);
    std::swap(joint_active_flag_, other->joint_active_flag_);
    std::swap(svr_merge_time_, other->svr_merge_time_);
    std::swap(activity_flag_, other->activity_flag_);
    std::swap(first_pay_flag_, other->first_pay_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sp_get_gdata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sp_get_gdata_descriptor_;
  metadata.reflection = sp_get_gdata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sp_get_gdata_max_role::kSvrIdFieldNumber;
const int sp_get_gdata_max_role::kMaxRoleIdFieldNumber;
#endif  // !_MSC_VER

sp_get_gdata_max_role::sp_get_gdata_max_role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sp_get_gdata_max_role::InitAsDefaultInstance() {
}

sp_get_gdata_max_role::sp_get_gdata_max_role(const sp_get_gdata_max_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sp_get_gdata_max_role::SharedCtor() {
  _cached_size_ = 0;
  svr_id_ = 0u;
  max_role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sp_get_gdata_max_role::~sp_get_gdata_max_role() {
  SharedDtor();
}

void sp_get_gdata_max_role::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sp_get_gdata_max_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sp_get_gdata_max_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sp_get_gdata_max_role_descriptor_;
}

const sp_get_gdata_max_role& sp_get_gdata_max_role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2esp_5fget_5fgdata_2eproto();
  return *default_instance_;
}

sp_get_gdata_max_role* sp_get_gdata_max_role::default_instance_ = NULL;

sp_get_gdata_max_role* sp_get_gdata_max_role::New() const {
  return new sp_get_gdata_max_role;
}

void sp_get_gdata_max_role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_id_ = 0u;
    max_role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sp_get_gdata_max_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 svr_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_id_)));
          set_has_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_role_id;
        break;
      }

      // required uint32 max_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_role_id_)));
          set_has_max_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sp_get_gdata_max_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 svr_id = 1;
  if (has_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_id(), output);
  }

  // required uint32 max_role_id = 2;
  if (has_max_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sp_get_gdata_max_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 svr_id = 1;
  if (has_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svr_id(), target);
  }

  // required uint32 max_role_id = 2;
  if (has_max_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sp_get_gdata_max_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 svr_id = 1;
    if (has_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_id());
    }

    // required uint32 max_role_id = 2;
    if (has_max_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sp_get_gdata_max_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sp_get_gdata_max_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sp_get_gdata_max_role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sp_get_gdata_max_role::MergeFrom(const sp_get_gdata_max_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_id()) {
      set_svr_id(from.svr_id());
    }
    if (from.has_max_role_id()) {
      set_max_role_id(from.max_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sp_get_gdata_max_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sp_get_gdata_max_role::CopyFrom(const sp_get_gdata_max_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sp_get_gdata_max_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sp_get_gdata_max_role::Swap(sp_get_gdata_max_role* other) {
  if (other != this) {
    std::swap(svr_id_, other->svr_id_);
    std::swap(max_role_id_, other->max_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sp_get_gdata_max_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sp_get_gdata_max_role_descriptor_;
  metadata.reflection = sp_get_gdata_max_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sp_load_all_user_smy::kRoleIdFieldNumber;
const int sp_load_all_user_smy::kRoleNameFieldNumber;
const int sp_load_all_user_smy::kStatusFieldNumber;
const int sp_load_all_user_smy::kProfessionFieldNumber;
const int sp_load_all_user_smy::kFightingPowerFieldNumber;
const int sp_load_all_user_smy::kLevelFieldNumber;
const int sp_load_all_user_smy::kWeaponIdFieldNumber;
const int sp_load_all_user_smy::kArmorIdFieldNumber;
const int sp_load_all_user_smy::kMountLevelFieldNumber;
const int sp_load_all_user_smy::kMountPowerFieldNumber;
const int sp_load_all_user_smy::kMountIdFieldNumber;
const int sp_load_all_user_smy::kVipLevelFieldNumber;
const int sp_load_all_user_smy::kOfflineTimeFieldNumber;
#endif  // !_MSC_VER

sp_load_all_user_smy::sp_load_all_user_smy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sp_load_all_user_smy::InitAsDefaultInstance() {
}

sp_load_all_user_smy::sp_load_all_user_smy(const sp_load_all_user_smy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sp_load_all_user_smy::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0u;
  profession_ = 0u;
  fighting_power_ = 0u;
  level_ = 0u;
  weapon_id_ = 0u;
  armor_id_ = 0u;
  mount_level_ = 0u;
  mount_power_ = 0u;
  mount_id_ = 0u;
  vip_level_ = 0u;
  offline_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sp_load_all_user_smy::~sp_load_all_user_smy() {
  SharedDtor();
}

void sp_load_all_user_smy::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void sp_load_all_user_smy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sp_load_all_user_smy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sp_load_all_user_smy_descriptor_;
}

const sp_load_all_user_smy& sp_load_all_user_smy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2esp_5fget_5fgdata_2eproto();
  return *default_instance_;
}

sp_load_all_user_smy* sp_load_all_user_smy::default_instance_ = NULL;

sp_load_all_user_smy* sp_load_all_user_smy::New() const {
  return new sp_load_all_user_smy;
}

void sp_load_all_user_smy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    status_ = 0u;
    profession_ = 0u;
    fighting_power_ = 0u;
    level_ = 0u;
    weapon_id_ = 0u;
    armor_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mount_level_ = 0u;
    mount_power_ = 0u;
    mount_id_ = 0u;
    vip_level_ = 0u;
    offline_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sp_load_all_user_smy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // required string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // required uint32 profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fighting_power;
        break;
      }

      // required uint32 fighting_power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fighting_power_)));
          set_has_fighting_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_weapon_id;
        break;
      }

      // required uint32 weapon_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_armor_id;
        break;
      }

      // required uint32 armor_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armor_id_)));
          set_has_armor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mount_level;
        break;
      }

      // required uint32 mount_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_level_)));
          set_has_mount_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mount_power;
        break;
      }

      // required uint32 mount_power = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_power_)));
          set_has_mount_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mount_id;
        break;
      }

      // required uint32 mount_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_id_)));
          set_has_mount_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vip_level;
        break;
      }

      // required uint32 vip_level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_offline_time;
        break;
      }

      // required uint32 offline_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_time_)));
          set_has_offline_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sp_load_all_user_smy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // required uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // required uint32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->profession(), output);
  }

  // required uint32 fighting_power = 5;
  if (has_fighting_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fighting_power(), output);
  }

  // required uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // required uint32 weapon_id = 7;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->weapon_id(), output);
  }

  // required uint32 armor_id = 8;
  if (has_armor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->armor_id(), output);
  }

  // required uint32 mount_level = 9;
  if (has_mount_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mount_level(), output);
  }

  // required uint32 mount_power = 10;
  if (has_mount_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->mount_power(), output);
  }

  // required uint32 mount_id = 11;
  if (has_mount_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mount_id(), output);
  }

  // required uint32 vip_level = 12;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->vip_level(), output);
  }

  // required uint32 offline_time = 13;
  if (has_offline_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->offline_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sp_load_all_user_smy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // required uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // required uint32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->profession(), target);
  }

  // required uint32 fighting_power = 5;
  if (has_fighting_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fighting_power(), target);
  }

  // required uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // required uint32 weapon_id = 7;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->weapon_id(), target);
  }

  // required uint32 armor_id = 8;
  if (has_armor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->armor_id(), target);
  }

  // required uint32 mount_level = 9;
  if (has_mount_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->mount_level(), target);
  }

  // required uint32 mount_power = 10;
  if (has_mount_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->mount_power(), target);
  }

  // required uint32 mount_id = 11;
  if (has_mount_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mount_id(), target);
  }

  // required uint32 vip_level = 12;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->vip_level(), target);
  }

  // required uint32 offline_time = 13;
  if (has_offline_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->offline_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sp_load_all_user_smy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // required uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // required uint32 fighting_power = 5;
    if (has_fighting_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting_power());
    }

    // required uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 weapon_id = 7;
    if (has_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapon_id());
    }

    // required uint32 armor_id = 8;
    if (has_armor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armor_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 mount_level = 9;
    if (has_mount_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_level());
    }

    // required uint32 mount_power = 10;
    if (has_mount_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_power());
    }

    // required uint32 mount_id = 11;
    if (has_mount_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_id());
    }

    // required uint32 vip_level = 12;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // required uint32 offline_time = 13;
    if (has_offline_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offline_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sp_load_all_user_smy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sp_load_all_user_smy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sp_load_all_user_smy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sp_load_all_user_smy::MergeFrom(const sp_load_all_user_smy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_fighting_power()) {
      set_fighting_power(from.fighting_power());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_armor_id()) {
      set_armor_id(from.armor_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mount_level()) {
      set_mount_level(from.mount_level());
    }
    if (from.has_mount_power()) {
      set_mount_power(from.mount_power());
    }
    if (from.has_mount_id()) {
      set_mount_id(from.mount_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_offline_time()) {
      set_offline_time(from.offline_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sp_load_all_user_smy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sp_load_all_user_smy::CopyFrom(const sp_load_all_user_smy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sp_load_all_user_smy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void sp_load_all_user_smy::Swap(sp_load_all_user_smy* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(status_, other->status_);
    std::swap(profession_, other->profession_);
    std::swap(fighting_power_, other->fighting_power_);
    std::swap(level_, other->level_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(armor_id_, other->armor_id_);
    std::swap(mount_level_, other->mount_level_);
    std::swap(mount_power_, other->mount_power_);
    std::swap(mount_id_, other->mount_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(offline_time_, other->offline_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sp_load_all_user_smy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sp_load_all_user_smy_descriptor_;
  metadata.reflection = sp_load_all_user_smy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sp_load_offline_user::kRoleIdFieldNumber;
const int sp_load_offline_user::kPlayerIdFieldNumber;
const int sp_load_offline_user::kPlayerNameFieldNumber;
const int sp_load_offline_user::kSvrIdFieldNumber;
#endif  // !_MSC_VER

sp_load_offline_user::sp_load_offline_user()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sp_load_offline_user::InitAsDefaultInstance() {
}

sp_load_offline_user::sp_load_offline_user(const sp_load_offline_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sp_load_offline_user::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  player_id_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sp_load_offline_user::~sp_load_offline_user() {
  SharedDtor();
}

void sp_load_offline_user::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void sp_load_offline_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sp_load_offline_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sp_load_offline_user_descriptor_;
}

const sp_load_offline_user& sp_load_offline_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2esp_5fget_5fgdata_2eproto();
  return *default_instance_;
}

sp_load_offline_user* sp_load_offline_user::default_instance_ = NULL;

sp_load_offline_user* sp_load_offline_user::New() const {
  return new sp_load_offline_user;
}

void sp_load_offline_user::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    player_id_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    svr_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sp_load_offline_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required uint32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_name;
        break;
      }

      // required string player_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_svr_id;
        break;
      }

      // required uint32 svr_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_id_)));
          set_has_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sp_load_offline_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  // required string player_name = 3;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->player_name(), output);
  }

  // required uint32 svr_id = 4;
  if (has_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->svr_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sp_load_offline_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_id(), target);
  }

  // required string player_name = 3;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->player_name(), target);
  }

  // required uint32 svr_id = 4;
  if (has_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->svr_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sp_load_offline_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // required string player_name = 3;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // required uint32 svr_id = 4;
    if (has_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sp_load_offline_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sp_load_offline_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sp_load_offline_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sp_load_offline_user::MergeFrom(const sp_load_offline_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_svr_id()) {
      set_svr_id(from.svr_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sp_load_offline_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sp_load_offline_user::CopyFrom(const sp_load_offline_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sp_load_offline_user::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void sp_load_offline_user::Swap(sp_load_offline_user* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(svr_id_, other->svr_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sp_load_offline_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sp_load_offline_user_descriptor_;
  metadata.reflection = sp_load_offline_user_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
