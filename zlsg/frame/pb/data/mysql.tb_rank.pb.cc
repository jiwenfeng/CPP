// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_rank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.tb_rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* tb_rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tb_rank_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2etb_5frank_2eproto() {
  protobuf_AddDesc_mysql_2etb_5frank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.tb_rank.proto");
  GOOGLE_CHECK(file != NULL);
  tb_rank_descriptor_ = file->message_type(0);
  static const int tb_rank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_rank, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_rank, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_rank, rank_list_),
  };
  tb_rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tb_rank_descriptor_,
      tb_rank::default_instance_,
      tb_rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tb_rank));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2etb_5frank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tb_rank_descriptor_, &tb_rank::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2etb_5frank_2eproto() {
  delete tb_rank::default_instance_;
  delete tb_rank_reflection_;
}

void protobuf_AddDesc_mysql_2etb_5frank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023mysql.tb_rank.proto\022\005mysql\"D\n\007tb_rank\022"
    "\021\n\trank_type\030\001 \002(\r\022\023\n\013update_time\030\002 \002(\r\022"
    "\021\n\trank_list\030\003 \002(\014", 98);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.tb_rank.proto", &protobuf_RegisterTypes);
  tb_rank::default_instance_ = new tb_rank();
  tb_rank::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2etb_5frank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2etb_5frank_2eproto {
  StaticDescriptorInitializer_mysql_2etb_5frank_2eproto() {
    protobuf_AddDesc_mysql_2etb_5frank_2eproto();
  }
} static_descriptor_initializer_mysql_2etb_5frank_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tb_rank::kRankTypeFieldNumber;
const int tb_rank::kUpdateTimeFieldNumber;
const int tb_rank::kRankListFieldNumber;
#endif  // !_MSC_VER

tb_rank::tb_rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tb_rank::InitAsDefaultInstance() {
}

tb_rank::tb_rank(const tb_rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tb_rank::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 0u;
  update_time_ = 0u;
  rank_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tb_rank::~tb_rank() {
  SharedDtor();
}

void tb_rank::SharedDtor() {
  if (rank_list_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_list_;
  }
  if (this != default_instance_) {
  }
}

void tb_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tb_rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tb_rank_descriptor_;
}

const tb_rank& tb_rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2etb_5frank_2eproto();
  return *default_instance_;
}

tb_rank* tb_rank::default_instance_ = NULL;

tb_rank* tb_rank::New() const {
  return new tb_rank;
}

void tb_rank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 0u;
    update_time_ = 0u;
    if (has_rank_list()) {
      if (rank_list_ != &::google::protobuf::internal::kEmptyString) {
        rank_list_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tb_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank_list;
        break;
      }

      // required bytes rank_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tb_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank_type(), output);
  }

  // required uint32 update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_time(), output);
  }

  // required bytes rank_list = 3;
  if (has_rank_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->rank_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tb_rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank_type(), target);
  }

  // required uint32 update_time = 2;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_time(), target);
  }

  // required bytes rank_list = 3;
  if (has_rank_list()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->rank_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tb_rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_type());
    }

    // required uint32 update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // required bytes rank_list = 3;
    if (has_rank_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rank_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tb_rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tb_rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tb_rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tb_rank::MergeFrom(const tb_rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_rank_list()) {
      set_rank_list(from.rank_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tb_rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tb_rank::CopyFrom(const tb_rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tb_rank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void tb_rank::Swap(tb_rank* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(update_time_, other->update_time_);
    std::swap(rank_list_, other->rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tb_rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tb_rank_descriptor_;
  metadata.reflection = tb_rank_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
