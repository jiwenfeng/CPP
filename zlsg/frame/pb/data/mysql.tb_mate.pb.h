// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_mate.proto

#ifndef PROTOBUF_mysql_2etb_5fmate_2eproto__INCLUDED
#define PROTOBUF_mysql_2etb_5fmate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2etb_5fmate_2eproto();
void protobuf_AssignDesc_mysql_2etb_5fmate_2eproto();
void protobuf_ShutdownFile_mysql_2etb_5fmate_2eproto();

class tb_mate;

// ===================================================================

class tb_mate : public ::google::protobuf::Message {
 public:
  tb_mate();
  virtual ~tb_mate();

  tb_mate(const tb_mate& from);

  inline tb_mate& operator=(const tb_mate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_mate& default_instance();

  void Swap(tb_mate* other);

  // implements Message ----------------------------------------------

  tb_mate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tb_mate& from);
  void MergeFrom(const tb_mate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 mate_role_id = 2;
  inline bool has_mate_role_id() const;
  inline void clear_mate_role_id();
  static const int kMateRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mate_role_id() const;
  inline void set_mate_role_id(::google::protobuf::uint32 value);

  // required uint32 today_times = 3;
  inline bool has_today_times() const;
  inline void clear_today_times();
  static const int kTodayTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 today_times() const;
  inline void set_today_times(::google::protobuf::uint32 value);

  // required uint32 last_time = 4;
  inline bool has_last_time() const;
  inline void clear_last_time();
  static const int kLastTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 last_time() const;
  inline void set_last_time(::google::protobuf::uint32 value);

  // required uint32 miss_times = 5;
  inline bool has_miss_times() const;
  inline void clear_miss_times();
  static const int kMissTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 miss_times() const;
  inline void set_miss_times(::google::protobuf::uint32 value);

  // required uint32 total_times = 6;
  inline bool has_total_times() const;
  inline void clear_total_times();
  static const int kTotalTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 total_times() const;
  inline void set_total_times(::google::protobuf::uint32 value);

  // required uint32 depth_time = 7;
  inline bool has_depth_time() const;
  inline void clear_depth_time();
  static const int kDepthTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 depth_time() const;
  inline void set_depth_time(::google::protobuf::uint32 value);

  // required uint32 advance_depth = 8;
  inline bool has_advance_depth() const;
  inline void clear_advance_depth();
  static const int kAdvanceDepthFieldNumber = 8;
  inline ::google::protobuf::uint32 advance_depth() const;
  inline void set_advance_depth(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.tb_mate)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_mate_role_id();
  inline void clear_has_mate_role_id();
  inline void set_has_today_times();
  inline void clear_has_today_times();
  inline void set_has_last_time();
  inline void clear_has_last_time();
  inline void set_has_miss_times();
  inline void clear_has_miss_times();
  inline void set_has_total_times();
  inline void clear_has_total_times();
  inline void set_has_depth_time();
  inline void clear_has_depth_time();
  inline void set_has_advance_depth();
  inline void clear_has_advance_depth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 mate_role_id_;
  ::google::protobuf::uint32 today_times_;
  ::google::protobuf::uint32 last_time_;
  ::google::protobuf::uint32 miss_times_;
  ::google::protobuf::uint32 total_times_;
  ::google::protobuf::uint32 depth_time_;
  ::google::protobuf::uint32 advance_depth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2etb_5fmate_2eproto();
  friend void protobuf_AssignDesc_mysql_2etb_5fmate_2eproto();
  friend void protobuf_ShutdownFile_mysql_2etb_5fmate_2eproto();

  void InitAsDefaultInstance();
  static tb_mate* default_instance_;
};
// ===================================================================


// ===================================================================

// tb_mate

// required uint32 role_id = 1;
inline bool tb_mate::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_mate::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_mate::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_mate::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 tb_mate::role_id() const {
  return role_id_;
}
inline void tb_mate::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 mate_role_id = 2;
inline bool tb_mate::has_mate_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_mate::set_has_mate_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_mate::clear_has_mate_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_mate::clear_mate_role_id() {
  mate_role_id_ = 0u;
  clear_has_mate_role_id();
}
inline ::google::protobuf::uint32 tb_mate::mate_role_id() const {
  return mate_role_id_;
}
inline void tb_mate::set_mate_role_id(::google::protobuf::uint32 value) {
  set_has_mate_role_id();
  mate_role_id_ = value;
}

// required uint32 today_times = 3;
inline bool tb_mate::has_today_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_mate::set_has_today_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_mate::clear_has_today_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_mate::clear_today_times() {
  today_times_ = 0u;
  clear_has_today_times();
}
inline ::google::protobuf::uint32 tb_mate::today_times() const {
  return today_times_;
}
inline void tb_mate::set_today_times(::google::protobuf::uint32 value) {
  set_has_today_times();
  today_times_ = value;
}

// required uint32 last_time = 4;
inline bool tb_mate::has_last_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tb_mate::set_has_last_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tb_mate::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tb_mate::clear_last_time() {
  last_time_ = 0u;
  clear_has_last_time();
}
inline ::google::protobuf::uint32 tb_mate::last_time() const {
  return last_time_;
}
inline void tb_mate::set_last_time(::google::protobuf::uint32 value) {
  set_has_last_time();
  last_time_ = value;
}

// required uint32 miss_times = 5;
inline bool tb_mate::has_miss_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tb_mate::set_has_miss_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tb_mate::clear_has_miss_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tb_mate::clear_miss_times() {
  miss_times_ = 0u;
  clear_has_miss_times();
}
inline ::google::protobuf::uint32 tb_mate::miss_times() const {
  return miss_times_;
}
inline void tb_mate::set_miss_times(::google::protobuf::uint32 value) {
  set_has_miss_times();
  miss_times_ = value;
}

// required uint32 total_times = 6;
inline bool tb_mate::has_total_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tb_mate::set_has_total_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tb_mate::clear_has_total_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tb_mate::clear_total_times() {
  total_times_ = 0u;
  clear_has_total_times();
}
inline ::google::protobuf::uint32 tb_mate::total_times() const {
  return total_times_;
}
inline void tb_mate::set_total_times(::google::protobuf::uint32 value) {
  set_has_total_times();
  total_times_ = value;
}

// required uint32 depth_time = 7;
inline bool tb_mate::has_depth_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tb_mate::set_has_depth_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tb_mate::clear_has_depth_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tb_mate::clear_depth_time() {
  depth_time_ = 0u;
  clear_has_depth_time();
}
inline ::google::protobuf::uint32 tb_mate::depth_time() const {
  return depth_time_;
}
inline void tb_mate::set_depth_time(::google::protobuf::uint32 value) {
  set_has_depth_time();
  depth_time_ = value;
}

// required uint32 advance_depth = 8;
inline bool tb_mate::has_advance_depth() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tb_mate::set_has_advance_depth() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tb_mate::clear_has_advance_depth() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tb_mate::clear_advance_depth() {
  advance_depth_ = 0u;
  clear_has_advance_depth();
}
inline ::google::protobuf::uint32 tb_mate::advance_depth() const {
  return advance_depth_;
}
inline void tb_mate::set_advance_depth(::google::protobuf::uint32 value) {
  set_has_advance_depth();
  advance_depth_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2etb_5fmate_2eproto__INCLUDED
