// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_arena_robot.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.tb_arena_robot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* tb_arena_robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tb_arena_robot_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2etb_5farena_5frobot_2eproto() {
  protobuf_AddDesc_mysql_2etb_5farena_5frobot_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.tb_arena_robot.proto");
  GOOGLE_CHECK(file != NULL);
  tb_arena_robot_descriptor_ = file->message_type(0);
  static const int tb_arena_robot_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_arena_robot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_arena_robot, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_arena_robot, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_arena_robot, fighting_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_arena_robot, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_arena_robot, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_arena_robot, g_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_arena_robot, standby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_arena_robot, b_attr_),
  };
  tb_arena_robot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tb_arena_robot_descriptor_,
      tb_arena_robot::default_instance_,
      tb_arena_robot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_arena_robot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_arena_robot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tb_arena_robot));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2etb_5farena_5frobot_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tb_arena_robot_descriptor_, &tb_arena_robot::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2etb_5farena_5frobot_2eproto() {
  delete tb_arena_robot::default_instance_;
  delete tb_arena_robot_reflection_;
}

void protobuf_AddDesc_mysql_2etb_5farena_5frobot_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032mysql.tb_arena_robot.proto\022\005mysql\"\244\001\n\016"
    "tb_arena_robot\022\n\n\002id\030\001 \002(\r\022\014\n\004name\030\002 \002(\t"
    "\022\021\n\tconfig_id\030\003 \002(\r\022\026\n\016fighting_power\030\004 "
    "\002(\r\022\014\n\004attr\030\005 \002(\014\022\016\n\006pet_id\030\006 \002(\r\022\016\n\006g_a"
    "ttr\030\007 \002(\014\022\017\n\007standby\030\010 \002(\r\022\016\n\006b_attr\030\t \002"
    "(\014", 202);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.tb_arena_robot.proto", &protobuf_RegisterTypes);
  tb_arena_robot::default_instance_ = new tb_arena_robot();
  tb_arena_robot::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2etb_5farena_5frobot_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2etb_5farena_5frobot_2eproto {
  StaticDescriptorInitializer_mysql_2etb_5farena_5frobot_2eproto() {
    protobuf_AddDesc_mysql_2etb_5farena_5frobot_2eproto();
  }
} static_descriptor_initializer_mysql_2etb_5farena_5frobot_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tb_arena_robot::kIdFieldNumber;
const int tb_arena_robot::kNameFieldNumber;
const int tb_arena_robot::kConfigIdFieldNumber;
const int tb_arena_robot::kFightingPowerFieldNumber;
const int tb_arena_robot::kAttrFieldNumber;
const int tb_arena_robot::kPetIdFieldNumber;
const int tb_arena_robot::kGAttrFieldNumber;
const int tb_arena_robot::kStandbyFieldNumber;
const int tb_arena_robot::kBAttrFieldNumber;
#endif  // !_MSC_VER

tb_arena_robot::tb_arena_robot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tb_arena_robot::InitAsDefaultInstance() {
}

tb_arena_robot::tb_arena_robot(const tb_arena_robot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tb_arena_robot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  config_id_ = 0u;
  fighting_power_ = 0u;
  attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pet_id_ = 0u;
  g_attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  standby_ = 0u;
  b_attr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tb_arena_robot::~tb_arena_robot() {
  SharedDtor();
}

void tb_arena_robot::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (attr_ != &::google::protobuf::internal::kEmptyString) {
    delete attr_;
  }
  if (g_attr_ != &::google::protobuf::internal::kEmptyString) {
    delete g_attr_;
  }
  if (b_attr_ != &::google::protobuf::internal::kEmptyString) {
    delete b_attr_;
  }
  if (this != default_instance_) {
  }
}

void tb_arena_robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tb_arena_robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tb_arena_robot_descriptor_;
}

const tb_arena_robot& tb_arena_robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2etb_5farena_5frobot_2eproto();
  return *default_instance_;
}

tb_arena_robot* tb_arena_robot::default_instance_ = NULL;

tb_arena_robot* tb_arena_robot::New() const {
  return new tb_arena_robot;
}

void tb_arena_robot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    config_id_ = 0u;
    fighting_power_ = 0u;
    if (has_attr()) {
      if (attr_ != &::google::protobuf::internal::kEmptyString) {
        attr_->clear();
      }
    }
    pet_id_ = 0u;
    if (has_g_attr()) {
      if (g_attr_ != &::google::protobuf::internal::kEmptyString) {
        g_attr_->clear();
      }
    }
    standby_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_b_attr()) {
      if (b_attr_ != &::google::protobuf::internal::kEmptyString) {
        b_attr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tb_arena_robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_config_id;
        break;
      }

      // required uint32 config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fighting_power;
        break;
      }

      // required uint32 fighting_power = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fighting_power_)));
          set_has_fighting_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attr;
        break;
      }

      // required bytes attr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pet_id;
        break;
      }

      // required uint32 pet_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_g_attr;
        break;
      }

      // required bytes g_attr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_g_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_g_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_standby;
        break;
      }

      // required uint32 standby = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &standby_)));
          set_has_standby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_b_attr;
        break;
      }

      // required bytes b_attr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_b_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_b_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tb_arena_robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 config_id = 3;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->config_id(), output);
  }

  // required uint32 fighting_power = 4;
  if (has_fighting_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fighting_power(), output);
  }

  // required bytes attr = 5;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->attr(), output);
  }

  // required uint32 pet_id = 6;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pet_id(), output);
  }

  // required bytes g_attr = 7;
  if (has_g_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->g_attr(), output);
  }

  // required uint32 standby = 8;
  if (has_standby()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->standby(), output);
  }

  // required bytes b_attr = 9;
  if (has_b_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->b_attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tb_arena_robot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 config_id = 3;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->config_id(), target);
  }

  // required uint32 fighting_power = 4;
  if (has_fighting_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fighting_power(), target);
  }

  // required bytes attr = 5;
  if (has_attr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->attr(), target);
  }

  // required uint32 pet_id = 6;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pet_id(), target);
  }

  // required bytes g_attr = 7;
  if (has_g_attr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->g_attr(), target);
  }

  // required uint32 standby = 8;
  if (has_standby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->standby(), target);
  }

  // required bytes b_attr = 9;
  if (has_b_attr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->b_attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tb_arena_robot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 config_id = 3;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_id());
    }

    // required uint32 fighting_power = 4;
    if (has_fighting_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting_power());
    }

    // required bytes attr = 5;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attr());
    }

    // required uint32 pet_id = 6;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pet_id());
    }

    // required bytes g_attr = 7;
    if (has_g_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->g_attr());
    }

    // required uint32 standby = 8;
    if (has_standby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->standby());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes b_attr = 9;
    if (has_b_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->b_attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tb_arena_robot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tb_arena_robot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tb_arena_robot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tb_arena_robot::MergeFrom(const tb_arena_robot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_fighting_power()) {
      set_fighting_power(from.fighting_power());
    }
    if (from.has_attr()) {
      set_attr(from.attr());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_g_attr()) {
      set_g_attr(from.g_attr());
    }
    if (from.has_standby()) {
      set_standby(from.standby());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_b_attr()) {
      set_b_attr(from.b_attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tb_arena_robot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tb_arena_robot::CopyFrom(const tb_arena_robot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tb_arena_robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void tb_arena_robot::Swap(tb_arena_robot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(config_id_, other->config_id_);
    std::swap(fighting_power_, other->fighting_power_);
    std::swap(attr_, other->attr_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(g_attr_, other->g_attr_);
    std::swap(standby_, other->standby_);
    std::swap(b_attr_, other->b_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tb_arena_robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tb_arena_robot_descriptor_;
  metadata.reflection = tb_arena_robot_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
