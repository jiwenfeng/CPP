// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_family_member.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.tb_family_member.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* tb_family_member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tb_family_member_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2etb_5ffamily_5fmember_2eproto() {
  protobuf_AddDesc_mysql_2etb_5ffamily_5fmember_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.tb_family_member.proto");
  GOOGLE_CHECK(file != NULL);
  tb_family_member_descriptor_ = file->message_type(0);
  static const int tb_family_member_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, permissions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, add_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, dragon_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, tiger_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, rosefinch_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, tortoise_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, total_donate_),
  };
  tb_family_member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tb_family_member_descriptor_,
      tb_family_member::default_instance_,
      tb_family_member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_family_member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tb_family_member));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2etb_5ffamily_5fmember_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tb_family_member_descriptor_, &tb_family_member::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2etb_5ffamily_5fmember_2eproto() {
  delete tb_family_member::default_instance_;
  delete tb_family_member_reflection_;
}

void protobuf_AddDesc_mysql_2etb_5ffamily_5fmember_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034mysql.tb_family_member.proto\022\005mysql\"\374\001"
    "\n\020tb_family_member\022\021\n\tfamily_id\030\001 \002(\r\022\017\n"
    "\007role_id\030\002 \002(\r\022\023\n\013permissions\030\003 \002(\r\022\014\n\004t"
    "ime\030\004 \002(\r\022\016\n\006add_by\030\005 \002(\r\022\020\n\010strength\030\006 "
    "\002(\r\022\024\n\014dragon_count\030\007 \002(\r\022\023\n\013tiger_count"
    "\030\010 \002(\r\022\027\n\017rosefinch_count\030\t \002(\r\022\026\n\016torto"
    "ise_count\030\n \002(\r\022\r\n\005money\030\013 \002(\r\022\024\n\014total_"
    "donate\030\014 \002(\r", 292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.tb_family_member.proto", &protobuf_RegisterTypes);
  tb_family_member::default_instance_ = new tb_family_member();
  tb_family_member::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2etb_5ffamily_5fmember_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2etb_5ffamily_5fmember_2eproto {
  StaticDescriptorInitializer_mysql_2etb_5ffamily_5fmember_2eproto() {
    protobuf_AddDesc_mysql_2etb_5ffamily_5fmember_2eproto();
  }
} static_descriptor_initializer_mysql_2etb_5ffamily_5fmember_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tb_family_member::kFamilyIdFieldNumber;
const int tb_family_member::kRoleIdFieldNumber;
const int tb_family_member::kPermissionsFieldNumber;
const int tb_family_member::kTimeFieldNumber;
const int tb_family_member::kAddByFieldNumber;
const int tb_family_member::kStrengthFieldNumber;
const int tb_family_member::kDragonCountFieldNumber;
const int tb_family_member::kTigerCountFieldNumber;
const int tb_family_member::kRosefinchCountFieldNumber;
const int tb_family_member::kTortoiseCountFieldNumber;
const int tb_family_member::kMoneyFieldNumber;
const int tb_family_member::kTotalDonateFieldNumber;
#endif  // !_MSC_VER

tb_family_member::tb_family_member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tb_family_member::InitAsDefaultInstance() {
}

tb_family_member::tb_family_member(const tb_family_member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tb_family_member::SharedCtor() {
  _cached_size_ = 0;
  family_id_ = 0u;
  role_id_ = 0u;
  permissions_ = 0u;
  time_ = 0u;
  add_by_ = 0u;
  strength_ = 0u;
  dragon_count_ = 0u;
  tiger_count_ = 0u;
  rosefinch_count_ = 0u;
  tortoise_count_ = 0u;
  money_ = 0u;
  total_donate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tb_family_member::~tb_family_member() {
  SharedDtor();
}

void tb_family_member::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tb_family_member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tb_family_member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tb_family_member_descriptor_;
}

const tb_family_member& tb_family_member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2etb_5ffamily_5fmember_2eproto();
  return *default_instance_;
}

tb_family_member* tb_family_member::default_instance_ = NULL;

tb_family_member* tb_family_member::New() const {
  return new tb_family_member;
}

void tb_family_member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    family_id_ = 0u;
    role_id_ = 0u;
    permissions_ = 0u;
    time_ = 0u;
    add_by_ = 0u;
    strength_ = 0u;
    dragon_count_ = 0u;
    tiger_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rosefinch_count_ = 0u;
    tortoise_count_ = 0u;
    money_ = 0u;
    total_donate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tb_family_member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 family_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_permissions;
        break;
      }

      // required uint32 permissions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_permissions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permissions_)));
          set_has_permissions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_by;
        break;
      }

      // required uint32 add_by = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_by:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_by_)));
          set_has_add_by();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_strength;
        break;
      }

      // required uint32 strength = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dragon_count;
        break;
      }

      // required uint32 dragon_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dragon_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dragon_count_)));
          set_has_dragon_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tiger_count;
        break;
      }

      // required uint32 tiger_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiger_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tiger_count_)));
          set_has_tiger_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rosefinch_count;
        break;
      }

      // required uint32 rosefinch_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rosefinch_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rosefinch_count_)));
          set_has_rosefinch_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tortoise_count;
        break;
      }

      // required uint32 tortoise_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tortoise_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tortoise_count_)));
          set_has_tortoise_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_money;
        break;
      }

      // required uint32 money = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_total_donate;
        break;
      }

      // required uint32 total_donate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_donate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_donate_)));
          set_has_total_donate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tb_family_member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->family_id(), output);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role_id(), output);
  }

  // required uint32 permissions = 3;
  if (has_permissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->permissions(), output);
  }

  // required uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // required uint32 add_by = 5;
  if (has_add_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->add_by(), output);
  }

  // required uint32 strength = 6;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->strength(), output);
  }

  // required uint32 dragon_count = 7;
  if (has_dragon_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dragon_count(), output);
  }

  // required uint32 tiger_count = 8;
  if (has_tiger_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tiger_count(), output);
  }

  // required uint32 rosefinch_count = 9;
  if (has_rosefinch_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rosefinch_count(), output);
  }

  // required uint32 tortoise_count = 10;
  if (has_tortoise_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tortoise_count(), output);
  }

  // required uint32 money = 11;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->money(), output);
  }

  // required uint32 total_donate = 12;
  if (has_total_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->total_donate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tb_family_member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 family_id = 1;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->family_id(), target);
  }

  // required uint32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role_id(), target);
  }

  // required uint32 permissions = 3;
  if (has_permissions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->permissions(), target);
  }

  // required uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // required uint32 add_by = 5;
  if (has_add_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->add_by(), target);
  }

  // required uint32 strength = 6;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->strength(), target);
  }

  // required uint32 dragon_count = 7;
  if (has_dragon_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dragon_count(), target);
  }

  // required uint32 tiger_count = 8;
  if (has_tiger_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tiger_count(), target);
  }

  // required uint32 rosefinch_count = 9;
  if (has_rosefinch_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rosefinch_count(), target);
  }

  // required uint32 tortoise_count = 10;
  if (has_tortoise_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tortoise_count(), target);
  }

  // required uint32 money = 11;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->money(), target);
  }

  // required uint32 total_donate = 12;
  if (has_total_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->total_donate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tb_family_member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 family_id = 1;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 permissions = 3;
    if (has_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permissions());
    }

    // required uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 add_by = 5;
    if (has_add_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_by());
    }

    // required uint32 strength = 6;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // required uint32 dragon_count = 7;
    if (has_dragon_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dragon_count());
    }

    // required uint32 tiger_count = 8;
    if (has_tiger_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tiger_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 rosefinch_count = 9;
    if (has_rosefinch_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rosefinch_count());
    }

    // required uint32 tortoise_count = 10;
    if (has_tortoise_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tortoise_count());
    }

    // required uint32 money = 11;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // required uint32 total_donate = 12;
    if (has_total_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_donate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tb_family_member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tb_family_member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tb_family_member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tb_family_member::MergeFrom(const tb_family_member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_permissions()) {
      set_permissions(from.permissions());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_add_by()) {
      set_add_by(from.add_by());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_dragon_count()) {
      set_dragon_count(from.dragon_count());
    }
    if (from.has_tiger_count()) {
      set_tiger_count(from.tiger_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rosefinch_count()) {
      set_rosefinch_count(from.rosefinch_count());
    }
    if (from.has_tortoise_count()) {
      set_tortoise_count(from.tortoise_count());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_total_donate()) {
      set_total_donate(from.total_donate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tb_family_member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tb_family_member::CopyFrom(const tb_family_member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tb_family_member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void tb_family_member::Swap(tb_family_member* other) {
  if (other != this) {
    std::swap(family_id_, other->family_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(permissions_, other->permissions_);
    std::swap(time_, other->time_);
    std::swap(add_by_, other->add_by_);
    std::swap(strength_, other->strength_);
    std::swap(dragon_count_, other->dragon_count_);
    std::swap(tiger_count_, other->tiger_count_);
    std::swap(rosefinch_count_, other->rosefinch_count_);
    std::swap(tortoise_count_, other->tortoise_count_);
    std::swap(money_, other->money_);
    std::swap(total_donate_, other->total_donate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tb_family_member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tb_family_member_descriptor_;
  metadata.reflection = tb_family_member_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
