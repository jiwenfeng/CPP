// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_city_attack.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysql.tb_city_attack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql {

namespace {

const ::google::protobuf::Descriptor* tb_city_attack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tb_city_attack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysql_2etb_5fcity_5fattack_2eproto() {
  protobuf_AddDesc_mysql_2etb_5fcity_5fattack_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysql.tb_city_attack.proto");
  GOOGLE_CHECK(file != NULL);
  tb_city_attack_descriptor_ = file->message_type(0);
  static const int tb_city_attack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_attack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_attack, family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_attack, occupy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_attack, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_attack, mod_title_time_),
  };
  tb_city_attack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tb_city_attack_descriptor_,
      tb_city_attack::default_instance_,
      tb_city_attack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_attack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tb_city_attack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tb_city_attack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysql_2etb_5fcity_5fattack_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tb_city_attack_descriptor_, &tb_city_attack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysql_2etb_5fcity_5fattack_2eproto() {
  delete tb_city_attack::default_instance_;
  delete tb_city_attack_reflection_;
}

void protobuf_AddDesc_mysql_2etb_5fcity_5fattack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032mysql.tb_city_attack.proto\022\005mysql\"k\n\016t"
    "b_city_attack\022\n\n\002id\030\001 \002(\r\022\021\n\tfamily_id\030\002"
    " \002(\r\022\023\n\013occupy_time\030\003 \002(\r\022\r\n\005title\030\004 \002(\t"
    "\022\026\n\016mod_title_time\030\005 \002(\r", 144);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysql.tb_city_attack.proto", &protobuf_RegisterTypes);
  tb_city_attack::default_instance_ = new tb_city_attack();
  tb_city_attack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysql_2etb_5fcity_5fattack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysql_2etb_5fcity_5fattack_2eproto {
  StaticDescriptorInitializer_mysql_2etb_5fcity_5fattack_2eproto() {
    protobuf_AddDesc_mysql_2etb_5fcity_5fattack_2eproto();
  }
} static_descriptor_initializer_mysql_2etb_5fcity_5fattack_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tb_city_attack::kIdFieldNumber;
const int tb_city_attack::kFamilyIdFieldNumber;
const int tb_city_attack::kOccupyTimeFieldNumber;
const int tb_city_attack::kTitleFieldNumber;
const int tb_city_attack::kModTitleTimeFieldNumber;
#endif  // !_MSC_VER

tb_city_attack::tb_city_attack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tb_city_attack::InitAsDefaultInstance() {
}

tb_city_attack::tb_city_attack(const tb_city_attack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tb_city_attack::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  family_id_ = 0u;
  occupy_time_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mod_title_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tb_city_attack::~tb_city_attack() {
  SharedDtor();
}

void tb_city_attack::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void tb_city_attack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tb_city_attack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tb_city_attack_descriptor_;
}

const tb_city_attack& tb_city_attack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysql_2etb_5fcity_5fattack_2eproto();
  return *default_instance_;
}

tb_city_attack* tb_city_attack::default_instance_ = NULL;

tb_city_attack* tb_city_attack::New() const {
  return new tb_city_attack;
}

void tb_city_attack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    family_id_ = 0u;
    occupy_time_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    mod_title_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tb_city_attack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_id;
        break;
      }

      // required uint32 family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_id_)));
          set_has_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_occupy_time;
        break;
      }

      // required uint32 occupy_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupy_time_)));
          set_has_occupy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // required string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mod_title_time;
        break;
      }

      // required uint32 mod_title_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mod_title_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mod_title_time_)));
          set_has_mod_title_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tb_city_attack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family_id(), output);
  }

  // required uint32 occupy_time = 3;
  if (has_occupy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->occupy_time(), output);
  }

  // required string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->title(), output);
  }

  // required uint32 mod_title_time = 5;
  if (has_mod_title_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mod_title_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tb_city_attack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 family_id = 2;
  if (has_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family_id(), target);
  }

  // required uint32 occupy_time = 3;
  if (has_occupy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->occupy_time(), target);
  }

  // required string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // required uint32 mod_title_time = 5;
  if (has_mod_title_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mod_title_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tb_city_attack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 family_id = 2;
    if (has_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_id());
    }

    // required uint32 occupy_time = 3;
    if (has_occupy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occupy_time());
    }

    // required string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required uint32 mod_title_time = 5;
    if (has_mod_title_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mod_title_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tb_city_attack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tb_city_attack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tb_city_attack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tb_city_attack::MergeFrom(const tb_city_attack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_family_id()) {
      set_family_id(from.family_id());
    }
    if (from.has_occupy_time()) {
      set_occupy_time(from.occupy_time());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_mod_title_time()) {
      set_mod_title_time(from.mod_title_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tb_city_attack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tb_city_attack::CopyFrom(const tb_city_attack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tb_city_attack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void tb_city_attack::Swap(tb_city_attack* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(family_id_, other->family_id_);
    std::swap(occupy_time_, other->occupy_time_);
    std::swap(title_, other->title_);
    std::swap(mod_title_time_, other->mod_title_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tb_city_attack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tb_city_attack_descriptor_;
  metadata.reflection = tb_city_attack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

// @@protoc_insertion_point(global_scope)
