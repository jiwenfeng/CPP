// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.sp_get_gdata.proto

#ifndef PROTOBUF_mysql_2esp_5fget_5fgdata_2eproto__INCLUDED
#define PROTOBUF_mysql_2esp_5fget_5fgdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2esp_5fget_5fgdata_2eproto();
void protobuf_AssignDesc_mysql_2esp_5fget_5fgdata_2eproto();
void protobuf_ShutdownFile_mysql_2esp_5fget_5fgdata_2eproto();

class sp_get_gdata;
class sp_get_gdata_max_role;
class sp_load_all_user_smy;
class sp_load_offline_user;

// ===================================================================

class sp_get_gdata : public ::google::protobuf::Message {
 public:
  sp_get_gdata();
  virtual ~sp_get_gdata();

  sp_get_gdata(const sp_get_gdata& from);

  inline sp_get_gdata& operator=(const sp_get_gdata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sp_get_gdata& default_instance();

  void Swap(sp_get_gdata* other);

  // implements Message ----------------------------------------------

  sp_get_gdata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sp_get_gdata& from);
  void MergeFrom(const sp_get_gdata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 max_lvl = 1;
  inline bool has_max_lvl() const;
  inline void clear_max_lvl();
  static const int kMaxLvlFieldNumber = 1;
  inline ::google::protobuf::uint32 max_lvl() const;
  inline void set_max_lvl(::google::protobuf::uint32 value);

  // required uint32 spare_num = 2;
  inline bool has_spare_num() const;
  inline void clear_spare_num();
  static const int kSpareNumFieldNumber = 2;
  inline ::google::protobuf::uint32 spare_num() const;
  inline void set_spare_num(::google::protobuf::uint32 value);

  // required uint32 svr_open_time = 3;
  inline bool has_svr_open_time() const;
  inline void clear_svr_open_time();
  static const int kSvrOpenTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 svr_open_time() const;
  inline void set_svr_open_time(::google::protobuf::uint32 value);

  // required uint32 joint_active_flag = 4;
  inline bool has_joint_active_flag() const;
  inline void clear_joint_active_flag();
  static const int kJointActiveFlagFieldNumber = 4;
  inline ::google::protobuf::uint32 joint_active_flag() const;
  inline void set_joint_active_flag(::google::protobuf::uint32 value);

  // required uint32 svr_merge_time = 5;
  inline bool has_svr_merge_time() const;
  inline void clear_svr_merge_time();
  static const int kSvrMergeTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 svr_merge_time() const;
  inline void set_svr_merge_time(::google::protobuf::uint32 value);

  // required uint32 activity_flag = 6;
  inline bool has_activity_flag() const;
  inline void clear_activity_flag();
  static const int kActivityFlagFieldNumber = 6;
  inline ::google::protobuf::uint32 activity_flag() const;
  inline void set_activity_flag(::google::protobuf::uint32 value);

  // required uint32 first_pay_flag = 7;
  inline bool has_first_pay_flag() const;
  inline void clear_first_pay_flag();
  static const int kFirstPayFlagFieldNumber = 7;
  inline ::google::protobuf::uint32 first_pay_flag() const;
  inline void set_first_pay_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.sp_get_gdata)
 private:
  inline void set_has_max_lvl();
  inline void clear_has_max_lvl();
  inline void set_has_spare_num();
  inline void clear_has_spare_num();
  inline void set_has_svr_open_time();
  inline void clear_has_svr_open_time();
  inline void set_has_joint_active_flag();
  inline void clear_has_joint_active_flag();
  inline void set_has_svr_merge_time();
  inline void clear_has_svr_merge_time();
  inline void set_has_activity_flag();
  inline void clear_has_activity_flag();
  inline void set_has_first_pay_flag();
  inline void clear_has_first_pay_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 max_lvl_;
  ::google::protobuf::uint32 spare_num_;
  ::google::protobuf::uint32 svr_open_time_;
  ::google::protobuf::uint32 joint_active_flag_;
  ::google::protobuf::uint32 svr_merge_time_;
  ::google::protobuf::uint32 activity_flag_;
  ::google::protobuf::uint32 first_pay_flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2esp_5fget_5fgdata_2eproto();
  friend void protobuf_AssignDesc_mysql_2esp_5fget_5fgdata_2eproto();
  friend void protobuf_ShutdownFile_mysql_2esp_5fget_5fgdata_2eproto();

  void InitAsDefaultInstance();
  static sp_get_gdata* default_instance_;
};
// -------------------------------------------------------------------

class sp_get_gdata_max_role : public ::google::protobuf::Message {
 public:
  sp_get_gdata_max_role();
  virtual ~sp_get_gdata_max_role();

  sp_get_gdata_max_role(const sp_get_gdata_max_role& from);

  inline sp_get_gdata_max_role& operator=(const sp_get_gdata_max_role& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sp_get_gdata_max_role& default_instance();

  void Swap(sp_get_gdata_max_role* other);

  // implements Message ----------------------------------------------

  sp_get_gdata_max_role* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sp_get_gdata_max_role& from);
  void MergeFrom(const sp_get_gdata_max_role& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 svr_id = 1;
  inline bool has_svr_id() const;
  inline void clear_svr_id();
  static const int kSvrIdFieldNumber = 1;
  inline ::google::protobuf::uint32 svr_id() const;
  inline void set_svr_id(::google::protobuf::uint32 value);

  // required uint32 max_role_id = 2;
  inline bool has_max_role_id() const;
  inline void clear_max_role_id();
  static const int kMaxRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 max_role_id() const;
  inline void set_max_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.sp_get_gdata_max_role)
 private:
  inline void set_has_svr_id();
  inline void clear_has_svr_id();
  inline void set_has_max_role_id();
  inline void clear_has_max_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svr_id_;
  ::google::protobuf::uint32 max_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2esp_5fget_5fgdata_2eproto();
  friend void protobuf_AssignDesc_mysql_2esp_5fget_5fgdata_2eproto();
  friend void protobuf_ShutdownFile_mysql_2esp_5fget_5fgdata_2eproto();

  void InitAsDefaultInstance();
  static sp_get_gdata_max_role* default_instance_;
};
// -------------------------------------------------------------------

class sp_load_all_user_smy : public ::google::protobuf::Message {
 public:
  sp_load_all_user_smy();
  virtual ~sp_load_all_user_smy();

  sp_load_all_user_smy(const sp_load_all_user_smy& from);

  inline sp_load_all_user_smy& operator=(const sp_load_all_user_smy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sp_load_all_user_smy& default_instance();

  void Swap(sp_load_all_user_smy* other);

  // implements Message ----------------------------------------------

  sp_load_all_user_smy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sp_load_all_user_smy& from);
  void MergeFrom(const sp_load_all_user_smy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // required uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required uint32 profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // required uint32 fighting_power = 5;
  inline bool has_fighting_power() const;
  inline void clear_fighting_power();
  static const int kFightingPowerFieldNumber = 5;
  inline ::google::protobuf::uint32 fighting_power() const;
  inline void set_fighting_power(::google::protobuf::uint32 value);

  // required uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 weapon_id = 7;
  inline bool has_weapon_id() const;
  inline void clear_weapon_id();
  static const int kWeaponIdFieldNumber = 7;
  inline ::google::protobuf::uint32 weapon_id() const;
  inline void set_weapon_id(::google::protobuf::uint32 value);

  // required uint32 armor_id = 8;
  inline bool has_armor_id() const;
  inline void clear_armor_id();
  static const int kArmorIdFieldNumber = 8;
  inline ::google::protobuf::uint32 armor_id() const;
  inline void set_armor_id(::google::protobuf::uint32 value);

  // required uint32 mount_level = 9;
  inline bool has_mount_level() const;
  inline void clear_mount_level();
  static const int kMountLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 mount_level() const;
  inline void set_mount_level(::google::protobuf::uint32 value);

  // required uint32 mount_power = 10;
  inline bool has_mount_power() const;
  inline void clear_mount_power();
  static const int kMountPowerFieldNumber = 10;
  inline ::google::protobuf::uint32 mount_power() const;
  inline void set_mount_power(::google::protobuf::uint32 value);

  // required uint32 mount_id = 11;
  inline bool has_mount_id() const;
  inline void clear_mount_id();
  static const int kMountIdFieldNumber = 11;
  inline ::google::protobuf::uint32 mount_id() const;
  inline void set_mount_id(::google::protobuf::uint32 value);

  // required uint32 vip_level = 12;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 12;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // required uint32 offline_time = 13;
  inline bool has_offline_time() const;
  inline void clear_offline_time();
  static const int kOfflineTimeFieldNumber = 13;
  inline ::google::protobuf::uint32 offline_time() const;
  inline void set_offline_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.sp_load_all_user_smy)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_fighting_power();
  inline void clear_has_fighting_power();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_weapon_id();
  inline void clear_has_weapon_id();
  inline void set_has_armor_id();
  inline void clear_has_armor_id();
  inline void set_has_mount_level();
  inline void clear_has_mount_level();
  inline void set_has_mount_power();
  inline void clear_has_mount_power();
  inline void set_has_mount_id();
  inline void clear_has_mount_id();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_offline_time();
  inline void clear_has_offline_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 profession_;
  ::google::protobuf::uint32 fighting_power_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 weapon_id_;
  ::google::protobuf::uint32 armor_id_;
  ::google::protobuf::uint32 mount_level_;
  ::google::protobuf::uint32 mount_power_;
  ::google::protobuf::uint32 mount_id_;
  ::google::protobuf::uint32 vip_level_;
  ::google::protobuf::uint32 offline_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2esp_5fget_5fgdata_2eproto();
  friend void protobuf_AssignDesc_mysql_2esp_5fget_5fgdata_2eproto();
  friend void protobuf_ShutdownFile_mysql_2esp_5fget_5fgdata_2eproto();

  void InitAsDefaultInstance();
  static sp_load_all_user_smy* default_instance_;
};
// -------------------------------------------------------------------

class sp_load_offline_user : public ::google::protobuf::Message {
 public:
  sp_load_offline_user();
  virtual ~sp_load_offline_user();

  sp_load_offline_user(const sp_load_offline_user& from);

  inline sp_load_offline_user& operator=(const sp_load_offline_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sp_load_offline_user& default_instance();

  void Swap(sp_load_offline_user* other);

  // implements Message ----------------------------------------------

  sp_load_offline_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sp_load_offline_user& from);
  void MergeFrom(const sp_load_offline_user& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 player_id() const;
  inline void set_player_id(::google::protobuf::uint32 value);

  // required string player_name = 3;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // required uint32 svr_id = 4;
  inline bool has_svr_id() const;
  inline void clear_svr_id();
  static const int kSvrIdFieldNumber = 4;
  inline ::google::protobuf::uint32 svr_id() const;
  inline void set_svr_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.sp_load_offline_user)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_svr_id();
  inline void clear_has_svr_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 player_id_;
  ::std::string* player_name_;
  ::google::protobuf::uint32 svr_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2esp_5fget_5fgdata_2eproto();
  friend void protobuf_AssignDesc_mysql_2esp_5fget_5fgdata_2eproto();
  friend void protobuf_ShutdownFile_mysql_2esp_5fget_5fgdata_2eproto();

  void InitAsDefaultInstance();
  static sp_load_offline_user* default_instance_;
};
// ===================================================================


// ===================================================================

// sp_get_gdata

// required uint32 max_lvl = 1;
inline bool sp_get_gdata::has_max_lvl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sp_get_gdata::set_has_max_lvl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sp_get_gdata::clear_has_max_lvl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sp_get_gdata::clear_max_lvl() {
  max_lvl_ = 0u;
  clear_has_max_lvl();
}
inline ::google::protobuf::uint32 sp_get_gdata::max_lvl() const {
  return max_lvl_;
}
inline void sp_get_gdata::set_max_lvl(::google::protobuf::uint32 value) {
  set_has_max_lvl();
  max_lvl_ = value;
}

// required uint32 spare_num = 2;
inline bool sp_get_gdata::has_spare_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sp_get_gdata::set_has_spare_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sp_get_gdata::clear_has_spare_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sp_get_gdata::clear_spare_num() {
  spare_num_ = 0u;
  clear_has_spare_num();
}
inline ::google::protobuf::uint32 sp_get_gdata::spare_num() const {
  return spare_num_;
}
inline void sp_get_gdata::set_spare_num(::google::protobuf::uint32 value) {
  set_has_spare_num();
  spare_num_ = value;
}

// required uint32 svr_open_time = 3;
inline bool sp_get_gdata::has_svr_open_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sp_get_gdata::set_has_svr_open_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sp_get_gdata::clear_has_svr_open_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sp_get_gdata::clear_svr_open_time() {
  svr_open_time_ = 0u;
  clear_has_svr_open_time();
}
inline ::google::protobuf::uint32 sp_get_gdata::svr_open_time() const {
  return svr_open_time_;
}
inline void sp_get_gdata::set_svr_open_time(::google::protobuf::uint32 value) {
  set_has_svr_open_time();
  svr_open_time_ = value;
}

// required uint32 joint_active_flag = 4;
inline bool sp_get_gdata::has_joint_active_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sp_get_gdata::set_has_joint_active_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sp_get_gdata::clear_has_joint_active_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sp_get_gdata::clear_joint_active_flag() {
  joint_active_flag_ = 0u;
  clear_has_joint_active_flag();
}
inline ::google::protobuf::uint32 sp_get_gdata::joint_active_flag() const {
  return joint_active_flag_;
}
inline void sp_get_gdata::set_joint_active_flag(::google::protobuf::uint32 value) {
  set_has_joint_active_flag();
  joint_active_flag_ = value;
}

// required uint32 svr_merge_time = 5;
inline bool sp_get_gdata::has_svr_merge_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sp_get_gdata::set_has_svr_merge_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sp_get_gdata::clear_has_svr_merge_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sp_get_gdata::clear_svr_merge_time() {
  svr_merge_time_ = 0u;
  clear_has_svr_merge_time();
}
inline ::google::protobuf::uint32 sp_get_gdata::svr_merge_time() const {
  return svr_merge_time_;
}
inline void sp_get_gdata::set_svr_merge_time(::google::protobuf::uint32 value) {
  set_has_svr_merge_time();
  svr_merge_time_ = value;
}

// required uint32 activity_flag = 6;
inline bool sp_get_gdata::has_activity_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sp_get_gdata::set_has_activity_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sp_get_gdata::clear_has_activity_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sp_get_gdata::clear_activity_flag() {
  activity_flag_ = 0u;
  clear_has_activity_flag();
}
inline ::google::protobuf::uint32 sp_get_gdata::activity_flag() const {
  return activity_flag_;
}
inline void sp_get_gdata::set_activity_flag(::google::protobuf::uint32 value) {
  set_has_activity_flag();
  activity_flag_ = value;
}

// required uint32 first_pay_flag = 7;
inline bool sp_get_gdata::has_first_pay_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sp_get_gdata::set_has_first_pay_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sp_get_gdata::clear_has_first_pay_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sp_get_gdata::clear_first_pay_flag() {
  first_pay_flag_ = 0u;
  clear_has_first_pay_flag();
}
inline ::google::protobuf::uint32 sp_get_gdata::first_pay_flag() const {
  return first_pay_flag_;
}
inline void sp_get_gdata::set_first_pay_flag(::google::protobuf::uint32 value) {
  set_has_first_pay_flag();
  first_pay_flag_ = value;
}

// -------------------------------------------------------------------

// sp_get_gdata_max_role

// required uint32 svr_id = 1;
inline bool sp_get_gdata_max_role::has_svr_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sp_get_gdata_max_role::set_has_svr_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sp_get_gdata_max_role::clear_has_svr_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sp_get_gdata_max_role::clear_svr_id() {
  svr_id_ = 0u;
  clear_has_svr_id();
}
inline ::google::protobuf::uint32 sp_get_gdata_max_role::svr_id() const {
  return svr_id_;
}
inline void sp_get_gdata_max_role::set_svr_id(::google::protobuf::uint32 value) {
  set_has_svr_id();
  svr_id_ = value;
}

// required uint32 max_role_id = 2;
inline bool sp_get_gdata_max_role::has_max_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sp_get_gdata_max_role::set_has_max_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sp_get_gdata_max_role::clear_has_max_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sp_get_gdata_max_role::clear_max_role_id() {
  max_role_id_ = 0u;
  clear_has_max_role_id();
}
inline ::google::protobuf::uint32 sp_get_gdata_max_role::max_role_id() const {
  return max_role_id_;
}
inline void sp_get_gdata_max_role::set_max_role_id(::google::protobuf::uint32 value) {
  set_has_max_role_id();
  max_role_id_ = value;
}

// -------------------------------------------------------------------

// sp_load_all_user_smy

// required uint32 role_id = 1;
inline bool sp_load_all_user_smy::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sp_load_all_user_smy::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sp_load_all_user_smy::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sp_load_all_user_smy::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 sp_load_all_user_smy::role_id() const {
  return role_id_;
}
inline void sp_load_all_user_smy::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required string role_name = 2;
inline bool sp_load_all_user_smy::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sp_load_all_user_smy::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sp_load_all_user_smy::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sp_load_all_user_smy::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& sp_load_all_user_smy::role_name() const {
  return *role_name_;
}
inline void sp_load_all_user_smy::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void sp_load_all_user_smy::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void sp_load_all_user_smy::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sp_load_all_user_smy::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* sp_load_all_user_smy::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sp_load_all_user_smy::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 status = 3;
inline bool sp_load_all_user_smy::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sp_load_all_user_smy::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sp_load_all_user_smy::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sp_load_all_user_smy::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 sp_load_all_user_smy::status() const {
  return status_;
}
inline void sp_load_all_user_smy::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 profession = 4;
inline bool sp_load_all_user_smy::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sp_load_all_user_smy::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sp_load_all_user_smy::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sp_load_all_user_smy::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 sp_load_all_user_smy::profession() const {
  return profession_;
}
inline void sp_load_all_user_smy::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
}

// required uint32 fighting_power = 5;
inline bool sp_load_all_user_smy::has_fighting_power() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sp_load_all_user_smy::set_has_fighting_power() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sp_load_all_user_smy::clear_has_fighting_power() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sp_load_all_user_smy::clear_fighting_power() {
  fighting_power_ = 0u;
  clear_has_fighting_power();
}
inline ::google::protobuf::uint32 sp_load_all_user_smy::fighting_power() const {
  return fighting_power_;
}
inline void sp_load_all_user_smy::set_fighting_power(::google::protobuf::uint32 value) {
  set_has_fighting_power();
  fighting_power_ = value;
}

// required uint32 level = 6;
inline bool sp_load_all_user_smy::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sp_load_all_user_smy::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sp_load_all_user_smy::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sp_load_all_user_smy::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 sp_load_all_user_smy::level() const {
  return level_;
}
inline void sp_load_all_user_smy::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 weapon_id = 7;
inline bool sp_load_all_user_smy::has_weapon_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sp_load_all_user_smy::set_has_weapon_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sp_load_all_user_smy::clear_has_weapon_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sp_load_all_user_smy::clear_weapon_id() {
  weapon_id_ = 0u;
  clear_has_weapon_id();
}
inline ::google::protobuf::uint32 sp_load_all_user_smy::weapon_id() const {
  return weapon_id_;
}
inline void sp_load_all_user_smy::set_weapon_id(::google::protobuf::uint32 value) {
  set_has_weapon_id();
  weapon_id_ = value;
}

// required uint32 armor_id = 8;
inline bool sp_load_all_user_smy::has_armor_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sp_load_all_user_smy::set_has_armor_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sp_load_all_user_smy::clear_has_armor_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sp_load_all_user_smy::clear_armor_id() {
  armor_id_ = 0u;
  clear_has_armor_id();
}
inline ::google::protobuf::uint32 sp_load_all_user_smy::armor_id() const {
  return armor_id_;
}
inline void sp_load_all_user_smy::set_armor_id(::google::protobuf::uint32 value) {
  set_has_armor_id();
  armor_id_ = value;
}

// required uint32 mount_level = 9;
inline bool sp_load_all_user_smy::has_mount_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sp_load_all_user_smy::set_has_mount_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sp_load_all_user_smy::clear_has_mount_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sp_load_all_user_smy::clear_mount_level() {
  mount_level_ = 0u;
  clear_has_mount_level();
}
inline ::google::protobuf::uint32 sp_load_all_user_smy::mount_level() const {
  return mount_level_;
}
inline void sp_load_all_user_smy::set_mount_level(::google::protobuf::uint32 value) {
  set_has_mount_level();
  mount_level_ = value;
}

// required uint32 mount_power = 10;
inline bool sp_load_all_user_smy::has_mount_power() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sp_load_all_user_smy::set_has_mount_power() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sp_load_all_user_smy::clear_has_mount_power() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sp_load_all_user_smy::clear_mount_power() {
  mount_power_ = 0u;
  clear_has_mount_power();
}
inline ::google::protobuf::uint32 sp_load_all_user_smy::mount_power() const {
  return mount_power_;
}
inline void sp_load_all_user_smy::set_mount_power(::google::protobuf::uint32 value) {
  set_has_mount_power();
  mount_power_ = value;
}

// required uint32 mount_id = 11;
inline bool sp_load_all_user_smy::has_mount_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sp_load_all_user_smy::set_has_mount_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sp_load_all_user_smy::clear_has_mount_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sp_load_all_user_smy::clear_mount_id() {
  mount_id_ = 0u;
  clear_has_mount_id();
}
inline ::google::protobuf::uint32 sp_load_all_user_smy::mount_id() const {
  return mount_id_;
}
inline void sp_load_all_user_smy::set_mount_id(::google::protobuf::uint32 value) {
  set_has_mount_id();
  mount_id_ = value;
}

// required uint32 vip_level = 12;
inline bool sp_load_all_user_smy::has_vip_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sp_load_all_user_smy::set_has_vip_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sp_load_all_user_smy::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sp_load_all_user_smy::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 sp_load_all_user_smy::vip_level() const {
  return vip_level_;
}
inline void sp_load_all_user_smy::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// required uint32 offline_time = 13;
inline bool sp_load_all_user_smy::has_offline_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sp_load_all_user_smy::set_has_offline_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sp_load_all_user_smy::clear_has_offline_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sp_load_all_user_smy::clear_offline_time() {
  offline_time_ = 0u;
  clear_has_offline_time();
}
inline ::google::protobuf::uint32 sp_load_all_user_smy::offline_time() const {
  return offline_time_;
}
inline void sp_load_all_user_smy::set_offline_time(::google::protobuf::uint32 value) {
  set_has_offline_time();
  offline_time_ = value;
}

// -------------------------------------------------------------------

// sp_load_offline_user

// required uint32 role_id = 1;
inline bool sp_load_offline_user::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sp_load_offline_user::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sp_load_offline_user::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sp_load_offline_user::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 sp_load_offline_user::role_id() const {
  return role_id_;
}
inline void sp_load_offline_user::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 player_id = 2;
inline bool sp_load_offline_user::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sp_load_offline_user::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sp_load_offline_user::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sp_load_offline_user::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
inline ::google::protobuf::uint32 sp_load_offline_user::player_id() const {
  return player_id_;
}
inline void sp_load_offline_user::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required string player_name = 3;
inline bool sp_load_offline_user::has_player_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sp_load_offline_user::set_has_player_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sp_load_offline_user::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sp_load_offline_user::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& sp_load_offline_user::player_name() const {
  return *player_name_;
}
inline void sp_load_offline_user::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void sp_load_offline_user::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void sp_load_offline_user::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sp_load_offline_user::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* sp_load_offline_user::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sp_load_offline_user::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 svr_id = 4;
inline bool sp_load_offline_user::has_svr_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sp_load_offline_user::set_has_svr_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sp_load_offline_user::clear_has_svr_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sp_load_offline_user::clear_svr_id() {
  svr_id_ = 0u;
  clear_has_svr_id();
}
inline ::google::protobuf::uint32 sp_load_offline_user::svr_id() const {
  return svr_id_;
}
inline void sp_load_offline_user::set_svr_id(::google::protobuf::uint32 value) {
  set_has_svr_id();
  svr_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2esp_5fget_5fgdata_2eproto__INCLUDED
