// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysql.tb_center_notice.proto

#ifndef PROTOBUF_mysql_2etb_5fcenter_5fnotice_2eproto__INCLUDED
#define PROTOBUF_mysql_2etb_5fcenter_5fnotice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mysql_2etb_5fcenter_5fnotice_2eproto();
void protobuf_AssignDesc_mysql_2etb_5fcenter_5fnotice_2eproto();
void protobuf_ShutdownFile_mysql_2etb_5fcenter_5fnotice_2eproto();

class tb_center_notice;

// ===================================================================

class tb_center_notice : public ::google::protobuf::Message {
 public:
  tb_center_notice();
  virtual ~tb_center_notice();

  tb_center_notice(const tb_center_notice& from);

  inline tb_center_notice& operator=(const tb_center_notice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_center_notice& default_instance();

  void Swap(tb_center_notice* other);

  // implements Message ----------------------------------------------

  tb_center_notice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tb_center_notice& from);
  void MergeFrom(const tb_center_notice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 msg_id = 1;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required uint32 start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 start_time() const;
  inline void set_start_time(::google::protobuf::uint32 value);

  // required uint32 close_time = 4;
  inline bool has_close_time() const;
  inline void clear_close_time();
  static const int kCloseTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 close_time() const;
  inline void set_close_time(::google::protobuf::uint32 value);

  // required uint32 interval_time = 5;
  inline bool has_interval_time() const;
  inline void clear_interval_time();
  static const int kIntervalTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 interval_time() const;
  inline void set_interval_time(::google::protobuf::uint32 value);

  // required uint32 is_over = 6;
  inline bool has_is_over() const;
  inline void clear_is_over();
  static const int kIsOverFieldNumber = 6;
  inline ::google::protobuf::uint32 is_over() const;
  inline void set_is_over(::google::protobuf::uint32 value);

  // required uint32 brocast_time = 7;
  inline bool has_brocast_time() const;
  inline void clear_brocast_time();
  static const int kBrocastTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 brocast_time() const;
  inline void set_brocast_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mysql.tb_center_notice)
 private:
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_close_time();
  inline void clear_has_close_time();
  inline void set_has_interval_time();
  inline void clear_has_interval_time();
  inline void set_has_is_over();
  inline void clear_has_is_over();
  inline void set_has_brocast_time();
  inline void clear_has_brocast_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::uint32 msg_id_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 close_time_;
  ::google::protobuf::uint32 interval_time_;
  ::google::protobuf::uint32 is_over_;
  ::google::protobuf::uint32 brocast_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_mysql_2etb_5fcenter_5fnotice_2eproto();
  friend void protobuf_AssignDesc_mysql_2etb_5fcenter_5fnotice_2eproto();
  friend void protobuf_ShutdownFile_mysql_2etb_5fcenter_5fnotice_2eproto();

  void InitAsDefaultInstance();
  static tb_center_notice* default_instance_;
};
// ===================================================================


// ===================================================================

// tb_center_notice

// required uint32 msg_id = 1;
inline bool tb_center_notice::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_center_notice::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_center_notice::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_center_notice::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 tb_center_notice::msg_id() const {
  return msg_id_;
}
inline void tb_center_notice::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
}

// required string content = 2;
inline bool tb_center_notice::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_center_notice::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_center_notice::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_center_notice::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& tb_center_notice::content() const {
  return *content_;
}
inline void tb_center_notice::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void tb_center_notice::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void tb_center_notice::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tb_center_notice::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* tb_center_notice::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tb_center_notice::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 start_time = 3;
inline bool tb_center_notice::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_center_notice::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_center_notice::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_center_notice::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 tb_center_notice::start_time() const {
  return start_time_;
}
inline void tb_center_notice::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
}

// required uint32 close_time = 4;
inline bool tb_center_notice::has_close_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tb_center_notice::set_has_close_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tb_center_notice::clear_has_close_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tb_center_notice::clear_close_time() {
  close_time_ = 0u;
  clear_has_close_time();
}
inline ::google::protobuf::uint32 tb_center_notice::close_time() const {
  return close_time_;
}
inline void tb_center_notice::set_close_time(::google::protobuf::uint32 value) {
  set_has_close_time();
  close_time_ = value;
}

// required uint32 interval_time = 5;
inline bool tb_center_notice::has_interval_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tb_center_notice::set_has_interval_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tb_center_notice::clear_has_interval_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tb_center_notice::clear_interval_time() {
  interval_time_ = 0u;
  clear_has_interval_time();
}
inline ::google::protobuf::uint32 tb_center_notice::interval_time() const {
  return interval_time_;
}
inline void tb_center_notice::set_interval_time(::google::protobuf::uint32 value) {
  set_has_interval_time();
  interval_time_ = value;
}

// required uint32 is_over = 6;
inline bool tb_center_notice::has_is_over() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tb_center_notice::set_has_is_over() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tb_center_notice::clear_has_is_over() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tb_center_notice::clear_is_over() {
  is_over_ = 0u;
  clear_has_is_over();
}
inline ::google::protobuf::uint32 tb_center_notice::is_over() const {
  return is_over_;
}
inline void tb_center_notice::set_is_over(::google::protobuf::uint32 value) {
  set_has_is_over();
  is_over_ = value;
}

// required uint32 brocast_time = 7;
inline bool tb_center_notice::has_brocast_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tb_center_notice::set_has_brocast_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tb_center_notice::clear_has_brocast_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tb_center_notice::clear_brocast_time() {
  brocast_time_ = 0u;
  clear_has_brocast_time();
}
inline ::google::protobuf::uint32 tb_center_notice::brocast_time() const {
  return brocast_time_;
}
inline void tb_center_notice::set_brocast_time(::google::protobuf::uint32 value) {
  set_has_brocast_time();
  brocast_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mysql_2etb_5fcenter_5fnotice_2eproto__INCLUDED
