import "client.comm.proto";
import "client.pets.proto";
import "client.role_skill_msg.proto";

package client;

enum FIGHT_RET_E
{
    FIGHT_WIN	= 0;
    FIGHT_LOSE  = 1;
}

message role_info
{
    required uint32 role_id = 1;		// ID
    required uint32 rank = 2;			// 排行
    required uint32 type = 3; // 1 机器人 0 玩家
    // 以下字段如果没有则使用查询玩家属性的协议填充
    optional string name = 4;			// 名字	
    optional uint32 profession = 5;		// 职业
    optional uint32 sex = 6;			// 性别
    optional uint32 weapon_id = 7;		// 武器
    optional uint32 armor_id = 8;		// 衣服
    optional uint32 fighting_power = 9;	// 战斗力
}

message arena_fight_ret
{
    required uint32			role_id	= 1;	// 玩家自己
    required uint32			target	= 2;	// 对手
    required FIGHT_RET_E	ret		= 3;	// 结果
    optional string			r_name	= 4;	// 对手名字
    optional string			t_name	= 5;	// 自己名字
}

//竞技场界面信息
message arena_info_req
{
    required uint32 time = 1;
    optional server_head svr_head = 1000;
}

message arena_info_rsp
{
    required uint32 history = 1;	// 历史最高排名
    required uint32 rank = 2;		// 当前排名
    required uint32 status = 3;		// 是否有新战报 1 有 2 没有
    repeated role_info ri = 4;		// 可挑战列表
}

// 竞技场挑战次数信息
message arena_personal_info_req
{
    required uint32 role_id = 1;
    optional server_head svr_head = 1000;
}

message arena_personal_info_rsp
{
    required uint32 used = 1;
    required uint32 total = 2;
    required uint32 left = 3;
	optional uint32 timelong = 4;		// 下次恢复点数的时间
}

//竞技场日志
message arena_record_req
{
    required uint32 time = 1;
    optional server_head svr_head = 1000;
}

message arena_record_info
{
    required uint32 time = 1;
    required uint32 action = 2;		//0 进攻 1 防守
    required int32  ret = 3;		//0 胜利 1 失败
    required int32 rank = 4;
    required string name = 5;
}

message arena_record_rsp
{
    repeated arena_record_info ar = 1;	//日志列表
}

//刷新挑战次数
message arena_refresh_req
{
    required uint32 time = 1;
    optional server_head svr_head = 1000;
}

message arena_refresh_rsp
{
    required uint32 times = 1;
}

//加速冷却 
message arena_speed_up_req
{
    required uint32 time = 1;
    optional server_head svr_head = 1000;
}

message arena_speed_up_rsp
{
    required uint32 time = 1;
}

message arena_challenge_req
{
    required uint32 target = 1;	//对手
    required uint32 type = 2;	//挑战类型 (0 进入场景 1查看结果)
    optional server_head svr_head = 1000;
}

//挑战结果
message arena_challenge_result
{
    required uint32 num	= 1;		 // 奖励数量
    required FIGHT_RET_E ret = 2;	 // 0 胜利 1 失败
    optional uint32 history = 3;	 // 历史最高排名
    optional uint32 current = 4;	 // 当前排名
    optional uint32 status = 5;		 // 1 有历史最高排名 0 没有
}

message robot_attr
{
    optional uint32         role_id = 1;
    optional string         role_name = 2;
    optional uint32         level = 3;
    optional uint32         sex = 4;
    optional uint32         profession = 5;
    optional uint32         fighting_power = 6;
    optional uint32         hp_max = 7;
    optional uint32         attack_min = 8;
    optional uint32         attack_max = 9;
    optional uint32         defense_min = 10;
    optional uint32         defense_max = 11;
    optional uint32         hit = 12;
    optional uint32         dodge = 13;
    optional uint32         recover = 14;
    optional uint32         move_speed = 15;
	optional uint32			stable = 16;
    optional uint32         mount_id = 17;
    optional uint32         weapon_id = 18;
    optional uint32         armor_id = 19;
    optional pet_db_info    pet        = 20;
    optional uint32         config_id = 21;
    optional skills         sk        = 22;
	optional pet_db_info	backup	  = 23;
	optional uint32			x = 24;
	optional uint32			y = 25;
	optional uint32			family_id = 26;
	optional uint32			vip_level = 27;
}

//服务器内部使用
message load_target_data_req
{
    required uint32 target   = 1;	// 需要加载的挑战对手ID
    required uint32 scene_id = 2;	
    required uint32 role_id  = 3;	// 挑战者ID
}

message load_target_data_rsp
{
    required uint32     role_id = 1;
    required robot_attr attr    = 2;
}

message load_online_target_data_req
{
    required uint32 target = 1;
    required uint32 role_id = 2;
    required uint32 svr_scene_id = 3;
}

// 奖励列表
message arena_reward_req
{
    required uint32 role_id = 1; // 随便填
    optional server_head svr_head = 1000;
}

message reward_info
{
    required uint32 type = 1;
    required uint32 value = 2;
}

message arena_reward_item
{
    required uint32 min_rank = 1;
    required uint32 max_rank = 2;
    repeated reward_info ri = 3;
}

message arena_reward_rsp
{
    repeated arena_reward_item ari = 1;
}

message arena_rank_list_req
{
    required uint32 role_id = 1;
    optional server_head svr_head = 1000;
}

message rank_list_item
{
    required string name = 1;
    required uint32 level = 2;
    required uint32 power = 3;
}

message arena_rank_list_rsp
{
    required int32 rank = 1; // 自己的排名
    repeated rank_list_item rli = 2;
}

message arena_fight_begin
{
	required uint32 time = 1;
	optional server_head svr_head = 1000;
}
