// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client {

namespace {

const ::google::protobuf::Descriptor* battle_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_info_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_info_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_score_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_score_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_score_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_camp_score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_camp_score_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_camp_score_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_camp_score_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_enter_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_enter_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_enter_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_enter_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_leave_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_leave_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_leave_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_leave_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_honor_refund_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_honor_refund_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_honor_refund_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_honor_refund_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_personal_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_personal_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* notify_battle_personal_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  notify_battle_personal_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_slmt_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_slmt_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_slmt_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_slmt_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_reward_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_reward_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_reward_via_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_reward_via_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_status_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_status_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_status_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_status_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_status_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BATTLE_OPERATE_RET_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BATTLE_REWARD_VIA_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2ebattle_2eproto() {
  protobuf_AddDesc_client_2ebattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.battle.proto");
  GOOGLE_CHECK(file != NULL);
  battle_info_req_descriptor_ = file->message_type(0);
  static const int battle_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_req, svr_head_),
  };
  battle_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_info_req_descriptor_,
      battle_info_req::default_instance_,
      battle_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_info_req));
  battle_info_descriptor_ = file->message_type(1);
  static const int battle_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info, close_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info, angel_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info, witch_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info, nether_num_),
  };
  battle_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_info_descriptor_,
      battle_info::default_instance_,
      battle_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_info));
  battle_info_rsp_descriptor_ = file->message_type(2);
  static const int battle_info_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_rsp, open_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_rsp, bi_),
  };
  battle_info_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_info_rsp_descriptor_,
      battle_info_rsp::default_instance_,
      battle_info_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_info_rsp));
  battle_score_descriptor_ = file->message_type(3);
  static const int battle_score_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_score, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_score, score_),
  };
  battle_score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_score_descriptor_,
      battle_score::default_instance_,
      battle_score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_score));
  battle_score_list_descriptor_ = file->message_type(4);
  static const int battle_score_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_score_list, bs_),
  };
  battle_score_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_score_list_descriptor_,
      battle_score_list::default_instance_,
      battle_score_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_score_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_score_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_score_list));
  battle_camp_score_descriptor_ = file->message_type(5);
  static const int battle_camp_score_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_camp_score, camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_camp_score, score_),
  };
  battle_camp_score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_camp_score_descriptor_,
      battle_camp_score::default_instance_,
      battle_camp_score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_camp_score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_camp_score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_camp_score));
  battle_camp_score_list_descriptor_ = file->message_type(6);
  static const int battle_camp_score_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_camp_score_list, bcs_),
  };
  battle_camp_score_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_camp_score_list_descriptor_,
      battle_camp_score_list::default_instance_,
      battle_camp_score_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_camp_score_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_camp_score_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_camp_score_list));
  battle_enter_req_descriptor_ = file->message_type(7);
  static const int battle_enter_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_enter_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_enter_req, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_enter_req, svr_head_),
  };
  battle_enter_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_enter_req_descriptor_,
      battle_enter_req::default_instance_,
      battle_enter_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_enter_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_enter_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_enter_req));
  battle_enter_rsp_descriptor_ = file->message_type(8);
  static const int battle_enter_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_enter_rsp, ret_),
  };
  battle_enter_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_enter_rsp_descriptor_,
      battle_enter_rsp::default_instance_,
      battle_enter_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_enter_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_enter_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_enter_rsp));
  battle_leave_req_descriptor_ = file->message_type(9);
  static const int battle_leave_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_leave_req, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_leave_req, svr_head_),
  };
  battle_leave_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_leave_req_descriptor_,
      battle_leave_req::default_instance_,
      battle_leave_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_leave_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_leave_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_leave_req));
  battle_leave_rsp_descriptor_ = file->message_type(10);
  static const int battle_leave_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_leave_rsp, ret_),
  };
  battle_leave_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_leave_rsp_descriptor_,
      battle_leave_rsp::default_instance_,
      battle_leave_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_leave_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_leave_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_leave_rsp));
  battle_honor_refund_req_descriptor_ = file->message_type(11);
  static const int battle_honor_refund_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_honor_refund_req, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_honor_refund_req, svr_head_),
  };
  battle_honor_refund_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_honor_refund_req_descriptor_,
      battle_honor_refund_req::default_instance_,
      battle_honor_refund_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_honor_refund_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_honor_refund_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_honor_refund_req));
  battle_honor_refund_rsp_descriptor_ = file->message_type(12);
  static const int battle_honor_refund_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_honor_refund_rsp, ret_),
  };
  battle_honor_refund_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_honor_refund_rsp_descriptor_,
      battle_honor_refund_rsp::default_instance_,
      battle_honor_refund_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_honor_refund_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_honor_refund_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_honor_refund_rsp));
  battle_personal_record_descriptor_ = file->message_type(13);
  static const int battle_personal_record_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_personal_record, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_personal_record, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_personal_record, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_personal_record, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_personal_record, dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_personal_record, max_combo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_personal_record, cur_combo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_personal_record, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_personal_record, kill_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_personal_record, last_kill_),
  };
  battle_personal_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_personal_record_descriptor_,
      battle_personal_record::default_instance_,
      battle_personal_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_personal_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_personal_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_personal_record));
  notify_battle_personal_record_descriptor_ = file->message_type(14);
  static const int notify_battle_personal_record_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_battle_personal_record, bpr_),
  };
  notify_battle_personal_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      notify_battle_personal_record_descriptor_,
      notify_battle_personal_record::default_instance_,
      notify_battle_personal_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_battle_personal_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(notify_battle_personal_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(notify_battle_personal_record));
  battle_slmt_reward_descriptor_ = file->message_type(15);
  static const int battle_slmt_reward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_reward, bind_tael_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_reward, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_reward, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_reward, family_fam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_reward, goods_id_),
  };
  battle_slmt_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_slmt_reward_descriptor_,
      battle_slmt_reward::default_instance_,
      battle_slmt_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_slmt_reward));
  battle_slmt_msg_descriptor_ = file->message_type(16);
  static const int battle_slmt_msg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_msg, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_msg, rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_msg, win_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_msg, bsr_),
  };
  battle_slmt_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_slmt_msg_descriptor_,
      battle_slmt_msg::default_instance_,
      battle_slmt_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_slmt_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_slmt_msg));
  battle_reward_info_descriptor_ = file->message_type(17);
  static const int battle_reward_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward_info, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward_info, reward_id_),
  };
  battle_reward_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_reward_info_descriptor_,
      battle_reward_info::default_instance_,
      battle_reward_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_reward_info));
  battle_reward_via_descriptor_ = file->message_type(18);
  static const int battle_reward_via_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward_via, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward_via, bri_),
  };
  battle_reward_via_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_reward_via_descriptor_,
      battle_reward_via::default_instance_,
      battle_reward_via_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward_via, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_reward_via, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_reward_via));
  battle_status_req_descriptor_ = file->message_type(19);
  static const int battle_status_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status_req, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status_req, svr_head_),
  };
  battle_status_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_status_req_descriptor_,
      battle_status_req::default_instance_,
      battle_status_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_status_req));
  battle_status_descriptor_ = file->message_type(20);
  static const int battle_status_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status, cur_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status, open_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status, close_time_),
  };
  battle_status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_status_descriptor_,
      battle_status::default_instance_,
      battle_status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_status));
  battle_status_rsp_descriptor_ = file->message_type(21);
  static const int battle_status_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status_rsp, bs_),
  };
  battle_status_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_status_rsp_descriptor_,
      battle_status_rsp::default_instance_,
      battle_status_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_status_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_status_rsp));
  BATTLE_OPERATE_RET_E_descriptor_ = file->enum_type(0);
  BATTLE_REWARD_VIA_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2ebattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_info_req_descriptor_, &battle_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_info_descriptor_, &battle_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_info_rsp_descriptor_, &battle_info_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_score_descriptor_, &battle_score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_score_list_descriptor_, &battle_score_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_camp_score_descriptor_, &battle_camp_score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_camp_score_list_descriptor_, &battle_camp_score_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_enter_req_descriptor_, &battle_enter_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_enter_rsp_descriptor_, &battle_enter_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_leave_req_descriptor_, &battle_leave_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_leave_rsp_descriptor_, &battle_leave_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_honor_refund_req_descriptor_, &battle_honor_refund_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_honor_refund_rsp_descriptor_, &battle_honor_refund_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_personal_record_descriptor_, &battle_personal_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    notify_battle_personal_record_descriptor_, &notify_battle_personal_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_slmt_reward_descriptor_, &battle_slmt_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_slmt_msg_descriptor_, &battle_slmt_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_reward_info_descriptor_, &battle_reward_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_reward_via_descriptor_, &battle_reward_via::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_status_req_descriptor_, &battle_status_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_status_descriptor_, &battle_status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_status_rsp_descriptor_, &battle_status_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2ebattle_2eproto() {
  delete battle_info_req::default_instance_;
  delete battle_info_req_reflection_;
  delete battle_info::default_instance_;
  delete battle_info_reflection_;
  delete battle_info_rsp::default_instance_;
  delete battle_info_rsp_reflection_;
  delete battle_score::default_instance_;
  delete battle_score_reflection_;
  delete battle_score_list::default_instance_;
  delete battle_score_list_reflection_;
  delete battle_camp_score::default_instance_;
  delete battle_camp_score_reflection_;
  delete battle_camp_score_list::default_instance_;
  delete battle_camp_score_list_reflection_;
  delete battle_enter_req::default_instance_;
  delete battle_enter_req_reflection_;
  delete battle_enter_rsp::default_instance_;
  delete battle_enter_rsp_reflection_;
  delete battle_leave_req::default_instance_;
  delete battle_leave_req_reflection_;
  delete battle_leave_rsp::default_instance_;
  delete battle_leave_rsp_reflection_;
  delete battle_honor_refund_req::default_instance_;
  delete battle_honor_refund_req_reflection_;
  delete battle_honor_refund_rsp::default_instance_;
  delete battle_honor_refund_rsp_reflection_;
  delete battle_personal_record::default_instance_;
  delete battle_personal_record_reflection_;
  delete notify_battle_personal_record::default_instance_;
  delete notify_battle_personal_record_reflection_;
  delete battle_slmt_reward::default_instance_;
  delete battle_slmt_reward_reflection_;
  delete battle_slmt_msg::default_instance_;
  delete battle_slmt_msg_reflection_;
  delete battle_reward_info::default_instance_;
  delete battle_reward_info_reflection_;
  delete battle_reward_via::default_instance_;
  delete battle_reward_via_reflection_;
  delete battle_status_req::default_instance_;
  delete battle_status_req_reflection_;
  delete battle_status::default_instance_;
  delete battle_status_reflection_;
  delete battle_status_rsp::default_instance_;
  delete battle_status_rsp_reflection_;
}

void protobuf_AddDesc_client_2ebattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client::protobuf_AddDesc_client_2ecomm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023client.battle.proto\022\006client\032\021client.co"
    "mm.proto\"G\n\017battle_info_req\022\014\n\004time\030\001 \002("
    "\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.server_hea"
    "d\"m\n\013battle_info\022\r\n\005index\030\001 \002(\r\022\025\n\rclose"
    "_seconds\030\002 \002(\r\022\021\n\tangel_num\030\003 \002(\r\022\021\n\twit"
    "ch_num\030\004 \002(\r\022\022\n\nnether_num\030\005 \002(\r\"H\n\017batt"
    "le_info_rsp\022\024\n\014open_seconds\030\001 \002(\r\022\037\n\002bi\030"
    "\002 \001(\0132\023.client.battle_info\".\n\014battle_sco"
    "re\022\017\n\007role_id\030\001 \002(\r\022\r\n\005score\030\002 \002(\r\"5\n\021ba"
    "ttle_score_list\022 \n\002bs\030\001 \003(\0132\024.client.bat"
    "tle_score\"3\n\021battle_camp_score\022\017\n\007camp_i"
    "d\030\001 \002(\r\022\r\n\005score\030\002 \002(\r\"@\n\026battle_camp_sc"
    "ore_list\022&\n\003bcs\030\001 \003(\0132\031.client.battle_ca"
    "mp_score\"T\n\020battle_enter_req\022\014\n\004time\030\001 \002"
    "(\r\022\n\n\002id\030\002 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.clie"
    "nt.server_head\"=\n\020battle_enter_rsp\022)\n\003re"
    "t\030\001 \002(\0162\034.client.BATTLE_OPERATE_RET_E\"H\n"
    "\020battle_leave_req\022\014\n\004time\030\001 \002(\r\022&\n\010svr_h"
    "ead\030\350\007 \001(\0132\023.client.server_head\"=\n\020battl"
    "e_leave_rsp\022)\n\003ret\030\001 \002(\0162\034.client.BATTLE"
    "_OPERATE_RET_E\"S\n\027battle_honor_refund_re"
    "q\022\020\n\010unixtime\030\001 \002(\r\022&\n\010svr_head\030\350\007 \001(\0132\023"
    ".client.server_head\"&\n\027battle_honor_refu"
    "nd_rsp\022\013\n\003ret\030\001 \002(\r\"\333\001\n\026battle_personal_"
    "record\022\022\n\007role_id\030\001 \002(\r:\0010\022\020\n\005honor\030\002 \002("
    "\r:\0010\022\020\n\005score\030\003 \002(\r:\0010\022\017\n\004kill\030\004 \002(\r:\0010\022"
    "\017\n\004dead\030\005 \002(\r:\0010\022\024\n\tmax_combo\030\006 \002(\r:\0010\022\024"
    "\n\tcur_combo\030\007 \002(\r:\0010\022\017\n\004rank\030\010 \002(\r:\0010\022\024\n"
    "\tkill_time\030\t \002(\r:\0010\022\024\n\tlast_kill\030\n \002(\r:\001"
    "0\"L\n\035notify_battle_personal_record\022+\n\003bp"
    "r\030\001 \003(\0132\036.client.battle_personal_record\""
    "w\n\022battle_slmt_reward\022\024\n\tbind_tael\030\001 \001(\r"
    ":\0010\022\020\n\005honor\030\002 \001(\r:\0010\022\020\n\005score\030\003 \001(\r:\0010\022"
    "\025\n\nfamily_fam\030\004 \001(\r:\0010\022\020\n\010goods_id\030\005 \003(\r"
    "\"r\n\017battle_slmt_msg\022\021\n\tbattle_id\030\001 \002(\r\022\017"
    "\n\007rank_id\030\002 \001(\r\022\022\n\nwin_family\030\003 \001(\r\022\'\n\003b"
    "sr\030\004 \001(\0132\032.client.battle_slmt_reward\"8\n\022"
    "battle_reward_info\022\017\n\007role_id\030\001 \002(\r\022\021\n\tr"
    "eward_id\030\002 \003(\r\"J\n\021battle_reward_via\022\014\n\004t"
    "ype\030\001 \002(\r\022\'\n\003bri\030\002 \003(\0132\032.client.battle_r"
    "eward_info\"N\n\021battle_status_req\022\021\n\tbattl"
    "e_id\030\001 \003(\r\022&\n\010svr_head\030\350\007 \001(\0132\023.client.s"
    "erver_head\"[\n\rbattle_status\022\021\n\tbattle_id"
    "\030\001 \002(\r\022\020\n\010cur_time\030\002 \001(\r\022\021\n\topen_time\030\003 "
    "\001(\r\022\022\n\nclose_time\030\004 \001(\r\"6\n\021battle_status"
    "_rsp\022!\n\002bs\030\001 \003(\0132\025.client.battle_status*"
    "\200\001\n\024BATTLE_OPERATE_RET_E\022\020\n\014BORE_SUCCESS"
    "\020\000\022\023\n\017BORE_TIME_LIMIT\020\001\022\027\n\023BORE_ROLE_NUM"
    "_LIMIT\020\002\022\025\n\021BORE_BATTLE_LIMIT\020\003\022\021\n\014BORE_"
    "SYS_ERR\020\347\007*X\n\026BATTLE_REWARD_VIA_TYPE\022\017\n\013"
    "BRVT_BATTLE\020\000\022\017\n\013BRVT_DOMAIN\020\001\022\016\n\nBRVT_S"
    "IEGE\020\002\022\014\n\010BRVT_GEM\020\003", 2060);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.battle.proto", &protobuf_RegisterTypes);
  battle_info_req::default_instance_ = new battle_info_req();
  battle_info::default_instance_ = new battle_info();
  battle_info_rsp::default_instance_ = new battle_info_rsp();
  battle_score::default_instance_ = new battle_score();
  battle_score_list::default_instance_ = new battle_score_list();
  battle_camp_score::default_instance_ = new battle_camp_score();
  battle_camp_score_list::default_instance_ = new battle_camp_score_list();
  battle_enter_req::default_instance_ = new battle_enter_req();
  battle_enter_rsp::default_instance_ = new battle_enter_rsp();
  battle_leave_req::default_instance_ = new battle_leave_req();
  battle_leave_rsp::default_instance_ = new battle_leave_rsp();
  battle_honor_refund_req::default_instance_ = new battle_honor_refund_req();
  battle_honor_refund_rsp::default_instance_ = new battle_honor_refund_rsp();
  battle_personal_record::default_instance_ = new battle_personal_record();
  notify_battle_personal_record::default_instance_ = new notify_battle_personal_record();
  battle_slmt_reward::default_instance_ = new battle_slmt_reward();
  battle_slmt_msg::default_instance_ = new battle_slmt_msg();
  battle_reward_info::default_instance_ = new battle_reward_info();
  battle_reward_via::default_instance_ = new battle_reward_via();
  battle_status_req::default_instance_ = new battle_status_req();
  battle_status::default_instance_ = new battle_status();
  battle_status_rsp::default_instance_ = new battle_status_rsp();
  battle_info_req::default_instance_->InitAsDefaultInstance();
  battle_info::default_instance_->InitAsDefaultInstance();
  battle_info_rsp::default_instance_->InitAsDefaultInstance();
  battle_score::default_instance_->InitAsDefaultInstance();
  battle_score_list::default_instance_->InitAsDefaultInstance();
  battle_camp_score::default_instance_->InitAsDefaultInstance();
  battle_camp_score_list::default_instance_->InitAsDefaultInstance();
  battle_enter_req::default_instance_->InitAsDefaultInstance();
  battle_enter_rsp::default_instance_->InitAsDefaultInstance();
  battle_leave_req::default_instance_->InitAsDefaultInstance();
  battle_leave_rsp::default_instance_->InitAsDefaultInstance();
  battle_honor_refund_req::default_instance_->InitAsDefaultInstance();
  battle_honor_refund_rsp::default_instance_->InitAsDefaultInstance();
  battle_personal_record::default_instance_->InitAsDefaultInstance();
  notify_battle_personal_record::default_instance_->InitAsDefaultInstance();
  battle_slmt_reward::default_instance_->InitAsDefaultInstance();
  battle_slmt_msg::default_instance_->InitAsDefaultInstance();
  battle_reward_info::default_instance_->InitAsDefaultInstance();
  battle_reward_via::default_instance_->InitAsDefaultInstance();
  battle_status_req::default_instance_->InitAsDefaultInstance();
  battle_status::default_instance_->InitAsDefaultInstance();
  battle_status_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2ebattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2ebattle_2eproto {
  StaticDescriptorInitializer_client_2ebattle_2eproto() {
    protobuf_AddDesc_client_2ebattle_2eproto();
  }
} static_descriptor_initializer_client_2ebattle_2eproto_;
const ::google::protobuf::EnumDescriptor* BATTLE_OPERATE_RET_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BATTLE_OPERATE_RET_E_descriptor_;
}
bool BATTLE_OPERATE_RET_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 999:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BATTLE_REWARD_VIA_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BATTLE_REWARD_VIA_TYPE_descriptor_;
}
bool BATTLE_REWARD_VIA_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int battle_info_req::kTimeFieldNumber;
const int battle_info_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

battle_info_req::battle_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_info_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

battle_info_req::battle_info_req(const battle_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_info_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_info_req::~battle_info_req() {
  SharedDtor();
}

void battle_info_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void battle_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_info_req_descriptor_;
}

const battle_info_req& battle_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_info_req* battle_info_req::default_instance_ = NULL;

battle_info_req* battle_info_req::New() const {
  return new battle_info_req;
}

void battle_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_info_req::MergeFrom(const battle_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_info_req::CopyFrom(const battle_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void battle_info_req::Swap(battle_info_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_info_req_descriptor_;
  metadata.reflection = battle_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_info::kIndexFieldNumber;
const int battle_info::kCloseSecondsFieldNumber;
const int battle_info::kAngelNumFieldNumber;
const int battle_info::kWitchNumFieldNumber;
const int battle_info::kNetherNumFieldNumber;
#endif  // !_MSC_VER

battle_info::battle_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_info::InitAsDefaultInstance() {
}

battle_info::battle_info(const battle_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_info::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  close_seconds_ = 0u;
  angel_num_ = 0u;
  witch_num_ = 0u;
  nether_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_info::~battle_info() {
  SharedDtor();
}

void battle_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_info_descriptor_;
}

const battle_info& battle_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_info* battle_info::default_instance_ = NULL;

battle_info* battle_info::New() const {
  return new battle_info;
}

void battle_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    close_seconds_ = 0u;
    angel_num_ = 0u;
    witch_num_ = 0u;
    nether_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_close_seconds;
        break;
      }

      // required uint32 close_seconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_seconds_)));
          set_has_close_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_angel_num;
        break;
      }

      // required uint32 angel_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angel_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &angel_num_)));
          set_has_angel_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_witch_num;
        break;
      }

      // required uint32 witch_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_witch_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &witch_num_)));
          set_has_witch_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nether_num;
        break;
      }

      // required uint32 nether_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nether_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nether_num_)));
          set_has_nether_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 close_seconds = 2;
  if (has_close_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->close_seconds(), output);
  }

  // required uint32 angel_num = 3;
  if (has_angel_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->angel_num(), output);
  }

  // required uint32 witch_num = 4;
  if (has_witch_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->witch_num(), output);
  }

  // required uint32 nether_num = 5;
  if (has_nether_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nether_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 close_seconds = 2;
  if (has_close_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->close_seconds(), target);
  }

  // required uint32 angel_num = 3;
  if (has_angel_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->angel_num(), target);
  }

  // required uint32 witch_num = 4;
  if (has_witch_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->witch_num(), target);
  }

  // required uint32 nether_num = 5;
  if (has_nether_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nether_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 close_seconds = 2;
    if (has_close_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close_seconds());
    }

    // required uint32 angel_num = 3;
    if (has_angel_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->angel_num());
    }

    // required uint32 witch_num = 4;
    if (has_witch_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->witch_num());
    }

    // required uint32 nether_num = 5;
    if (has_nether_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nether_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_info::MergeFrom(const battle_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_close_seconds()) {
      set_close_seconds(from.close_seconds());
    }
    if (from.has_angel_num()) {
      set_angel_num(from.angel_num());
    }
    if (from.has_witch_num()) {
      set_witch_num(from.witch_num());
    }
    if (from.has_nether_num()) {
      set_nether_num(from.nether_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_info::CopyFrom(const battle_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void battle_info::Swap(battle_info* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(close_seconds_, other->close_seconds_);
    std::swap(angel_num_, other->angel_num_);
    std::swap(witch_num_, other->witch_num_);
    std::swap(nether_num_, other->nether_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_info_descriptor_;
  metadata.reflection = battle_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_info_rsp::kOpenSecondsFieldNumber;
const int battle_info_rsp::kBiFieldNumber;
#endif  // !_MSC_VER

battle_info_rsp::battle_info_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_info_rsp::InitAsDefaultInstance() {
  bi_ = const_cast< ::client::battle_info*>(&::client::battle_info::default_instance());
}

battle_info_rsp::battle_info_rsp(const battle_info_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_info_rsp::SharedCtor() {
  _cached_size_ = 0;
  open_seconds_ = 0u;
  bi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_info_rsp::~battle_info_rsp() {
  SharedDtor();
}

void battle_info_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete bi_;
  }
}

void battle_info_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_info_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_info_rsp_descriptor_;
}

const battle_info_rsp& battle_info_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_info_rsp* battle_info_rsp::default_instance_ = NULL;

battle_info_rsp* battle_info_rsp::New() const {
  return new battle_info_rsp;
}

void battle_info_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    open_seconds_ = 0u;
    if (has_bi()) {
      if (bi_ != NULL) bi_->::client::battle_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_info_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 open_seconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_seconds_)));
          set_has_open_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bi;
        break;
      }

      // optional .client.battle_info bi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_info_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 open_seconds = 1;
  if (has_open_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->open_seconds(), output);
  }

  // optional .client.battle_info bi = 2;
  if (has_bi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_info_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 open_seconds = 1;
  if (has_open_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->open_seconds(), target);
  }

  // optional .client.battle_info bi = 2;
  if (has_bi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_info_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 open_seconds = 1;
    if (has_open_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_seconds());
    }

    // optional .client.battle_info bi = 2;
    if (has_bi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_info_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_info_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_info_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_info_rsp::MergeFrom(const battle_info_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_seconds()) {
      set_open_seconds(from.open_seconds());
    }
    if (from.has_bi()) {
      mutable_bi()->::client::battle_info::MergeFrom(from.bi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_info_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_info_rsp::CopyFrom(const battle_info_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_info_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_bi()) {
    if (!this->bi().IsInitialized()) return false;
  }
  return true;
}

void battle_info_rsp::Swap(battle_info_rsp* other) {
  if (other != this) {
    std::swap(open_seconds_, other->open_seconds_);
    std::swap(bi_, other->bi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_info_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_info_rsp_descriptor_;
  metadata.reflection = battle_info_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_score::kRoleIdFieldNumber;
const int battle_score::kScoreFieldNumber;
#endif  // !_MSC_VER

battle_score::battle_score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_score::InitAsDefaultInstance() {
}

battle_score::battle_score(const battle_score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_score::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_score::~battle_score() {
  SharedDtor();
}

void battle_score::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_score_descriptor_;
}

const battle_score& battle_score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_score* battle_score::default_instance_ = NULL;

battle_score* battle_score::New() const {
  return new battle_score;
}

void battle_score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_score::MergeFrom(const battle_score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_score::CopyFrom(const battle_score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_score::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void battle_score::Swap(battle_score* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_score_descriptor_;
  metadata.reflection = battle_score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_score_list::kBsFieldNumber;
#endif  // !_MSC_VER

battle_score_list::battle_score_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_score_list::InitAsDefaultInstance() {
}

battle_score_list::battle_score_list(const battle_score_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_score_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_score_list::~battle_score_list() {
  SharedDtor();
}

void battle_score_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_score_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_score_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_score_list_descriptor_;
}

const battle_score_list& battle_score_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_score_list* battle_score_list::default_instance_ = NULL;

battle_score_list* battle_score_list::New() const {
  return new battle_score_list;
}

void battle_score_list::Clear() {
  bs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_score_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.battle_score bs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_score_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.battle_score bs = 1;
  for (int i = 0; i < this->bs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_score_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.battle_score bs = 1;
  for (int i = 0; i < this->bs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_score_list::ByteSize() const {
  int total_size = 0;

  // repeated .client.battle_score bs = 1;
  total_size += 1 * this->bs_size();
  for (int i = 0; i < this->bs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_score_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_score_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_score_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_score_list::MergeFrom(const battle_score_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  bs_.MergeFrom(from.bs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_score_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_score_list::CopyFrom(const battle_score_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_score_list::IsInitialized() const {

  for (int i = 0; i < bs_size(); i++) {
    if (!this->bs(i).IsInitialized()) return false;
  }
  return true;
}

void battle_score_list::Swap(battle_score_list* other) {
  if (other != this) {
    bs_.Swap(&other->bs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_score_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_score_list_descriptor_;
  metadata.reflection = battle_score_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_camp_score::kCampIdFieldNumber;
const int battle_camp_score::kScoreFieldNumber;
#endif  // !_MSC_VER

battle_camp_score::battle_camp_score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_camp_score::InitAsDefaultInstance() {
}

battle_camp_score::battle_camp_score(const battle_camp_score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_camp_score::SharedCtor() {
  _cached_size_ = 0;
  camp_id_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_camp_score::~battle_camp_score() {
  SharedDtor();
}

void battle_camp_score::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_camp_score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_camp_score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_camp_score_descriptor_;
}

const battle_camp_score& battle_camp_score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_camp_score* battle_camp_score::default_instance_ = NULL;

battle_camp_score* battle_camp_score::New() const {
  return new battle_camp_score;
}

void battle_camp_score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_id_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_camp_score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 camp_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_id_)));
          set_has_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_camp_score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 camp_id = 1;
  if (has_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camp_id(), output);
  }

  // required uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_camp_score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 camp_id = 1;
  if (has_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camp_id(), target);
  }

  // required uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_camp_score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 camp_id = 1;
    if (has_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camp_id());
    }

    // required uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_camp_score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_camp_score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_camp_score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_camp_score::MergeFrom(const battle_camp_score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp_id()) {
      set_camp_id(from.camp_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_camp_score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_camp_score::CopyFrom(const battle_camp_score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_camp_score::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void battle_camp_score::Swap(battle_camp_score* other) {
  if (other != this) {
    std::swap(camp_id_, other->camp_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_camp_score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_camp_score_descriptor_;
  metadata.reflection = battle_camp_score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_camp_score_list::kBcsFieldNumber;
#endif  // !_MSC_VER

battle_camp_score_list::battle_camp_score_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_camp_score_list::InitAsDefaultInstance() {
}

battle_camp_score_list::battle_camp_score_list(const battle_camp_score_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_camp_score_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_camp_score_list::~battle_camp_score_list() {
  SharedDtor();
}

void battle_camp_score_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_camp_score_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_camp_score_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_camp_score_list_descriptor_;
}

const battle_camp_score_list& battle_camp_score_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_camp_score_list* battle_camp_score_list::default_instance_ = NULL;

battle_camp_score_list* battle_camp_score_list::New() const {
  return new battle_camp_score_list;
}

void battle_camp_score_list::Clear() {
  bcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_camp_score_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.battle_camp_score bcs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bcs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_camp_score_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.battle_camp_score bcs = 1;
  for (int i = 0; i < this->bcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bcs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_camp_score_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.battle_camp_score bcs = 1;
  for (int i = 0; i < this->bcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bcs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_camp_score_list::ByteSize() const {
  int total_size = 0;

  // repeated .client.battle_camp_score bcs = 1;
  total_size += 1 * this->bcs_size();
  for (int i = 0; i < this->bcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bcs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_camp_score_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_camp_score_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_camp_score_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_camp_score_list::MergeFrom(const battle_camp_score_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  bcs_.MergeFrom(from.bcs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_camp_score_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_camp_score_list::CopyFrom(const battle_camp_score_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_camp_score_list::IsInitialized() const {

  for (int i = 0; i < bcs_size(); i++) {
    if (!this->bcs(i).IsInitialized()) return false;
  }
  return true;
}

void battle_camp_score_list::Swap(battle_camp_score_list* other) {
  if (other != this) {
    bcs_.Swap(&other->bcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_camp_score_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_camp_score_list_descriptor_;
  metadata.reflection = battle_camp_score_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_enter_req::kTimeFieldNumber;
const int battle_enter_req::kIdFieldNumber;
const int battle_enter_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

battle_enter_req::battle_enter_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_enter_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

battle_enter_req::battle_enter_req(const battle_enter_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_enter_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  id_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_enter_req::~battle_enter_req() {
  SharedDtor();
}

void battle_enter_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void battle_enter_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_enter_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_enter_req_descriptor_;
}

const battle_enter_req& battle_enter_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_enter_req* battle_enter_req::default_instance_ = NULL;

battle_enter_req* battle_enter_req::New() const {
  return new battle_enter_req;
}

void battle_enter_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    id_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_enter_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_enter_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_enter_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_enter_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_enter_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_enter_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_enter_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_enter_req::MergeFrom(const battle_enter_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_enter_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_enter_req::CopyFrom(const battle_enter_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_enter_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void battle_enter_req::Swap(battle_enter_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(id_, other->id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_enter_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_enter_req_descriptor_;
  metadata.reflection = battle_enter_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_enter_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

battle_enter_rsp::battle_enter_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_enter_rsp::InitAsDefaultInstance() {
}

battle_enter_rsp::battle_enter_rsp(const battle_enter_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_enter_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_enter_rsp::~battle_enter_rsp() {
  SharedDtor();
}

void battle_enter_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_enter_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_enter_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_enter_rsp_descriptor_;
}

const battle_enter_rsp& battle_enter_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_enter_rsp* battle_enter_rsp::default_instance_ = NULL;

battle_enter_rsp* battle_enter_rsp::New() const {
  return new battle_enter_rsp;
}

void battle_enter_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_enter_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.BATTLE_OPERATE_RET_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::BATTLE_OPERATE_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::BATTLE_OPERATE_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_enter_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.BATTLE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_enter_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.BATTLE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_enter_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.BATTLE_OPERATE_RET_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_enter_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_enter_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_enter_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_enter_rsp::MergeFrom(const battle_enter_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_enter_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_enter_rsp::CopyFrom(const battle_enter_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_enter_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void battle_enter_rsp::Swap(battle_enter_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_enter_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_enter_rsp_descriptor_;
  metadata.reflection = battle_enter_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_leave_req::kTimeFieldNumber;
const int battle_leave_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

battle_leave_req::battle_leave_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_leave_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

battle_leave_req::battle_leave_req(const battle_leave_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_leave_req::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_leave_req::~battle_leave_req() {
  SharedDtor();
}

void battle_leave_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void battle_leave_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_leave_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_leave_req_descriptor_;
}

const battle_leave_req& battle_leave_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_leave_req* battle_leave_req::default_instance_ = NULL;

battle_leave_req* battle_leave_req::New() const {
  return new battle_leave_req;
}

void battle_leave_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_leave_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_leave_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_leave_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_leave_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_leave_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_leave_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_leave_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_leave_req::MergeFrom(const battle_leave_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_leave_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_leave_req::CopyFrom(const battle_leave_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_leave_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void battle_leave_req::Swap(battle_leave_req* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_leave_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_leave_req_descriptor_;
  metadata.reflection = battle_leave_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_leave_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

battle_leave_rsp::battle_leave_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_leave_rsp::InitAsDefaultInstance() {
}

battle_leave_rsp::battle_leave_rsp(const battle_leave_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_leave_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_leave_rsp::~battle_leave_rsp() {
  SharedDtor();
}

void battle_leave_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_leave_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_leave_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_leave_rsp_descriptor_;
}

const battle_leave_rsp& battle_leave_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_leave_rsp* battle_leave_rsp::default_instance_ = NULL;

battle_leave_rsp* battle_leave_rsp::New() const {
  return new battle_leave_rsp;
}

void battle_leave_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_leave_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .client.BATTLE_OPERATE_RET_E ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client::BATTLE_OPERATE_RET_E_IsValid(value)) {
            set_ret(static_cast< ::client::BATTLE_OPERATE_RET_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_leave_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .client.BATTLE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_leave_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .client.BATTLE_OPERATE_RET_E ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_leave_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .client.BATTLE_OPERATE_RET_E ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_leave_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_leave_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_leave_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_leave_rsp::MergeFrom(const battle_leave_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_leave_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_leave_rsp::CopyFrom(const battle_leave_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_leave_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void battle_leave_rsp::Swap(battle_leave_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_leave_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_leave_rsp_descriptor_;
  metadata.reflection = battle_leave_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_honor_refund_req::kUnixtimeFieldNumber;
const int battle_honor_refund_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

battle_honor_refund_req::battle_honor_refund_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_honor_refund_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

battle_honor_refund_req::battle_honor_refund_req(const battle_honor_refund_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_honor_refund_req::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_honor_refund_req::~battle_honor_refund_req() {
  SharedDtor();
}

void battle_honor_refund_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void battle_honor_refund_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_honor_refund_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_honor_refund_req_descriptor_;
}

const battle_honor_refund_req& battle_honor_refund_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_honor_refund_req* battle_honor_refund_req::default_instance_ = NULL;

battle_honor_refund_req* battle_honor_refund_req::New() const {
  return new battle_honor_refund_req;
}

void battle_honor_refund_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_honor_refund_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_honor_refund_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_honor_refund_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_honor_refund_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }

    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_honor_refund_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_honor_refund_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_honor_refund_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_honor_refund_req::MergeFrom(const battle_honor_refund_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_honor_refund_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_honor_refund_req::CopyFrom(const battle_honor_refund_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_honor_refund_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void battle_honor_refund_req::Swap(battle_honor_refund_req* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_honor_refund_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_honor_refund_req_descriptor_;
  metadata.reflection = battle_honor_refund_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_honor_refund_rsp::kRetFieldNumber;
#endif  // !_MSC_VER

battle_honor_refund_rsp::battle_honor_refund_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_honor_refund_rsp::InitAsDefaultInstance() {
}

battle_honor_refund_rsp::battle_honor_refund_rsp(const battle_honor_refund_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_honor_refund_rsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_honor_refund_rsp::~battle_honor_refund_rsp() {
  SharedDtor();
}

void battle_honor_refund_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_honor_refund_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_honor_refund_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_honor_refund_rsp_descriptor_;
}

const battle_honor_refund_rsp& battle_honor_refund_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_honor_refund_rsp* battle_honor_refund_rsp::default_instance_ = NULL;

battle_honor_refund_rsp* battle_honor_refund_rsp::New() const {
  return new battle_honor_refund_rsp;
}

void battle_honor_refund_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_honor_refund_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_honor_refund_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_honor_refund_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_honor_refund_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_honor_refund_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_honor_refund_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_honor_refund_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_honor_refund_rsp::MergeFrom(const battle_honor_refund_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_honor_refund_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_honor_refund_rsp::CopyFrom(const battle_honor_refund_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_honor_refund_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void battle_honor_refund_rsp::Swap(battle_honor_refund_rsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_honor_refund_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_honor_refund_rsp_descriptor_;
  metadata.reflection = battle_honor_refund_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_personal_record::kRoleIdFieldNumber;
const int battle_personal_record::kHonorFieldNumber;
const int battle_personal_record::kScoreFieldNumber;
const int battle_personal_record::kKillFieldNumber;
const int battle_personal_record::kDeadFieldNumber;
const int battle_personal_record::kMaxComboFieldNumber;
const int battle_personal_record::kCurComboFieldNumber;
const int battle_personal_record::kRankFieldNumber;
const int battle_personal_record::kKillTimeFieldNumber;
const int battle_personal_record::kLastKillFieldNumber;
#endif  // !_MSC_VER

battle_personal_record::battle_personal_record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_personal_record::InitAsDefaultInstance() {
}

battle_personal_record::battle_personal_record(const battle_personal_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_personal_record::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  honor_ = 0u;
  score_ = 0u;
  kill_ = 0u;
  dead_ = 0u;
  max_combo_ = 0u;
  cur_combo_ = 0u;
  rank_ = 0u;
  kill_time_ = 0u;
  last_kill_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_personal_record::~battle_personal_record() {
  SharedDtor();
}

void battle_personal_record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_personal_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_personal_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_personal_record_descriptor_;
}

const battle_personal_record& battle_personal_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_personal_record* battle_personal_record::default_instance_ = NULL;

battle_personal_record* battle_personal_record::New() const {
  return new battle_personal_record;
}

void battle_personal_record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    honor_ = 0u;
    score_ = 0u;
    kill_ = 0u;
    dead_ = 0u;
    max_combo_ = 0u;
    cur_combo_ = 0u;
    rank_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    kill_time_ = 0u;
    last_kill_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_personal_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_honor;
        break;
      }

      // required uint32 honor = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required uint32 score = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill;
        break;
      }

      // required uint32 kill = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dead;
        break;
      }

      // required uint32 dead = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_)));
          set_has_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_combo;
        break;
      }

      // required uint32 max_combo = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_combo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_combo_)));
          set_has_max_combo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cur_combo;
        break;
      }

      // required uint32 cur_combo = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_combo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_combo_)));
          set_has_cur_combo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rank;
        break;
      }

      // required uint32 rank = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_kill_time;
        break;
      }

      // required uint32 kill_time = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_time_)));
          set_has_kill_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_last_kill;
        break;
      }

      // required uint32 last_kill = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_kill_)));
          set_has_last_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_personal_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1 [default = 0];
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 honor = 2 [default = 0];
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->honor(), output);
  }

  // required uint32 score = 3 [default = 0];
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // required uint32 kill = 4 [default = 0];
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kill(), output);
  }

  // required uint32 dead = 5 [default = 0];
  if (has_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dead(), output);
  }

  // required uint32 max_combo = 6 [default = 0];
  if (has_max_combo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_combo(), output);
  }

  // required uint32 cur_combo = 7 [default = 0];
  if (has_cur_combo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_combo(), output);
  }

  // required uint32 rank = 8 [default = 0];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rank(), output);
  }

  // required uint32 kill_time = 9 [default = 0];
  if (has_kill_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->kill_time(), output);
  }

  // required uint32 last_kill = 10 [default = 0];
  if (has_last_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->last_kill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_personal_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1 [default = 0];
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 honor = 2 [default = 0];
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->honor(), target);
  }

  // required uint32 score = 3 [default = 0];
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // required uint32 kill = 4 [default = 0];
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kill(), target);
  }

  // required uint32 dead = 5 [default = 0];
  if (has_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dead(), target);
  }

  // required uint32 max_combo = 6 [default = 0];
  if (has_max_combo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_combo(), target);
  }

  // required uint32 cur_combo = 7 [default = 0];
  if (has_cur_combo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_combo(), target);
  }

  // required uint32 rank = 8 [default = 0];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rank(), target);
  }

  // required uint32 kill_time = 9 [default = 0];
  if (has_kill_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->kill_time(), target);
  }

  // required uint32 last_kill = 10 [default = 0];
  if (has_last_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->last_kill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_personal_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1 [default = 0];
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 honor = 2 [default = 0];
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor());
    }

    // required uint32 score = 3 [default = 0];
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 kill = 4 [default = 0];
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill());
    }

    // required uint32 dead = 5 [default = 0];
    if (has_dead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead());
    }

    // required uint32 max_combo = 6 [default = 0];
    if (has_max_combo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_combo());
    }

    // required uint32 cur_combo = 7 [default = 0];
    if (has_cur_combo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_combo());
    }

    // required uint32 rank = 8 [default = 0];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 kill_time = 9 [default = 0];
    if (has_kill_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_time());
    }

    // required uint32 last_kill = 10 [default = 0];
    if (has_last_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_kill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_personal_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_personal_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_personal_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_personal_record::MergeFrom(const battle_personal_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_dead()) {
      set_dead(from.dead());
    }
    if (from.has_max_combo()) {
      set_max_combo(from.max_combo());
    }
    if (from.has_cur_combo()) {
      set_cur_combo(from.cur_combo());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kill_time()) {
      set_kill_time(from.kill_time());
    }
    if (from.has_last_kill()) {
      set_last_kill(from.last_kill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_personal_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_personal_record::CopyFrom(const battle_personal_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_personal_record::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void battle_personal_record::Swap(battle_personal_record* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(honor_, other->honor_);
    std::swap(score_, other->score_);
    std::swap(kill_, other->kill_);
    std::swap(dead_, other->dead_);
    std::swap(max_combo_, other->max_combo_);
    std::swap(cur_combo_, other->cur_combo_);
    std::swap(rank_, other->rank_);
    std::swap(kill_time_, other->kill_time_);
    std::swap(last_kill_, other->last_kill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_personal_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_personal_record_descriptor_;
  metadata.reflection = battle_personal_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int notify_battle_personal_record::kBprFieldNumber;
#endif  // !_MSC_VER

notify_battle_personal_record::notify_battle_personal_record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void notify_battle_personal_record::InitAsDefaultInstance() {
}

notify_battle_personal_record::notify_battle_personal_record(const notify_battle_personal_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void notify_battle_personal_record::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

notify_battle_personal_record::~notify_battle_personal_record() {
  SharedDtor();
}

void notify_battle_personal_record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void notify_battle_personal_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* notify_battle_personal_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return notify_battle_personal_record_descriptor_;
}

const notify_battle_personal_record& notify_battle_personal_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

notify_battle_personal_record* notify_battle_personal_record::default_instance_ = NULL;

notify_battle_personal_record* notify_battle_personal_record::New() const {
  return new notify_battle_personal_record;
}

void notify_battle_personal_record::Clear() {
  bpr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool notify_battle_personal_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.battle_personal_record bpr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bpr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bpr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bpr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void notify_battle_personal_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.battle_personal_record bpr = 1;
  for (int i = 0; i < this->bpr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bpr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* notify_battle_personal_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.battle_personal_record bpr = 1;
  for (int i = 0; i < this->bpr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bpr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int notify_battle_personal_record::ByteSize() const {
  int total_size = 0;

  // repeated .client.battle_personal_record bpr = 1;
  total_size += 1 * this->bpr_size();
  for (int i = 0; i < this->bpr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bpr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void notify_battle_personal_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const notify_battle_personal_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const notify_battle_personal_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void notify_battle_personal_record::MergeFrom(const notify_battle_personal_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  bpr_.MergeFrom(from.bpr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void notify_battle_personal_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notify_battle_personal_record::CopyFrom(const notify_battle_personal_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notify_battle_personal_record::IsInitialized() const {

  for (int i = 0; i < bpr_size(); i++) {
    if (!this->bpr(i).IsInitialized()) return false;
  }
  return true;
}

void notify_battle_personal_record::Swap(notify_battle_personal_record* other) {
  if (other != this) {
    bpr_.Swap(&other->bpr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata notify_battle_personal_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = notify_battle_personal_record_descriptor_;
  metadata.reflection = notify_battle_personal_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_slmt_reward::kBindTaelFieldNumber;
const int battle_slmt_reward::kHonorFieldNumber;
const int battle_slmt_reward::kScoreFieldNumber;
const int battle_slmt_reward::kFamilyFamFieldNumber;
const int battle_slmt_reward::kGoodsIdFieldNumber;
#endif  // !_MSC_VER

battle_slmt_reward::battle_slmt_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_slmt_reward::InitAsDefaultInstance() {
}

battle_slmt_reward::battle_slmt_reward(const battle_slmt_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_slmt_reward::SharedCtor() {
  _cached_size_ = 0;
  bind_tael_ = 0u;
  honor_ = 0u;
  score_ = 0u;
  family_fam_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_slmt_reward::~battle_slmt_reward() {
  SharedDtor();
}

void battle_slmt_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_slmt_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_slmt_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_slmt_reward_descriptor_;
}

const battle_slmt_reward& battle_slmt_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_slmt_reward* battle_slmt_reward::default_instance_ = NULL;

battle_slmt_reward* battle_slmt_reward::New() const {
  return new battle_slmt_reward;
}

void battle_slmt_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bind_tael_ = 0u;
    honor_ = 0u;
    score_ = 0u;
    family_fam_ = 0u;
  }
  goods_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_slmt_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bind_tael = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_tael_)));
          set_has_bind_tael();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_honor;
        break;
      }

      // optional uint32 honor = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional uint32 score = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_family_fam;
        break;
      }

      // optional uint32 family_fam = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_fam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_fam_)));
          set_has_family_fam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_goods_id;
        break;
      }

      // repeated uint32 goods_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_goods_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_goods_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_goods_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_slmt_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bind_tael = 1 [default = 0];
  if (has_bind_tael()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bind_tael(), output);
  }

  // optional uint32 honor = 2 [default = 0];
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->honor(), output);
  }

  // optional uint32 score = 3 [default = 0];
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // optional uint32 family_fam = 4 [default = 0];
  if (has_family_fam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->family_fam(), output);
  }

  // repeated uint32 goods_id = 5;
  for (int i = 0; i < this->goods_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->goods_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_slmt_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bind_tael = 1 [default = 0];
  if (has_bind_tael()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bind_tael(), target);
  }

  // optional uint32 honor = 2 [default = 0];
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->honor(), target);
  }

  // optional uint32 score = 3 [default = 0];
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // optional uint32 family_fam = 4 [default = 0];
  if (has_family_fam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->family_fam(), target);
  }

  // repeated uint32 goods_id = 5;
  for (int i = 0; i < this->goods_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->goods_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_slmt_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bind_tael = 1 [default = 0];
    if (has_bind_tael()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind_tael());
    }

    // optional uint32 honor = 2 [default = 0];
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor());
    }

    // optional uint32 score = 3 [default = 0];
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 family_fam = 4 [default = 0];
    if (has_family_fam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->family_fam());
    }

  }
  // repeated uint32 goods_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->goods_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->goods_id(i));
    }
    total_size += 1 * this->goods_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_slmt_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_slmt_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_slmt_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_slmt_reward::MergeFrom(const battle_slmt_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_id_.MergeFrom(from.goods_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bind_tael()) {
      set_bind_tael(from.bind_tael());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_family_fam()) {
      set_family_fam(from.family_fam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_slmt_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_slmt_reward::CopyFrom(const battle_slmt_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_slmt_reward::IsInitialized() const {

  return true;
}

void battle_slmt_reward::Swap(battle_slmt_reward* other) {
  if (other != this) {
    std::swap(bind_tael_, other->bind_tael_);
    std::swap(honor_, other->honor_);
    std::swap(score_, other->score_);
    std::swap(family_fam_, other->family_fam_);
    goods_id_.Swap(&other->goods_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_slmt_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_slmt_reward_descriptor_;
  metadata.reflection = battle_slmt_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_slmt_msg::kBattleIdFieldNumber;
const int battle_slmt_msg::kRankIdFieldNumber;
const int battle_slmt_msg::kWinFamilyFieldNumber;
const int battle_slmt_msg::kBsrFieldNumber;
#endif  // !_MSC_VER

battle_slmt_msg::battle_slmt_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_slmt_msg::InitAsDefaultInstance() {
  bsr_ = const_cast< ::client::battle_slmt_reward*>(&::client::battle_slmt_reward::default_instance());
}

battle_slmt_msg::battle_slmt_msg(const battle_slmt_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_slmt_msg::SharedCtor() {
  _cached_size_ = 0;
  battle_id_ = 0u;
  rank_id_ = 0u;
  win_family_ = 0u;
  bsr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_slmt_msg::~battle_slmt_msg() {
  SharedDtor();
}

void battle_slmt_msg::SharedDtor() {
  if (this != default_instance_) {
    delete bsr_;
  }
}

void battle_slmt_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_slmt_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_slmt_msg_descriptor_;
}

const battle_slmt_msg& battle_slmt_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_slmt_msg* battle_slmt_msg::default_instance_ = NULL;

battle_slmt_msg* battle_slmt_msg::New() const {
  return new battle_slmt_msg;
}

void battle_slmt_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_id_ = 0u;
    rank_id_ = 0u;
    win_family_ = 0u;
    if (has_bsr()) {
      if (bsr_ != NULL) bsr_->::client::battle_slmt_reward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_slmt_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 battle_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_id;
        break;
      }

      // optional uint32 rank_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_family;
        break;
      }

      // optional uint32 win_family = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_family_)));
          set_has_win_family();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bsr;
        break;
      }

      // optional .client.battle_slmt_reward bsr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bsr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bsr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_slmt_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 battle_id = 1;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battle_id(), output);
  }

  // optional uint32 rank_id = 2;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank_id(), output);
  }

  // optional uint32 win_family = 3;
  if (has_win_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->win_family(), output);
  }

  // optional .client.battle_slmt_reward bsr = 4;
  if (has_bsr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bsr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_slmt_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 battle_id = 1;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battle_id(), target);
  }

  // optional uint32 rank_id = 2;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank_id(), target);
  }

  // optional uint32 win_family = 3;
  if (has_win_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->win_family(), target);
  }

  // optional .client.battle_slmt_reward bsr = 4;
  if (has_bsr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bsr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_slmt_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 battle_id = 1;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_id());
    }

    // optional uint32 rank_id = 2;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_id());
    }

    // optional uint32 win_family = 3;
    if (has_win_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_family());
    }

    // optional .client.battle_slmt_reward bsr = 4;
    if (has_bsr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bsr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_slmt_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_slmt_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_slmt_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_slmt_msg::MergeFrom(const battle_slmt_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
    if (from.has_win_family()) {
      set_win_family(from.win_family());
    }
    if (from.has_bsr()) {
      mutable_bsr()->::client::battle_slmt_reward::MergeFrom(from.bsr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_slmt_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_slmt_msg::CopyFrom(const battle_slmt_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_slmt_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void battle_slmt_msg::Swap(battle_slmt_msg* other) {
  if (other != this) {
    std::swap(battle_id_, other->battle_id_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(win_family_, other->win_family_);
    std::swap(bsr_, other->bsr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_slmt_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_slmt_msg_descriptor_;
  metadata.reflection = battle_slmt_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_reward_info::kRoleIdFieldNumber;
const int battle_reward_info::kRewardIdFieldNumber;
#endif  // !_MSC_VER

battle_reward_info::battle_reward_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_reward_info::InitAsDefaultInstance() {
}

battle_reward_info::battle_reward_info(const battle_reward_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_reward_info::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_reward_info::~battle_reward_info() {
  SharedDtor();
}

void battle_reward_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_reward_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_reward_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_reward_info_descriptor_;
}

const battle_reward_info& battle_reward_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_reward_info* battle_reward_info::default_instance_ = NULL;

battle_reward_info* battle_reward_info::New() const {
  return new battle_reward_info;
}

void battle_reward_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
  }
  reward_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_reward_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_id;
        break;
      }

      // repeated uint32 reward_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_reward_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reward_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_reward_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // repeated uint32 reward_id = 2;
  for (int i = 0; i < this->reward_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->reward_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_reward_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // repeated uint32 reward_id = 2;
  for (int i = 0; i < this->reward_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->reward_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_reward_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  // repeated uint32 reward_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reward_id(i));
    }
    total_size += 1 * this->reward_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_reward_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_reward_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_reward_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_reward_info::MergeFrom(const battle_reward_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_id_.MergeFrom(from.reward_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_reward_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_reward_info::CopyFrom(const battle_reward_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_reward_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void battle_reward_info::Swap(battle_reward_info* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    reward_id_.Swap(&other->reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_reward_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_reward_info_descriptor_;
  metadata.reflection = battle_reward_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_reward_via::kTypeFieldNumber;
const int battle_reward_via::kBriFieldNumber;
#endif  // !_MSC_VER

battle_reward_via::battle_reward_via()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_reward_via::InitAsDefaultInstance() {
}

battle_reward_via::battle_reward_via(const battle_reward_via& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_reward_via::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_reward_via::~battle_reward_via() {
  SharedDtor();
}

void battle_reward_via::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_reward_via::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_reward_via::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_reward_via_descriptor_;
}

const battle_reward_via& battle_reward_via::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_reward_via* battle_reward_via::default_instance_ = NULL;

battle_reward_via* battle_reward_via::New() const {
  return new battle_reward_via;
}

void battle_reward_via::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  bri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_reward_via::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bri;
        break;
      }

      // repeated .client.battle_reward_info bri = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bri()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bri;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_reward_via::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .client.battle_reward_info bri = 2;
  for (int i = 0; i < this->bri_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bri(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_reward_via::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .client.battle_reward_info bri = 2;
  for (int i = 0; i < this->bri_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bri(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_reward_via::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .client.battle_reward_info bri = 2;
  total_size += 1 * this->bri_size();
  for (int i = 0; i < this->bri_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bri(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_reward_via::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_reward_via* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_reward_via*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_reward_via::MergeFrom(const battle_reward_via& from) {
  GOOGLE_CHECK_NE(&from, this);
  bri_.MergeFrom(from.bri_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_reward_via::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_reward_via::CopyFrom(const battle_reward_via& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_reward_via::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < bri_size(); i++) {
    if (!this->bri(i).IsInitialized()) return false;
  }
  return true;
}

void battle_reward_via::Swap(battle_reward_via* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    bri_.Swap(&other->bri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_reward_via::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_reward_via_descriptor_;
  metadata.reflection = battle_reward_via_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_status_req::kBattleIdFieldNumber;
const int battle_status_req::kSvrHeadFieldNumber;
#endif  // !_MSC_VER

battle_status_req::battle_status_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_status_req::InitAsDefaultInstance() {
  svr_head_ = const_cast< ::client::server_head*>(&::client::server_head::default_instance());
}

battle_status_req::battle_status_req(const battle_status_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_status_req::SharedCtor() {
  _cached_size_ = 0;
  svr_head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_status_req::~battle_status_req() {
  SharedDtor();
}

void battle_status_req::SharedDtor() {
  if (this != default_instance_) {
    delete svr_head_;
  }
}

void battle_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_status_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_status_req_descriptor_;
}

const battle_status_req& battle_status_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_status_req* battle_status_req::default_instance_ = NULL;

battle_status_req* battle_status_req::New() const {
  return new battle_status_req;
}

void battle_status_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_svr_head()) {
      if (svr_head_ != NULL) svr_head_->::client::server_head::Clear();
    }
  }
  battle_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 battle_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_battle_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_battle_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_battle_id;
        if (input->ExpectTag(8002)) goto parse_svr_head;
        break;
      }

      // optional .client.server_head svr_head = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svr_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 battle_id = 1;
  for (int i = 0; i < this->battle_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->battle_id(i), output);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->svr_head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_status_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 battle_id = 1;
  for (int i = 0; i < this->battle_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->battle_id(i), target);
  }

  // optional .client.server_head svr_head = 1000;
  if (has_svr_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->svr_head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .client.server_head svr_head = 1000;
    if (has_svr_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->svr_head());
    }

  }
  // repeated uint32 battle_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->battle_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->battle_id(i));
    }
    total_size += 1 * this->battle_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_status_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_status_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_status_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_status_req::MergeFrom(const battle_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_id_.MergeFrom(from.battle_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_svr_head()) {
      mutable_svr_head()->::client::server_head::MergeFrom(from.svr_head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_status_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_status_req::CopyFrom(const battle_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_status_req::IsInitialized() const {

  return true;
}

void battle_status_req::Swap(battle_status_req* other) {
  if (other != this) {
    battle_id_.Swap(&other->battle_id_);
    std::swap(svr_head_, other->svr_head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_status_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_status_req_descriptor_;
  metadata.reflection = battle_status_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_status::kBattleIdFieldNumber;
const int battle_status::kCurTimeFieldNumber;
const int battle_status::kOpenTimeFieldNumber;
const int battle_status::kCloseTimeFieldNumber;
#endif  // !_MSC_VER

battle_status::battle_status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_status::InitAsDefaultInstance() {
}

battle_status::battle_status(const battle_status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_status::SharedCtor() {
  _cached_size_ = 0;
  battle_id_ = 0u;
  cur_time_ = 0u;
  open_time_ = 0u;
  close_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_status::~battle_status() {
  SharedDtor();
}

void battle_status::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_status_descriptor_;
}

const battle_status& battle_status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_status* battle_status::default_instance_ = NULL;

battle_status* battle_status::New() const {
  return new battle_status;
}

void battle_status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_id_ = 0u;
    cur_time_ = 0u;
    open_time_ = 0u;
    close_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 battle_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_time;
        break;
      }

      // optional uint32 cur_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_time_)));
          set_has_cur_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_open_time;
        break;
      }

      // optional uint32 open_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_close_time;
        break;
      }

      // optional uint32 close_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_time_)));
          set_has_close_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 battle_id = 1;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battle_id(), output);
  }

  // optional uint32 cur_time = 2;
  if (has_cur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_time(), output);
  }

  // optional uint32 open_time = 3;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->open_time(), output);
  }

  // optional uint32 close_time = 4;
  if (has_close_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->close_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 battle_id = 1;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battle_id(), target);
  }

  // optional uint32 cur_time = 2;
  if (has_cur_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_time(), target);
  }

  // optional uint32 open_time = 3;
  if (has_open_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->open_time(), target);
  }

  // optional uint32 close_time = 4;
  if (has_close_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->close_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 battle_id = 1;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_id());
    }

    // optional uint32 cur_time = 2;
    if (has_cur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_time());
    }

    // optional uint32 open_time = 3;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_time());
    }

    // optional uint32 close_time = 4;
    if (has_close_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_status::MergeFrom(const battle_status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_cur_time()) {
      set_cur_time(from.cur_time());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
    if (from.has_close_time()) {
      set_close_time(from.close_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_status::CopyFrom(const battle_status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void battle_status::Swap(battle_status* other) {
  if (other != this) {
    std::swap(battle_id_, other->battle_id_);
    std::swap(cur_time_, other->cur_time_);
    std::swap(open_time_, other->open_time_);
    std::swap(close_time_, other->close_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_status_descriptor_;
  metadata.reflection = battle_status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_status_rsp::kBsFieldNumber;
#endif  // !_MSC_VER

battle_status_rsp::battle_status_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_status_rsp::InitAsDefaultInstance() {
}

battle_status_rsp::battle_status_rsp(const battle_status_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_status_rsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_status_rsp::~battle_status_rsp() {
  SharedDtor();
}

void battle_status_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_status_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_status_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_status_rsp_descriptor_;
}

const battle_status_rsp& battle_status_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2ebattle_2eproto();
  return *default_instance_;
}

battle_status_rsp* battle_status_rsp::default_instance_ = NULL;

battle_status_rsp* battle_status_rsp::New() const {
  return new battle_status_rsp;
}

void battle_status_rsp::Clear() {
  bs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_status_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .client.battle_status bs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_status_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .client.battle_status bs = 1;
  for (int i = 0; i < this->bs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_status_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .client.battle_status bs = 1;
  for (int i = 0; i < this->bs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_status_rsp::ByteSize() const {
  int total_size = 0;

  // repeated .client.battle_status bs = 1;
  total_size += 1 * this->bs_size();
  for (int i = 0; i < this->bs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_status_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_status_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_status_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_status_rsp::MergeFrom(const battle_status_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  bs_.MergeFrom(from.bs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_status_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_status_rsp::CopyFrom(const battle_status_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_status_rsp::IsInitialized() const {

  for (int i = 0; i < bs_size(); i++) {
    if (!this->bs(i).IsInitialized()) return false;
  }
  return true;
}

void battle_status_rsp::Swap(battle_status_rsp* other) {
  if (other != this) {
    bs_.Swap(&other->bs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_status_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_status_rsp_descriptor_;
  metadata.reflection = battle_status_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

// @@protoc_insertion_point(global_scope)
